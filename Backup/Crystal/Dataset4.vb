'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2494
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset4
    Inherits DataSet
    
    Private tablePARTY_ARRDETAIL As PARTY_ARRDETAILDataTable
    
    Private tablepar_bar_arrangement As par_bar_arrangementDataTable
    
    Private tablePARTY_HALLRESERVATION As PARTY_HALLRESERVATIONDataTable
    
    Private tablepartyCANCEL_view As partyCANCEL_viewDataTable
    
    Private tablePARTY_PENDINGBILL As PARTY_PENDINGBILLDataTable
    
    Private tableparty_receiptsummary As party_receiptsummaryDataTable
    
    Private tableVIEW_PARTY_ITEMWISE As VIEW_PARTY_ITEMWISEDataTable
    
    Private tablePARTY_PENDINGBILL1 As PARTY_PENDINGBILL1DataTable
    
    Private tablePARTY_RECEIPTREPORT As PARTY_RECEIPTREPORTDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PARTY_ARRDETAIL")) Is Nothing) Then
                Me.Tables.Add(New PARTY_ARRDETAILDataTable(ds.Tables("PARTY_ARRDETAIL")))
            End If
            If (Not (ds.Tables("par_bar_arrangement")) Is Nothing) Then
                Me.Tables.Add(New par_bar_arrangementDataTable(ds.Tables("par_bar_arrangement")))
            End If
            If (Not (ds.Tables("PARTY_HALLRESERVATION")) Is Nothing) Then
                Me.Tables.Add(New PARTY_HALLRESERVATIONDataTable(ds.Tables("PARTY_HALLRESERVATION")))
            End If
            If (Not (ds.Tables("partyCANCEL_view")) Is Nothing) Then
                Me.Tables.Add(New partyCANCEL_viewDataTable(ds.Tables("partyCANCEL_view")))
            End If
            If (Not (ds.Tables("PARTY_PENDINGBILL")) Is Nothing) Then
                Me.Tables.Add(New PARTY_PENDINGBILLDataTable(ds.Tables("PARTY_PENDINGBILL")))
            End If
            If (Not (ds.Tables("party_receiptsummary")) Is Nothing) Then
                Me.Tables.Add(New party_receiptsummaryDataTable(ds.Tables("party_receiptsummary")))
            End If
            If (Not (ds.Tables("VIEW_PARTY_ITEMWISE")) Is Nothing) Then
                Me.Tables.Add(New VIEW_PARTY_ITEMWISEDataTable(ds.Tables("VIEW_PARTY_ITEMWISE")))
            End If
            If (Not (ds.Tables("PARTY_PENDINGBILL1")) Is Nothing) Then
                Me.Tables.Add(New PARTY_PENDINGBILL1DataTable(ds.Tables("PARTY_PENDINGBILL1")))
            End If
            If (Not (ds.Tables("PARTY_RECEIPTREPORT")) Is Nothing) Then
                Me.Tables.Add(New PARTY_RECEIPTREPORTDataTable(ds.Tables("PARTY_RECEIPTREPORT")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_ARRDETAIL As PARTY_ARRDETAILDataTable
        Get
            Return Me.tablePARTY_ARRDETAIL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property par_bar_arrangement As par_bar_arrangementDataTable
        Get
            Return Me.tablepar_bar_arrangement
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_HALLRESERVATION As PARTY_HALLRESERVATIONDataTable
        Get
            Return Me.tablePARTY_HALLRESERVATION
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property partyCANCEL_view As partyCANCEL_viewDataTable
        Get
            Return Me.tablepartyCANCEL_view
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_PENDINGBILL As PARTY_PENDINGBILLDataTable
        Get
            Return Me.tablePARTY_PENDINGBILL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property party_receiptsummary As party_receiptsummaryDataTable
        Get
            Return Me.tableparty_receiptsummary
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARTY_ITEMWISE As VIEW_PARTY_ITEMWISEDataTable
        Get
            Return Me.tableVIEW_PARTY_ITEMWISE
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_PENDINGBILL1 As PARTY_PENDINGBILL1DataTable
        Get
            Return Me.tablePARTY_PENDINGBILL1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_RECEIPTREPORT As PARTY_RECEIPTREPORTDataTable
        Get
            Return Me.tablePARTY_RECEIPTREPORT
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset4 = CType(MyBase.Clone,Dataset4)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("PARTY_ARRDETAIL")) Is Nothing) Then
            Me.Tables.Add(New PARTY_ARRDETAILDataTable(ds.Tables("PARTY_ARRDETAIL")))
        End If
        If (Not (ds.Tables("par_bar_arrangement")) Is Nothing) Then
            Me.Tables.Add(New par_bar_arrangementDataTable(ds.Tables("par_bar_arrangement")))
        End If
        If (Not (ds.Tables("PARTY_HALLRESERVATION")) Is Nothing) Then
            Me.Tables.Add(New PARTY_HALLRESERVATIONDataTable(ds.Tables("PARTY_HALLRESERVATION")))
        End If
        If (Not (ds.Tables("partyCANCEL_view")) Is Nothing) Then
            Me.Tables.Add(New partyCANCEL_viewDataTable(ds.Tables("partyCANCEL_view")))
        End If
        If (Not (ds.Tables("PARTY_PENDINGBILL")) Is Nothing) Then
            Me.Tables.Add(New PARTY_PENDINGBILLDataTable(ds.Tables("PARTY_PENDINGBILL")))
        End If
        If (Not (ds.Tables("party_receiptsummary")) Is Nothing) Then
            Me.Tables.Add(New party_receiptsummaryDataTable(ds.Tables("party_receiptsummary")))
        End If
        If (Not (ds.Tables("VIEW_PARTY_ITEMWISE")) Is Nothing) Then
            Me.Tables.Add(New VIEW_PARTY_ITEMWISEDataTable(ds.Tables("VIEW_PARTY_ITEMWISE")))
        End If
        If (Not (ds.Tables("PARTY_PENDINGBILL1")) Is Nothing) Then
            Me.Tables.Add(New PARTY_PENDINGBILL1DataTable(ds.Tables("PARTY_PENDINGBILL1")))
        End If
        If (Not (ds.Tables("PARTY_RECEIPTREPORT")) Is Nothing) Then
            Me.Tables.Add(New PARTY_RECEIPTREPORTDataTable(ds.Tables("PARTY_RECEIPTREPORT")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePARTY_ARRDETAIL = CType(Me.Tables("PARTY_ARRDETAIL"),PARTY_ARRDETAILDataTable)
        If (Not (Me.tablePARTY_ARRDETAIL) Is Nothing) Then
            Me.tablePARTY_ARRDETAIL.InitVars
        End If
        Me.tablepar_bar_arrangement = CType(Me.Tables("par_bar_arrangement"),par_bar_arrangementDataTable)
        If (Not (Me.tablepar_bar_arrangement) Is Nothing) Then
            Me.tablepar_bar_arrangement.InitVars
        End If
        Me.tablePARTY_HALLRESERVATION = CType(Me.Tables("PARTY_HALLRESERVATION"),PARTY_HALLRESERVATIONDataTable)
        If (Not (Me.tablePARTY_HALLRESERVATION) Is Nothing) Then
            Me.tablePARTY_HALLRESERVATION.InitVars
        End If
        Me.tablepartyCANCEL_view = CType(Me.Tables("partyCANCEL_view"),partyCANCEL_viewDataTable)
        If (Not (Me.tablepartyCANCEL_view) Is Nothing) Then
            Me.tablepartyCANCEL_view.InitVars
        End If
        Me.tablePARTY_PENDINGBILL = CType(Me.Tables("PARTY_PENDINGBILL"),PARTY_PENDINGBILLDataTable)
        If (Not (Me.tablePARTY_PENDINGBILL) Is Nothing) Then
            Me.tablePARTY_PENDINGBILL.InitVars
        End If
        Me.tableparty_receiptsummary = CType(Me.Tables("party_receiptsummary"),party_receiptsummaryDataTable)
        If (Not (Me.tableparty_receiptsummary) Is Nothing) Then
            Me.tableparty_receiptsummary.InitVars
        End If
        Me.tableVIEW_PARTY_ITEMWISE = CType(Me.Tables("VIEW_PARTY_ITEMWISE"),VIEW_PARTY_ITEMWISEDataTable)
        If (Not (Me.tableVIEW_PARTY_ITEMWISE) Is Nothing) Then
            Me.tableVIEW_PARTY_ITEMWISE.InitVars
        End If
        Me.tablePARTY_PENDINGBILL1 = CType(Me.Tables("PARTY_PENDINGBILL1"),PARTY_PENDINGBILL1DataTable)
        If (Not (Me.tablePARTY_PENDINGBILL1) Is Nothing) Then
            Me.tablePARTY_PENDINGBILL1.InitVars
        End If
        Me.tablePARTY_RECEIPTREPORT = CType(Me.Tables("PARTY_RECEIPTREPORT"),PARTY_RECEIPTREPORTDataTable)
        If (Not (Me.tablePARTY_RECEIPTREPORT) Is Nothing) Then
            Me.tablePARTY_RECEIPTREPORT.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset4"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset4.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePARTY_ARRDETAIL = New PARTY_ARRDETAILDataTable
        Me.Tables.Add(Me.tablePARTY_ARRDETAIL)
        Me.tablepar_bar_arrangement = New par_bar_arrangementDataTable
        Me.Tables.Add(Me.tablepar_bar_arrangement)
        Me.tablePARTY_HALLRESERVATION = New PARTY_HALLRESERVATIONDataTable
        Me.Tables.Add(Me.tablePARTY_HALLRESERVATION)
        Me.tablepartyCANCEL_view = New partyCANCEL_viewDataTable
        Me.Tables.Add(Me.tablepartyCANCEL_view)
        Me.tablePARTY_PENDINGBILL = New PARTY_PENDINGBILLDataTable
        Me.Tables.Add(Me.tablePARTY_PENDINGBILL)
        Me.tableparty_receiptsummary = New party_receiptsummaryDataTable
        Me.Tables.Add(Me.tableparty_receiptsummary)
        Me.tableVIEW_PARTY_ITEMWISE = New VIEW_PARTY_ITEMWISEDataTable
        Me.Tables.Add(Me.tableVIEW_PARTY_ITEMWISE)
        Me.tablePARTY_PENDINGBILL1 = New PARTY_PENDINGBILL1DataTable
        Me.Tables.Add(Me.tablePARTY_PENDINGBILL1)
        Me.tablePARTY_RECEIPTREPORT = New PARTY_RECEIPTREPORTDataTable
        Me.Tables.Add(Me.tablePARTY_RECEIPTREPORT)
    End Sub
    
    Private Function ShouldSerializePARTY_ARRDETAIL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepar_bar_arrangement() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_HALLRESERVATION() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepartyCANCEL_view() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_PENDINGBILL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeparty_receiptsummary() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_PARTY_ITEMWISE() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_PENDINGBILL1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_RECEIPTREPORT() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PARTY_ARRDETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_ARRDETAILRowChangeEvent)
    
    Public Delegate Sub par_bar_arrangementRowChangeEventHandler(ByVal sender As Object, ByVal e As par_bar_arrangementRowChangeEvent)
    
    Public Delegate Sub PARTY_HALLRESERVATIONRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_HALLRESERVATIONRowChangeEvent)
    
    Public Delegate Sub partyCANCEL_viewRowChangeEventHandler(ByVal sender As Object, ByVal e As partyCANCEL_viewRowChangeEvent)
    
    Public Delegate Sub PARTY_PENDINGBILLRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_PENDINGBILLRowChangeEvent)
    
    Public Delegate Sub party_receiptsummaryRowChangeEventHandler(ByVal sender As Object, ByVal e As party_receiptsummaryRowChangeEvent)
    
    Public Delegate Sub VIEW_PARTY_ITEMWISERowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARTY_ITEMWISERowChangeEvent)
    
    Public Delegate Sub PARTY_PENDINGBILL1RowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_PENDINGBILL1RowChangeEvent)
    
    Public Delegate Sub PARTY_RECEIPTREPORTRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_RECEIPTREPORTRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ARRDETAILDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnROWID As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnTAXPERC As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnROUNDOFF As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Private columnCANCELAMOUNT As DataColumn
        
        Private columnGLACCODE As DataColumn
        
        Private columnGLCCODE As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnmcode As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnHALLDESC As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnITEMNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_ARRDETAIL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ROWIDColumn As DataColumn
            Get
                Return Me.columnROWID
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property TAXPERCColumn As DataColumn
            Get
                Return Me.columnTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ROUNDOFFColumn As DataColumn
            Get
                Return Me.columnROUNDOFF
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property CANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property GLACCODEColumn As DataColumn
            Get
                Return Me.columnGLACCODE
            End Get
        End Property
        
        Friend ReadOnly Property GLCCODEColumn As DataColumn
            Get
                Return Me.columnGLCCODE
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property HALLDESCColumn As DataColumn
            Get
                Return Me.columnHALLDESC
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMNAMEColumn As DataColumn
            Get
                Return Me.columnITEMNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_ARRDETAILRow
            Get
                Return CType(Me.Rows(index),PARTY_ARRDETAILRow)
            End Get
        End Property
        
        Public Event PARTY_ARRDETAILRowChanged As PARTY_ARRDETAILRowChangeEventHandler
        
        Public Event PARTY_ARRDETAILRowChanging As PARTY_ARRDETAILRowChangeEventHandler
        
        Public Event PARTY_ARRDETAILRowDeleted As PARTY_ARRDETAILRowChangeEventHandler
        
        Public Event PARTY_ARRDETAILRowDeleting As PARTY_ARRDETAILRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_ARRDETAILRow(ByVal row As PARTY_ARRDETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_ARRDETAILRow( _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal ITEMCODE As String,  _
                    ByVal QTY As Decimal,  _
                    ByVal RATE As Decimal,  _
                    ByVal TAXPERC As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal TAXAMOUNT As Decimal,  _
                    ByVal ROUNDOFF As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal ADDUSERID As String,  _
                    ByVal ADDDATETIME As Date,  _
                    ByVal CANCELAMOUNT As Decimal,  _
                    ByVal GLACCODE As String,  _
                    ByVal GLCCODE As String,  _
                    ByVal LOCCODE As String,  _
                    ByVal mcode As String,  _
                    ByVal MNAME As String,  _
                    ByVal HALLDESC As String,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal ITEMNAME As String) As PARTY_ARRDETAILRow
            Dim rowPARTY_ARRDETAILRow As PARTY_ARRDETAILRow = CType(Me.NewRow,PARTY_ARRDETAILRow)
            rowPARTY_ARRDETAILRow.ItemArray = New Object() {Nothing, BOOKINGTYPE, BOOKINGNO, BOOKINGDATE, ITEMCODE, QTY, RATE, TAXPERC, AMOUNT, TAXAMOUNT, ROUNDOFF, TOTALAMOUNT, FREEZE, ADDUSERID, ADDDATETIME, CANCELAMOUNT, GLACCODE, GLCCODE, LOCCODE, mcode, MNAME, HALLDESC, PARTYDATE, ITEMNAME}
            Me.Rows.Add(rowPARTY_ARRDETAILRow)
            Return rowPARTY_ARRDETAILRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_ARRDETAILDataTable = CType(MyBase.Clone,PARTY_ARRDETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_ARRDETAILDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnROWID = Me.Columns("ROWID")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnTAXPERC = Me.Columns("TAXPERC")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnROUNDOFF = Me.Columns("ROUNDOFF")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
            Me.columnCANCELAMOUNT = Me.Columns("CANCELAMOUNT")
            Me.columnGLACCODE = Me.Columns("GLACCODE")
            Me.columnGLCCODE = Me.Columns("GLCCODE")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnmcode = Me.Columns("mcode")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnHALLDESC = Me.Columns("HALLDESC")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnITEMNAME = Me.Columns("ITEMNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnROWID = New DataColumn("ROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROWID)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnTAXPERC = New DataColumn("TAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXPERC)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnROUNDOFF = New DataColumn("ROUNDOFF", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROUNDOFF)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnCANCELAMOUNT = New DataColumn("CANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELAMOUNT)
            Me.columnGLACCODE = New DataColumn("GLACCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCODE)
            Me.columnGLCCODE = New DataColumn("GLCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLCCODE)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnHALLDESC = New DataColumn("HALLDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLDESC)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnITEMNAME = New DataColumn("ITEMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMNAME)
            Me.columnROWID.AutoIncrement = true
            Me.columnROWID.AllowDBNull = false
            Me.columnROWID.ReadOnly = true
            Me.columnITEMCODE.AllowDBNull = false
            Me.columnmcode.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnHALLDESC.ReadOnly = true
            Me.columnPARTYDATE.ReadOnly = true
        End Sub
        
        Public Function NewPARTY_ARRDETAILRow() As PARTY_ARRDETAILRow
            Return CType(Me.NewRow,PARTY_ARRDETAILRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_ARRDETAILRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_ARRDETAILRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_ARRDETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_ARRDETAILRowChanged(Me, New PARTY_ARRDETAILRowChangeEvent(CType(e.Row,PARTY_ARRDETAILRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_ARRDETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_ARRDETAILRowChanging(Me, New PARTY_ARRDETAILRowChangeEvent(CType(e.Row,PARTY_ARRDETAILRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_ARRDETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_ARRDETAILRowDeleted(Me, New PARTY_ARRDETAILRowChangeEvent(CType(e.Row,PARTY_ARRDETAILRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_ARRDETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_ARRDETAILRowDeleting(Me, New PARTY_ARRDETAILRowChangeEvent(CType(e.Row,PARTY_ARRDETAILRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_ARRDETAILRow(ByVal row As PARTY_ARRDETAILRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ARRDETAILRow
        Inherits DataRow
        
        Private tablePARTY_ARRDETAIL As PARTY_ARRDETAILDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_ARRDETAIL = CType(Me.Table,PARTY_ARRDETAILDataTable)
        End Sub
        
        Public Property ROWID As Decimal
            Get
                Return CType(Me(Me.tablePARTY_ARRDETAIL.ROWIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.ROWIDColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.BOOKINGTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tablePARTY_ARRDETAIL.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.QTYColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.RATEColumn) = value
            End Set
        End Property
        
        Public Property TAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.TAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.TAXPERCColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ROUNDOFF As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.ROUNDOFFColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.ROUNDOFFColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property CANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.CANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.CANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property GLACCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.GLACCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.GLACCODEColumn) = value
            End Set
        End Property
        
        Public Property GLCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.GLCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.GLCCODEColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.mcodeColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property HALLDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.HALLDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.HALLDESCColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property ITEMNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRDETAIL.ITEMNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRDETAIL.ITEMNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.BOOKINGTYPEColumn)
        End Function
        
        Public Sub SetBOOKINGTYPENull()
            Me(Me.tablePARTY_ARRDETAIL.BOOKINGTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_ARRDETAIL.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_ARRDETAIL.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tablePARTY_ARRDETAIL.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePARTY_ARRDETAIL.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.TAXPERCColumn)
        End Function
        
        Public Sub SetTAXPERCNull()
            Me(Me.tablePARTY_ARRDETAIL.TAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_ARRDETAIL.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tablePARTY_ARRDETAIL.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsROUNDOFFNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.ROUNDOFFColumn)
        End Function
        
        Public Sub SetROUNDOFFNull()
            Me(Me.tablePARTY_ARRDETAIL.ROUNDOFFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePARTY_ARRDETAIL.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePARTY_ARRDETAIL.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tablePARTY_ARRDETAIL.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablePARTY_ARRDETAIL.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.CANCELAMOUNTColumn)
        End Function
        
        Public Sub SetCANCELAMOUNTNull()
            Me(Me.tablePARTY_ARRDETAIL.CANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.GLACCODEColumn)
        End Function
        
        Public Sub SetGLACCODENull()
            Me(Me.tablePARTY_ARRDETAIL.GLACCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.GLCCODEColumn)
        End Function
        
        Public Sub SetGLCCODENull()
            Me(Me.tablePARTY_ARRDETAIL.GLCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePARTY_ARRDETAIL.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tablePARTY_ARRDETAIL.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablePARTY_ARRDETAIL.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.HALLDESCColumn)
        End Function
        
        Public Sub SetHALLDESCNull()
            Me(Me.tablePARTY_ARRDETAIL.HALLDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_ARRDETAIL.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRDETAIL.ITEMNAMEColumn)
        End Function
        
        Public Sub SetITEMNAMENull()
            Me(Me.tablePARTY_ARRDETAIL.ITEMNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ARRDETAILRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_ARRDETAILRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_ARRDETAILRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_ARRDETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class par_bar_arrangementDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnROWID As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnTAXPERC As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnROUNDOFF As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Private columnCANCELAMOUNT As DataColumn
        
        Private columnGLACCODE As DataColumn
        
        Private columnGLCCODE As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnARRDESCRIPTION As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnHALLDESC As DataColumn
        
        Friend Sub New()
            MyBase.New("par_bar_arrangement")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ROWIDColumn As DataColumn
            Get
                Return Me.columnROWID
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property TAXPERCColumn As DataColumn
            Get
                Return Me.columnTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ROUNDOFFColumn As DataColumn
            Get
                Return Me.columnROUNDOFF
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property CANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property GLACCODEColumn As DataColumn
            Get
                Return Me.columnGLACCODE
            End Get
        End Property
        
        Friend ReadOnly Property GLCCODEColumn As DataColumn
            Get
                Return Me.columnGLCCODE
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property ARRDESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnARRDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property HALLDESCColumn As DataColumn
            Get
                Return Me.columnHALLDESC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As par_bar_arrangementRow
            Get
                Return CType(Me.Rows(index),par_bar_arrangementRow)
            End Get
        End Property
        
        Public Event par_bar_arrangementRowChanged As par_bar_arrangementRowChangeEventHandler
        
        Public Event par_bar_arrangementRowChanging As par_bar_arrangementRowChangeEventHandler
        
        Public Event par_bar_arrangementRowDeleted As par_bar_arrangementRowChangeEventHandler
        
        Public Event par_bar_arrangementRowDeleting As par_bar_arrangementRowChangeEventHandler
        
        Public Overloads Sub Addpar_bar_arrangementRow(ByVal row As par_bar_arrangementRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpar_bar_arrangementRow( _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal ITEMCODE As String,  _
                    ByVal QTY As Decimal,  _
                    ByVal RATE As Decimal,  _
                    ByVal TAXPERC As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal TAXAMOUNT As Decimal,  _
                    ByVal ROUNDOFF As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal ADDUSERID As String,  _
                    ByVal ADDDATETIME As Date,  _
                    ByVal CANCELAMOUNT As Decimal,  _
                    ByVal GLACCODE As String,  _
                    ByVal GLCCODE As String,  _
                    ByVal LOCCODE As String,  _
                    ByVal ARRDESCRIPTION As String,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal HALLDESC As String) As par_bar_arrangementRow
            Dim rowpar_bar_arrangementRow As par_bar_arrangementRow = CType(Me.NewRow,par_bar_arrangementRow)
            rowpar_bar_arrangementRow.ItemArray = New Object() {Nothing, BOOKINGTYPE, BOOKINGNO, BOOKINGDATE, ITEMCODE, QTY, RATE, TAXPERC, AMOUNT, TAXAMOUNT, ROUNDOFF, TOTALAMOUNT, FREEZE, ADDUSERID, ADDDATETIME, CANCELAMOUNT, GLACCODE, GLCCODE, LOCCODE, ARRDESCRIPTION, PARTYDATE, MCODE, MNAME, HALLDESC}
            Me.Rows.Add(rowpar_bar_arrangementRow)
            Return rowpar_bar_arrangementRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As par_bar_arrangementDataTable = CType(MyBase.Clone,par_bar_arrangementDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New par_bar_arrangementDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnROWID = Me.Columns("ROWID")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnTAXPERC = Me.Columns("TAXPERC")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnROUNDOFF = Me.Columns("ROUNDOFF")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
            Me.columnCANCELAMOUNT = Me.Columns("CANCELAMOUNT")
            Me.columnGLACCODE = Me.Columns("GLACCODE")
            Me.columnGLCCODE = Me.Columns("GLCCODE")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnARRDESCRIPTION = Me.Columns("ARRDESCRIPTION")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnHALLDESC = Me.Columns("HALLDESC")
        End Sub
        
        Private Sub InitClass()
            Me.columnROWID = New DataColumn("ROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROWID)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnTAXPERC = New DataColumn("TAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXPERC)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnROUNDOFF = New DataColumn("ROUNDOFF", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROUNDOFF)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnCANCELAMOUNT = New DataColumn("CANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELAMOUNT)
            Me.columnGLACCODE = New DataColumn("GLACCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCODE)
            Me.columnGLCCODE = New DataColumn("GLCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLCCODE)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnARRDESCRIPTION = New DataColumn("ARRDESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRDESCRIPTION)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnHALLDESC = New DataColumn("HALLDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLDESC)
            Me.columnROWID.AutoIncrement = true
            Me.columnROWID.AllowDBNull = false
            Me.columnROWID.ReadOnly = true
            Me.columnITEMCODE.AllowDBNull = false
            Me.columnPARTYDATE.AllowDBNull = false
            Me.columnMCODE.AllowDBNull = false
            Me.columnMNAME.AllowDBNull = false
            Me.columnHALLDESC.AllowDBNull = false
        End Sub
        
        Public Function Newpar_bar_arrangementRow() As par_bar_arrangementRow
            Return CType(Me.NewRow,par_bar_arrangementRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New par_bar_arrangementRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(par_bar_arrangementRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.par_bar_arrangementRowChangedEvent) Is Nothing) Then
                RaiseEvent par_bar_arrangementRowChanged(Me, New par_bar_arrangementRowChangeEvent(CType(e.Row,par_bar_arrangementRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.par_bar_arrangementRowChangingEvent) Is Nothing) Then
                RaiseEvent par_bar_arrangementRowChanging(Me, New par_bar_arrangementRowChangeEvent(CType(e.Row,par_bar_arrangementRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.par_bar_arrangementRowDeletedEvent) Is Nothing) Then
                RaiseEvent par_bar_arrangementRowDeleted(Me, New par_bar_arrangementRowChangeEvent(CType(e.Row,par_bar_arrangementRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.par_bar_arrangementRowDeletingEvent) Is Nothing) Then
                RaiseEvent par_bar_arrangementRowDeleting(Me, New par_bar_arrangementRowChangeEvent(CType(e.Row,par_bar_arrangementRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepar_bar_arrangementRow(ByVal row As par_bar_arrangementRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class par_bar_arrangementRow
        Inherits DataRow
        
        Private tablepar_bar_arrangement As par_bar_arrangementDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepar_bar_arrangement = CType(Me.Table,par_bar_arrangementDataTable)
        End Sub
        
        Public Property ROWID As Decimal
            Get
                Return CType(Me(Me.tablepar_bar_arrangement.ROWIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.ROWIDColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.BOOKINGTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tablepar_bar_arrangement.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.QTYColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.RATEColumn) = value
            End Set
        End Property
        
        Public Property TAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.TAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.TAXPERCColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ROUNDOFF As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.ROUNDOFFColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.ROUNDOFFColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property CANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.CANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.CANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property GLACCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.GLACCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.GLACCODEColumn) = value
            End Set
        End Property
        
        Public Property GLCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.GLCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.GLCCODEColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property ARRDESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablepar_bar_arrangement.ARRDESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.ARRDESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Return CType(Me(Me.tablepar_bar_arrangement.PARTYDATEColumn),Date)
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tablepar_bar_arrangement.MCODEColumn),String)
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Return CType(Me(Me.tablepar_bar_arrangement.MNAMEColumn),String)
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property HALLDESC As String
            Get
                Return CType(Me(Me.tablepar_bar_arrangement.HALLDESCColumn),String)
            End Get
            Set
                Me(Me.tablepar_bar_arrangement.HALLDESCColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGTYPENull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.BOOKINGTYPEColumn)
        End Function
        
        Public Sub SetBOOKINGTYPENull()
            Me(Me.tablepar_bar_arrangement.BOOKINGTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablepar_bar_arrangement.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablepar_bar_arrangement.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tablepar_bar_arrangement.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablepar_bar_arrangement.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.TAXPERCColumn)
        End Function
        
        Public Sub SetTAXPERCNull()
            Me(Me.tablepar_bar_arrangement.TAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablepar_bar_arrangement.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tablepar_bar_arrangement.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsROUNDOFFNull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.ROUNDOFFColumn)
        End Function
        
        Public Sub SetROUNDOFFNull()
            Me(Me.tablepar_bar_arrangement.ROUNDOFFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablepar_bar_arrangement.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablepar_bar_arrangement.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tablepar_bar_arrangement.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablepar_bar_arrangement.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.CANCELAMOUNTColumn)
        End Function
        
        Public Sub SetCANCELAMOUNTNull()
            Me(Me.tablepar_bar_arrangement.CANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCODENull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.GLACCODEColumn)
        End Function
        
        Public Sub SetGLACCODENull()
            Me(Me.tablepar_bar_arrangement.GLACCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLCCODENull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.GLCCODEColumn)
        End Function
        
        Public Sub SetGLCCODENull()
            Me(Me.tablepar_bar_arrangement.GLCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablepar_bar_arrangement.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablepar_bar_arrangement.ARRDESCRIPTIONColumn)
        End Function
        
        Public Sub SetARRDESCRIPTIONNull()
            Me(Me.tablepar_bar_arrangement.ARRDESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class par_bar_arrangementRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As par_bar_arrangementRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As par_bar_arrangementRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As par_bar_arrangementRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_HALLRESERVATIONDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnGUESTNAME As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnHALLNETAMOUNT As DataColumn
        
        Private columnDISCOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnHALLTYPEDESC As DataColumn
        
        Private columnHALLTYPE As DataColumn
        
        Private columnPARTYRECEIPTNO As DataColumn
        
        Private columnPARTYRECEIPTDATE As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_HALLRESERVATION")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property GUESTNAMEColumn As DataColumn
            Get
                Return Me.columnGUESTNAME
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property HALLNETAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLNETAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property DISCOUNTColumn As DataColumn
            Get
                Return Me.columnDISCOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property HALLTYPEDESCColumn As DataColumn
            Get
                Return Me.columnHALLTYPEDESC
            End Get
        End Property
        
        Friend ReadOnly Property HALLTYPEColumn As DataColumn
            Get
                Return Me.columnHALLTYPE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTNOColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_HALLRESERVATIONRow
            Get
                Return CType(Me.Rows(index),PARTY_HALLRESERVATIONRow)
            End Get
        End Property
        
        Public Event PARTY_HALLRESERVATIONRowChanged As PARTY_HALLRESERVATIONRowChangeEventHandler
        
        Public Event PARTY_HALLRESERVATIONRowChanging As PARTY_HALLRESERVATIONRowChangeEventHandler
        
        Public Event PARTY_HALLRESERVATIONRowDeleted As PARTY_HALLRESERVATIONRowChangeEventHandler
        
        Public Event PARTY_HALLRESERVATIONRowDeleting As PARTY_HALLRESERVATIONRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_HALLRESERVATIONRow(ByVal row As PARTY_HALLRESERVATIONRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_HALLRESERVATIONRow( _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal MCODE As String,  _
                    ByVal ASSOCIATENAME As String,  _
                    ByVal GUESTNAME As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal FREEZE As String,  _
                    ByVal HALLNETAMOUNT As Decimal,  _
                    ByVal DISCOUNT As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal HALLCODE As String,  _
                    ByVal HALLTYPEDESC As String,  _
                    ByVal HALLTYPE As String,  _
                    ByVal PARTYRECEIPTNO As String,  _
                    ByVal PARTYRECEIPTDATE As Date,  _
                    ByVal AMOUNT As Decimal) As PARTY_HALLRESERVATIONRow
            Dim rowPARTY_HALLRESERVATIONRow As PARTY_HALLRESERVATIONRow = CType(Me.NewRow,PARTY_HALLRESERVATIONRow)
            rowPARTY_HALLRESERVATIONRow.ItemArray = New Object() {BOOKINGNO, PARTYDATE, MCODE, ASSOCIATENAME, GUESTNAME, BOOKINGDATE, DESCRIPTION, FREEZE, HALLNETAMOUNT, DISCOUNT, TOTALAMOUNT, HALLCODE, HALLTYPEDESC, HALLTYPE, PARTYRECEIPTNO, PARTYRECEIPTDATE, AMOUNT}
            Me.Rows.Add(rowPARTY_HALLRESERVATIONRow)
            Return rowPARTY_HALLRESERVATIONRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_HALLRESERVATIONDataTable = CType(MyBase.Clone,PARTY_HALLRESERVATIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_HALLRESERVATIONDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnGUESTNAME = Me.Columns("GUESTNAME")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnHALLNETAMOUNT = Me.Columns("HALLNETAMOUNT")
            Me.columnDISCOUNT = Me.Columns("DISCOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnHALLTYPEDESC = Me.Columns("HALLTYPEDESC")
            Me.columnHALLTYPE = Me.Columns("HALLTYPE")
            Me.columnPARTYRECEIPTNO = Me.Columns("PARTYRECEIPTNO")
            Me.columnPARTYRECEIPTDATE = Me.Columns("PARTYRECEIPTDATE")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnGUESTNAME = New DataColumn("GUESTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGUESTNAME)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnHALLNETAMOUNT = New DataColumn("HALLNETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLNETAMOUNT)
            Me.columnDISCOUNT = New DataColumn("DISCOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDISCOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnHALLTYPEDESC = New DataColumn("HALLTYPEDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTYPEDESC)
            Me.columnHALLTYPE = New DataColumn("HALLTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTYPE)
            Me.columnPARTYRECEIPTNO = New DataColumn("PARTYRECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTNO)
            Me.columnPARTYRECEIPTDATE = New DataColumn("PARTYRECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTDATE)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnGUESTNAME.ReadOnly = true
        End Sub
        
        Public Function NewPARTY_HALLRESERVATIONRow() As PARTY_HALLRESERVATIONRow
            Return CType(Me.NewRow,PARTY_HALLRESERVATIONRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_HALLRESERVATIONRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_HALLRESERVATIONRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_HALLRESERVATIONRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_HALLRESERVATIONRowChanged(Me, New PARTY_HALLRESERVATIONRowChangeEvent(CType(e.Row,PARTY_HALLRESERVATIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_HALLRESERVATIONRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_HALLRESERVATIONRowChanging(Me, New PARTY_HALLRESERVATIONRowChangeEvent(CType(e.Row,PARTY_HALLRESERVATIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_HALLRESERVATIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_HALLRESERVATIONRowDeleted(Me, New PARTY_HALLRESERVATIONRowChangeEvent(CType(e.Row,PARTY_HALLRESERVATIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_HALLRESERVATIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_HALLRESERVATIONRowDeleting(Me, New PARTY_HALLRESERVATIONRowChangeEvent(CType(e.Row,PARTY_HALLRESERVATIONRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_HALLRESERVATIONRow(ByVal row As PARTY_HALLRESERVATIONRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_HALLRESERVATIONRow
        Inherits DataRow
        
        Private tablePARTY_HALLRESERVATION As PARTY_HALLRESERVATIONDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_HALLRESERVATION = CType(Me.Table,PARTY_HALLRESERVATIONDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property GUESTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.GUESTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.GUESTNAMEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property HALLNETAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.HALLNETAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.HALLNETAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property DISCOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.DISCOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.DISCOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property HALLTYPEDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.HALLTYPEDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.HALLTYPEDESCColumn) = value
            End Set
        End Property
        
        Public Property HALLTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.HALLTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.HALLTYPEColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.PARTYRECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.PARTYRECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.PARTYRECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.PARTYRECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_HALLRESERVATION.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_HALLRESERVATION.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_HALLRESERVATION.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_HALLRESERVATION.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_HALLRESERVATION.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tablePARTY_HALLRESERVATION.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGUESTNAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.GUESTNAMEColumn)
        End Function
        
        Public Sub SetGUESTNAMENull()
            Me(Me.tablePARTY_HALLRESERVATION.GUESTNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_HALLRESERVATION.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablePARTY_HALLRESERVATION.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePARTY_HALLRESERVATION.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLNETAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.HALLNETAMOUNTColumn)
        End Function
        
        Public Sub SetHALLNETAMOUNTNull()
            Me(Me.tablePARTY_HALLRESERVATION.HALLNETAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDISCOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.DISCOUNTColumn)
        End Function
        
        Public Sub SetDISCOUNTNull()
            Me(Me.tablePARTY_HALLRESERVATION.DISCOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePARTY_HALLRESERVATION.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablePARTY_HALLRESERVATION.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTYPEDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.HALLTYPEDESCColumn)
        End Function
        
        Public Sub SetHALLTYPEDESCNull()
            Me(Me.tablePARTY_HALLRESERVATION.HALLTYPEDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.HALLTYPEColumn)
        End Function
        
        Public Sub SetHALLTYPENull()
            Me(Me.tablePARTY_HALLRESERVATION.HALLTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.PARTYRECEIPTNOColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTNONull()
            Me(Me.tablePARTY_HALLRESERVATION.PARTYRECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.PARTYRECEIPTDATEColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTDATENull()
            Me(Me.tablePARTY_HALLRESERVATION.PARTYRECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_HALLRESERVATION.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_HALLRESERVATION.AMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_HALLRESERVATIONRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_HALLRESERVATIONRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_HALLRESERVATIONRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_HALLRESERVATIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyCANCEL_viewDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnFROMTIME As DataColumn
        
        Private columnTOTIME As DataColumn
        
        Private columnHALLAMOUNT As DataColumn
        
        Private columnHALLTAXAMOUNT As DataColumn
        
        Private columnhalltypedesc As DataColumn
        
        Private columnsedeposit As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnGUESTNAME As DataColumn
        
        Private columnFREERESON As DataColumn
        
        Private columnCCELL As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnHALLNETAMOUNT As DataColumn
        
        Private columnDISCOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnCANCELAMOUNT As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Friend Sub New()
            MyBase.New("partyCANCEL_view")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property FROMTIMEColumn As DataColumn
            Get
                Return Me.columnFROMTIME
            End Get
        End Property
        
        Friend ReadOnly Property TOTIMEColumn As DataColumn
            Get
                Return Me.columnTOTIME
            End Get
        End Property
        
        Friend ReadOnly Property HALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property halltypedescColumn As DataColumn
            Get
                Return Me.columnhalltypedesc
            End Get
        End Property
        
        Friend ReadOnly Property sedepositColumn As DataColumn
            Get
                Return Me.columnsedeposit
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property GUESTNAMEColumn As DataColumn
            Get
                Return Me.columnGUESTNAME
            End Get
        End Property
        
        Friend ReadOnly Property FREERESONColumn As DataColumn
            Get
                Return Me.columnFREERESON
            End Get
        End Property
        
        Friend ReadOnly Property CCELLColumn As DataColumn
            Get
                Return Me.columnCCELL
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property HALLNETAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLNETAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property DISCOUNTColumn As DataColumn
            Get
                Return Me.columnDISCOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property CANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As partyCANCEL_viewRow
            Get
                Return CType(Me.Rows(index),partyCANCEL_viewRow)
            End Get
        End Property
        
        Public Event partyCANCEL_viewRowChanged As partyCANCEL_viewRowChangeEventHandler
        
        Public Event partyCANCEL_viewRowChanging As partyCANCEL_viewRowChangeEventHandler
        
        Public Event partyCANCEL_viewRowDeleted As partyCANCEL_viewRowChangeEventHandler
        
        Public Event partyCANCEL_viewRowDeleting As partyCANCEL_viewRowChangeEventHandler
        
        Public Overloads Sub AddpartyCANCEL_viewRow(ByVal row As partyCANCEL_viewRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddpartyCANCEL_viewRow( _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal HALLCODE As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal FROMTIME As Decimal,  _
                    ByVal TOTIME As Decimal,  _
                    ByVal HALLAMOUNT As Decimal,  _
                    ByVal HALLTAXAMOUNT As Decimal,  _
                    ByVal halltypedesc As String,  _
                    ByVal sedeposit As Decimal,  _
                    ByVal MCODE As String,  _
                    ByVal ASSOCIATENAME As String,  _
                    ByVal GUESTNAME As String,  _
                    ByVal FREERESON As String,  _
                    ByVal CCELL As String,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal HALLNETAMOUNT As Decimal,  _
                    ByVal DISCOUNT As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal CANCELAMOUNT As Decimal,  _
                    ByVal ADDDATETIME As Date) As partyCANCEL_viewRow
            Dim rowpartyCANCEL_viewRow As partyCANCEL_viewRow = CType(Me.NewRow,partyCANCEL_viewRow)
            rowpartyCANCEL_viewRow.ItemArray = New Object() {BOOKINGNO, HALLCODE, BOOKINGDATE, PARTYDATE, FROMTIME, TOTIME, HALLAMOUNT, HALLTAXAMOUNT, halltypedesc, sedeposit, MCODE, ASSOCIATENAME, GUESTNAME, FREERESON, CCELL, DESCRIPTION, OCCUPANCY, HALLNETAMOUNT, DISCOUNT, TOTALAMOUNT, CANCELAMOUNT, ADDDATETIME}
            Me.Rows.Add(rowpartyCANCEL_viewRow)
            Return rowpartyCANCEL_viewRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As partyCANCEL_viewDataTable = CType(MyBase.Clone,partyCANCEL_viewDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New partyCANCEL_viewDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnFROMTIME = Me.Columns("FROMTIME")
            Me.columnTOTIME = Me.Columns("TOTIME")
            Me.columnHALLAMOUNT = Me.Columns("HALLAMOUNT")
            Me.columnHALLTAXAMOUNT = Me.Columns("HALLTAXAMOUNT")
            Me.columnhalltypedesc = Me.Columns("halltypedesc")
            Me.columnsedeposit = Me.Columns("sedeposit")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnGUESTNAME = Me.Columns("GUESTNAME")
            Me.columnFREERESON = Me.Columns("FREERESON")
            Me.columnCCELL = Me.Columns("CCELL")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnHALLNETAMOUNT = Me.Columns("HALLNETAMOUNT")
            Me.columnDISCOUNT = Me.Columns("DISCOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnCANCELAMOUNT = Me.Columns("CANCELAMOUNT")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnFROMTIME = New DataColumn("FROMTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMTIME)
            Me.columnTOTIME = New DataColumn("TOTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTIME)
            Me.columnHALLAMOUNT = New DataColumn("HALLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLAMOUNT)
            Me.columnHALLTAXAMOUNT = New DataColumn("HALLTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXAMOUNT)
            Me.columnhalltypedesc = New DataColumn("halltypedesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltypedesc)
            Me.columnsedeposit = New DataColumn("sedeposit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsedeposit)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnGUESTNAME = New DataColumn("GUESTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGUESTNAME)
            Me.columnFREERESON = New DataColumn("FREERESON", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREERESON)
            Me.columnCCELL = New DataColumn("CCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCELL)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnHALLNETAMOUNT = New DataColumn("HALLNETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLNETAMOUNT)
            Me.columnDISCOUNT = New DataColumn("DISCOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDISCOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnCANCELAMOUNT = New DataColumn("CANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELAMOUNT)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnFREERESON.ReadOnly = true
            Me.columnCCELL.ReadOnly = true
            Me.columnCANCELAMOUNT.ReadOnly = true
        End Sub
        
        Public Function NewpartyCANCEL_viewRow() As partyCANCEL_viewRow
            Return CType(Me.NewRow,partyCANCEL_viewRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New partyCANCEL_viewRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(partyCANCEL_viewRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.partyCANCEL_viewRowChangedEvent) Is Nothing) Then
                RaiseEvent partyCANCEL_viewRowChanged(Me, New partyCANCEL_viewRowChangeEvent(CType(e.Row,partyCANCEL_viewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.partyCANCEL_viewRowChangingEvent) Is Nothing) Then
                RaiseEvent partyCANCEL_viewRowChanging(Me, New partyCANCEL_viewRowChangeEvent(CType(e.Row,partyCANCEL_viewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.partyCANCEL_viewRowDeletedEvent) Is Nothing) Then
                RaiseEvent partyCANCEL_viewRowDeleted(Me, New partyCANCEL_viewRowChangeEvent(CType(e.Row,partyCANCEL_viewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.partyCANCEL_viewRowDeletingEvent) Is Nothing) Then
                RaiseEvent partyCANCEL_viewRowDeleting(Me, New partyCANCEL_viewRowChangeEvent(CType(e.Row,partyCANCEL_viewRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovepartyCANCEL_viewRow(ByVal row As partyCANCEL_viewRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyCANCEL_viewRow
        Inherits DataRow
        
        Private tablepartyCANCEL_view As partyCANCEL_viewDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepartyCANCEL_view = CType(Me.Table,partyCANCEL_viewDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablepartyCANCEL_view.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property FROMTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.FROMTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.FROMTIMEColumn) = value
            End Set
        End Property
        
        Public Property TOTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.TOTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.TOTIMEColumn) = value
            End Set
        End Property
        
        Public Property HALLAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.HALLAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.HALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.HALLTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.HALLTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property halltypedesc As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.halltypedescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.halltypedescColumn) = value
            End Set
        End Property
        
        Public Property sedeposit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.sedepositColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.sedepositColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property GUESTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.GUESTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.GUESTNAMEColumn) = value
            End Set
        End Property
        
        Public Property FREERESON As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.FREERESONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.FREERESONColumn) = value
            End Set
        End Property
        
        Public Property CCELL As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.CCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.CCELLColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property HALLNETAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.HALLNETAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.HALLNETAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property DISCOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.DISCOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.DISCOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property CANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.CANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.CANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyCANCEL_view.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyCANCEL_view.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablepartyCANCEL_view.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablepartyCANCEL_view.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablepartyCANCEL_view.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMTIMENull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.FROMTIMEColumn)
        End Function
        
        Public Sub SetFROMTIMENull()
            Me(Me.tablepartyCANCEL_view.FROMTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTIMENull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.TOTIMEColumn)
        End Function
        
        Public Sub SetTOTIMENull()
            Me(Me.tablepartyCANCEL_view.TOTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.HALLAMOUNTColumn)
        End Function
        
        Public Sub SetHALLAMOUNTNull()
            Me(Me.tablepartyCANCEL_view.HALLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.HALLTAXAMOUNTColumn)
        End Function
        
        Public Sub SetHALLTAXAMOUNTNull()
            Me(Me.tablepartyCANCEL_view.HALLTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalltypedescNull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.halltypedescColumn)
        End Function
        
        Public Sub SethalltypedescNull()
            Me(Me.tablepartyCANCEL_view.halltypedescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssedepositNull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.sedepositColumn)
        End Function
        
        Public Sub SetsedepositNull()
            Me(Me.tablepartyCANCEL_view.sedepositColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablepartyCANCEL_view.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tablepartyCANCEL_view.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGUESTNAMENull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.GUESTNAMEColumn)
        End Function
        
        Public Sub SetGUESTNAMENull()
            Me(Me.tablepartyCANCEL_view.GUESTNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREERESONNull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.FREERESONColumn)
        End Function
        
        Public Sub SetFREERESONNull()
            Me(Me.tablepartyCANCEL_view.FREERESONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCELLNull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.CCELLColumn)
        End Function
        
        Public Sub SetCCELLNull()
            Me(Me.tablepartyCANCEL_view.CCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablepartyCANCEL_view.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablepartyCANCEL_view.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLNETAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.HALLNETAMOUNTColumn)
        End Function
        
        Public Sub SetHALLNETAMOUNTNull()
            Me(Me.tablepartyCANCEL_view.HALLNETAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDISCOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.DISCOUNTColumn)
        End Function
        
        Public Sub SetDISCOUNTNull()
            Me(Me.tablepartyCANCEL_view.DISCOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablepartyCANCEL_view.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.CANCELAMOUNTColumn)
        End Function
        
        Public Sub SetCANCELAMOUNTNull()
            Me(Me.tablepartyCANCEL_view.CANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablepartyCANCEL_view.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablepartyCANCEL_view.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyCANCEL_viewRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As partyCANCEL_viewRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As partyCANCEL_viewRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As partyCANCEL_viewRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_PENDINGBILLDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnpartydate As DataColumn
        
        Private columntax As DataColumn
        
        Private columnamount As DataColumn
        
        Private columndiscount As DataColumn
        
        Private columntotalamount As DataColumn
        
        Private columnitemtotamount As DataColumn
        
        Private columnbanquethallamount As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnRECAMOUNT As DataColumn
        
        Private columnsertax As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_PENDINGBILL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property partydateColumn As DataColumn
            Get
                Return Me.columnpartydate
            End Get
        End Property
        
        Friend ReadOnly Property taxColumn As DataColumn
            Get
                Return Me.columntax
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property discountColumn As DataColumn
            Get
                Return Me.columndiscount
            End Get
        End Property
        
        Friend ReadOnly Property totalamountColumn As DataColumn
            Get
                Return Me.columntotalamount
            End Get
        End Property
        
        Friend ReadOnly Property itemtotamountColumn As DataColumn
            Get
                Return Me.columnitemtotamount
            End Get
        End Property
        
        Friend ReadOnly Property banquethallamountColumn As DataColumn
            Get
                Return Me.columnbanquethallamount
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property RECAMOUNTColumn As DataColumn
            Get
                Return Me.columnRECAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property sertaxColumn As DataColumn
            Get
                Return Me.columnsertax
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_PENDINGBILLRow
            Get
                Return CType(Me.Rows(index),PARTY_PENDINGBILLRow)
            End Get
        End Property
        
        Public Event PARTY_PENDINGBILLRowChanged As PARTY_PENDINGBILLRowChangeEventHandler
        
        Public Event PARTY_PENDINGBILLRowChanging As PARTY_PENDINGBILLRowChangeEventHandler
        
        Public Event PARTY_PENDINGBILLRowDeleted As PARTY_PENDINGBILLRowChangeEventHandler
        
        Public Event PARTY_PENDINGBILLRowDeleting As PARTY_PENDINGBILLRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_PENDINGBILLRow(ByVal row As PARTY_PENDINGBILLRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_PENDINGBILLRow(ByVal BOOKINGNO As Decimal, ByVal BOOKINGDATE As Date, ByVal partydate As Date, ByVal tax As Decimal, ByVal amount As Decimal, ByVal discount As Decimal, ByVal totalamount As Decimal, ByVal itemtotamount As Decimal, ByVal banquethallamount As Decimal, ByVal MCODE As String, ByVal ASSOCIATENAME As String, ByVal RECAMOUNT As Decimal, ByVal sertax As Decimal) As PARTY_PENDINGBILLRow
            Dim rowPARTY_PENDINGBILLRow As PARTY_PENDINGBILLRow = CType(Me.NewRow,PARTY_PENDINGBILLRow)
            rowPARTY_PENDINGBILLRow.ItemArray = New Object() {BOOKINGNO, BOOKINGDATE, partydate, tax, amount, discount, totalamount, itemtotamount, banquethallamount, MCODE, ASSOCIATENAME, RECAMOUNT, sertax}
            Me.Rows.Add(rowPARTY_PENDINGBILLRow)
            Return rowPARTY_PENDINGBILLRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_PENDINGBILLDataTable = CType(MyBase.Clone,PARTY_PENDINGBILLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_PENDINGBILLDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnpartydate = Me.Columns("partydate")
            Me.columntax = Me.Columns("tax")
            Me.columnamount = Me.Columns("amount")
            Me.columndiscount = Me.Columns("discount")
            Me.columntotalamount = Me.Columns("totalamount")
            Me.columnitemtotamount = Me.Columns("itemtotamount")
            Me.columnbanquethallamount = Me.Columns("banquethallamount")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnRECAMOUNT = Me.Columns("RECAMOUNT")
            Me.columnsertax = Me.Columns("sertax")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnpartydate = New DataColumn("partydate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpartydate)
            Me.columntax = New DataColumn("tax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntax)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columndiscount = New DataColumn("discount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscount)
            Me.columntotalamount = New DataColumn("totalamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotalamount)
            Me.columnitemtotamount = New DataColumn("itemtotamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemtotamount)
            Me.columnbanquethallamount = New DataColumn("banquethallamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbanquethallamount)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnRECAMOUNT = New DataColumn("RECAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECAMOUNT)
            Me.columnsertax = New DataColumn("sertax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsertax)
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columndiscount.AllowDBNull = false
            Me.columnbanquethallamount.AllowDBNull = false
        End Sub
        
        Public Function NewPARTY_PENDINGBILLRow() As PARTY_PENDINGBILLRow
            Return CType(Me.NewRow,PARTY_PENDINGBILLRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_PENDINGBILLRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_PENDINGBILLRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_PENDINGBILLRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_PENDINGBILLRowChanged(Me, New PARTY_PENDINGBILLRowChangeEvent(CType(e.Row,PARTY_PENDINGBILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_PENDINGBILLRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_PENDINGBILLRowChanging(Me, New PARTY_PENDINGBILLRowChangeEvent(CType(e.Row,PARTY_PENDINGBILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_PENDINGBILLRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_PENDINGBILLRowDeleted(Me, New PARTY_PENDINGBILLRowChangeEvent(CType(e.Row,PARTY_PENDINGBILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_PENDINGBILLRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_PENDINGBILLRowDeleting(Me, New PARTY_PENDINGBILLRowChangeEvent(CType(e.Row,PARTY_PENDINGBILLRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_PENDINGBILLRow(ByVal row As PARTY_PENDINGBILLRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_PENDINGBILLRow
        Inherits DataRow
        
        Private tablePARTY_PENDINGBILL As PARTY_PENDINGBILLDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_PENDINGBILL = CType(Me.Table,PARTY_PENDINGBILLDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePARTY_PENDINGBILL.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property partydate As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.partydateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.partydateColumn) = value
            End Set
        End Property
        
        Public Property tax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.taxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.taxColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.amountColumn) = value
            End Set
        End Property
        
        Public Property discount As Decimal
            Get
                Return CType(Me(Me.tablePARTY_PENDINGBILL.discountColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.discountColumn) = value
            End Set
        End Property
        
        Public Property totalamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.totalamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.totalamountColumn) = value
            End Set
        End Property
        
        Public Property itemtotamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.itemtotamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.itemtotamountColumn) = value
            End Set
        End Property
        
        Public Property banquethallamount As Decimal
            Get
                Return CType(Me(Me.tablePARTY_PENDINGBILL.banquethallamountColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.banquethallamountColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property RECAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.RECAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.RECAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property sertax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.sertaxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.sertaxColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_PENDINGBILL.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspartydateNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.partydateColumn)
        End Function
        
        Public Sub SetpartydateNull()
            Me(Me.tablePARTY_PENDINGBILL.partydateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.taxColumn)
        End Function
        
        Public Sub SettaxNull()
            Me(Me.tablePARTY_PENDINGBILL.taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tablePARTY_PENDINGBILL.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotalamountNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.totalamountColumn)
        End Function
        
        Public Sub SettotalamountNull()
            Me(Me.tablePARTY_PENDINGBILL.totalamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsitemtotamountNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.itemtotamountColumn)
        End Function
        
        Public Sub SetitemtotamountNull()
            Me(Me.tablePARTY_PENDINGBILL.itemtotamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_PENDINGBILL.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tablePARTY_PENDINGBILL.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.RECAMOUNTColumn)
        End Function
        
        Public Sub SetRECAMOUNTNull()
            Me(Me.tablePARTY_PENDINGBILL.RECAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssertaxNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.sertaxColumn)
        End Function
        
        Public Sub SetsertaxNull()
            Me(Me.tablePARTY_PENDINGBILL.sertaxColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_PENDINGBILLRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_PENDINGBILLRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_PENDINGBILLRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_PENDINGBILLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_receiptsummaryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnbookingno As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnmcode As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("party_receiptsummary")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property bookingnoColumn As DataColumn
            Get
                Return Me.columnbookingno
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As party_receiptsummaryRow
            Get
                Return CType(Me.Rows(index),party_receiptsummaryRow)
            End Get
        End Property
        
        Public Event party_receiptsummaryRowChanged As party_receiptsummaryRowChangeEventHandler
        
        Public Event party_receiptsummaryRowChanging As party_receiptsummaryRowChangeEventHandler
        
        Public Event party_receiptsummaryRowDeleted As party_receiptsummaryRowChangeEventHandler
        
        Public Event party_receiptsummaryRowDeleting As party_receiptsummaryRowChangeEventHandler
        
        Public Overloads Sub Addparty_receiptsummaryRow(ByVal row As party_receiptsummaryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addparty_receiptsummaryRow(ByVal bookingno As Decimal, ByVal PARTYDATE As Date, ByVal PAYMENTMODE As String, ByVal mcode As String, ByVal MNAME As String, ByVal AMOUNT As Decimal) As party_receiptsummaryRow
            Dim rowparty_receiptsummaryRow As party_receiptsummaryRow = CType(Me.NewRow,party_receiptsummaryRow)
            rowparty_receiptsummaryRow.ItemArray = New Object() {bookingno, PARTYDATE, PAYMENTMODE, mcode, MNAME, AMOUNT}
            Me.Rows.Add(rowparty_receiptsummaryRow)
            Return rowparty_receiptsummaryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As party_receiptsummaryDataTable = CType(MyBase.Clone,party_receiptsummaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New party_receiptsummaryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnbookingno = Me.Columns("bookingno")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnmcode = Me.Columns("mcode")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnbookingno = New DataColumn("bookingno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookingno)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
        End Sub
        
        Public Function Newparty_receiptsummaryRow() As party_receiptsummaryRow
            Return CType(Me.NewRow,party_receiptsummaryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New party_receiptsummaryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(party_receiptsummaryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.party_receiptsummaryRowChangedEvent) Is Nothing) Then
                RaiseEvent party_receiptsummaryRowChanged(Me, New party_receiptsummaryRowChangeEvent(CType(e.Row,party_receiptsummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.party_receiptsummaryRowChangingEvent) Is Nothing) Then
                RaiseEvent party_receiptsummaryRowChanging(Me, New party_receiptsummaryRowChangeEvent(CType(e.Row,party_receiptsummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.party_receiptsummaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent party_receiptsummaryRowDeleted(Me, New party_receiptsummaryRowChangeEvent(CType(e.Row,party_receiptsummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.party_receiptsummaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent party_receiptsummaryRowDeleting(Me, New party_receiptsummaryRowChangeEvent(CType(e.Row,party_receiptsummaryRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeparty_receiptsummaryRow(ByVal row As party_receiptsummaryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_receiptsummaryRow
        Inherits DataRow
        
        Private tableparty_receiptsummary As party_receiptsummaryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableparty_receiptsummary = CType(Me.Table,party_receiptsummaryDataTable)
        End Sub
        
        Public Property bookingno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_receiptsummary.bookingnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_receiptsummary.bookingnoColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableparty_receiptsummary.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_receiptsummary.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_receiptsummary.PAYMENTMODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_receiptsummary.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_receiptsummary.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_receiptsummary.mcodeColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_receiptsummary.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_receiptsummary.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_receiptsummary.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_receiptsummary.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsbookingnoNull() As Boolean
            Return Me.IsNull(Me.tableparty_receiptsummary.bookingnoColumn)
        End Function
        
        Public Sub SetbookingnoNull()
            Me(Me.tableparty_receiptsummary.bookingnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tableparty_receiptsummary.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tableparty_receiptsummary.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYMENTMODENull() As Boolean
            Return Me.IsNull(Me.tableparty_receiptsummary.PAYMENTMODEColumn)
        End Function
        
        Public Sub SetPAYMENTMODENull()
            Me(Me.tableparty_receiptsummary.PAYMENTMODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tableparty_receiptsummary.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tableparty_receiptsummary.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableparty_receiptsummary.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableparty_receiptsummary.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_receiptsummary.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableparty_receiptsummary.AMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_receiptsummaryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As party_receiptsummaryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As party_receiptsummaryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As party_receiptsummaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_ITEMWISEDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPOS As DataColumn
        
        Private columnPOSDESC As DataColumn
        
        Private columnpartydate As DataColumn
        
        Private columnitemcode As DataColumn
        
        Private columnitemdesc As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnSERTAX As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnCATEGORY As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_PARTY_ITEMWISE")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property POSColumn As DataColumn
            Get
                Return Me.columnPOS
            End Get
        End Property
        
        Friend ReadOnly Property POSDESCColumn As DataColumn
            Get
                Return Me.columnPOSDESC
            End Get
        End Property
        
        Friend ReadOnly Property partydateColumn As DataColumn
            Get
                Return Me.columnpartydate
            End Get
        End Property
        
        Friend ReadOnly Property itemcodeColumn As DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        Friend ReadOnly Property itemdescColumn As DataColumn
            Get
                Return Me.columnitemdesc
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property SERTAXColumn As DataColumn
            Get
                Return Me.columnSERTAX
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property CATEGORYColumn As DataColumn
            Get
                Return Me.columnCATEGORY
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARTY_ITEMWISERow
            Get
                Return CType(Me.Rows(index),VIEW_PARTY_ITEMWISERow)
            End Get
        End Property
        
        Public Event VIEW_PARTY_ITEMWISERowChanged As VIEW_PARTY_ITEMWISERowChangeEventHandler
        
        Public Event VIEW_PARTY_ITEMWISERowChanging As VIEW_PARTY_ITEMWISERowChangeEventHandler
        
        Public Event VIEW_PARTY_ITEMWISERowDeleted As VIEW_PARTY_ITEMWISERowChangeEventHandler
        
        Public Event VIEW_PARTY_ITEMWISERowDeleting As VIEW_PARTY_ITEMWISERowChangeEventHandler
        
        Public Overloads Sub AddVIEW_PARTY_ITEMWISERow(ByVal row As VIEW_PARTY_ITEMWISERow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_PARTY_ITEMWISERow(ByVal POS As String, ByVal POSDESC As String, ByVal partydate As Date, ByVal itemcode As String, ByVal itemdesc As String, ByVal RATE As Decimal, ByVal QTY As Decimal, ByVal AMOUNT As Decimal, ByVal SERTAX As Decimal, ByVal TAXAMOUNT As Decimal, ByVal CATEGORY As String, ByVal TOTALAMOUNT As Decimal) As VIEW_PARTY_ITEMWISERow
            Dim rowVIEW_PARTY_ITEMWISERow As VIEW_PARTY_ITEMWISERow = CType(Me.NewRow,VIEW_PARTY_ITEMWISERow)
            rowVIEW_PARTY_ITEMWISERow.ItemArray = New Object() {POS, POSDESC, partydate, itemcode, itemdesc, RATE, QTY, AMOUNT, SERTAX, TAXAMOUNT, CATEGORY, TOTALAMOUNT}
            Me.Rows.Add(rowVIEW_PARTY_ITEMWISERow)
            Return rowVIEW_PARTY_ITEMWISERow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_PARTY_ITEMWISEDataTable = CType(MyBase.Clone,VIEW_PARTY_ITEMWISEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_PARTY_ITEMWISEDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnPOS = Me.Columns("POS")
            Me.columnPOSDESC = Me.Columns("POSDESC")
            Me.columnpartydate = Me.Columns("partydate")
            Me.columnitemcode = Me.Columns("itemcode")
            Me.columnitemdesc = Me.Columns("itemdesc")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnSERTAX = Me.Columns("SERTAX")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnCATEGORY = Me.Columns("CATEGORY")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnPOS = New DataColumn("POS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOS)
            Me.columnPOSDESC = New DataColumn("POSDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSDESC)
            Me.columnpartydate = New DataColumn("partydate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpartydate)
            Me.columnitemcode = New DataColumn("itemcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemcode)
            Me.columnitemdesc = New DataColumn("itemdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemdesc)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnSERTAX = New DataColumn("SERTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSERTAX)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnCATEGORY = New DataColumn("CATEGORY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATEGORY)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnPOS.ReadOnly = true
            Me.columnPOSDESC.ReadOnly = true
            Me.columnpartydate.ReadOnly = true
            Me.columnitemcode.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_PARTY_ITEMWISERow() As VIEW_PARTY_ITEMWISERow
            Return CType(Me.NewRow,VIEW_PARTY_ITEMWISERow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_PARTY_ITEMWISERow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_PARTY_ITEMWISERow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARTY_ITEMWISERowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_ITEMWISERowChanged(Me, New VIEW_PARTY_ITEMWISERowChangeEvent(CType(e.Row,VIEW_PARTY_ITEMWISERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARTY_ITEMWISERowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_ITEMWISERowChanging(Me, New VIEW_PARTY_ITEMWISERowChangeEvent(CType(e.Row,VIEW_PARTY_ITEMWISERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARTY_ITEMWISERowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_ITEMWISERowDeleted(Me, New VIEW_PARTY_ITEMWISERowChangeEvent(CType(e.Row,VIEW_PARTY_ITEMWISERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARTY_ITEMWISERowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_ITEMWISERowDeleting(Me, New VIEW_PARTY_ITEMWISERowChangeEvent(CType(e.Row,VIEW_PARTY_ITEMWISERow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_PARTY_ITEMWISERow(ByVal row As VIEW_PARTY_ITEMWISERow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_ITEMWISERow
        Inherits DataRow
        
        Private tableVIEW_PARTY_ITEMWISE As VIEW_PARTY_ITEMWISEDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARTY_ITEMWISE = CType(Me.Table,VIEW_PARTY_ITEMWISEDataTable)
        End Sub
        
        Public Property POS As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_ITEMWISE.POSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_ITEMWISE.POSColumn) = value
            End Set
        End Property
        
        Public Property POSDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_ITEMWISE.POSDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_ITEMWISE.POSDESCColumn) = value
            End Set
        End Property
        
        Public Property partydate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_ITEMWISE.partydateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_ITEMWISE.partydateColumn) = value
            End Set
        End Property
        
        Public Property itemcode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_ITEMWISE.itemcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_ITEMWISE.itemcodeColumn) = value
            End Set
        End Property
        
        Public Property itemdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_ITEMWISE.itemdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_ITEMWISE.itemdescColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_ITEMWISE.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_ITEMWISE.RATEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_ITEMWISE.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_ITEMWISE.QTYColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_ITEMWISE.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_ITEMWISE.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property SERTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_ITEMWISE.SERTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_ITEMWISE.SERTAXColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_ITEMWISE.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_ITEMWISE.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property CATEGORY As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_ITEMWISE.CATEGORYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_ITEMWISE.CATEGORYColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_ITEMWISE.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_ITEMWISE.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsPOSNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_ITEMWISE.POSColumn)
        End Function
        
        Public Sub SetPOSNull()
            Me(Me.tableVIEW_PARTY_ITEMWISE.POSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOSDESCNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_ITEMWISE.POSDESCColumn)
        End Function
        
        Public Sub SetPOSDESCNull()
            Me(Me.tableVIEW_PARTY_ITEMWISE.POSDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspartydateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_ITEMWISE.partydateColumn)
        End Function
        
        Public Sub SetpartydateNull()
            Me(Me.tableVIEW_PARTY_ITEMWISE.partydateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsitemcodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_ITEMWISE.itemcodeColumn)
        End Function
        
        Public Sub SetitemcodeNull()
            Me(Me.tableVIEW_PARTY_ITEMWISE.itemcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsitemdescNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_ITEMWISE.itemdescColumn)
        End Function
        
        Public Sub SetitemdescNull()
            Me(Me.tableVIEW_PARTY_ITEMWISE.itemdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_ITEMWISE.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tableVIEW_PARTY_ITEMWISE.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_ITEMWISE.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tableVIEW_PARTY_ITEMWISE.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_ITEMWISE.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableVIEW_PARTY_ITEMWISE.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSERTAXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_ITEMWISE.SERTAXColumn)
        End Function
        
        Public Sub SetSERTAXNull()
            Me(Me.tableVIEW_PARTY_ITEMWISE.SERTAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_ITEMWISE.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tableVIEW_PARTY_ITEMWISE.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATEGORYNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_ITEMWISE.CATEGORYColumn)
        End Function
        
        Public Sub SetCATEGORYNull()
            Me(Me.tableVIEW_PARTY_ITEMWISE.CATEGORYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_ITEMWISE.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tableVIEW_PARTY_ITEMWISE.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_ITEMWISERowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_PARTY_ITEMWISERow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_PARTY_ITEMWISERow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_PARTY_ITEMWISERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_PENDINGBILL1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnpartydate As DataColumn
        
        Private columntax As DataColumn
        
        Private columnsertax As DataColumn
        
        Private columnamount As DataColumn
        
        Private columndiscount As DataColumn
        
        Private columntotalamount As DataColumn
        
        Private columnitemtotamount As DataColumn
        
        Private columnbanquethallamount As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnRECAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_PENDINGBILL1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property partydateColumn As DataColumn
            Get
                Return Me.columnpartydate
            End Get
        End Property
        
        Friend ReadOnly Property taxColumn As DataColumn
            Get
                Return Me.columntax
            End Get
        End Property
        
        Friend ReadOnly Property sertaxColumn As DataColumn
            Get
                Return Me.columnsertax
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property discountColumn As DataColumn
            Get
                Return Me.columndiscount
            End Get
        End Property
        
        Friend ReadOnly Property totalamountColumn As DataColumn
            Get
                Return Me.columntotalamount
            End Get
        End Property
        
        Friend ReadOnly Property itemtotamountColumn As DataColumn
            Get
                Return Me.columnitemtotamount
            End Get
        End Property
        
        Friend ReadOnly Property banquethallamountColumn As DataColumn
            Get
                Return Me.columnbanquethallamount
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property RECAMOUNTColumn As DataColumn
            Get
                Return Me.columnRECAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_PENDINGBILL1Row
            Get
                Return CType(Me.Rows(index),PARTY_PENDINGBILL1Row)
            End Get
        End Property
        
        Public Event PARTY_PENDINGBILL1RowChanged As PARTY_PENDINGBILL1RowChangeEventHandler
        
        Public Event PARTY_PENDINGBILL1RowChanging As PARTY_PENDINGBILL1RowChangeEventHandler
        
        Public Event PARTY_PENDINGBILL1RowDeleted As PARTY_PENDINGBILL1RowChangeEventHandler
        
        Public Event PARTY_PENDINGBILL1RowDeleting As PARTY_PENDINGBILL1RowChangeEventHandler
        
        Public Overloads Sub AddPARTY_PENDINGBILL1Row(ByVal row As PARTY_PENDINGBILL1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_PENDINGBILL1Row(ByVal BOOKINGNO As Decimal, ByVal BOOKINGDATE As Date, ByVal partydate As Date, ByVal tax As Decimal, ByVal sertax As Decimal, ByVal amount As Decimal, ByVal discount As Decimal, ByVal totalamount As Decimal, ByVal itemtotamount As Decimal, ByVal banquethallamount As Decimal, ByVal MCODE As String, ByVal ASSOCIATENAME As String, ByVal RECAMOUNT As Decimal) As PARTY_PENDINGBILL1Row
            Dim rowPARTY_PENDINGBILL1Row As PARTY_PENDINGBILL1Row = CType(Me.NewRow,PARTY_PENDINGBILL1Row)
            rowPARTY_PENDINGBILL1Row.ItemArray = New Object() {BOOKINGNO, BOOKINGDATE, partydate, tax, sertax, amount, discount, totalamount, itemtotamount, banquethallamount, MCODE, ASSOCIATENAME, RECAMOUNT}
            Me.Rows.Add(rowPARTY_PENDINGBILL1Row)
            Return rowPARTY_PENDINGBILL1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_PENDINGBILL1DataTable = CType(MyBase.Clone,PARTY_PENDINGBILL1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_PENDINGBILL1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnpartydate = Me.Columns("partydate")
            Me.columntax = Me.Columns("tax")
            Me.columnsertax = Me.Columns("sertax")
            Me.columnamount = Me.Columns("amount")
            Me.columndiscount = Me.Columns("discount")
            Me.columntotalamount = Me.Columns("totalamount")
            Me.columnitemtotamount = Me.Columns("itemtotamount")
            Me.columnbanquethallamount = Me.Columns("banquethallamount")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnRECAMOUNT = Me.Columns("RECAMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnpartydate = New DataColumn("partydate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpartydate)
            Me.columntax = New DataColumn("tax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntax)
            Me.columnsertax = New DataColumn("sertax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsertax)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columndiscount = New DataColumn("discount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscount)
            Me.columntotalamount = New DataColumn("totalamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotalamount)
            Me.columnitemtotamount = New DataColumn("itemtotamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemtotamount)
            Me.columnbanquethallamount = New DataColumn("banquethallamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbanquethallamount)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnRECAMOUNT = New DataColumn("RECAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECAMOUNT)
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columndiscount.AllowDBNull = false
            Me.columnbanquethallamount.AllowDBNull = false
        End Sub
        
        Public Function NewPARTY_PENDINGBILL1Row() As PARTY_PENDINGBILL1Row
            Return CType(Me.NewRow,PARTY_PENDINGBILL1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_PENDINGBILL1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_PENDINGBILL1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_PENDINGBILL1RowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_PENDINGBILL1RowChanged(Me, New PARTY_PENDINGBILL1RowChangeEvent(CType(e.Row,PARTY_PENDINGBILL1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_PENDINGBILL1RowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_PENDINGBILL1RowChanging(Me, New PARTY_PENDINGBILL1RowChangeEvent(CType(e.Row,PARTY_PENDINGBILL1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_PENDINGBILL1RowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_PENDINGBILL1RowDeleted(Me, New PARTY_PENDINGBILL1RowChangeEvent(CType(e.Row,PARTY_PENDINGBILL1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_PENDINGBILL1RowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_PENDINGBILL1RowDeleting(Me, New PARTY_PENDINGBILL1RowChangeEvent(CType(e.Row,PARTY_PENDINGBILL1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_PENDINGBILL1Row(ByVal row As PARTY_PENDINGBILL1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_PENDINGBILL1Row
        Inherits DataRow
        
        Private tablePARTY_PENDINGBILL1 As PARTY_PENDINGBILL1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_PENDINGBILL1 = CType(Me.Table,PARTY_PENDINGBILL1DataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePARTY_PENDINGBILL1.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL1.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL1.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL1.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property partydate As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL1.partydateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL1.partydateColumn) = value
            End Set
        End Property
        
        Public Property tax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL1.taxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL1.taxColumn) = value
            End Set
        End Property
        
        Public Property sertax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL1.sertaxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL1.sertaxColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL1.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL1.amountColumn) = value
            End Set
        End Property
        
        Public Property discount As Decimal
            Get
                Return CType(Me(Me.tablePARTY_PENDINGBILL1.discountColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL1.discountColumn) = value
            End Set
        End Property
        
        Public Property totalamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL1.totalamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL1.totalamountColumn) = value
            End Set
        End Property
        
        Public Property itemtotamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL1.itemtotamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL1.itemtotamountColumn) = value
            End Set
        End Property
        
        Public Property banquethallamount As Decimal
            Get
                Return CType(Me(Me.tablePARTY_PENDINGBILL1.banquethallamountColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL1.banquethallamountColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL1.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL1.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL1.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL1.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property RECAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL1.RECAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL1.RECAMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL1.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_PENDINGBILL1.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspartydateNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL1.partydateColumn)
        End Function
        
        Public Sub SetpartydateNull()
            Me(Me.tablePARTY_PENDINGBILL1.partydateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL1.taxColumn)
        End Function
        
        Public Sub SettaxNull()
            Me(Me.tablePARTY_PENDINGBILL1.taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssertaxNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL1.sertaxColumn)
        End Function
        
        Public Sub SetsertaxNull()
            Me(Me.tablePARTY_PENDINGBILL1.sertaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL1.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tablePARTY_PENDINGBILL1.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotalamountNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL1.totalamountColumn)
        End Function
        
        Public Sub SettotalamountNull()
            Me(Me.tablePARTY_PENDINGBILL1.totalamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsitemtotamountNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL1.itemtotamountColumn)
        End Function
        
        Public Sub SetitemtotamountNull()
            Me(Me.tablePARTY_PENDINGBILL1.itemtotamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL1.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_PENDINGBILL1.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL1.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tablePARTY_PENDINGBILL1.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL1.RECAMOUNTColumn)
        End Function
        
        Public Sub SetRECAMOUNTNull()
            Me(Me.tablePARTY_PENDINGBILL1.RECAMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_PENDINGBILL1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_PENDINGBILL1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_PENDINGBILL1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_PENDINGBILL1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RECEIPTREPORTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnPARTYRECEIPTNO As DataColumn
        
        Private columnPARTYRECEIPTDATE As DataColumn
        
        Private columnadduserid As DataColumn
        
        Private columnRECEIPTTYPE As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnReceiptheaddesc As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_RECEIPTREPORT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTNOColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTTYPEColumn As DataColumn
            Get
                Return Me.columnRECEIPTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheaddescColumn As DataColumn
            Get
                Return Me.columnReceiptheaddesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_RECEIPTREPORTRow
            Get
                Return CType(Me.Rows(index),PARTY_RECEIPTREPORTRow)
            End Get
        End Property
        
        Public Event PARTY_RECEIPTREPORTRowChanged As PARTY_RECEIPTREPORTRowChangeEventHandler
        
        Public Event PARTY_RECEIPTREPORTRowChanging As PARTY_RECEIPTREPORTRowChangeEventHandler
        
        Public Event PARTY_RECEIPTREPORTRowDeleted As PARTY_RECEIPTREPORTRowChangeEventHandler
        
        Public Event PARTY_RECEIPTREPORTRowDeleting As PARTY_RECEIPTREPORTRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_RECEIPTREPORTRow(ByVal row As PARTY_RECEIPTREPORTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_RECEIPTREPORTRow(ByVal BOOKINGNO As Decimal, ByVal AMOUNT As Decimal, ByVal PARTYRECEIPTNO As String, ByVal PARTYRECEIPTDATE As Date, ByVal adduserid As String, ByVal RECEIPTTYPE As String, ByVal PAYMENTMODE As String, ByVal Receiptheaddesc As String) As PARTY_RECEIPTREPORTRow
            Dim rowPARTY_RECEIPTREPORTRow As PARTY_RECEIPTREPORTRow = CType(Me.NewRow,PARTY_RECEIPTREPORTRow)
            rowPARTY_RECEIPTREPORTRow.ItemArray = New Object() {BOOKINGNO, AMOUNT, PARTYRECEIPTNO, PARTYRECEIPTDATE, adduserid, RECEIPTTYPE, PAYMENTMODE, Receiptheaddesc}
            Me.Rows.Add(rowPARTY_RECEIPTREPORTRow)
            Return rowPARTY_RECEIPTREPORTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_RECEIPTREPORTDataTable = CType(MyBase.Clone,PARTY_RECEIPTREPORTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_RECEIPTREPORTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnPARTYRECEIPTNO = Me.Columns("PARTYRECEIPTNO")
            Me.columnPARTYRECEIPTDATE = Me.Columns("PARTYRECEIPTDATE")
            Me.columnadduserid = Me.Columns("adduserid")
            Me.columnRECEIPTTYPE = Me.Columns("RECEIPTTYPE")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnReceiptheaddesc = Me.Columns("Receiptheaddesc")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnPARTYRECEIPTNO = New DataColumn("PARTYRECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTNO)
            Me.columnPARTYRECEIPTDATE = New DataColumn("PARTYRECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTDATE)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
            Me.columnRECEIPTTYPE = New DataColumn("RECEIPTTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTTYPE)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnReceiptheaddesc = New DataColumn("Receiptheaddesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheaddesc)
        End Sub
        
        Public Function NewPARTY_RECEIPTREPORTRow() As PARTY_RECEIPTREPORTRow
            Return CType(Me.NewRow,PARTY_RECEIPTREPORTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_RECEIPTREPORTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_RECEIPTREPORTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_RECEIPTREPORTRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_RECEIPTREPORTRowChanged(Me, New PARTY_RECEIPTREPORTRowChangeEvent(CType(e.Row,PARTY_RECEIPTREPORTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_RECEIPTREPORTRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_RECEIPTREPORTRowChanging(Me, New PARTY_RECEIPTREPORTRowChangeEvent(CType(e.Row,PARTY_RECEIPTREPORTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_RECEIPTREPORTRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_RECEIPTREPORTRowDeleted(Me, New PARTY_RECEIPTREPORTRowChangeEvent(CType(e.Row,PARTY_RECEIPTREPORTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_RECEIPTREPORTRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_RECEIPTREPORTRowDeleting(Me, New PARTY_RECEIPTREPORTRowChangeEvent(CType(e.Row,PARTY_RECEIPTREPORTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_RECEIPTREPORTRow(ByVal row As PARTY_RECEIPTREPORTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RECEIPTREPORTRow
        Inherits DataRow
        
        Private tablePARTY_RECEIPTREPORT As PARTY_RECEIPTREPORTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_RECEIPTREPORT = CType(Me.Table,PARTY_RECEIPTREPORTDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.adduseridColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.RECEIPTTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.RECEIPTTYPEColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.PAYMENTMODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property Receiptheaddesc As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.ReceiptheaddescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.ReceiptheaddescColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_RECEIPTREPORT.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_RECEIPTREPORT.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTNOColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTNONull()
            Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTDATEColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTDATENull()
            Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tablePARTY_RECEIPTREPORT.adduseridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.RECEIPTTYPEColumn)
        End Function
        
        Public Sub SetRECEIPTTYPENull()
            Me(Me.tablePARTY_RECEIPTREPORT.RECEIPTTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYMENTMODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.PAYMENTMODEColumn)
        End Function
        
        Public Sub SetPAYMENTMODENull()
            Me(Me.tablePARTY_RECEIPTREPORT.PAYMENTMODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheaddescNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.ReceiptheaddescColumn)
        End Function
        
        Public Sub SetReceiptheaddescNull()
            Me(Me.tablePARTY_RECEIPTREPORT.ReceiptheaddescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RECEIPTREPORTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_RECEIPTREPORTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_RECEIPTREPORTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_RECEIPTREPORTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
