'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset2
    Inherits DataSet
    
    Private tablePAR_TARIFF As PAR_TARIFFDataTable
    
    Private tablePAR_RECEIPTS As PAR_RECEIPTSDataTable
    
    Private tablePAR_ADDITIONALITEMS As PAR_ADDITIONALITEMSDataTable
    
    Private tablePAR_ARRANGEMENT As PAR_ARRANGEMENTDataTable
    
    Private tablePAR_HALLBOOKING As PAR_HALLBOOKINGDataTable
    
    Private tablePAR_HDR As PAR_HDRDataTable
    
    Private tablePAR_CONSUMPTION As PAR_CONSUMPTIONDataTable
    
    Private tablePARTY_VIEW_BOOKDETAILS As PARTY_VIEW_BOOKDETAILSDataTable
    
    Private tablePRA_ITEM As PRA_ITEMDataTable
    
    Private tablePARTY_PENDINGBILL As PARTY_PENDINGBILLDataTable
    
    Private tablePARTY_MENU_LIST As PARTY_MENU_LISTDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PAR_TARIFF")) Is Nothing) Then
                Me.Tables.Add(New PAR_TARIFFDataTable(ds.Tables("PAR_TARIFF")))
            End If
            If (Not (ds.Tables("PAR_RECEIPTS")) Is Nothing) Then
                Me.Tables.Add(New PAR_RECEIPTSDataTable(ds.Tables("PAR_RECEIPTS")))
            End If
            If (Not (ds.Tables("PAR_ADDITIONALITEMS")) Is Nothing) Then
                Me.Tables.Add(New PAR_ADDITIONALITEMSDataTable(ds.Tables("PAR_ADDITIONALITEMS")))
            End If
            If (Not (ds.Tables("PAR_ARRANGEMENT")) Is Nothing) Then
                Me.Tables.Add(New PAR_ARRANGEMENTDataTable(ds.Tables("PAR_ARRANGEMENT")))
            End If
            If (Not (ds.Tables("PAR_HALLBOOKING")) Is Nothing) Then
                Me.Tables.Add(New PAR_HALLBOOKINGDataTable(ds.Tables("PAR_HALLBOOKING")))
            End If
            If (Not (ds.Tables("PAR_HDR")) Is Nothing) Then
                Me.Tables.Add(New PAR_HDRDataTable(ds.Tables("PAR_HDR")))
            End If
            If (Not (ds.Tables("PAR_CONSUMPTION")) Is Nothing) Then
                Me.Tables.Add(New PAR_CONSUMPTIONDataTable(ds.Tables("PAR_CONSUMPTION")))
            End If
            If (Not (ds.Tables("PARTY_VIEW_BOOKDETAILS")) Is Nothing) Then
                Me.Tables.Add(New PARTY_VIEW_BOOKDETAILSDataTable(ds.Tables("PARTY_VIEW_BOOKDETAILS")))
            End If
            If (Not (ds.Tables("PRA_ITEM")) Is Nothing) Then
                Me.Tables.Add(New PRA_ITEMDataTable(ds.Tables("PRA_ITEM")))
            End If
            If (Not (ds.Tables("PARTY_PENDINGBILL")) Is Nothing) Then
                Me.Tables.Add(New PARTY_PENDINGBILLDataTable(ds.Tables("PARTY_PENDINGBILL")))
            End If
            If (Not (ds.Tables("PARTY_MENU_LIST")) Is Nothing) Then
                Me.Tables.Add(New PARTY_MENU_LISTDataTable(ds.Tables("PARTY_MENU_LIST")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PAR_TARIFF As PAR_TARIFFDataTable
        Get
            Return Me.tablePAR_TARIFF
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PAR_RECEIPTS As PAR_RECEIPTSDataTable
        Get
            Return Me.tablePAR_RECEIPTS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PAR_ADDITIONALITEMS As PAR_ADDITIONALITEMSDataTable
        Get
            Return Me.tablePAR_ADDITIONALITEMS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PAR_ARRANGEMENT As PAR_ARRANGEMENTDataTable
        Get
            Return Me.tablePAR_ARRANGEMENT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PAR_HALLBOOKING As PAR_HALLBOOKINGDataTable
        Get
            Return Me.tablePAR_HALLBOOKING
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PAR_HDR As PAR_HDRDataTable
        Get
            Return Me.tablePAR_HDR
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PAR_CONSUMPTION As PAR_CONSUMPTIONDataTable
        Get
            Return Me.tablePAR_CONSUMPTION
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_VIEW_BOOKDETAILS As PARTY_VIEW_BOOKDETAILSDataTable
        Get
            Return Me.tablePARTY_VIEW_BOOKDETAILS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRA_ITEM As PRA_ITEMDataTable
        Get
            Return Me.tablePRA_ITEM
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_PENDINGBILL As PARTY_PENDINGBILLDataTable
        Get
            Return Me.tablePARTY_PENDINGBILL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_MENU_LIST As PARTY_MENU_LISTDataTable
        Get
            Return Me.tablePARTY_MENU_LIST
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset2 = CType(MyBase.Clone,Dataset2)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("PAR_TARIFF")) Is Nothing) Then
            Me.Tables.Add(New PAR_TARIFFDataTable(ds.Tables("PAR_TARIFF")))
        End If
        If (Not (ds.Tables("PAR_RECEIPTS")) Is Nothing) Then
            Me.Tables.Add(New PAR_RECEIPTSDataTable(ds.Tables("PAR_RECEIPTS")))
        End If
        If (Not (ds.Tables("PAR_ADDITIONALITEMS")) Is Nothing) Then
            Me.Tables.Add(New PAR_ADDITIONALITEMSDataTable(ds.Tables("PAR_ADDITIONALITEMS")))
        End If
        If (Not (ds.Tables("PAR_ARRANGEMENT")) Is Nothing) Then
            Me.Tables.Add(New PAR_ARRANGEMENTDataTable(ds.Tables("PAR_ARRANGEMENT")))
        End If
        If (Not (ds.Tables("PAR_HALLBOOKING")) Is Nothing) Then
            Me.Tables.Add(New PAR_HALLBOOKINGDataTable(ds.Tables("PAR_HALLBOOKING")))
        End If
        If (Not (ds.Tables("PAR_HDR")) Is Nothing) Then
            Me.Tables.Add(New PAR_HDRDataTable(ds.Tables("PAR_HDR")))
        End If
        If (Not (ds.Tables("PAR_CONSUMPTION")) Is Nothing) Then
            Me.Tables.Add(New PAR_CONSUMPTIONDataTable(ds.Tables("PAR_CONSUMPTION")))
        End If
        If (Not (ds.Tables("PARTY_VIEW_BOOKDETAILS")) Is Nothing) Then
            Me.Tables.Add(New PARTY_VIEW_BOOKDETAILSDataTable(ds.Tables("PARTY_VIEW_BOOKDETAILS")))
        End If
        If (Not (ds.Tables("PRA_ITEM")) Is Nothing) Then
            Me.Tables.Add(New PRA_ITEMDataTable(ds.Tables("PRA_ITEM")))
        End If
        If (Not (ds.Tables("PARTY_PENDINGBILL")) Is Nothing) Then
            Me.Tables.Add(New PARTY_PENDINGBILLDataTable(ds.Tables("PARTY_PENDINGBILL")))
        End If
        If (Not (ds.Tables("PARTY_MENU_LIST")) Is Nothing) Then
            Me.Tables.Add(New PARTY_MENU_LISTDataTable(ds.Tables("PARTY_MENU_LIST")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePAR_TARIFF = CType(Me.Tables("PAR_TARIFF"),PAR_TARIFFDataTable)
        If (Not (Me.tablePAR_TARIFF) Is Nothing) Then
            Me.tablePAR_TARIFF.InitVars
        End If
        Me.tablePAR_RECEIPTS = CType(Me.Tables("PAR_RECEIPTS"),PAR_RECEIPTSDataTable)
        If (Not (Me.tablePAR_RECEIPTS) Is Nothing) Then
            Me.tablePAR_RECEIPTS.InitVars
        End If
        Me.tablePAR_ADDITIONALITEMS = CType(Me.Tables("PAR_ADDITIONALITEMS"),PAR_ADDITIONALITEMSDataTable)
        If (Not (Me.tablePAR_ADDITIONALITEMS) Is Nothing) Then
            Me.tablePAR_ADDITIONALITEMS.InitVars
        End If
        Me.tablePAR_ARRANGEMENT = CType(Me.Tables("PAR_ARRANGEMENT"),PAR_ARRANGEMENTDataTable)
        If (Not (Me.tablePAR_ARRANGEMENT) Is Nothing) Then
            Me.tablePAR_ARRANGEMENT.InitVars
        End If
        Me.tablePAR_HALLBOOKING = CType(Me.Tables("PAR_HALLBOOKING"),PAR_HALLBOOKINGDataTable)
        If (Not (Me.tablePAR_HALLBOOKING) Is Nothing) Then
            Me.tablePAR_HALLBOOKING.InitVars
        End If
        Me.tablePAR_HDR = CType(Me.Tables("PAR_HDR"),PAR_HDRDataTable)
        If (Not (Me.tablePAR_HDR) Is Nothing) Then
            Me.tablePAR_HDR.InitVars
        End If
        Me.tablePAR_CONSUMPTION = CType(Me.Tables("PAR_CONSUMPTION"),PAR_CONSUMPTIONDataTable)
        If (Not (Me.tablePAR_CONSUMPTION) Is Nothing) Then
            Me.tablePAR_CONSUMPTION.InitVars
        End If
        Me.tablePARTY_VIEW_BOOKDETAILS = CType(Me.Tables("PARTY_VIEW_BOOKDETAILS"),PARTY_VIEW_BOOKDETAILSDataTable)
        If (Not (Me.tablePARTY_VIEW_BOOKDETAILS) Is Nothing) Then
            Me.tablePARTY_VIEW_BOOKDETAILS.InitVars
        End If
        Me.tablePRA_ITEM = CType(Me.Tables("PRA_ITEM"),PRA_ITEMDataTable)
        If (Not (Me.tablePRA_ITEM) Is Nothing) Then
            Me.tablePRA_ITEM.InitVars
        End If
        Me.tablePARTY_PENDINGBILL = CType(Me.Tables("PARTY_PENDINGBILL"),PARTY_PENDINGBILLDataTable)
        If (Not (Me.tablePARTY_PENDINGBILL) Is Nothing) Then
            Me.tablePARTY_PENDINGBILL.InitVars
        End If
        Me.tablePARTY_MENU_LIST = CType(Me.Tables("PARTY_MENU_LIST"),PARTY_MENU_LISTDataTable)
        If (Not (Me.tablePARTY_MENU_LIST) Is Nothing) Then
            Me.tablePARTY_MENU_LIST.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset2"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset2.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePAR_TARIFF = New PAR_TARIFFDataTable
        Me.Tables.Add(Me.tablePAR_TARIFF)
        Me.tablePAR_RECEIPTS = New PAR_RECEIPTSDataTable
        Me.Tables.Add(Me.tablePAR_RECEIPTS)
        Me.tablePAR_ADDITIONALITEMS = New PAR_ADDITIONALITEMSDataTable
        Me.Tables.Add(Me.tablePAR_ADDITIONALITEMS)
        Me.tablePAR_ARRANGEMENT = New PAR_ARRANGEMENTDataTable
        Me.Tables.Add(Me.tablePAR_ARRANGEMENT)
        Me.tablePAR_HALLBOOKING = New PAR_HALLBOOKINGDataTable
        Me.Tables.Add(Me.tablePAR_HALLBOOKING)
        Me.tablePAR_HDR = New PAR_HDRDataTable
        Me.Tables.Add(Me.tablePAR_HDR)
        Me.tablePAR_CONSUMPTION = New PAR_CONSUMPTIONDataTable
        Me.Tables.Add(Me.tablePAR_CONSUMPTION)
        Me.tablePARTY_VIEW_BOOKDETAILS = New PARTY_VIEW_BOOKDETAILSDataTable
        Me.Tables.Add(Me.tablePARTY_VIEW_BOOKDETAILS)
        Me.tablePRA_ITEM = New PRA_ITEMDataTable
        Me.Tables.Add(Me.tablePRA_ITEM)
        Me.tablePARTY_PENDINGBILL = New PARTY_PENDINGBILLDataTable
        Me.Tables.Add(Me.tablePARTY_PENDINGBILL)
        Me.tablePARTY_MENU_LIST = New PARTY_MENU_LISTDataTable
        Me.Tables.Add(Me.tablePARTY_MENU_LIST)
    End Sub
    
    Private Function ShouldSerializePAR_TARIFF() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePAR_RECEIPTS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePAR_ADDITIONALITEMS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePAR_ARRANGEMENT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePAR_HALLBOOKING() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePAR_HDR() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePAR_CONSUMPTION() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_VIEW_BOOKDETAILS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePRA_ITEM() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_PENDINGBILL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_MENU_LIST() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PAR_TARIFFRowChangeEventHandler(ByVal sender As Object, ByVal e As PAR_TARIFFRowChangeEvent)
    
    Public Delegate Sub PAR_RECEIPTSRowChangeEventHandler(ByVal sender As Object, ByVal e As PAR_RECEIPTSRowChangeEvent)
    
    Public Delegate Sub PAR_ADDITIONALITEMSRowChangeEventHandler(ByVal sender As Object, ByVal e As PAR_ADDITIONALITEMSRowChangeEvent)
    
    Public Delegate Sub PAR_ARRANGEMENTRowChangeEventHandler(ByVal sender As Object, ByVal e As PAR_ARRANGEMENTRowChangeEvent)
    
    Public Delegate Sub PAR_HALLBOOKINGRowChangeEventHandler(ByVal sender As Object, ByVal e As PAR_HALLBOOKINGRowChangeEvent)
    
    Public Delegate Sub PAR_HDRRowChangeEventHandler(ByVal sender As Object, ByVal e As PAR_HDRRowChangeEvent)
    
    Public Delegate Sub PAR_CONSUMPTIONRowChangeEventHandler(ByVal sender As Object, ByVal e As PAR_CONSUMPTIONRowChangeEvent)
    
    Public Delegate Sub PARTY_VIEW_BOOKDETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_VIEW_BOOKDETAILSRowChangeEvent)
    
    Public Delegate Sub PRA_ITEMRowChangeEventHandler(ByVal sender As Object, ByVal e As PRA_ITEMRowChangeEvent)
    
    Public Delegate Sub PARTY_PENDINGBILLRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_PENDINGBILLRowChangeEvent)
    
    Public Delegate Sub PARTY_MENU_LISTRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_MENU_LISTRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_TARIFFDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnTARIFFCODE As DataColumn
        
        Private columnCATEGORY As DataColumn
        
        Private columnPAX As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnTAXCODE As DataColumn
        
        Private columnTAXPERCENTAGE As DataColumn
        
        Private columnTARIFFAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("PAR_TARIFF")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFCODEColumn As DataColumn
            Get
                Return Me.columnTARIFFCODE
            End Get
        End Property
        
        Friend ReadOnly Property CATEGORYColumn As DataColumn
            Get
                Return Me.columnCATEGORY
            End Get
        End Property
        
        Friend ReadOnly Property PAXColumn As DataColumn
            Get
                Return Me.columnPAX
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property TAXCODEColumn As DataColumn
            Get
                Return Me.columnTAXCODE
            End Get
        End Property
        
        Friend ReadOnly Property TAXPERCENTAGEColumn As DataColumn
            Get
                Return Me.columnTAXPERCENTAGE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnTARIFFAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PAR_TARIFFRow
            Get
                Return CType(Me.Rows(index),PAR_TARIFFRow)
            End Get
        End Property
        
        Public Event PAR_TARIFFRowChanged As PAR_TARIFFRowChangeEventHandler
        
        Public Event PAR_TARIFFRowChanging As PAR_TARIFFRowChangeEventHandler
        
        Public Event PAR_TARIFFRowDeleted As PAR_TARIFFRowChangeEventHandler
        
        Public Event PAR_TARIFFRowDeleting As PAR_TARIFFRowChangeEventHandler
        
        Public Overloads Sub AddPAR_TARIFFRow(ByVal row As PAR_TARIFFRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPAR_TARIFFRow(ByVal BOOKINGNO As Decimal, ByVal TARIFFCODE As String, ByVal CATEGORY As String, ByVal PAX As Decimal, ByVal RATE As Decimal, ByVal TAXCODE As String, ByVal TAXPERCENTAGE As Double, ByVal TARIFFAMOUNT As Decimal) As PAR_TARIFFRow
            Dim rowPAR_TARIFFRow As PAR_TARIFFRow = CType(Me.NewRow,PAR_TARIFFRow)
            rowPAR_TARIFFRow.ItemArray = New Object() {BOOKINGNO, TARIFFCODE, CATEGORY, PAX, RATE, TAXCODE, TAXPERCENTAGE, TARIFFAMOUNT}
            Me.Rows.Add(rowPAR_TARIFFRow)
            Return rowPAR_TARIFFRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PAR_TARIFFDataTable = CType(MyBase.Clone,PAR_TARIFFDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PAR_TARIFFDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnTARIFFCODE = Me.Columns("TARIFFCODE")
            Me.columnCATEGORY = Me.Columns("CATEGORY")
            Me.columnPAX = Me.Columns("PAX")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnTAXCODE = Me.Columns("TAXCODE")
            Me.columnTAXPERCENTAGE = Me.Columns("TAXPERCENTAGE")
            Me.columnTARIFFAMOUNT = Me.Columns("TARIFFAMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnTARIFFCODE = New DataColumn("TARIFFCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFCODE)
            Me.columnCATEGORY = New DataColumn("CATEGORY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATEGORY)
            Me.columnPAX = New DataColumn("PAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAX)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnTAXCODE = New DataColumn("TAXCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXCODE)
            Me.columnTAXPERCENTAGE = New DataColumn("TAXPERCENTAGE", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXPERCENTAGE)
            Me.columnTARIFFAMOUNT = New DataColumn("TARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFAMOUNT)
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnPAX.ReadOnly = true
            Me.columnTARIFFAMOUNT.ReadOnly = true
        End Sub
        
        Public Function NewPAR_TARIFFRow() As PAR_TARIFFRow
            Return CType(Me.NewRow,PAR_TARIFFRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PAR_TARIFFRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PAR_TARIFFRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PAR_TARIFFRowChangedEvent) Is Nothing) Then
                RaiseEvent PAR_TARIFFRowChanged(Me, New PAR_TARIFFRowChangeEvent(CType(e.Row,PAR_TARIFFRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PAR_TARIFFRowChangingEvent) Is Nothing) Then
                RaiseEvent PAR_TARIFFRowChanging(Me, New PAR_TARIFFRowChangeEvent(CType(e.Row,PAR_TARIFFRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PAR_TARIFFRowDeletedEvent) Is Nothing) Then
                RaiseEvent PAR_TARIFFRowDeleted(Me, New PAR_TARIFFRowChangeEvent(CType(e.Row,PAR_TARIFFRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PAR_TARIFFRowDeletingEvent) Is Nothing) Then
                RaiseEvent PAR_TARIFFRowDeleting(Me, New PAR_TARIFFRowChangeEvent(CType(e.Row,PAR_TARIFFRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePAR_TARIFFRow(ByVal row As PAR_TARIFFRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_TARIFFRow
        Inherits DataRow
        
        Private tablePAR_TARIFF As PAR_TARIFFDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePAR_TARIFF = CType(Me.Table,PAR_TARIFFDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePAR_TARIFF.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePAR_TARIFF.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property TARIFFCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_TARIFF.TARIFFCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_TARIFF.TARIFFCODEColumn) = value
            End Set
        End Property
        
        Public Property CATEGORY As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_TARIFF.CATEGORYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_TARIFF.CATEGORYColumn) = value
            End Set
        End Property
        
        Public Property PAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_TARIFF.PAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_TARIFF.PAXColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_TARIFF.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_TARIFF.RATEColumn) = value
            End Set
        End Property
        
        Public Property TAXCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_TARIFF.TAXCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_TARIFF.TAXCODEColumn) = value
            End Set
        End Property
        
        Public Property TAXPERCENTAGE As Double
            Get
                Try 
                    Return CType(Me(Me.tablePAR_TARIFF.TAXPERCENTAGEColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_TARIFF.TAXPERCENTAGEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_TARIFF.TARIFFAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_TARIFF.TARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsTARIFFCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_TARIFF.TARIFFCODEColumn)
        End Function
        
        Public Sub SetTARIFFCODENull()
            Me(Me.tablePAR_TARIFF.TARIFFCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATEGORYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_TARIFF.CATEGORYColumn)
        End Function
        
        Public Sub SetCATEGORYNull()
            Me(Me.tablePAR_TARIFF.CATEGORYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAXNull() As Boolean
            Return Me.IsNull(Me.tablePAR_TARIFF.PAXColumn)
        End Function
        
        Public Sub SetPAXNull()
            Me(Me.tablePAR_TARIFF.PAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_TARIFF.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePAR_TARIFF.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_TARIFF.TAXCODEColumn)
        End Function
        
        Public Sub SetTAXCODENull()
            Me(Me.tablePAR_TARIFF.TAXCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXPERCENTAGENull() As Boolean
            Return Me.IsNull(Me.tablePAR_TARIFF.TAXPERCENTAGEColumn)
        End Function
        
        Public Sub SetTAXPERCENTAGENull()
            Me(Me.tablePAR_TARIFF.TAXPERCENTAGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_TARIFF.TARIFFAMOUNTColumn)
        End Function
        
        Public Sub SetTARIFFAMOUNTNull()
            Me(Me.tablePAR_TARIFF.TARIFFAMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_TARIFFRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PAR_TARIFFRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PAR_TARIFFRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PAR_TARIFFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_RECEIPTSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnRECEIPTNO As DataColumn
        
        Private columnRECEIPTDATE As DataColumn
        
        Private columnAMOUNTTYPE As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnadddatetime As DataColumn
        
        Private columnadduserid As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Friend Sub New()
            MyBase.New("PAR_RECEIPTS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTNOColumn As DataColumn
            Get
                Return Me.columnRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTTYPEColumn As DataColumn
            Get
                Return Me.columnAMOUNTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property adddatetimeColumn As DataColumn
            Get
                Return Me.columnadddatetime
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PAR_RECEIPTSRow
            Get
                Return CType(Me.Rows(index),PAR_RECEIPTSRow)
            End Get
        End Property
        
        Public Event PAR_RECEIPTSRowChanged As PAR_RECEIPTSRowChangeEventHandler
        
        Public Event PAR_RECEIPTSRowChanging As PAR_RECEIPTSRowChangeEventHandler
        
        Public Event PAR_RECEIPTSRowDeleted As PAR_RECEIPTSRowChangeEventHandler
        
        Public Event PAR_RECEIPTSRowDeleting As PAR_RECEIPTSRowChangeEventHandler
        
        Public Overloads Sub AddPAR_RECEIPTSRow(ByVal row As PAR_RECEIPTSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPAR_RECEIPTSRow(ByVal BOOKINGNO As Decimal, ByVal RECEIPTNO As String, ByVal RECEIPTDATE As Date, ByVal AMOUNTTYPE As String, ByVal freeze As String, ByVal adddatetime As Date, ByVal adduserid As String, ByVal AMOUNT As Decimal, ByVal LOCCODE As String) As PAR_RECEIPTSRow
            Dim rowPAR_RECEIPTSRow As PAR_RECEIPTSRow = CType(Me.NewRow,PAR_RECEIPTSRow)
            rowPAR_RECEIPTSRow.ItemArray = New Object() {BOOKINGNO, RECEIPTNO, RECEIPTDATE, AMOUNTTYPE, freeze, adddatetime, adduserid, AMOUNT, LOCCODE}
            Me.Rows.Add(rowPAR_RECEIPTSRow)
            Return rowPAR_RECEIPTSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PAR_RECEIPTSDataTable = CType(MyBase.Clone,PAR_RECEIPTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PAR_RECEIPTSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnRECEIPTNO = Me.Columns("RECEIPTNO")
            Me.columnRECEIPTDATE = Me.Columns("RECEIPTDATE")
            Me.columnAMOUNTTYPE = Me.Columns("AMOUNTTYPE")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnadddatetime = Me.Columns("adddatetime")
            Me.columnadduserid = Me.Columns("adduserid")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnRECEIPTNO = New DataColumn("RECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTNO)
            Me.columnRECEIPTDATE = New DataColumn("RECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTDATE)
            Me.columnAMOUNTTYPE = New DataColumn("AMOUNTTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNTTYPE)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnadddatetime = New DataColumn("adddatetime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddatetime)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
        End Sub
        
        Public Function NewPAR_RECEIPTSRow() As PAR_RECEIPTSRow
            Return CType(Me.NewRow,PAR_RECEIPTSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PAR_RECEIPTSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PAR_RECEIPTSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PAR_RECEIPTSRowChangedEvent) Is Nothing) Then
                RaiseEvent PAR_RECEIPTSRowChanged(Me, New PAR_RECEIPTSRowChangeEvent(CType(e.Row,PAR_RECEIPTSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PAR_RECEIPTSRowChangingEvent) Is Nothing) Then
                RaiseEvent PAR_RECEIPTSRowChanging(Me, New PAR_RECEIPTSRowChangeEvent(CType(e.Row,PAR_RECEIPTSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PAR_RECEIPTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PAR_RECEIPTSRowDeleted(Me, New PAR_RECEIPTSRowChangeEvent(CType(e.Row,PAR_RECEIPTSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PAR_RECEIPTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PAR_RECEIPTSRowDeleting(Me, New PAR_RECEIPTSRowChangeEvent(CType(e.Row,PAR_RECEIPTSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePAR_RECEIPTSRow(ByVal row As PAR_RECEIPTSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_RECEIPTSRow
        Inherits DataRow
        
        Private tablePAR_RECEIPTS As PAR_RECEIPTSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePAR_RECEIPTS = CType(Me.Table,PAR_RECEIPTSDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.RECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.RECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.RECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.RECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNTTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.AMOUNTTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.AMOUNTTYPEColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.freezeColumn) = value
            End Set
        End Property
        
        Public Property adddatetime As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.adddatetimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.adddatetimeColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.adduseridColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePAR_RECEIPTS.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.RECEIPTNOColumn)
        End Function
        
        Public Sub SetRECEIPTNONull()
            Me(Me.tablePAR_RECEIPTS.RECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.RECEIPTDATEColumn)
        End Function
        
        Public Sub SetRECEIPTDATENull()
            Me(Me.tablePAR_RECEIPTS.RECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.AMOUNTTYPEColumn)
        End Function
        
        Public Sub SetAMOUNTTYPENull()
            Me(Me.tablePAR_RECEIPTS.AMOUNTTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tablePAR_RECEIPTS.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddatetimeNull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.adddatetimeColumn)
        End Function
        
        Public Sub SetadddatetimeNull()
            Me(Me.tablePAR_RECEIPTS.adddatetimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tablePAR_RECEIPTS.adduseridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePAR_RECEIPTS.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePAR_RECEIPTS.LOCCODEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_RECEIPTSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PAR_RECEIPTSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PAR_RECEIPTSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PAR_RECEIPTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_ADDITIONALITEMSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnROWID As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnTTYPE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnROUNDOFF As DataColumn
        
        Private columnTAXPERC As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnCANCELAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Private columnGROUPCODE As DataColumn
        
        Private columnMENUCODE As DataColumn
        
        Private columnTARIFFCODE As DataColumn
        
        Private columnMAXITEMS As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnCHITNO As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Friend Sub New()
            MyBase.New("PAR_ADDITIONALITEMS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ROWIDColumn As DataColumn
            Get
                Return Me.columnROWID
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property TTYPEColumn As DataColumn
            Get
                Return Me.columnTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property ROUNDOFFColumn As DataColumn
            Get
                Return Me.columnROUNDOFF
            End Get
        End Property
        
        Friend ReadOnly Property TAXPERCColumn As DataColumn
            Get
                Return Me.columnTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property CANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property GROUPCODEColumn As DataColumn
            Get
                Return Me.columnGROUPCODE
            End Get
        End Property
        
        Friend ReadOnly Property MENUCODEColumn As DataColumn
            Get
                Return Me.columnMENUCODE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFCODEColumn As DataColumn
            Get
                Return Me.columnTARIFFCODE
            End Get
        End Property
        
        Friend ReadOnly Property MAXITEMSColumn As DataColumn
            Get
                Return Me.columnMAXITEMS
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property CHITNOColumn As DataColumn
            Get
                Return Me.columnCHITNO
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PAR_ADDITIONALITEMSRow
            Get
                Return CType(Me.Rows(index),PAR_ADDITIONALITEMSRow)
            End Get
        End Property
        
        Public Event PAR_ADDITIONALITEMSRowChanged As PAR_ADDITIONALITEMSRowChangeEventHandler
        
        Public Event PAR_ADDITIONALITEMSRowChanging As PAR_ADDITIONALITEMSRowChangeEventHandler
        
        Public Event PAR_ADDITIONALITEMSRowDeleted As PAR_ADDITIONALITEMSRowChangeEventHandler
        
        Public Event PAR_ADDITIONALITEMSRowDeleting As PAR_ADDITIONALITEMSRowChangeEventHandler
        
        Public Overloads Sub AddPAR_ADDITIONALITEMSRow(ByVal row As PAR_ADDITIONALITEMSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPAR_ADDITIONALITEMSRow( _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal TTYPE As String,  _
                    ByVal ITEMCODE As String,  _
                    ByVal RATE As Decimal,  _
                    ByVal QTY As Decimal,  _
                    ByVal ROUNDOFF As Decimal,  _
                    ByVal TAXPERC As Decimal,  _
                    ByVal TAXAMOUNT As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal CANCELAMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal ADDUSERID As String,  _
                    ByVal ADDDATETIME As Date,  _
                    ByVal GROUPCODE As String,  _
                    ByVal MENUCODE As String,  _
                    ByVal TARIFFCODE As String,  _
                    ByVal MAXITEMS As Decimal,  _
                    ByVal LOCCODE As String,  _
                    ByVal CHITNO As String,  _
                    ByVal ITEMDESC As String) As PAR_ADDITIONALITEMSRow
            Dim rowPAR_ADDITIONALITEMSRow As PAR_ADDITIONALITEMSRow = CType(Me.NewRow,PAR_ADDITIONALITEMSRow)
            rowPAR_ADDITIONALITEMSRow.ItemArray = New Object() {Nothing, BOOKINGNO, BOOKINGTYPE, BOOKINGDATE, TTYPE, ITEMCODE, RATE, QTY, ROUNDOFF, TAXPERC, TAXAMOUNT, AMOUNT, TOTALAMOUNT, CANCELAMOUNT, FREEZE, ADDUSERID, ADDDATETIME, GROUPCODE, MENUCODE, TARIFFCODE, MAXITEMS, LOCCODE, CHITNO, ITEMDESC}
            Me.Rows.Add(rowPAR_ADDITIONALITEMSRow)
            Return rowPAR_ADDITIONALITEMSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PAR_ADDITIONALITEMSDataTable = CType(MyBase.Clone,PAR_ADDITIONALITEMSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PAR_ADDITIONALITEMSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnROWID = Me.Columns("ROWID")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnTTYPE = Me.Columns("TTYPE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnROUNDOFF = Me.Columns("ROUNDOFF")
            Me.columnTAXPERC = Me.Columns("TAXPERC")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnCANCELAMOUNT = Me.Columns("CANCELAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
            Me.columnGROUPCODE = Me.Columns("GROUPCODE")
            Me.columnMENUCODE = Me.Columns("MENUCODE")
            Me.columnTARIFFCODE = Me.Columns("TARIFFCODE")
            Me.columnMAXITEMS = Me.Columns("MAXITEMS")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnCHITNO = Me.Columns("CHITNO")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
        End Sub
        
        Private Sub InitClass()
            Me.columnROWID = New DataColumn("ROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROWID)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnTTYPE = New DataColumn("TTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTYPE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnROUNDOFF = New DataColumn("ROUNDOFF", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROUNDOFF)
            Me.columnTAXPERC = New DataColumn("TAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXPERC)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnCANCELAMOUNT = New DataColumn("CANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnGROUPCODE = New DataColumn("GROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPCODE)
            Me.columnMENUCODE = New DataColumn("MENUCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMENUCODE)
            Me.columnTARIFFCODE = New DataColumn("TARIFFCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFCODE)
            Me.columnMAXITEMS = New DataColumn("MAXITEMS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMAXITEMS)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnCHITNO = New DataColumn("CHITNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHITNO)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columnROWID.AutoIncrement = true
            Me.columnROWID.AllowDBNull = false
            Me.columnROWID.ReadOnly = true
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnBOOKINGTYPE.AllowDBNull = false
            Me.columnITEMCODE.AllowDBNull = false
        End Sub
        
        Public Function NewPAR_ADDITIONALITEMSRow() As PAR_ADDITIONALITEMSRow
            Return CType(Me.NewRow,PAR_ADDITIONALITEMSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PAR_ADDITIONALITEMSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PAR_ADDITIONALITEMSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PAR_ADDITIONALITEMSRowChangedEvent) Is Nothing) Then
                RaiseEvent PAR_ADDITIONALITEMSRowChanged(Me, New PAR_ADDITIONALITEMSRowChangeEvent(CType(e.Row,PAR_ADDITIONALITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PAR_ADDITIONALITEMSRowChangingEvent) Is Nothing) Then
                RaiseEvent PAR_ADDITIONALITEMSRowChanging(Me, New PAR_ADDITIONALITEMSRowChangeEvent(CType(e.Row,PAR_ADDITIONALITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PAR_ADDITIONALITEMSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PAR_ADDITIONALITEMSRowDeleted(Me, New PAR_ADDITIONALITEMSRowChangeEvent(CType(e.Row,PAR_ADDITIONALITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PAR_ADDITIONALITEMSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PAR_ADDITIONALITEMSRowDeleting(Me, New PAR_ADDITIONALITEMSRowChangeEvent(CType(e.Row,PAR_ADDITIONALITEMSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePAR_ADDITIONALITEMSRow(ByVal row As PAR_ADDITIONALITEMSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_ADDITIONALITEMSRow
        Inherits DataRow
        
        Private tablePAR_ADDITIONALITEMS As PAR_ADDITIONALITEMSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePAR_ADDITIONALITEMS = CType(Me.Table,PAR_ADDITIONALITEMSDataTable)
        End Sub
        
        Public Property ROWID As Decimal
            Get
                Return CType(Me(Me.tablePAR_ADDITIONALITEMS.ROWIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.ROWIDColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePAR_ADDITIONALITEMS.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Return CType(Me(Me.tablePAR_ADDITIONALITEMS.BOOKINGTYPEColumn),String)
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property TTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.TTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.TTYPEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tablePAR_ADDITIONALITEMS.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.RATEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.QTYColumn) = value
            End Set
        End Property
        
        Public Property ROUNDOFF As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.ROUNDOFFColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.ROUNDOFFColumn) = value
            End Set
        End Property
        
        Public Property TAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.TAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.TAXPERCColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property CANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.CANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.CANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property GROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.GROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.GROUPCODEColumn) = value
            End Set
        End Property
        
        Public Property MENUCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.MENUCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.MENUCODEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.TARIFFCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.TARIFFCODEColumn) = value
            End Set
        End Property
        
        Public Property MAXITEMS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.MAXITEMSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.MAXITEMSColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property CHITNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.CHITNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.CHITNOColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePAR_ADDITIONALITEMS.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.TTYPEColumn)
        End Function
        
        Public Sub SetTTYPENull()
            Me(Me.tablePAR_ADDITIONALITEMS.TTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePAR_ADDITIONALITEMS.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tablePAR_ADDITIONALITEMS.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsROUNDOFFNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.ROUNDOFFColumn)
        End Function
        
        Public Sub SetROUNDOFFNull()
            Me(Me.tablePAR_ADDITIONALITEMS.ROUNDOFFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.TAXPERCColumn)
        End Function
        
        Public Sub SetTAXPERCNull()
            Me(Me.tablePAR_ADDITIONALITEMS.TAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tablePAR_ADDITIONALITEMS.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePAR_ADDITIONALITEMS.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePAR_ADDITIONALITEMS.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.CANCELAMOUNTColumn)
        End Function
        
        Public Sub SetCANCELAMOUNTNull()
            Me(Me.tablePAR_ADDITIONALITEMS.CANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePAR_ADDITIONALITEMS.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tablePAR_ADDITIONALITEMS.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablePAR_ADDITIONALITEMS.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.GROUPCODEColumn)
        End Function
        
        Public Sub SetGROUPCODENull()
            Me(Me.tablePAR_ADDITIONALITEMS.GROUPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMENUCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.MENUCODEColumn)
        End Function
        
        Public Sub SetMENUCODENull()
            Me(Me.tablePAR_ADDITIONALITEMS.MENUCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.TARIFFCODEColumn)
        End Function
        
        Public Sub SetTARIFFCODENull()
            Me(Me.tablePAR_ADDITIONALITEMS.TARIFFCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMAXITEMSNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.MAXITEMSColumn)
        End Function
        
        Public Sub SetMAXITEMSNull()
            Me(Me.tablePAR_ADDITIONALITEMS.MAXITEMSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePAR_ADDITIONALITEMS.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHITNONull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.CHITNOColumn)
        End Function
        
        Public Sub SetCHITNONull()
            Me(Me.tablePAR_ADDITIONALITEMS.CHITNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tablePAR_ADDITIONALITEMS.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_ADDITIONALITEMSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PAR_ADDITIONALITEMSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PAR_ADDITIONALITEMSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PAR_ADDITIONALITEMSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_ARRANGEMENTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnROWID As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnTAXPERC As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnROUNDOFF As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Private columnCANCELAMOUNT As DataColumn
        
        Private columnGLACCODE As DataColumn
        
        Private columnGLCCODE As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnARRDESCRIPTION As DataColumn
        
        Friend Sub New()
            MyBase.New("PAR_ARRANGEMENT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ROWIDColumn As DataColumn
            Get
                Return Me.columnROWID
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property TAXPERCColumn As DataColumn
            Get
                Return Me.columnTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ROUNDOFFColumn As DataColumn
            Get
                Return Me.columnROUNDOFF
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property CANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property GLACCODEColumn As DataColumn
            Get
                Return Me.columnGLACCODE
            End Get
        End Property
        
        Friend ReadOnly Property GLCCODEColumn As DataColumn
            Get
                Return Me.columnGLCCODE
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property ARRDESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnARRDESCRIPTION
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PAR_ARRANGEMENTRow
            Get
                Return CType(Me.Rows(index),PAR_ARRANGEMENTRow)
            End Get
        End Property
        
        Public Event PAR_ARRANGEMENTRowChanged As PAR_ARRANGEMENTRowChangeEventHandler
        
        Public Event PAR_ARRANGEMENTRowChanging As PAR_ARRANGEMENTRowChangeEventHandler
        
        Public Event PAR_ARRANGEMENTRowDeleted As PAR_ARRANGEMENTRowChangeEventHandler
        
        Public Event PAR_ARRANGEMENTRowDeleting As PAR_ARRANGEMENTRowChangeEventHandler
        
        Public Overloads Sub AddPAR_ARRANGEMENTRow(ByVal row As PAR_ARRANGEMENTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPAR_ARRANGEMENTRow( _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal ITEMCODE As String,  _
                    ByVal QTY As Decimal,  _
                    ByVal RATE As Decimal,  _
                    ByVal TAXPERC As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal TAXAMOUNT As Decimal,  _
                    ByVal ROUNDOFF As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal ADDUSERID As String,  _
                    ByVal ADDDATETIME As Date,  _
                    ByVal CANCELAMOUNT As Decimal,  _
                    ByVal GLACCODE As String,  _
                    ByVal GLCCODE As String,  _
                    ByVal LOCCODE As String,  _
                    ByVal ARRDESCRIPTION As String) As PAR_ARRANGEMENTRow
            Dim rowPAR_ARRANGEMENTRow As PAR_ARRANGEMENTRow = CType(Me.NewRow,PAR_ARRANGEMENTRow)
            rowPAR_ARRANGEMENTRow.ItemArray = New Object() {Nothing, BOOKINGTYPE, BOOKINGNO, BOOKINGDATE, ITEMCODE, QTY, RATE, TAXPERC, AMOUNT, TAXAMOUNT, ROUNDOFF, TOTALAMOUNT, FREEZE, ADDUSERID, ADDDATETIME, CANCELAMOUNT, GLACCODE, GLCCODE, LOCCODE, ARRDESCRIPTION}
            Me.Rows.Add(rowPAR_ARRANGEMENTRow)
            Return rowPAR_ARRANGEMENTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PAR_ARRANGEMENTDataTable = CType(MyBase.Clone,PAR_ARRANGEMENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PAR_ARRANGEMENTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnROWID = Me.Columns("ROWID")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnTAXPERC = Me.Columns("TAXPERC")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnROUNDOFF = Me.Columns("ROUNDOFF")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
            Me.columnCANCELAMOUNT = Me.Columns("CANCELAMOUNT")
            Me.columnGLACCODE = Me.Columns("GLACCODE")
            Me.columnGLCCODE = Me.Columns("GLCCODE")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnARRDESCRIPTION = Me.Columns("ARRDESCRIPTION")
        End Sub
        
        Private Sub InitClass()
            Me.columnROWID = New DataColumn("ROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROWID)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnTAXPERC = New DataColumn("TAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXPERC)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnROUNDOFF = New DataColumn("ROUNDOFF", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROUNDOFF)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnCANCELAMOUNT = New DataColumn("CANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELAMOUNT)
            Me.columnGLACCODE = New DataColumn("GLACCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCODE)
            Me.columnGLCCODE = New DataColumn("GLCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLCCODE)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnARRDESCRIPTION = New DataColumn("ARRDESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRDESCRIPTION)
            Me.columnROWID.AutoIncrement = true
            Me.columnROWID.AllowDBNull = false
            Me.columnROWID.ReadOnly = true
            Me.columnITEMCODE.AllowDBNull = false
        End Sub
        
        Public Function NewPAR_ARRANGEMENTRow() As PAR_ARRANGEMENTRow
            Return CType(Me.NewRow,PAR_ARRANGEMENTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PAR_ARRANGEMENTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PAR_ARRANGEMENTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PAR_ARRANGEMENTRowChangedEvent) Is Nothing) Then
                RaiseEvent PAR_ARRANGEMENTRowChanged(Me, New PAR_ARRANGEMENTRowChangeEvent(CType(e.Row,PAR_ARRANGEMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PAR_ARRANGEMENTRowChangingEvent) Is Nothing) Then
                RaiseEvent PAR_ARRANGEMENTRowChanging(Me, New PAR_ARRANGEMENTRowChangeEvent(CType(e.Row,PAR_ARRANGEMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PAR_ARRANGEMENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent PAR_ARRANGEMENTRowDeleted(Me, New PAR_ARRANGEMENTRowChangeEvent(CType(e.Row,PAR_ARRANGEMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PAR_ARRANGEMENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent PAR_ARRANGEMENTRowDeleting(Me, New PAR_ARRANGEMENTRowChangeEvent(CType(e.Row,PAR_ARRANGEMENTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePAR_ARRANGEMENTRow(ByVal row As PAR_ARRANGEMENTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_ARRANGEMENTRow
        Inherits DataRow
        
        Private tablePAR_ARRANGEMENT As PAR_ARRANGEMENTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePAR_ARRANGEMENT = CType(Me.Table,PAR_ARRANGEMENTDataTable)
        End Sub
        
        Public Property ROWID As Decimal
            Get
                Return CType(Me(Me.tablePAR_ARRANGEMENT.ROWIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.ROWIDColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.BOOKINGTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tablePAR_ARRANGEMENT.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.QTYColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.RATEColumn) = value
            End Set
        End Property
        
        Public Property TAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.TAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.TAXPERCColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ROUNDOFF As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.ROUNDOFFColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.ROUNDOFFColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property CANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.CANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.CANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property GLACCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.GLACCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.GLACCODEColumn) = value
            End Set
        End Property
        
        Public Property GLCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.GLCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.GLCCODEColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property ARRDESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.ARRDESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.ARRDESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGTYPENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.BOOKINGTYPEColumn)
        End Function
        
        Public Sub SetBOOKINGTYPENull()
            Me(Me.tablePAR_ARRANGEMENT.BOOKINGTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePAR_ARRANGEMENT.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePAR_ARRANGEMENT.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tablePAR_ARRANGEMENT.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePAR_ARRANGEMENT.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.TAXPERCColumn)
        End Function
        
        Public Sub SetTAXPERCNull()
            Me(Me.tablePAR_ARRANGEMENT.TAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePAR_ARRANGEMENT.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tablePAR_ARRANGEMENT.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsROUNDOFFNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.ROUNDOFFColumn)
        End Function
        
        Public Sub SetROUNDOFFNull()
            Me(Me.tablePAR_ARRANGEMENT.ROUNDOFFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePAR_ARRANGEMENT.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePAR_ARRANGEMENT.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tablePAR_ARRANGEMENT.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablePAR_ARRANGEMENT.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.CANCELAMOUNTColumn)
        End Function
        
        Public Sub SetCANCELAMOUNTNull()
            Me(Me.tablePAR_ARRANGEMENT.CANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.GLACCODEColumn)
        End Function
        
        Public Sub SetGLACCODENull()
            Me(Me.tablePAR_ARRANGEMENT.GLACCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLCCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.GLCCODEColumn)
        End Function
        
        Public Sub SetGLCCODENull()
            Me(Me.tablePAR_ARRANGEMENT.GLCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePAR_ARRANGEMENT.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.ARRDESCRIPTIONColumn)
        End Function
        
        Public Sub SetARRDESCRIPTIONNull()
            Me(Me.tablePAR_ARRANGEMENT.ARRDESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_ARRANGEMENTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PAR_ARRANGEMENTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PAR_ARRANGEMENTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PAR_ARRANGEMENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_HALLBOOKINGDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnROWID As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnHALLTYPE As DataColumn
        
        Private columnTARIFFCODE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnFROMTIME As DataColumn
        
        Private columnTOTIME As DataColumn
        
        Private columnHALLAMOUNT As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnHALLTAXAMOUNT As DataColumn
        
        Private columnHALLTAXPERC As DataColumn
        
        Private columnHALLNETAMOUNT As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnVoid As DataColumn
        
        Private columnHALLDESC As DataColumn
        
        Friend Sub New()
            MyBase.New("PAR_HALLBOOKING")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ROWIDColumn As DataColumn
            Get
                Return Me.columnROWID
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property HALLTYPEColumn As DataColumn
            Get
                Return Me.columnHALLTYPE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFCODEColumn As DataColumn
            Get
                Return Me.columnTARIFFCODE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property FROMTIMEColumn As DataColumn
            Get
                Return Me.columnFROMTIME
            End Get
        End Property
        
        Friend ReadOnly Property TOTIMEColumn As DataColumn
            Get
                Return Me.columnTOTIME
            End Get
        End Property
        
        Friend ReadOnly Property HALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXPERCColumn As DataColumn
            Get
                Return Me.columnHALLTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property HALLNETAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLNETAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property VoidColumn As DataColumn
            Get
                Return Me.columnVoid
            End Get
        End Property
        
        Friend ReadOnly Property HALLDESCColumn As DataColumn
            Get
                Return Me.columnHALLDESC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PAR_HALLBOOKINGRow
            Get
                Return CType(Me.Rows(index),PAR_HALLBOOKINGRow)
            End Get
        End Property
        
        Public Event PAR_HALLBOOKINGRowChanged As PAR_HALLBOOKINGRowChangeEventHandler
        
        Public Event PAR_HALLBOOKINGRowChanging As PAR_HALLBOOKINGRowChangeEventHandler
        
        Public Event PAR_HALLBOOKINGRowDeleted As PAR_HALLBOOKINGRowChangeEventHandler
        
        Public Event PAR_HALLBOOKINGRowDeleting As PAR_HALLBOOKINGRowChangeEventHandler
        
        Public Overloads Sub AddPAR_HALLBOOKINGRow(ByVal row As PAR_HALLBOOKINGRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPAR_HALLBOOKINGRow( _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal HALLCODE As String,  _
                    ByVal HALLTYPE As String,  _
                    ByVal TARIFFCODE As String,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal FROMTIME As Decimal,  _
                    ByVal TOTIME As Decimal,  _
                    ByVal HALLAMOUNT As Decimal,  _
                    ByVal ADDDATETIME As Date,  _
                    ByVal ADDUSERID As String,  _
                    ByVal FREEZE As String,  _
                    ByVal HALLTAXAMOUNT As Decimal,  _
                    ByVal HALLTAXPERC As Decimal,  _
                    ByVal HALLNETAMOUNT As Decimal,  _
                    ByVal LOCCODE As String,  _
                    ByVal Void As String,  _
                    ByVal HALLDESC As String) As PAR_HALLBOOKINGRow
            Dim rowPAR_HALLBOOKINGRow As PAR_HALLBOOKINGRow = CType(Me.NewRow,PAR_HALLBOOKINGRow)
            rowPAR_HALLBOOKINGRow.ItemArray = New Object() {Nothing, BOOKINGNO, HALLCODE, HALLTYPE, TARIFFCODE, PARTYDATE, FROMTIME, TOTIME, HALLAMOUNT, ADDDATETIME, ADDUSERID, FREEZE, HALLTAXAMOUNT, HALLTAXPERC, HALLNETAMOUNT, LOCCODE, Void, HALLDESC}
            Me.Rows.Add(rowPAR_HALLBOOKINGRow)
            Return rowPAR_HALLBOOKINGRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PAR_HALLBOOKINGDataTable = CType(MyBase.Clone,PAR_HALLBOOKINGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PAR_HALLBOOKINGDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnROWID = Me.Columns("ROWID")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnHALLTYPE = Me.Columns("HALLTYPE")
            Me.columnTARIFFCODE = Me.Columns("TARIFFCODE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnFROMTIME = Me.Columns("FROMTIME")
            Me.columnTOTIME = Me.Columns("TOTIME")
            Me.columnHALLAMOUNT = Me.Columns("HALLAMOUNT")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnHALLTAXAMOUNT = Me.Columns("HALLTAXAMOUNT")
            Me.columnHALLTAXPERC = Me.Columns("HALLTAXPERC")
            Me.columnHALLNETAMOUNT = Me.Columns("HALLNETAMOUNT")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnVoid = Me.Columns("Void")
            Me.columnHALLDESC = Me.Columns("HALLDESC")
        End Sub
        
        Private Sub InitClass()
            Me.columnROWID = New DataColumn("ROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROWID)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnHALLTYPE = New DataColumn("HALLTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTYPE)
            Me.columnTARIFFCODE = New DataColumn("TARIFFCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFCODE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnFROMTIME = New DataColumn("FROMTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMTIME)
            Me.columnTOTIME = New DataColumn("TOTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTIME)
            Me.columnHALLAMOUNT = New DataColumn("HALLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLAMOUNT)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnHALLTAXAMOUNT = New DataColumn("HALLTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXAMOUNT)
            Me.columnHALLTAXPERC = New DataColumn("HALLTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXPERC)
            Me.columnHALLNETAMOUNT = New DataColumn("HALLNETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLNETAMOUNT)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnVoid = New DataColumn("Void", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVoid)
            Me.columnHALLDESC = New DataColumn("HALLDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLDESC)
            Me.columnROWID.AutoIncrement = true
            Me.columnROWID.AllowDBNull = false
            Me.columnROWID.ReadOnly = true
            Me.columnBOOKINGNO.AllowDBNull = false
        End Sub
        
        Public Function NewPAR_HALLBOOKINGRow() As PAR_HALLBOOKINGRow
            Return CType(Me.NewRow,PAR_HALLBOOKINGRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PAR_HALLBOOKINGRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PAR_HALLBOOKINGRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PAR_HALLBOOKINGRowChangedEvent) Is Nothing) Then
                RaiseEvent PAR_HALLBOOKINGRowChanged(Me, New PAR_HALLBOOKINGRowChangeEvent(CType(e.Row,PAR_HALLBOOKINGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PAR_HALLBOOKINGRowChangingEvent) Is Nothing) Then
                RaiseEvent PAR_HALLBOOKINGRowChanging(Me, New PAR_HALLBOOKINGRowChangeEvent(CType(e.Row,PAR_HALLBOOKINGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PAR_HALLBOOKINGRowDeletedEvent) Is Nothing) Then
                RaiseEvent PAR_HALLBOOKINGRowDeleted(Me, New PAR_HALLBOOKINGRowChangeEvent(CType(e.Row,PAR_HALLBOOKINGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PAR_HALLBOOKINGRowDeletingEvent) Is Nothing) Then
                RaiseEvent PAR_HALLBOOKINGRowDeleting(Me, New PAR_HALLBOOKINGRowChangeEvent(CType(e.Row,PAR_HALLBOOKINGRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePAR_HALLBOOKINGRow(ByVal row As PAR_HALLBOOKINGRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_HALLBOOKINGRow
        Inherits DataRow
        
        Private tablePAR_HALLBOOKING As PAR_HALLBOOKINGDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePAR_HALLBOOKING = CType(Me.Table,PAR_HALLBOOKINGDataTable)
        End Sub
        
        Public Property ROWID As Decimal
            Get
                Return CType(Me(Me.tablePAR_HALLBOOKING.ROWIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.ROWIDColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePAR_HALLBOOKING.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property HALLTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.HALLTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.HALLTYPEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.TARIFFCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.TARIFFCODEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property FROMTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.FROMTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.FROMTIMEColumn) = value
            End Set
        End Property
        
        Public Property TOTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.TOTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.TOTIMEColumn) = value
            End Set
        End Property
        
        Public Property HALLAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.HALLAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.HALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.HALLTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.HALLTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.HALLTAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.HALLTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property HALLNETAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.HALLNETAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.HALLNETAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property Void As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.VoidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.VoidColumn) = value
            End Set
        End Property
        
        Public Property HALLDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.HALLDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.HALLDESCColumn) = value
            End Set
        End Property
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablePAR_HALLBOOKING.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.HALLTYPEColumn)
        End Function
        
        Public Sub SetHALLTYPENull()
            Me(Me.tablePAR_HALLBOOKING.HALLTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.TARIFFCODEColumn)
        End Function
        
        Public Sub SetTARIFFCODENull()
            Me(Me.tablePAR_HALLBOOKING.TARIFFCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePAR_HALLBOOKING.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMTIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.FROMTIMEColumn)
        End Function
        
        Public Sub SetFROMTIMENull()
            Me(Me.tablePAR_HALLBOOKING.FROMTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.TOTIMEColumn)
        End Function
        
        Public Sub SetTOTIMENull()
            Me(Me.tablePAR_HALLBOOKING.TOTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.HALLAMOUNTColumn)
        End Function
        
        Public Sub SetHALLAMOUNTNull()
            Me(Me.tablePAR_HALLBOOKING.HALLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablePAR_HALLBOOKING.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tablePAR_HALLBOOKING.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePAR_HALLBOOKING.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.HALLTAXAMOUNTColumn)
        End Function
        
        Public Sub SetHALLTAXAMOUNTNull()
            Me(Me.tablePAR_HALLBOOKING.HALLTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.HALLTAXPERCColumn)
        End Function
        
        Public Sub SetHALLTAXPERCNull()
            Me(Me.tablePAR_HALLBOOKING.HALLTAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLNETAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.HALLNETAMOUNTColumn)
        End Function
        
        Public Sub SetHALLNETAMOUNTNull()
            Me(Me.tablePAR_HALLBOOKING.HALLNETAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePAR_HALLBOOKING.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVoidNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.VoidColumn)
        End Function
        
        Public Sub SetVoidNull()
            Me(Me.tablePAR_HALLBOOKING.VoidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLDESCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.HALLDESCColumn)
        End Function
        
        Public Sub SetHALLDESCNull()
            Me(Me.tablePAR_HALLBOOKING.HALLDESCColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_HALLBOOKINGRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PAR_HALLBOOKINGRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PAR_HALLBOOKINGRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PAR_HALLBOOKINGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_HDRDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnROWID As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnFROMTIME As DataColumn
        
        Private columnTOTIME As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnHALLTAXFLAG As DataColumn
        
        Private columnADVANCE As DataColumn
        
        Private columnHALLAMOUNT As DataColumn
        
        Private columnHALLTAXPERC As DataColumn
        
        Private columnHALLTAXAMOUNT As DataColumn
        
        Private columnBOOKINGTARIFFAMOUNT As DataColumn
        
        Private columnEXCESSTARIFFAMOUNT As DataColumn
        
        Private columnRESTAMOUNT As DataColumn
        
        Private columnRESTTAXAMOUNT As DataColumn
        
        Private columnARRMENTAMOUNT As DataColumn
        
        Private columnARRMENTTAXAMOUNT As DataColumn
        
        Private columnRECEIPTNO As DataColumn
        
        Private columnRECEIPTDATE As DataColumn
        
        Private columnHALLCANCELAMOUNT As DataColumn
        
        Private columnRESCANCELAMOUNT As DataColumn
        
        Private columnARRCANCELAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnFROMHRS As DataColumn
        
        Private columnTOHRS As DataColumn
        
        Private columnCANCELDATE As DataColumn
        
        Private columnNETPAYABLE As DataColumn
        
        Private columnSBFCHARGE As DataColumn
        
        Private columnTARIFFTAXAMOUNT As DataColumn
        
        Private columnBOOKINGOCCUPANCY As DataColumn
        
        Private columnBILLINGOCCUPANCY As DataColumn
        
        Private columnABOOKINGOCCUPANCY As DataColumn
        
        Private columnABILLINGOCCUPANCY As DataColumn
        
        Private columnALLOWEDOCCUPANCY As DataColumn
        
        Private columnDIFFOCCUPANCY As DataColumn
        
        Private columnhallamt As DataColumn
        
        Private columnhalltaxamt As DataColumn
        
        Private columnhallnetamt As DataColumn
        
        Private columnrcamt As DataColumn
        
        Private columnRESAMT As DataColumn
        
        Private columnRESTAXAMT As DataColumn
        
        Private columnRESTOTALAMT As DataColumn
        
        Private columnRESSBFAMT As DataColumn
        
        Private columnBARAMT As DataColumn
        
        Private columnBARTAXAMT As DataColumn
        
        Private columnBARTOTALAMT As DataColumn
        
        Private columnBARSBFAMT As DataColumn
        
        Private columnTARSBFCHARGE As DataColumn
        
        Private columnTRATE As DataColumn
        
        Private columnDRATE As DataColumn
        
        Private columnDIFFVALUE As DataColumn
        
        Private columnBOOKINGVALUE As DataColumn
        
        Private columnTARIFFVALUE As DataColumn
        
        Private columnTARIFFSBF As DataColumn
        
        Private columnTARIFFTAXAMT As DataColumn
        
        Private columnARRAMT As DataColumn
        
        Private columnARRTAXAMT As DataColumn
        
        Private columnARRTOTALAMT As DataColumn
        
        Private columnARRSBFAMT As DataColumn
        
        Private columnTAXTOTAL As DataColumn
        
        Private columnSTAX As DataColumn
        
        Private columnGROSSTOTAL As DataColumn
        
        Private columnNETTOTAL As DataColumn
        
        Private columntbillamount As DataColumn
        
        Private columnSBFTAX As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnCONT As DataColumn
        
        Private columnVAT As DataColumn
        
        Private columnINVOICENO As DataColumn
        
        Private columnveg As DataColumn
        
        Private columnnonveg As DataColumn
        
        Private columnVoid As DataColumn
        
        Private columnVEGRATE As DataColumn
        
        Private columnNONVEGRATE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnPADD1 As DataColumn
        
        Private columnVEGRATE1 As DataColumn
        
        Private columnNONVEGRATE1 As DataColumn
        
        Private columnVEGAMOUNT As DataColumn
        
        Private columnNONVEGAMOUNT As DataColumn
        
        Private columnTOTALTARIFFAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("PAR_HDR")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ROWIDColumn As DataColumn
            Get
                Return Me.columnROWID
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property FROMTIMEColumn As DataColumn
            Get
                Return Me.columnFROMTIME
            End Get
        End Property
        
        Friend ReadOnly Property TOTIMEColumn As DataColumn
            Get
                Return Me.columnTOTIME
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXFLAGColumn As DataColumn
            Get
                Return Me.columnHALLTAXFLAG
            End Get
        End Property
        
        Friend ReadOnly Property ADVANCEColumn As DataColumn
            Get
                Return Me.columnADVANCE
            End Get
        End Property
        
        Friend ReadOnly Property HALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXPERCColumn As DataColumn
            Get
                Return Me.columnHALLTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnBOOKINGTARIFFAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property EXCESSTARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnEXCESSTARIFFAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESTTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ARRMENTAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRMENTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ARRMENTTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRMENTTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTNOColumn As DataColumn
            Get
                Return Me.columnRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property HALLCANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESCANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ARRCANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property FROMHRSColumn As DataColumn
            Get
                Return Me.columnFROMHRS
            End Get
        End Property
        
        Friend ReadOnly Property TOHRSColumn As DataColumn
            Get
                Return Me.columnTOHRS
            End Get
        End Property
        
        Friend ReadOnly Property CANCELDATEColumn As DataColumn
            Get
                Return Me.columnCANCELDATE
            End Get
        End Property
        
        Friend ReadOnly Property NETPAYABLEColumn As DataColumn
            Get
                Return Me.columnNETPAYABLE
            End Get
        End Property
        
        Friend ReadOnly Property SBFCHARGEColumn As DataColumn
            Get
                Return Me.columnSBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTARIFFTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnBOOKINGOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property BILLINGOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnBILLINGOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property ABOOKINGOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnABOOKINGOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property ABILLINGOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnABILLINGOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property ALLOWEDOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnALLOWEDOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property DIFFOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnDIFFOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property hallamtColumn As DataColumn
            Get
                Return Me.columnhallamt
            End Get
        End Property
        
        Friend ReadOnly Property halltaxamtColumn As DataColumn
            Get
                Return Me.columnhalltaxamt
            End Get
        End Property
        
        Friend ReadOnly Property hallnetamtColumn As DataColumn
            Get
                Return Me.columnhallnetamt
            End Get
        End Property
        
        Friend ReadOnly Property rcamtColumn As DataColumn
            Get
                Return Me.columnrcamt
            End Get
        End Property
        
        Friend ReadOnly Property RESAMTColumn As DataColumn
            Get
                Return Me.columnRESAMT
            End Get
        End Property
        
        Friend ReadOnly Property RESTAXAMTColumn As DataColumn
            Get
                Return Me.columnRESTAXAMT
            End Get
        End Property
        
        Friend ReadOnly Property RESTOTALAMTColumn As DataColumn
            Get
                Return Me.columnRESTOTALAMT
            End Get
        End Property
        
        Friend ReadOnly Property RESSBFAMTColumn As DataColumn
            Get
                Return Me.columnRESSBFAMT
            End Get
        End Property
        
        Friend ReadOnly Property BARAMTColumn As DataColumn
            Get
                Return Me.columnBARAMT
            End Get
        End Property
        
        Friend ReadOnly Property BARTAXAMTColumn As DataColumn
            Get
                Return Me.columnBARTAXAMT
            End Get
        End Property
        
        Friend ReadOnly Property BARTOTALAMTColumn As DataColumn
            Get
                Return Me.columnBARTOTALAMT
            End Get
        End Property
        
        Friend ReadOnly Property BARSBFAMTColumn As DataColumn
            Get
                Return Me.columnBARSBFAMT
            End Get
        End Property
        
        Friend ReadOnly Property TARSBFCHARGEColumn As DataColumn
            Get
                Return Me.columnTARSBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property TRATEColumn As DataColumn
            Get
                Return Me.columnTRATE
            End Get
        End Property
        
        Friend ReadOnly Property DRATEColumn As DataColumn
            Get
                Return Me.columnDRATE
            End Get
        End Property
        
        Friend ReadOnly Property DIFFVALUEColumn As DataColumn
            Get
                Return Me.columnDIFFVALUE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGVALUEColumn As DataColumn
            Get
                Return Me.columnBOOKINGVALUE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFVALUEColumn As DataColumn
            Get
                Return Me.columnTARIFFVALUE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFSBFColumn As DataColumn
            Get
                Return Me.columnTARIFFSBF
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFTAXAMTColumn As DataColumn
            Get
                Return Me.columnTARIFFTAXAMT
            End Get
        End Property
        
        Friend ReadOnly Property ARRAMTColumn As DataColumn
            Get
                Return Me.columnARRAMT
            End Get
        End Property
        
        Friend ReadOnly Property ARRTAXAMTColumn As DataColumn
            Get
                Return Me.columnARRTAXAMT
            End Get
        End Property
        
        Friend ReadOnly Property ARRTOTALAMTColumn As DataColumn
            Get
                Return Me.columnARRTOTALAMT
            End Get
        End Property
        
        Friend ReadOnly Property ARRSBFAMTColumn As DataColumn
            Get
                Return Me.columnARRSBFAMT
            End Get
        End Property
        
        Friend ReadOnly Property TAXTOTALColumn As DataColumn
            Get
                Return Me.columnTAXTOTAL
            End Get
        End Property
        
        Friend ReadOnly Property STAXColumn As DataColumn
            Get
                Return Me.columnSTAX
            End Get
        End Property
        
        Friend ReadOnly Property GROSSTOTALColumn As DataColumn
            Get
                Return Me.columnGROSSTOTAL
            End Get
        End Property
        
        Friend ReadOnly Property NETTOTALColumn As DataColumn
            Get
                Return Me.columnNETTOTAL
            End Get
        End Property
        
        Friend ReadOnly Property tbillamountColumn As DataColumn
            Get
                Return Me.columntbillamount
            End Get
        End Property
        
        Friend ReadOnly Property SBFTAXColumn As DataColumn
            Get
                Return Me.columnSBFTAX
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property CONTColumn As DataColumn
            Get
                Return Me.columnCONT
            End Get
        End Property
        
        Friend ReadOnly Property VATColumn As DataColumn
            Get
                Return Me.columnVAT
            End Get
        End Property
        
        Friend ReadOnly Property INVOICENOColumn As DataColumn
            Get
                Return Me.columnINVOICENO
            End Get
        End Property
        
        Friend ReadOnly Property vegColumn As DataColumn
            Get
                Return Me.columnveg
            End Get
        End Property
        
        Friend ReadOnly Property nonvegColumn As DataColumn
            Get
                Return Me.columnnonveg
            End Get
        End Property
        
        Friend ReadOnly Property VoidColumn As DataColumn
            Get
                Return Me.columnVoid
            End Get
        End Property
        
        Friend ReadOnly Property VEGRATEColumn As DataColumn
            Get
                Return Me.columnVEGRATE
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGRATEColumn As DataColumn
            Get
                Return Me.columnNONVEGRATE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property PADD1Column As DataColumn
            Get
                Return Me.columnPADD1
            End Get
        End Property
        
        Friend ReadOnly Property VEGRATE1Column As DataColumn
            Get
                Return Me.columnVEGRATE1
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGRATE1Column As DataColumn
            Get
                Return Me.columnNONVEGRATE1
            End Get
        End Property
        
        Friend ReadOnly Property VEGAMOUNTColumn As DataColumn
            Get
                Return Me.columnVEGAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGAMOUNTColumn As DataColumn
            Get
                Return Me.columnNONVEGAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALTARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALTARIFFAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PAR_HDRRow
            Get
                Return CType(Me.Rows(index),PAR_HDRRow)
            End Get
        End Property
        
        Public Event PAR_HDRRowChanged As PAR_HDRRowChangeEventHandler
        
        Public Event PAR_HDRRowChanging As PAR_HDRRowChangeEventHandler
        
        Public Event PAR_HDRRowDeleted As PAR_HDRRowChangeEventHandler
        
        Public Event PAR_HDRRowDeleting As PAR_HDRRowChangeEventHandler
        
        Public Overloads Sub AddPAR_HDRRow(ByVal row As PAR_HDRRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPAR_HDRRow( _
                    ByVal ROWID As Decimal,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal FROMTIME As Decimal,  _
                    ByVal TOTIME As Decimal,  _
                    ByVal MCODE As String,  _
                    ByVal ASSOCIATENAME As String,  _
                    ByVal HALLCODE As String,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal HALLTAXFLAG As String,  _
                    ByVal ADVANCE As Decimal,  _
                    ByVal HALLAMOUNT As Decimal,  _
                    ByVal HALLTAXPERC As Decimal,  _
                    ByVal HALLTAXAMOUNT As Decimal,  _
                    ByVal BOOKINGTARIFFAMOUNT As Decimal,  _
                    ByVal EXCESSTARIFFAMOUNT As Decimal,  _
                    ByVal RESTAMOUNT As Decimal,  _
                    ByVal RESTTAXAMOUNT As Decimal,  _
                    ByVal ARRMENTAMOUNT As Decimal,  _
                    ByVal ARRMENTTAXAMOUNT As Decimal,  _
                    ByVal RECEIPTNO As String,  _
                    ByVal RECEIPTDATE As Date,  _
                    ByVal HALLCANCELAMOUNT As Decimal,  _
                    ByVal RESCANCELAMOUNT As Decimal,  _
                    ByVal ARRCANCELAMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal ADDDATETIME As Date,  _
                    ByVal ADDUSERID As String,  _
                    ByVal FROMHRS As Decimal,  _
                    ByVal TOHRS As Decimal,  _
                    ByVal CANCELDATE As Date,  _
                    ByVal NETPAYABLE As Decimal,  _
                    ByVal SBFCHARGE As Decimal,  _
                    ByVal TARIFFTAXAMOUNT As Decimal,  _
                    ByVal BOOKINGOCCUPANCY As Decimal,  _
                    ByVal BILLINGOCCUPANCY As Decimal,  _
                    ByVal ABOOKINGOCCUPANCY As Decimal,  _
                    ByVal ABILLINGOCCUPANCY As Decimal,  _
                    ByVal ALLOWEDOCCUPANCY As Decimal,  _
                    ByVal DIFFOCCUPANCY As Decimal,  _
                    ByVal hallamt As Decimal,  _
                    ByVal halltaxamt As Decimal,  _
                    ByVal hallnetamt As Decimal,  _
                    ByVal rcamt As Decimal,  _
                    ByVal RESAMT As Decimal,  _
                    ByVal RESTAXAMT As Decimal,  _
                    ByVal RESTOTALAMT As Decimal,  _
                    ByVal RESSBFAMT As Decimal,  _
                    ByVal BARAMT As Decimal,  _
                    ByVal BARTAXAMT As Decimal,  _
                    ByVal BARTOTALAMT As Decimal,  _
                    ByVal BARSBFAMT As Decimal,  _
                    ByVal TARSBFCHARGE As Decimal,  _
                    ByVal TRATE As Decimal,  _
                    ByVal DRATE As Decimal,  _
                    ByVal DIFFVALUE As Decimal,  _
                    ByVal BOOKINGVALUE As Decimal,  _
                    ByVal TARIFFVALUE As Decimal,  _
                    ByVal TARIFFSBF As Decimal,  _
                    ByVal TARIFFTAXAMT As Decimal,  _
                    ByVal ARRAMT As Decimal,  _
                    ByVal ARRTAXAMT As Decimal,  _
                    ByVal ARRTOTALAMT As Decimal,  _
                    ByVal ARRSBFAMT As Decimal,  _
                    ByVal TAXTOTAL As Decimal,  _
                    ByVal STAX As Decimal,  _
                    ByVal GROSSTOTAL As Decimal,  _
                    ByVal NETTOTAL As Decimal,  _
                    ByVal tbillamount As Decimal,  _
                    ByVal SBFTAX As Decimal,  _
                    ByVal LOCCODE As String,  _
                    ByVal CONT As Decimal,  _
                    ByVal VAT As Decimal,  _
                    ByVal INVOICENO As Decimal,  _
                    ByVal veg As Decimal,  _
                    ByVal nonveg As Decimal,  _
                    ByVal Void As String,  _
                    ByVal VEGRATE As Decimal,  _
                    ByVal NONVEGRATE As Decimal,  _
                    ByVal MNAME As String,  _
                    ByVal PADD1 As String,  _
                    ByVal VEGRATE1 As Decimal,  _
                    ByVal NONVEGRATE1 As Decimal,  _
                    ByVal VEGAMOUNT As Decimal,  _
                    ByVal NONVEGAMOUNT As Decimal,  _
                    ByVal TOTALTARIFFAMOUNT As Decimal) As PAR_HDRRow
            Dim rowPAR_HDRRow As PAR_HDRRow = CType(Me.NewRow,PAR_HDRRow)
            rowPAR_HDRRow.ItemArray = New Object() {ROWID, BOOKINGTYPE, BOOKINGNO, BOOKINGDATE, PARTYDATE, FROMTIME, TOTIME, MCODE, ASSOCIATENAME, HALLCODE, OCCUPANCY, DESCRIPTION, HALLTAXFLAG, ADVANCE, HALLAMOUNT, HALLTAXPERC, HALLTAXAMOUNT, BOOKINGTARIFFAMOUNT, EXCESSTARIFFAMOUNT, RESTAMOUNT, RESTTAXAMOUNT, ARRMENTAMOUNT, ARRMENTTAXAMOUNT, RECEIPTNO, RECEIPTDATE, HALLCANCELAMOUNT, RESCANCELAMOUNT, ARRCANCELAMOUNT, FREEZE, ADDDATETIME, ADDUSERID, FROMHRS, TOHRS, CANCELDATE, NETPAYABLE, SBFCHARGE, TARIFFTAXAMOUNT, BOOKINGOCCUPANCY, BILLINGOCCUPANCY, ABOOKINGOCCUPANCY, ABILLINGOCCUPANCY, ALLOWEDOCCUPANCY, DIFFOCCUPANCY, hallamt, halltaxamt, hallnetamt, rcamt, RESAMT, RESTAXAMT, RESTOTALAMT, RESSBFAMT, BARAMT, BARTAXAMT, BARTOTALAMT, BARSBFAMT, TARSBFCHARGE, TRATE, DRATE, DIFFVALUE, BOOKINGVALUE, TARIFFVALUE, TARIFFSBF, TARIFFTAXAMT, ARRAMT, ARRTAXAMT, ARRTOTALAMT, ARRSBFAMT, TAXTOTAL, STAX, GROSSTOTAL, NETTOTAL, tbillamount, SBFTAX, LOCCODE, CONT, VAT, INVOICENO, veg, nonveg, Void, VEGRATE, NONVEGRATE, MNAME, PADD1, VEGRATE1, NONVEGRATE1, VEGAMOUNT, NONVEGAMOUNT, TOTALTARIFFAMOUNT}
            Me.Rows.Add(rowPAR_HDRRow)
            Return rowPAR_HDRRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PAR_HDRDataTable = CType(MyBase.Clone,PAR_HDRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PAR_HDRDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnROWID = Me.Columns("ROWID")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnFROMTIME = Me.Columns("FROMTIME")
            Me.columnTOTIME = Me.Columns("TOTIME")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnHALLTAXFLAG = Me.Columns("HALLTAXFLAG")
            Me.columnADVANCE = Me.Columns("ADVANCE")
            Me.columnHALLAMOUNT = Me.Columns("HALLAMOUNT")
            Me.columnHALLTAXPERC = Me.Columns("HALLTAXPERC")
            Me.columnHALLTAXAMOUNT = Me.Columns("HALLTAXAMOUNT")
            Me.columnBOOKINGTARIFFAMOUNT = Me.Columns("BOOKINGTARIFFAMOUNT")
            Me.columnEXCESSTARIFFAMOUNT = Me.Columns("EXCESSTARIFFAMOUNT")
            Me.columnRESTAMOUNT = Me.Columns("RESTAMOUNT")
            Me.columnRESTTAXAMOUNT = Me.Columns("RESTTAXAMOUNT")
            Me.columnARRMENTAMOUNT = Me.Columns("ARRMENTAMOUNT")
            Me.columnARRMENTTAXAMOUNT = Me.Columns("ARRMENTTAXAMOUNT")
            Me.columnRECEIPTNO = Me.Columns("RECEIPTNO")
            Me.columnRECEIPTDATE = Me.Columns("RECEIPTDATE")
            Me.columnHALLCANCELAMOUNT = Me.Columns("HALLCANCELAMOUNT")
            Me.columnRESCANCELAMOUNT = Me.Columns("RESCANCELAMOUNT")
            Me.columnARRCANCELAMOUNT = Me.Columns("ARRCANCELAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnFROMHRS = Me.Columns("FROMHRS")
            Me.columnTOHRS = Me.Columns("TOHRS")
            Me.columnCANCELDATE = Me.Columns("CANCELDATE")
            Me.columnNETPAYABLE = Me.Columns("NETPAYABLE")
            Me.columnSBFCHARGE = Me.Columns("SBFCHARGE")
            Me.columnTARIFFTAXAMOUNT = Me.Columns("TARIFFTAXAMOUNT")
            Me.columnBOOKINGOCCUPANCY = Me.Columns("BOOKINGOCCUPANCY")
            Me.columnBILLINGOCCUPANCY = Me.Columns("BILLINGOCCUPANCY")
            Me.columnABOOKINGOCCUPANCY = Me.Columns("ABOOKINGOCCUPANCY")
            Me.columnABILLINGOCCUPANCY = Me.Columns("ABILLINGOCCUPANCY")
            Me.columnALLOWEDOCCUPANCY = Me.Columns("ALLOWEDOCCUPANCY")
            Me.columnDIFFOCCUPANCY = Me.Columns("DIFFOCCUPANCY")
            Me.columnhallamt = Me.Columns("hallamt")
            Me.columnhalltaxamt = Me.Columns("halltaxamt")
            Me.columnhallnetamt = Me.Columns("hallnetamt")
            Me.columnrcamt = Me.Columns("rcamt")
            Me.columnRESAMT = Me.Columns("RESAMT")
            Me.columnRESTAXAMT = Me.Columns("RESTAXAMT")
            Me.columnRESTOTALAMT = Me.Columns("RESTOTALAMT")
            Me.columnRESSBFAMT = Me.Columns("RESSBFAMT")
            Me.columnBARAMT = Me.Columns("BARAMT")
            Me.columnBARTAXAMT = Me.Columns("BARTAXAMT")
            Me.columnBARTOTALAMT = Me.Columns("BARTOTALAMT")
            Me.columnBARSBFAMT = Me.Columns("BARSBFAMT")
            Me.columnTARSBFCHARGE = Me.Columns("TARSBFCHARGE")
            Me.columnTRATE = Me.Columns("TRATE")
            Me.columnDRATE = Me.Columns("DRATE")
            Me.columnDIFFVALUE = Me.Columns("DIFFVALUE")
            Me.columnBOOKINGVALUE = Me.Columns("BOOKINGVALUE")
            Me.columnTARIFFVALUE = Me.Columns("TARIFFVALUE")
            Me.columnTARIFFSBF = Me.Columns("TARIFFSBF")
            Me.columnTARIFFTAXAMT = Me.Columns("TARIFFTAXAMT")
            Me.columnARRAMT = Me.Columns("ARRAMT")
            Me.columnARRTAXAMT = Me.Columns("ARRTAXAMT")
            Me.columnARRTOTALAMT = Me.Columns("ARRTOTALAMT")
            Me.columnARRSBFAMT = Me.Columns("ARRSBFAMT")
            Me.columnTAXTOTAL = Me.Columns("TAXTOTAL")
            Me.columnSTAX = Me.Columns("STAX")
            Me.columnGROSSTOTAL = Me.Columns("GROSSTOTAL")
            Me.columnNETTOTAL = Me.Columns("NETTOTAL")
            Me.columntbillamount = Me.Columns("tbillamount")
            Me.columnSBFTAX = Me.Columns("SBFTAX")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnCONT = Me.Columns("CONT")
            Me.columnVAT = Me.Columns("VAT")
            Me.columnINVOICENO = Me.Columns("INVOICENO")
            Me.columnveg = Me.Columns("veg")
            Me.columnnonveg = Me.Columns("nonveg")
            Me.columnVoid = Me.Columns("Void")
            Me.columnVEGRATE = Me.Columns("VEGRATE")
            Me.columnNONVEGRATE = Me.Columns("NONVEGRATE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnPADD1 = Me.Columns("PADD1")
            Me.columnVEGRATE1 = Me.Columns("VEGRATE1")
            Me.columnNONVEGRATE1 = Me.Columns("NONVEGRATE1")
            Me.columnVEGAMOUNT = Me.Columns("VEGAMOUNT")
            Me.columnNONVEGAMOUNT = Me.Columns("NONVEGAMOUNT")
            Me.columnTOTALTARIFFAMOUNT = Me.Columns("TOTALTARIFFAMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnROWID = New DataColumn("ROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROWID)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnFROMTIME = New DataColumn("FROMTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMTIME)
            Me.columnTOTIME = New DataColumn("TOTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTIME)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnHALLTAXFLAG = New DataColumn("HALLTAXFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXFLAG)
            Me.columnADVANCE = New DataColumn("ADVANCE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADVANCE)
            Me.columnHALLAMOUNT = New DataColumn("HALLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLAMOUNT)
            Me.columnHALLTAXPERC = New DataColumn("HALLTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXPERC)
            Me.columnHALLTAXAMOUNT = New DataColumn("HALLTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXAMOUNT)
            Me.columnBOOKINGTARIFFAMOUNT = New DataColumn("BOOKINGTARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTARIFFAMOUNT)
            Me.columnEXCESSTARIFFAMOUNT = New DataColumn("EXCESSTARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEXCESSTARIFFAMOUNT)
            Me.columnRESTAMOUNT = New DataColumn("RESTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTAMOUNT)
            Me.columnRESTTAXAMOUNT = New DataColumn("RESTTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTTAXAMOUNT)
            Me.columnARRMENTAMOUNT = New DataColumn("ARRMENTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRMENTAMOUNT)
            Me.columnARRMENTTAXAMOUNT = New DataColumn("ARRMENTTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRMENTTAXAMOUNT)
            Me.columnRECEIPTNO = New DataColumn("RECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTNO)
            Me.columnRECEIPTDATE = New DataColumn("RECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTDATE)
            Me.columnHALLCANCELAMOUNT = New DataColumn("HALLCANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCANCELAMOUNT)
            Me.columnRESCANCELAMOUNT = New DataColumn("RESCANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESCANCELAMOUNT)
            Me.columnARRCANCELAMOUNT = New DataColumn("ARRCANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRCANCELAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnFROMHRS = New DataColumn("FROMHRS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMHRS)
            Me.columnTOHRS = New DataColumn("TOHRS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOHRS)
            Me.columnCANCELDATE = New DataColumn("CANCELDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELDATE)
            Me.columnNETPAYABLE = New DataColumn("NETPAYABLE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETPAYABLE)
            Me.columnSBFCHARGE = New DataColumn("SBFCHARGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBFCHARGE)
            Me.columnTARIFFTAXAMOUNT = New DataColumn("TARIFFTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFTAXAMOUNT)
            Me.columnBOOKINGOCCUPANCY = New DataColumn("BOOKINGOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGOCCUPANCY)
            Me.columnBILLINGOCCUPANCY = New DataColumn("BILLINGOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLINGOCCUPANCY)
            Me.columnABOOKINGOCCUPANCY = New DataColumn("ABOOKINGOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnABOOKINGOCCUPANCY)
            Me.columnABILLINGOCCUPANCY = New DataColumn("ABILLINGOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnABILLINGOCCUPANCY)
            Me.columnALLOWEDOCCUPANCY = New DataColumn("ALLOWEDOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnALLOWEDOCCUPANCY)
            Me.columnDIFFOCCUPANCY = New DataColumn("DIFFOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDIFFOCCUPANCY)
            Me.columnhallamt = New DataColumn("hallamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallamt)
            Me.columnhalltaxamt = New DataColumn("halltaxamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltaxamt)
            Me.columnhallnetamt = New DataColumn("hallnetamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallnetamt)
            Me.columnrcamt = New DataColumn("rcamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrcamt)
            Me.columnRESAMT = New DataColumn("RESAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESAMT)
            Me.columnRESTAXAMT = New DataColumn("RESTAXAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTAXAMT)
            Me.columnRESTOTALAMT = New DataColumn("RESTOTALAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTOTALAMT)
            Me.columnRESSBFAMT = New DataColumn("RESSBFAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESSBFAMT)
            Me.columnBARAMT = New DataColumn("BARAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBARAMT)
            Me.columnBARTAXAMT = New DataColumn("BARTAXAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBARTAXAMT)
            Me.columnBARTOTALAMT = New DataColumn("BARTOTALAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBARTOTALAMT)
            Me.columnBARSBFAMT = New DataColumn("BARSBFAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBARSBFAMT)
            Me.columnTARSBFCHARGE = New DataColumn("TARSBFCHARGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARSBFCHARGE)
            Me.columnTRATE = New DataColumn("TRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTRATE)
            Me.columnDRATE = New DataColumn("DRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDRATE)
            Me.columnDIFFVALUE = New DataColumn("DIFFVALUE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDIFFVALUE)
            Me.columnBOOKINGVALUE = New DataColumn("BOOKINGVALUE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGVALUE)
            Me.columnTARIFFVALUE = New DataColumn("TARIFFVALUE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFVALUE)
            Me.columnTARIFFSBF = New DataColumn("TARIFFSBF", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFSBF)
            Me.columnTARIFFTAXAMT = New DataColumn("TARIFFTAXAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFTAXAMT)
            Me.columnARRAMT = New DataColumn("ARRAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRAMT)
            Me.columnARRTAXAMT = New DataColumn("ARRTAXAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRTAXAMT)
            Me.columnARRTOTALAMT = New DataColumn("ARRTOTALAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRTOTALAMT)
            Me.columnARRSBFAMT = New DataColumn("ARRSBFAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRSBFAMT)
            Me.columnTAXTOTAL = New DataColumn("TAXTOTAL", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXTOTAL)
            Me.columnSTAX = New DataColumn("STAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTAX)
            Me.columnGROSSTOTAL = New DataColumn("GROSSTOTAL", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROSSTOTAL)
            Me.columnNETTOTAL = New DataColumn("NETTOTAL", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETTOTAL)
            Me.columntbillamount = New DataColumn("tbillamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntbillamount)
            Me.columnSBFTAX = New DataColumn("SBFTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBFTAX)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnCONT = New DataColumn("CONT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONT)
            Me.columnVAT = New DataColumn("VAT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVAT)
            Me.columnINVOICENO = New DataColumn("INVOICENO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINVOICENO)
            Me.columnveg = New DataColumn("veg", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnveg)
            Me.columnnonveg = New DataColumn("nonveg", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnonveg)
            Me.columnVoid = New DataColumn("Void", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVoid)
            Me.columnVEGRATE = New DataColumn("VEGRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEGRATE)
            Me.columnNONVEGRATE = New DataColumn("NONVEGRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEGRATE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnPADD1 = New DataColumn("PADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD1)
            Me.columnVEGRATE1 = New DataColumn("VEGRATE1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEGRATE1)
            Me.columnNONVEGRATE1 = New DataColumn("NONVEGRATE1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEGRATE1)
            Me.columnVEGAMOUNT = New DataColumn("VEGAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEGAMOUNT)
            Me.columnNONVEGAMOUNT = New DataColumn("NONVEGAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEGAMOUNT)
            Me.columnTOTALTARIFFAMOUNT = New DataColumn("TOTALTARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALTARIFFAMOUNT)
            Me.columnROWID.AllowDBNull = false
            Me.columnVEGRATE1.ReadOnly = true
            Me.columnNONVEGRATE1.ReadOnly = true
            Me.columnVEGAMOUNT.ReadOnly = true
            Me.columnNONVEGAMOUNT.ReadOnly = true
            Me.columnTOTALTARIFFAMOUNT.ReadOnly = true
        End Sub
        
        Public Function NewPAR_HDRRow() As PAR_HDRRow
            Return CType(Me.NewRow,PAR_HDRRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PAR_HDRRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PAR_HDRRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PAR_HDRRowChangedEvent) Is Nothing) Then
                RaiseEvent PAR_HDRRowChanged(Me, New PAR_HDRRowChangeEvent(CType(e.Row,PAR_HDRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PAR_HDRRowChangingEvent) Is Nothing) Then
                RaiseEvent PAR_HDRRowChanging(Me, New PAR_HDRRowChangeEvent(CType(e.Row,PAR_HDRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PAR_HDRRowDeletedEvent) Is Nothing) Then
                RaiseEvent PAR_HDRRowDeleted(Me, New PAR_HDRRowChangeEvent(CType(e.Row,PAR_HDRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PAR_HDRRowDeletingEvent) Is Nothing) Then
                RaiseEvent PAR_HDRRowDeleting(Me, New PAR_HDRRowChangeEvent(CType(e.Row,PAR_HDRRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePAR_HDRRow(ByVal row As PAR_HDRRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_HDRRow
        Inherits DataRow
        
        Private tablePAR_HDR As PAR_HDRDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePAR_HDR = CType(Me.Table,PAR_HDRDataTable)
        End Sub
        
        Public Property ROWID As Decimal
            Get
                Return CType(Me(Me.tablePAR_HDR.ROWIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePAR_HDR.ROWIDColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BOOKINGTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property FROMTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.FROMTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.FROMTIMEColumn) = value
            End Set
        End Property
        
        Public Property TOTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TOTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TOTIMEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.HALLTAXFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.HALLTAXFLAGColumn) = value
            End Set
        End Property
        
        Public Property ADVANCE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ADVANCEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ADVANCEColumn) = value
            End Set
        End Property
        
        Public Property HALLAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.HALLAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.HALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.HALLTAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.HALLTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.HALLTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.HALLTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTARIFFAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BOOKINGTARIFFAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BOOKINGTARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property EXCESSTARIFFAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.EXCESSTARIFFAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.EXCESSTARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESTAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RESTAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RESTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESTTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RESTTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RESTTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ARRMENTAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ARRMENTAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ARRMENTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ARRMENTTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ARRMENTTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ARRMENTTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property HALLCANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.HALLCANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.HALLCANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESCANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RESCANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RESCANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ARRCANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ARRCANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ARRCANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property FROMHRS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.FROMHRSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.FROMHRSColumn) = value
            End Set
        End Property
        
        Public Property TOHRS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TOHRSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TOHRSColumn) = value
            End Set
        End Property
        
        Public Property CANCELDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.CANCELDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.CANCELDATEColumn) = value
            End Set
        End Property
        
        Public Property NETPAYABLE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.NETPAYABLEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.NETPAYABLEColumn) = value
            End Set
        End Property
        
        Public Property SBFCHARGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.SBFCHARGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.SBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TARIFFTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TARIFFTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BOOKINGOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BOOKINGOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property BILLINGOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BILLINGOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BILLINGOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property ABOOKINGOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ABOOKINGOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ABOOKINGOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property ABILLINGOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ABILLINGOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ABILLINGOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property ALLOWEDOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ALLOWEDOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ALLOWEDOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property DIFFOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.DIFFOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.DIFFOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property hallamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.hallamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.hallamtColumn) = value
            End Set
        End Property
        
        Public Property halltaxamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.halltaxamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.halltaxamtColumn) = value
            End Set
        End Property
        
        Public Property hallnetamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.hallnetamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.hallnetamtColumn) = value
            End Set
        End Property
        
        Public Property rcamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.rcamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.rcamtColumn) = value
            End Set
        End Property
        
        Public Property RESAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RESAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RESAMTColumn) = value
            End Set
        End Property
        
        Public Property RESTAXAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RESTAXAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RESTAXAMTColumn) = value
            End Set
        End Property
        
        Public Property RESTOTALAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RESTOTALAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RESTOTALAMTColumn) = value
            End Set
        End Property
        
        Public Property RESSBFAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RESSBFAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RESSBFAMTColumn) = value
            End Set
        End Property
        
        Public Property BARAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BARAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BARAMTColumn) = value
            End Set
        End Property
        
        Public Property BARTAXAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BARTAXAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BARTAXAMTColumn) = value
            End Set
        End Property
        
        Public Property BARTOTALAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BARTOTALAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BARTOTALAMTColumn) = value
            End Set
        End Property
        
        Public Property BARSBFAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BARSBFAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BARSBFAMTColumn) = value
            End Set
        End Property
        
        Public Property TARSBFCHARGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TARSBFCHARGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TARSBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property TRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TRATEColumn) = value
            End Set
        End Property
        
        Public Property DRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.DRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.DRATEColumn) = value
            End Set
        End Property
        
        Public Property DIFFVALUE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.DIFFVALUEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.DIFFVALUEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGVALUE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BOOKINGVALUEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BOOKINGVALUEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFVALUE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TARIFFVALUEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TARIFFVALUEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFSBF As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TARIFFSBFColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TARIFFSBFColumn) = value
            End Set
        End Property
        
        Public Property TARIFFTAXAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TARIFFTAXAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TARIFFTAXAMTColumn) = value
            End Set
        End Property
        
        Public Property ARRAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ARRAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ARRAMTColumn) = value
            End Set
        End Property
        
        Public Property ARRTAXAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ARRTAXAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ARRTAXAMTColumn) = value
            End Set
        End Property
        
        Public Property ARRTOTALAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ARRTOTALAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ARRTOTALAMTColumn) = value
            End Set
        End Property
        
        Public Property ARRSBFAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ARRSBFAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ARRSBFAMTColumn) = value
            End Set
        End Property
        
        Public Property TAXTOTAL As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TAXTOTALColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TAXTOTALColumn) = value
            End Set
        End Property
        
        Public Property STAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.STAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.STAXColumn) = value
            End Set
        End Property
        
        Public Property GROSSTOTAL As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.GROSSTOTALColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.GROSSTOTALColumn) = value
            End Set
        End Property
        
        Public Property NETTOTAL As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.NETTOTALColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.NETTOTALColumn) = value
            End Set
        End Property
        
        Public Property tbillamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.tbillamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.tbillamountColumn) = value
            End Set
        End Property
        
        Public Property SBFTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.SBFTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.SBFTAXColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property CONT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.CONTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.CONTColumn) = value
            End Set
        End Property
        
        Public Property VAT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.VATColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.VATColumn) = value
            End Set
        End Property
        
        Public Property INVOICENO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.INVOICENOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.INVOICENOColumn) = value
            End Set
        End Property
        
        Public Property veg As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.vegColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.vegColumn) = value
            End Set
        End Property
        
        Public Property nonveg As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.nonvegColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.nonvegColumn) = value
            End Set
        End Property
        
        Public Property Void As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.VoidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.VoidColumn) = value
            End Set
        End Property
        
        Public Property VEGRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.VEGRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.VEGRATEColumn) = value
            End Set
        End Property
        
        Public Property NONVEGRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.NONVEGRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.NONVEGRATEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property PADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.PADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.PADD1Column) = value
            End Set
        End Property
        
        Public Property VEGRATE1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.VEGRATE1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.VEGRATE1Column) = value
            End Set
        End Property
        
        Public Property NONVEGRATE1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.NONVEGRATE1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.NONVEGRATE1Column) = value
            End Set
        End Property
        
        Public Property VEGAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.VEGAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.VEGAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property NONVEGAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.NONVEGAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.NONVEGAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALTARIFFAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TOTALTARIFFAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TOTALTARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGTYPENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BOOKINGTYPEColumn)
        End Function
        
        Public Sub SetBOOKINGTYPENull()
            Me(Me.tablePAR_HDR.BOOKINGTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePAR_HDR.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePAR_HDR.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePAR_HDR.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMTIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.FROMTIMEColumn)
        End Function
        
        Public Sub SetFROMTIMENull()
            Me(Me.tablePAR_HDR.FROMTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TOTIMEColumn)
        End Function
        
        Public Sub SetTOTIMENull()
            Me(Me.tablePAR_HDR.TOTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePAR_HDR.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tablePAR_HDR.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablePAR_HDR.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablePAR_HDR.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablePAR_HDR.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.HALLTAXFLAGColumn)
        End Function
        
        Public Sub SetHALLTAXFLAGNull()
            Me(Me.tablePAR_HDR.HALLTAXFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADVANCENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ADVANCEColumn)
        End Function
        
        Public Sub SetADVANCENull()
            Me(Me.tablePAR_HDR.ADVANCEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.HALLAMOUNTColumn)
        End Function
        
        Public Sub SetHALLAMOUNTNull()
            Me(Me.tablePAR_HDR.HALLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.HALLTAXPERCColumn)
        End Function
        
        Public Sub SetHALLTAXPERCNull()
            Me(Me.tablePAR_HDR.HALLTAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.HALLTAXAMOUNTColumn)
        End Function
        
        Public Sub SetHALLTAXAMOUNTNull()
            Me(Me.tablePAR_HDR.HALLTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGTARIFFAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BOOKINGTARIFFAMOUNTColumn)
        End Function
        
        Public Sub SetBOOKINGTARIFFAMOUNTNull()
            Me(Me.tablePAR_HDR.BOOKINGTARIFFAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEXCESSTARIFFAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.EXCESSTARIFFAMOUNTColumn)
        End Function
        
        Public Sub SetEXCESSTARIFFAMOUNTNull()
            Me(Me.tablePAR_HDR.EXCESSTARIFFAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RESTAMOUNTColumn)
        End Function
        
        Public Sub SetRESTAMOUNTNull()
            Me(Me.tablePAR_HDR.RESTAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RESTTAXAMOUNTColumn)
        End Function
        
        Public Sub SetRESTTAXAMOUNTNull()
            Me(Me.tablePAR_HDR.RESTTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRMENTAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ARRMENTAMOUNTColumn)
        End Function
        
        Public Sub SetARRMENTAMOUNTNull()
            Me(Me.tablePAR_HDR.ARRMENTAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRMENTTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ARRMENTTAXAMOUNTColumn)
        End Function
        
        Public Sub SetARRMENTTAXAMOUNTNull()
            Me(Me.tablePAR_HDR.ARRMENTTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RECEIPTNOColumn)
        End Function
        
        Public Sub SetRECEIPTNONull()
            Me(Me.tablePAR_HDR.RECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RECEIPTDATEColumn)
        End Function
        
        Public Sub SetRECEIPTDATENull()
            Me(Me.tablePAR_HDR.RECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.HALLCANCELAMOUNTColumn)
        End Function
        
        Public Sub SetHALLCANCELAMOUNTNull()
            Me(Me.tablePAR_HDR.HALLCANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RESCANCELAMOUNTColumn)
        End Function
        
        Public Sub SetRESCANCELAMOUNTNull()
            Me(Me.tablePAR_HDR.RESCANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ARRCANCELAMOUNTColumn)
        End Function
        
        Public Sub SetARRCANCELAMOUNTNull()
            Me(Me.tablePAR_HDR.ARRCANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePAR_HDR.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablePAR_HDR.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tablePAR_HDR.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMHRSNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.FROMHRSColumn)
        End Function
        
        Public Sub SetFROMHRSNull()
            Me(Me.tablePAR_HDR.FROMHRSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOHRSNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TOHRSColumn)
        End Function
        
        Public Sub SetTOHRSNull()
            Me(Me.tablePAR_HDR.TOHRSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.CANCELDATEColumn)
        End Function
        
        Public Sub SetCANCELDATENull()
            Me(Me.tablePAR_HDR.CANCELDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNETPAYABLENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.NETPAYABLEColumn)
        End Function
        
        Public Sub SetNETPAYABLENull()
            Me(Me.tablePAR_HDR.NETPAYABLEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.SBFCHARGEColumn)
        End Function
        
        Public Sub SetSBFCHARGENull()
            Me(Me.tablePAR_HDR.SBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TARIFFTAXAMOUNTColumn)
        End Function
        
        Public Sub SetTARIFFTAXAMOUNTNull()
            Me(Me.tablePAR_HDR.TARIFFTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BOOKINGOCCUPANCYColumn)
        End Function
        
        Public Sub SetBOOKINGOCCUPANCYNull()
            Me(Me.tablePAR_HDR.BOOKINGOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLINGOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BILLINGOCCUPANCYColumn)
        End Function
        
        Public Sub SetBILLINGOCCUPANCYNull()
            Me(Me.tablePAR_HDR.BILLINGOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsABOOKINGOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ABOOKINGOCCUPANCYColumn)
        End Function
        
        Public Sub SetABOOKINGOCCUPANCYNull()
            Me(Me.tablePAR_HDR.ABOOKINGOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsABILLINGOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ABILLINGOCCUPANCYColumn)
        End Function
        
        Public Sub SetABILLINGOCCUPANCYNull()
            Me(Me.tablePAR_HDR.ABILLINGOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsALLOWEDOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ALLOWEDOCCUPANCYColumn)
        End Function
        
        Public Sub SetALLOWEDOCCUPANCYNull()
            Me(Me.tablePAR_HDR.ALLOWEDOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDIFFOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.DIFFOCCUPANCYColumn)
        End Function
        
        Public Sub SetDIFFOCCUPANCYNull()
            Me(Me.tablePAR_HDR.DIFFOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallamtNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.hallamtColumn)
        End Function
        
        Public Sub SethallamtNull()
            Me(Me.tablePAR_HDR.hallamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalltaxamtNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.halltaxamtColumn)
        End Function
        
        Public Sub SethalltaxamtNull()
            Me(Me.tablePAR_HDR.halltaxamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallnetamtNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.hallnetamtColumn)
        End Function
        
        Public Sub SethallnetamtNull()
            Me(Me.tablePAR_HDR.hallnetamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrcamtNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.rcamtColumn)
        End Function
        
        Public Sub SetrcamtNull()
            Me(Me.tablePAR_HDR.rcamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RESAMTColumn)
        End Function
        
        Public Sub SetRESAMTNull()
            Me(Me.tablePAR_HDR.RESAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTAXAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RESTAXAMTColumn)
        End Function
        
        Public Sub SetRESTAXAMTNull()
            Me(Me.tablePAR_HDR.RESTAXAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTOTALAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RESTOTALAMTColumn)
        End Function
        
        Public Sub SetRESTOTALAMTNull()
            Me(Me.tablePAR_HDR.RESTOTALAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESSBFAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RESSBFAMTColumn)
        End Function
        
        Public Sub SetRESSBFAMTNull()
            Me(Me.tablePAR_HDR.RESSBFAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBARAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BARAMTColumn)
        End Function
        
        Public Sub SetBARAMTNull()
            Me(Me.tablePAR_HDR.BARAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBARTAXAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BARTAXAMTColumn)
        End Function
        
        Public Sub SetBARTAXAMTNull()
            Me(Me.tablePAR_HDR.BARTAXAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBARTOTALAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BARTOTALAMTColumn)
        End Function
        
        Public Sub SetBARTOTALAMTNull()
            Me(Me.tablePAR_HDR.BARTOTALAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBARSBFAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BARSBFAMTColumn)
        End Function
        
        Public Sub SetBARSBFAMTNull()
            Me(Me.tablePAR_HDR.BARSBFAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARSBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TARSBFCHARGEColumn)
        End Function
        
        Public Sub SetTARSBFCHARGENull()
            Me(Me.tablePAR_HDR.TARSBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTRATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TRATEColumn)
        End Function
        
        Public Sub SetTRATENull()
            Me(Me.tablePAR_HDR.TRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDRATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.DRATEColumn)
        End Function
        
        Public Sub SetDRATENull()
            Me(Me.tablePAR_HDR.DRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDIFFVALUENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.DIFFVALUEColumn)
        End Function
        
        Public Sub SetDIFFVALUENull()
            Me(Me.tablePAR_HDR.DIFFVALUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGVALUENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BOOKINGVALUEColumn)
        End Function
        
        Public Sub SetBOOKINGVALUENull()
            Me(Me.tablePAR_HDR.BOOKINGVALUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFVALUENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TARIFFVALUEColumn)
        End Function
        
        Public Sub SetTARIFFVALUENull()
            Me(Me.tablePAR_HDR.TARIFFVALUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFSBFNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TARIFFSBFColumn)
        End Function
        
        Public Sub SetTARIFFSBFNull()
            Me(Me.tablePAR_HDR.TARIFFSBFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFTAXAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TARIFFTAXAMTColumn)
        End Function
        
        Public Sub SetTARIFFTAXAMTNull()
            Me(Me.tablePAR_HDR.TARIFFTAXAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ARRAMTColumn)
        End Function
        
        Public Sub SetARRAMTNull()
            Me(Me.tablePAR_HDR.ARRAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRTAXAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ARRTAXAMTColumn)
        End Function
        
        Public Sub SetARRTAXAMTNull()
            Me(Me.tablePAR_HDR.ARRTAXAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRTOTALAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ARRTOTALAMTColumn)
        End Function
        
        Public Sub SetARRTOTALAMTNull()
            Me(Me.tablePAR_HDR.ARRTOTALAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRSBFAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ARRSBFAMTColumn)
        End Function
        
        Public Sub SetARRSBFAMTNull()
            Me(Me.tablePAR_HDR.ARRSBFAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXTOTALNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TAXTOTALColumn)
        End Function
        
        Public Sub SetTAXTOTALNull()
            Me(Me.tablePAR_HDR.TAXTOTALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTAXNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.STAXColumn)
        End Function
        
        Public Sub SetSTAXNull()
            Me(Me.tablePAR_HDR.STAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROSSTOTALNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.GROSSTOTALColumn)
        End Function
        
        Public Sub SetGROSSTOTALNull()
            Me(Me.tablePAR_HDR.GROSSTOTALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNETTOTALNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.NETTOTALColumn)
        End Function
        
        Public Sub SetNETTOTALNull()
            Me(Me.tablePAR_HDR.NETTOTALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstbillamountNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.tbillamountColumn)
        End Function
        
        Public Sub SettbillamountNull()
            Me(Me.tablePAR_HDR.tbillamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSBFTAXNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.SBFTAXColumn)
        End Function
        
        Public Sub SetSBFTAXNull()
            Me(Me.tablePAR_HDR.SBFTAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePAR_HDR.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.CONTColumn)
        End Function
        
        Public Sub SetCONTNull()
            Me(Me.tablePAR_HDR.CONTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVATNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.VATColumn)
        End Function
        
        Public Sub SetVATNull()
            Me(Me.tablePAR_HDR.VATColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsINVOICENONull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.INVOICENOColumn)
        End Function
        
        Public Sub SetINVOICENONull()
            Me(Me.tablePAR_HDR.INVOICENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvegNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.vegColumn)
        End Function
        
        Public Sub SetvegNull()
            Me(Me.tablePAR_HDR.vegColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnonvegNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.nonvegColumn)
        End Function
        
        Public Sub SetnonvegNull()
            Me(Me.tablePAR_HDR.nonvegColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVoidNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.VoidColumn)
        End Function
        
        Public Sub SetVoidNull()
            Me(Me.tablePAR_HDR.VoidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGRATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.VEGRATEColumn)
        End Function
        
        Public Sub SetVEGRATENull()
            Me(Me.tablePAR_HDR.VEGRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNONVEGRATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.NONVEGRATEColumn)
        End Function
        
        Public Sub SetNONVEGRATENull()
            Me(Me.tablePAR_HDR.NONVEGRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablePAR_HDR.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD1Null() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.PADD1Column)
        End Function
        
        Public Sub SetPADD1Null()
            Me(Me.tablePAR_HDR.PADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGRATE1Null() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.VEGRATE1Column)
        End Function
        
        Public Sub SetVEGRATE1Null()
            Me(Me.tablePAR_HDR.VEGRATE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNONVEGRATE1Null() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.NONVEGRATE1Column)
        End Function
        
        Public Sub SetNONVEGRATE1Null()
            Me(Me.tablePAR_HDR.NONVEGRATE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.VEGAMOUNTColumn)
        End Function
        
        Public Sub SetVEGAMOUNTNull()
            Me(Me.tablePAR_HDR.VEGAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNONVEGAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.NONVEGAMOUNTColumn)
        End Function
        
        Public Sub SetNONVEGAMOUNTNull()
            Me(Me.tablePAR_HDR.NONVEGAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALTARIFFAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TOTALTARIFFAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALTARIFFAMOUNTNull()
            Me(Me.tablePAR_HDR.TOTALTARIFFAMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_HDRRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PAR_HDRRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PAR_HDRRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PAR_HDRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_CONSUMPTIONDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLOCCODE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnREMARKS As DataColumn
        
        Private columnPOSCODE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Friend Sub New()
            MyBase.New("PAR_CONSUMPTION")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property REMARKSColumn As DataColumn
            Get
                Return Me.columnREMARKS
            End Get
        End Property
        
        Friend ReadOnly Property POSCODEColumn As DataColumn
            Get
                Return Me.columnPOSCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PAR_CONSUMPTIONRow
            Get
                Return CType(Me.Rows(index),PAR_CONSUMPTIONRow)
            End Get
        End Property
        
        Public Event PAR_CONSUMPTIONRowChanged As PAR_CONSUMPTIONRowChangeEventHandler
        
        Public Event PAR_CONSUMPTIONRowChanging As PAR_CONSUMPTIONRowChangeEventHandler
        
        Public Event PAR_CONSUMPTIONRowDeleted As PAR_CONSUMPTIONRowChangeEventHandler
        
        Public Event PAR_CONSUMPTIONRowDeleting As PAR_CONSUMPTIONRowChangeEventHandler
        
        Public Overloads Sub AddPAR_CONSUMPTIONRow(ByVal row As PAR_CONSUMPTIONRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPAR_CONSUMPTIONRow( _
                    ByVal LOCCODE As String,  _
                    ByVal BOOKINGNO As String,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal REMARKS As String,  _
                    ByVal POSCODE As String,  _
                    ByVal ITEMCODE As String,  _
                    ByVal ITEMDESC As String,  _
                    ByVal UOM As String,  _
                    ByVal RATE As Decimal,  _
                    ByVal QTY As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal ADDUSERID As String,  _
                    ByVal ADDDATETIME As Date) As PAR_CONSUMPTIONRow
            Dim rowPAR_CONSUMPTIONRow As PAR_CONSUMPTIONRow = CType(Me.NewRow,PAR_CONSUMPTIONRow)
            rowPAR_CONSUMPTIONRow.ItemArray = New Object() {LOCCODE, BOOKINGNO, PARTYDATE, MCODE, MNAME, REMARKS, POSCODE, ITEMCODE, ITEMDESC, UOM, RATE, QTY, AMOUNT, TOTALAMOUNT, FREEZE, ADDUSERID, ADDDATETIME}
            Me.Rows.Add(rowPAR_CONSUMPTIONRow)
            Return rowPAR_CONSUMPTIONRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PAR_CONSUMPTIONDataTable = CType(MyBase.Clone,PAR_CONSUMPTIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PAR_CONSUMPTIONDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnREMARKS = Me.Columns("REMARKS")
            Me.columnPOSCODE = Me.Columns("POSCODE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
        End Sub
        
        Private Sub InitClass()
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnREMARKS = New DataColumn("REMARKS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREMARKS)
            Me.columnPOSCODE = New DataColumn("POSCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSCODE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
        End Sub
        
        Public Function NewPAR_CONSUMPTIONRow() As PAR_CONSUMPTIONRow
            Return CType(Me.NewRow,PAR_CONSUMPTIONRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PAR_CONSUMPTIONRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PAR_CONSUMPTIONRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PAR_CONSUMPTIONRowChangedEvent) Is Nothing) Then
                RaiseEvent PAR_CONSUMPTIONRowChanged(Me, New PAR_CONSUMPTIONRowChangeEvent(CType(e.Row,PAR_CONSUMPTIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PAR_CONSUMPTIONRowChangingEvent) Is Nothing) Then
                RaiseEvent PAR_CONSUMPTIONRowChanging(Me, New PAR_CONSUMPTIONRowChangeEvent(CType(e.Row,PAR_CONSUMPTIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PAR_CONSUMPTIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent PAR_CONSUMPTIONRowDeleted(Me, New PAR_CONSUMPTIONRowChangeEvent(CType(e.Row,PAR_CONSUMPTIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PAR_CONSUMPTIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent PAR_CONSUMPTIONRowDeleting(Me, New PAR_CONSUMPTIONRowChangeEvent(CType(e.Row,PAR_CONSUMPTIONRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePAR_CONSUMPTIONRow(ByVal row As PAR_CONSUMPTIONRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_CONSUMPTIONRow
        Inherits DataRow
        
        Private tablePAR_CONSUMPTION As PAR_CONSUMPTIONDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePAR_CONSUMPTION = CType(Me.Table,PAR_CONSUMPTIONDataTable)
        End Sub
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.BOOKINGNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property REMARKS As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.REMARKSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.REMARKSColumn) = value
            End Set
        End Property
        
        Public Property POSCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.POSCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.POSCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.UOMColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.RATEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.QTYColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_CONSUMPTION.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_CONSUMPTION.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePAR_CONSUMPTION.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePAR_CONSUMPTION.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePAR_CONSUMPTION.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePAR_CONSUMPTION.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablePAR_CONSUMPTION.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREMARKSNull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.REMARKSColumn)
        End Function
        
        Public Sub SetREMARKSNull()
            Me(Me.tablePAR_CONSUMPTION.REMARKSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOSCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.POSCODEColumn)
        End Function
        
        Public Sub SetPOSCODENull()
            Me(Me.tablePAR_CONSUMPTION.POSCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tablePAR_CONSUMPTION.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tablePAR_CONSUMPTION.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tablePAR_CONSUMPTION.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePAR_CONSUMPTION.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tablePAR_CONSUMPTION.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePAR_CONSUMPTION.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePAR_CONSUMPTION.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePAR_CONSUMPTION.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tablePAR_CONSUMPTION.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_CONSUMPTION.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablePAR_CONSUMPTION.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_CONSUMPTIONRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PAR_CONSUMPTIONRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PAR_CONSUMPTIONRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PAR_CONSUMPTIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_BOOKDETAILSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnloccode As DataColumn
        
        Private columnbookingno As DataColumn
        
        Private columnpartydate As DataColumn
        
        Private columnhallcode As DataColumn
        
        Private columnhalldesc As DataColumn
        
        Private columnmcode As DataColumn
        
        Private columnmname As DataColumn
        
        Private columnfromtime As DataColumn
        
        Private columntotime As DataColumn
        
        Private columnbookingdate As DataColumn
        
        Private columnassociatename As DataColumn
        
        Private columnpdesc As DataColumn
        
        Private columnAdvance As DataColumn
        
        Private columnhalltaxflag As DataColumn
        
        Private columnmembertype As DataColumn
        
        Private columnhallamount As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnadduserid As DataColumn
        
        Private columnadddatetime As DataColumn
        
        Private columnhalltype As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnhallTaxpercentage As DataColumn
        
        Private columnhallTaxAMOUNT As DataColumn
        
        Private columnNETHALLAMOUNT As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnVEG As DataColumn
        
        Private columnnonveg As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_VIEW_BOOKDETAILS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property loccodeColumn As DataColumn
            Get
                Return Me.columnloccode
            End Get
        End Property
        
        Friend ReadOnly Property bookingnoColumn As DataColumn
            Get
                Return Me.columnbookingno
            End Get
        End Property
        
        Friend ReadOnly Property partydateColumn As DataColumn
            Get
                Return Me.columnpartydate
            End Get
        End Property
        
        Friend ReadOnly Property hallcodeColumn As DataColumn
            Get
                Return Me.columnhallcode
            End Get
        End Property
        
        Friend ReadOnly Property halldescColumn As DataColumn
            Get
                Return Me.columnhalldesc
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property mnameColumn As DataColumn
            Get
                Return Me.columnmname
            End Get
        End Property
        
        Friend ReadOnly Property fromtimeColumn As DataColumn
            Get
                Return Me.columnfromtime
            End Get
        End Property
        
        Friend ReadOnly Property totimeColumn As DataColumn
            Get
                Return Me.columntotime
            End Get
        End Property
        
        Friend ReadOnly Property bookingdateColumn As DataColumn
            Get
                Return Me.columnbookingdate
            End Get
        End Property
        
        Friend ReadOnly Property associatenameColumn As DataColumn
            Get
                Return Me.columnassociatename
            End Get
        End Property
        
        Friend ReadOnly Property pdescColumn As DataColumn
            Get
                Return Me.columnpdesc
            End Get
        End Property
        
        Friend ReadOnly Property AdvanceColumn As DataColumn
            Get
                Return Me.columnAdvance
            End Get
        End Property
        
        Friend ReadOnly Property halltaxflagColumn As DataColumn
            Get
                Return Me.columnhalltaxflag
            End Get
        End Property
        
        Friend ReadOnly Property membertypeColumn As DataColumn
            Get
                Return Me.columnmembertype
            End Get
        End Property
        
        Friend ReadOnly Property hallamountColumn As DataColumn
            Get
                Return Me.columnhallamount
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Friend ReadOnly Property adddatetimeColumn As DataColumn
            Get
                Return Me.columnadddatetime
            End Get
        End Property
        
        Friend ReadOnly Property halltypeColumn As DataColumn
            Get
                Return Me.columnhalltype
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property hallTaxpercentageColumn As DataColumn
            Get
                Return Me.columnhallTaxpercentage
            End Get
        End Property
        
        Friend ReadOnly Property hallTaxAMOUNTColumn As DataColumn
            Get
                Return Me.columnhallTaxAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property NETHALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnNETHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property VEGColumn As DataColumn
            Get
                Return Me.columnVEG
            End Get
        End Property
        
        Friend ReadOnly Property nonvegColumn As DataColumn
            Get
                Return Me.columnnonveg
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_VIEW_BOOKDETAILSRow
            Get
                Return CType(Me.Rows(index),PARTY_VIEW_BOOKDETAILSRow)
            End Get
        End Property
        
        Public Event PARTY_VIEW_BOOKDETAILSRowChanged As PARTY_VIEW_BOOKDETAILSRowChangeEventHandler
        
        Public Event PARTY_VIEW_BOOKDETAILSRowChanging As PARTY_VIEW_BOOKDETAILSRowChangeEventHandler
        
        Public Event PARTY_VIEW_BOOKDETAILSRowDeleted As PARTY_VIEW_BOOKDETAILSRowChangeEventHandler
        
        Public Event PARTY_VIEW_BOOKDETAILSRowDeleting As PARTY_VIEW_BOOKDETAILSRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_VIEW_BOOKDETAILSRow(ByVal row As PARTY_VIEW_BOOKDETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_VIEW_BOOKDETAILSRow( _
                    ByVal loccode As String,  _
                    ByVal bookingno As Decimal,  _
                    ByVal partydate As Date,  _
                    ByVal hallcode As String,  _
                    ByVal halldesc As String,  _
                    ByVal mcode As String,  _
                    ByVal mname As String,  _
                    ByVal fromtime As Decimal,  _
                    ByVal totime As Decimal,  _
                    ByVal bookingdate As Date,  _
                    ByVal associatename As String,  _
                    ByVal pdesc As String,  _
                    ByVal Advance As Decimal,  _
                    ByVal halltaxflag As String,  _
                    ByVal membertype As String,  _
                    ByVal hallamount As Decimal,  _
                    ByVal freeze As String,  _
                    ByVal adduserid As String,  _
                    ByVal adddatetime As Date,  _
                    ByVal halltype As String,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal hallTaxpercentage As Double,  _
                    ByVal hallTaxAMOUNT As Double,  _
                    ByVal NETHALLAMOUNT As Double,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal VEG As String,  _
                    ByVal nonveg As String,  _
                    ByVal TOTALAMOUNT As Decimal) As PARTY_VIEW_BOOKDETAILSRow
            Dim rowPARTY_VIEW_BOOKDETAILSRow As PARTY_VIEW_BOOKDETAILSRow = CType(Me.NewRow,PARTY_VIEW_BOOKDETAILSRow)
            rowPARTY_VIEW_BOOKDETAILSRow.ItemArray = New Object() {loccode, bookingno, partydate, hallcode, halldesc, mcode, mname, fromtime, totime, bookingdate, associatename, pdesc, Advance, halltaxflag, membertype, hallamount, freeze, adduserid, adddatetime, halltype, BOOKINGTYPE, hallTaxpercentage, hallTaxAMOUNT, NETHALLAMOUNT, OCCUPANCY, VEG, nonveg, TOTALAMOUNT}
            Me.Rows.Add(rowPARTY_VIEW_BOOKDETAILSRow)
            Return rowPARTY_VIEW_BOOKDETAILSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_VIEW_BOOKDETAILSDataTable = CType(MyBase.Clone,PARTY_VIEW_BOOKDETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_VIEW_BOOKDETAILSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnloccode = Me.Columns("loccode")
            Me.columnbookingno = Me.Columns("bookingno")
            Me.columnpartydate = Me.Columns("partydate")
            Me.columnhallcode = Me.Columns("hallcode")
            Me.columnhalldesc = Me.Columns("halldesc")
            Me.columnmcode = Me.Columns("mcode")
            Me.columnmname = Me.Columns("mname")
            Me.columnfromtime = Me.Columns("fromtime")
            Me.columntotime = Me.Columns("totime")
            Me.columnbookingdate = Me.Columns("bookingdate")
            Me.columnassociatename = Me.Columns("associatename")
            Me.columnpdesc = Me.Columns("pdesc")
            Me.columnAdvance = Me.Columns("Advance")
            Me.columnhalltaxflag = Me.Columns("halltaxflag")
            Me.columnmembertype = Me.Columns("membertype")
            Me.columnhallamount = Me.Columns("hallamount")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnadduserid = Me.Columns("adduserid")
            Me.columnadddatetime = Me.Columns("adddatetime")
            Me.columnhalltype = Me.Columns("halltype")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnhallTaxpercentage = Me.Columns("hallTaxpercentage")
            Me.columnhallTaxAMOUNT = Me.Columns("hallTaxAMOUNT")
            Me.columnNETHALLAMOUNT = Me.Columns("NETHALLAMOUNT")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnVEG = Me.Columns("VEG")
            Me.columnnonveg = Me.Columns("nonveg")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnloccode = New DataColumn("loccode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloccode)
            Me.columnbookingno = New DataColumn("bookingno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookingno)
            Me.columnpartydate = New DataColumn("partydate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpartydate)
            Me.columnhallcode = New DataColumn("hallcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallcode)
            Me.columnhalldesc = New DataColumn("halldesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalldesc)
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnmname = New DataColumn("mname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmname)
            Me.columnfromtime = New DataColumn("fromtime", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfromtime)
            Me.columntotime = New DataColumn("totime", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotime)
            Me.columnbookingdate = New DataColumn("bookingdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookingdate)
            Me.columnassociatename = New DataColumn("associatename", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnassociatename)
            Me.columnpdesc = New DataColumn("pdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpdesc)
            Me.columnAdvance = New DataColumn("Advance", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdvance)
            Me.columnhalltaxflag = New DataColumn("halltaxflag", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltaxflag)
            Me.columnmembertype = New DataColumn("membertype", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmembertype)
            Me.columnhallamount = New DataColumn("hallamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallamount)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
            Me.columnadddatetime = New DataColumn("adddatetime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddatetime)
            Me.columnhalltype = New DataColumn("halltype", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltype)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnhallTaxpercentage = New DataColumn("hallTaxpercentage", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallTaxpercentage)
            Me.columnhallTaxAMOUNT = New DataColumn("hallTaxAMOUNT", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallTaxAMOUNT)
            Me.columnNETHALLAMOUNT = New DataColumn("NETHALLAMOUNT", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETHALLAMOUNT)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnVEG = New DataColumn("VEG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEG)
            Me.columnnonveg = New DataColumn("nonveg", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnonveg)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnloccode.ReadOnly = true
            Me.columnbookingno.ReadOnly = true
            Me.columnpartydate.ReadOnly = true
            Me.columnhallcode.ReadOnly = true
            Me.columnhalldesc.ReadOnly = true
            Me.columnmcode.ReadOnly = true
            Me.columnmname.ReadOnly = true
            Me.columnfromtime.ReadOnly = true
            Me.columntotime.ReadOnly = true
            Me.columnbookingdate.ReadOnly = true
            Me.columnassociatename.ReadOnly = true
            Me.columnpdesc.ReadOnly = true
            Me.columnAdvance.ReadOnly = true
            Me.columnhalltaxflag.ReadOnly = true
            Me.columnmembertype.ReadOnly = true
            Me.columnhallamount.ReadOnly = true
            Me.columnfreeze.ReadOnly = true
            Me.columnadduserid.ReadOnly = true
            Me.columnadddatetime.ReadOnly = true
            Me.columnhalltype.ReadOnly = true
            Me.columnBOOKINGTYPE.ReadOnly = true
            Me.columnhallTaxpercentage.ReadOnly = true
            Me.columnhallTaxAMOUNT.ReadOnly = true
            Me.columnNETHALLAMOUNT.ReadOnly = true
            Me.columnOCCUPANCY.ReadOnly = true
            Me.columnVEG.ReadOnly = true
            Me.columnnonveg.ReadOnly = true
        End Sub
        
        Public Function NewPARTY_VIEW_BOOKDETAILSRow() As PARTY_VIEW_BOOKDETAILSRow
            Return CType(Me.NewRow,PARTY_VIEW_BOOKDETAILSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_VIEW_BOOKDETAILSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_VIEW_BOOKDETAILSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_VIEW_BOOKDETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_BOOKDETAILSRowChanged(Me, New PARTY_VIEW_BOOKDETAILSRowChangeEvent(CType(e.Row,PARTY_VIEW_BOOKDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_VIEW_BOOKDETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_BOOKDETAILSRowChanging(Me, New PARTY_VIEW_BOOKDETAILSRowChangeEvent(CType(e.Row,PARTY_VIEW_BOOKDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_VIEW_BOOKDETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_BOOKDETAILSRowDeleted(Me, New PARTY_VIEW_BOOKDETAILSRowChangeEvent(CType(e.Row,PARTY_VIEW_BOOKDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_VIEW_BOOKDETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_BOOKDETAILSRowDeleting(Me, New PARTY_VIEW_BOOKDETAILSRowChangeEvent(CType(e.Row,PARTY_VIEW_BOOKDETAILSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_VIEW_BOOKDETAILSRow(ByVal row As PARTY_VIEW_BOOKDETAILSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_BOOKDETAILSRow
        Inherits DataRow
        
        Private tablePARTY_VIEW_BOOKDETAILS As PARTY_VIEW_BOOKDETAILSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_VIEW_BOOKDETAILS = CType(Me.Table,PARTY_VIEW_BOOKDETAILSDataTable)
        End Sub
        
        Public Property loccode As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.loccodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.loccodeColumn) = value
            End Set
        End Property
        
        Public Property bookingno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.bookingnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.bookingnoColumn) = value
            End Set
        End Property
        
        Public Property partydate As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.partydateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.partydateColumn) = value
            End Set
        End Property
        
        Public Property hallcode As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.hallcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.hallcodeColumn) = value
            End Set
        End Property
        
        Public Property halldesc As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.halldescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.halldescColumn) = value
            End Set
        End Property
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.mcodeColumn) = value
            End Set
        End Property
        
        Public Property mname As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.mnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.mnameColumn) = value
            End Set
        End Property
        
        Public Property fromtime As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.fromtimeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.fromtimeColumn) = value
            End Set
        End Property
        
        Public Property totime As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.totimeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.totimeColumn) = value
            End Set
        End Property
        
        Public Property bookingdate As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.bookingdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.bookingdateColumn) = value
            End Set
        End Property
        
        Public Property associatename As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.associatenameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.associatenameColumn) = value
            End Set
        End Property
        
        Public Property pdesc As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.pdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.pdescColumn) = value
            End Set
        End Property
        
        Public Property Advance As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.AdvanceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.AdvanceColumn) = value
            End Set
        End Property
        
        Public Property halltaxflag As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.halltaxflagColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.halltaxflagColumn) = value
            End Set
        End Property
        
        Public Property membertype As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.membertypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.membertypeColumn) = value
            End Set
        End Property
        
        Public Property hallamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.hallamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.hallamountColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.freezeColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.adduseridColumn) = value
            End Set
        End Property
        
        Public Property adddatetime As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.adddatetimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.adddatetimeColumn) = value
            End Set
        End Property
        
        Public Property halltype As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.halltypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.halltypeColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.BOOKINGTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property hallTaxpercentage As Double
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.hallTaxpercentageColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.hallTaxpercentageColumn) = value
            End Set
        End Property
        
        Public Property hallTaxAMOUNT As Double
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.hallTaxAMOUNTColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.hallTaxAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property NETHALLAMOUNT As Double
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.NETHALLAMOUNTColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.NETHALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property VEG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.VEGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.VEGColumn) = value
            End Set
        End Property
        
        Public Property nonveg As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.nonvegColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.nonvegColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKDETAILS.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKDETAILS.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsloccodeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.loccodeColumn)
        End Function
        
        Public Sub SetloccodeNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.loccodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbookingnoNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.bookingnoColumn)
        End Function
        
        Public Sub SetbookingnoNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.bookingnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspartydateNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.partydateColumn)
        End Function
        
        Public Sub SetpartydateNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.partydateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallcodeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.hallcodeColumn)
        End Function
        
        Public Sub SethallcodeNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.hallcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalldescNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.halldescColumn)
        End Function
        
        Public Sub SethalldescNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.halldescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmnameNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.mnameColumn)
        End Function
        
        Public Sub SetmnameNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.mnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfromtimeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.fromtimeColumn)
        End Function
        
        Public Sub SetfromtimeNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.fromtimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotimeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.totimeColumn)
        End Function
        
        Public Sub SettotimeNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.totimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbookingdateNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.bookingdateColumn)
        End Function
        
        Public Sub SetbookingdateNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.bookingdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsassociatenameNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.associatenameColumn)
        End Function
        
        Public Sub SetassociatenameNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.associatenameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspdescNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.pdescColumn)
        End Function
        
        Public Sub SetpdescNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.pdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdvanceNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.AdvanceColumn)
        End Function
        
        Public Sub SetAdvanceNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.AdvanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalltaxflagNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.halltaxflagColumn)
        End Function
        
        Public Sub SethalltaxflagNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.halltaxflagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmembertypeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.membertypeColumn)
        End Function
        
        Public Sub SetmembertypeNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.membertypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallamountNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.hallamountColumn)
        End Function
        
        Public Sub SethallamountNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.hallamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.adduseridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddatetimeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.adddatetimeColumn)
        End Function
        
        Public Sub SetadddatetimeNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.adddatetimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalltypeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.halltypeColumn)
        End Function
        
        Public Sub SethalltypeNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.halltypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.BOOKINGTYPEColumn)
        End Function
        
        Public Sub SetBOOKINGTYPENull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.BOOKINGTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallTaxpercentageNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.hallTaxpercentageColumn)
        End Function
        
        Public Sub SethallTaxpercentageNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.hallTaxpercentageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallTaxAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.hallTaxAMOUNTColumn)
        End Function
        
        Public Sub SethallTaxAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.hallTaxAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNETHALLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.NETHALLAMOUNTColumn)
        End Function
        
        Public Sub SetNETHALLAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.NETHALLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.VEGColumn)
        End Function
        
        Public Sub SetVEGNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.VEGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnonvegNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.nonvegColumn)
        End Function
        
        Public Sub SetnonvegNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.nonvegColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKDETAILS.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKDETAILS.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_BOOKDETAILSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_VIEW_BOOKDETAILSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_VIEW_BOOKDETAILSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_VIEW_BOOKDETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRA_ITEMDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnROWID As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnTTYPE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnROUNDOFF As DataColumn
        
        Private columnTAXPERC As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnCANCELAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Private columnGROUPCODE As DataColumn
        
        Private columnMENUCODE As DataColumn
        
        Private columnTARIFFCODE As DataColumn
        
        Private columnMAXITEMS As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnCHITNO As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("PRA_ITEM")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ROWIDColumn As DataColumn
            Get
                Return Me.columnROWID
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property TTYPEColumn As DataColumn
            Get
                Return Me.columnTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property ROUNDOFFColumn As DataColumn
            Get
                Return Me.columnROUNDOFF
            End Get
        End Property
        
        Friend ReadOnly Property TAXPERCColumn As DataColumn
            Get
                Return Me.columnTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property CANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property GROUPCODEColumn As DataColumn
            Get
                Return Me.columnGROUPCODE
            End Get
        End Property
        
        Friend ReadOnly Property MENUCODEColumn As DataColumn
            Get
                Return Me.columnMENUCODE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFCODEColumn As DataColumn
            Get
                Return Me.columnTARIFFCODE
            End Get
        End Property
        
        Friend ReadOnly Property MAXITEMSColumn As DataColumn
            Get
                Return Me.columnMAXITEMS
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property CHITNOColumn As DataColumn
            Get
                Return Me.columnCHITNO
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRA_ITEMRow
            Get
                Return CType(Me.Rows(index),PRA_ITEMRow)
            End Get
        End Property
        
        Public Event PRA_ITEMRowChanged As PRA_ITEMRowChangeEventHandler
        
        Public Event PRA_ITEMRowChanging As PRA_ITEMRowChangeEventHandler
        
        Public Event PRA_ITEMRowDeleted As PRA_ITEMRowChangeEventHandler
        
        Public Event PRA_ITEMRowDeleting As PRA_ITEMRowChangeEventHandler
        
        Public Overloads Sub AddPRA_ITEMRow(ByVal row As PRA_ITEMRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPRA_ITEMRow( _
                    ByVal ROWID As Decimal,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal TTYPE As String,  _
                    ByVal ITEMCODE As String,  _
                    ByVal RATE As Decimal,  _
                    ByVal QTY As Decimal,  _
                    ByVal ROUNDOFF As Decimal,  _
                    ByVal TAXPERC As Decimal,  _
                    ByVal TAXAMOUNT As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal CANCELAMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal ADDUSERID As String,  _
                    ByVal ADDDATETIME As Date,  _
                    ByVal GROUPCODE As String,  _
                    ByVal MENUCODE As String,  _
                    ByVal TARIFFCODE As String,  _
                    ByVal MAXITEMS As Decimal,  _
                    ByVal LOCCODE As String,  _
                    ByVal CHITNO As String,  _
                    ByVal ITEMDESC As String,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String) As PRA_ITEMRow
            Dim rowPRA_ITEMRow As PRA_ITEMRow = CType(Me.NewRow,PRA_ITEMRow)
            rowPRA_ITEMRow.ItemArray = New Object() {ROWID, BOOKINGNO, BOOKINGTYPE, BOOKINGDATE, TTYPE, ITEMCODE, RATE, QTY, ROUNDOFF, TAXPERC, TAXAMOUNT, AMOUNT, TOTALAMOUNT, CANCELAMOUNT, FREEZE, ADDUSERID, ADDDATETIME, GROUPCODE, MENUCODE, TARIFFCODE, MAXITEMS, LOCCODE, CHITNO, ITEMDESC, MCODE, MNAME}
            Me.Rows.Add(rowPRA_ITEMRow)
            Return rowPRA_ITEMRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PRA_ITEMDataTable = CType(MyBase.Clone,PRA_ITEMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PRA_ITEMDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnROWID = Me.Columns("ROWID")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnTTYPE = Me.Columns("TTYPE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnROUNDOFF = Me.Columns("ROUNDOFF")
            Me.columnTAXPERC = Me.Columns("TAXPERC")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnCANCELAMOUNT = Me.Columns("CANCELAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
            Me.columnGROUPCODE = Me.Columns("GROUPCODE")
            Me.columnMENUCODE = Me.Columns("MENUCODE")
            Me.columnTARIFFCODE = Me.Columns("TARIFFCODE")
            Me.columnMAXITEMS = Me.Columns("MAXITEMS")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnCHITNO = Me.Columns("CHITNO")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnROWID = New DataColumn("ROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROWID)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnTTYPE = New DataColumn("TTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTYPE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnROUNDOFF = New DataColumn("ROUNDOFF", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROUNDOFF)
            Me.columnTAXPERC = New DataColumn("TAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXPERC)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnCANCELAMOUNT = New DataColumn("CANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnGROUPCODE = New DataColumn("GROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPCODE)
            Me.columnMENUCODE = New DataColumn("MENUCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMENUCODE)
            Me.columnTARIFFCODE = New DataColumn("TARIFFCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFCODE)
            Me.columnMAXITEMS = New DataColumn("MAXITEMS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMAXITEMS)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnCHITNO = New DataColumn("CHITNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHITNO)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnROWID.AllowDBNull = false
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnBOOKINGTYPE.AllowDBNull = false
            Me.columnITEMCODE.AllowDBNull = false
        End Sub
        
        Public Function NewPRA_ITEMRow() As PRA_ITEMRow
            Return CType(Me.NewRow,PRA_ITEMRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PRA_ITEMRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PRA_ITEMRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRA_ITEMRowChangedEvent) Is Nothing) Then
                RaiseEvent PRA_ITEMRowChanged(Me, New PRA_ITEMRowChangeEvent(CType(e.Row,PRA_ITEMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRA_ITEMRowChangingEvent) Is Nothing) Then
                RaiseEvent PRA_ITEMRowChanging(Me, New PRA_ITEMRowChangeEvent(CType(e.Row,PRA_ITEMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRA_ITEMRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRA_ITEMRowDeleted(Me, New PRA_ITEMRowChangeEvent(CType(e.Row,PRA_ITEMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRA_ITEMRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRA_ITEMRowDeleting(Me, New PRA_ITEMRowChangeEvent(CType(e.Row,PRA_ITEMRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePRA_ITEMRow(ByVal row As PRA_ITEMRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRA_ITEMRow
        Inherits DataRow
        
        Private tablePRA_ITEM As PRA_ITEMDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRA_ITEM = CType(Me.Table,PRA_ITEMDataTable)
        End Sub
        
        Public Property ROWID As Decimal
            Get
                Return CType(Me(Me.tablePRA_ITEM.ROWIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRA_ITEM.ROWIDColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePRA_ITEM.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRA_ITEM.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Return CType(Me(Me.tablePRA_ITEM.BOOKINGTYPEColumn),String)
            End Get
            Set
                Me(Me.tablePRA_ITEM.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property TTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.TTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.TTYPEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tablePRA_ITEM.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tablePRA_ITEM.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.RATEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.QTYColumn) = value
            End Set
        End Property
        
        Public Property ROUNDOFF As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.ROUNDOFFColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.ROUNDOFFColumn) = value
            End Set
        End Property
        
        Public Property TAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.TAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.TAXPERCColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property CANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.CANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.CANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property GROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.GROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.GROUPCODEColumn) = value
            End Set
        End Property
        
        Public Property MENUCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.MENUCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.MENUCODEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.TARIFFCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.TARIFFCODEColumn) = value
            End Set
        End Property
        
        Public Property MAXITEMS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.MAXITEMSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.MAXITEMSColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property CHITNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.CHITNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.CHITNOColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePRA_ITEM.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePRA_ITEM.MNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePRA_ITEM.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.TTYPEColumn)
        End Function
        
        Public Sub SetTTYPENull()
            Me(Me.tablePRA_ITEM.TTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePRA_ITEM.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tablePRA_ITEM.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsROUNDOFFNull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.ROUNDOFFColumn)
        End Function
        
        Public Sub SetROUNDOFFNull()
            Me(Me.tablePRA_ITEM.ROUNDOFFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.TAXPERCColumn)
        End Function
        
        Public Sub SetTAXPERCNull()
            Me(Me.tablePRA_ITEM.TAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tablePRA_ITEM.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePRA_ITEM.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePRA_ITEM.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.CANCELAMOUNTColumn)
        End Function
        
        Public Sub SetCANCELAMOUNTNull()
            Me(Me.tablePRA_ITEM.CANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePRA_ITEM.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tablePRA_ITEM.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablePRA_ITEM.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.GROUPCODEColumn)
        End Function
        
        Public Sub SetGROUPCODENull()
            Me(Me.tablePRA_ITEM.GROUPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMENUCODENull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.MENUCODEColumn)
        End Function
        
        Public Sub SetMENUCODENull()
            Me(Me.tablePRA_ITEM.MENUCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFCODENull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.TARIFFCODEColumn)
        End Function
        
        Public Sub SetTARIFFCODENull()
            Me(Me.tablePRA_ITEM.TARIFFCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMAXITEMSNull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.MAXITEMSColumn)
        End Function
        
        Public Sub SetMAXITEMSNull()
            Me(Me.tablePRA_ITEM.MAXITEMSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePRA_ITEM.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHITNONull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.CHITNOColumn)
        End Function
        
        Public Sub SetCHITNONull()
            Me(Me.tablePRA_ITEM.CHITNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tablePRA_ITEM.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePRA_ITEM.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePRA_ITEM.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablePRA_ITEM.MNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRA_ITEMRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PRA_ITEMRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PRA_ITEMRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PRA_ITEMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_PENDINGBILLDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnpartydate As DataColumn
        
        Private columntax As DataColumn
        
        Private columnsertax As DataColumn
        
        Private columnamount As DataColumn
        
        Private columndiscount As DataColumn
        
        Private columntotalamount As DataColumn
        
        Private columnitemtotamount As DataColumn
        
        Private columnbanquethallamount As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnRECAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_PENDINGBILL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property partydateColumn As DataColumn
            Get
                Return Me.columnpartydate
            End Get
        End Property
        
        Friend ReadOnly Property taxColumn As DataColumn
            Get
                Return Me.columntax
            End Get
        End Property
        
        Friend ReadOnly Property sertaxColumn As DataColumn
            Get
                Return Me.columnsertax
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property discountColumn As DataColumn
            Get
                Return Me.columndiscount
            End Get
        End Property
        
        Friend ReadOnly Property totalamountColumn As DataColumn
            Get
                Return Me.columntotalamount
            End Get
        End Property
        
        Friend ReadOnly Property itemtotamountColumn As DataColumn
            Get
                Return Me.columnitemtotamount
            End Get
        End Property
        
        Friend ReadOnly Property banquethallamountColumn As DataColumn
            Get
                Return Me.columnbanquethallamount
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property RECAMOUNTColumn As DataColumn
            Get
                Return Me.columnRECAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_PENDINGBILLRow
            Get
                Return CType(Me.Rows(index),PARTY_PENDINGBILLRow)
            End Get
        End Property
        
        Public Event PARTY_PENDINGBILLRowChanged As PARTY_PENDINGBILLRowChangeEventHandler
        
        Public Event PARTY_PENDINGBILLRowChanging As PARTY_PENDINGBILLRowChangeEventHandler
        
        Public Event PARTY_PENDINGBILLRowDeleted As PARTY_PENDINGBILLRowChangeEventHandler
        
        Public Event PARTY_PENDINGBILLRowDeleting As PARTY_PENDINGBILLRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_PENDINGBILLRow(ByVal row As PARTY_PENDINGBILLRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_PENDINGBILLRow(ByVal BOOKINGNO As Decimal, ByVal BOOKINGDATE As Date, ByVal partydate As Date, ByVal tax As Decimal, ByVal sertax As Decimal, ByVal amount As Decimal, ByVal discount As Decimal, ByVal totalamount As Decimal, ByVal itemtotamount As Decimal, ByVal banquethallamount As Decimal, ByVal MCODE As String, ByVal ASSOCIATENAME As String, ByVal RECAMOUNT As Decimal) As PARTY_PENDINGBILLRow
            Dim rowPARTY_PENDINGBILLRow As PARTY_PENDINGBILLRow = CType(Me.NewRow,PARTY_PENDINGBILLRow)
            rowPARTY_PENDINGBILLRow.ItemArray = New Object() {BOOKINGNO, BOOKINGDATE, partydate, tax, sertax, amount, discount, totalamount, itemtotamount, banquethallamount, MCODE, ASSOCIATENAME, RECAMOUNT}
            Me.Rows.Add(rowPARTY_PENDINGBILLRow)
            Return rowPARTY_PENDINGBILLRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_PENDINGBILLDataTable = CType(MyBase.Clone,PARTY_PENDINGBILLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_PENDINGBILLDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnpartydate = Me.Columns("partydate")
            Me.columntax = Me.Columns("tax")
            Me.columnsertax = Me.Columns("sertax")
            Me.columnamount = Me.Columns("amount")
            Me.columndiscount = Me.Columns("discount")
            Me.columntotalamount = Me.Columns("totalamount")
            Me.columnitemtotamount = Me.Columns("itemtotamount")
            Me.columnbanquethallamount = Me.Columns("banquethallamount")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnRECAMOUNT = Me.Columns("RECAMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnpartydate = New DataColumn("partydate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpartydate)
            Me.columntax = New DataColumn("tax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntax)
            Me.columnsertax = New DataColumn("sertax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsertax)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columndiscount = New DataColumn("discount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscount)
            Me.columntotalamount = New DataColumn("totalamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotalamount)
            Me.columnitemtotamount = New DataColumn("itemtotamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemtotamount)
            Me.columnbanquethallamount = New DataColumn("banquethallamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbanquethallamount)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnRECAMOUNT = New DataColumn("RECAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECAMOUNT)
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columndiscount.AllowDBNull = false
            Me.columnbanquethallamount.AllowDBNull = false
        End Sub
        
        Public Function NewPARTY_PENDINGBILLRow() As PARTY_PENDINGBILLRow
            Return CType(Me.NewRow,PARTY_PENDINGBILLRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_PENDINGBILLRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_PENDINGBILLRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_PENDINGBILLRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_PENDINGBILLRowChanged(Me, New PARTY_PENDINGBILLRowChangeEvent(CType(e.Row,PARTY_PENDINGBILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_PENDINGBILLRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_PENDINGBILLRowChanging(Me, New PARTY_PENDINGBILLRowChangeEvent(CType(e.Row,PARTY_PENDINGBILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_PENDINGBILLRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_PENDINGBILLRowDeleted(Me, New PARTY_PENDINGBILLRowChangeEvent(CType(e.Row,PARTY_PENDINGBILLRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_PENDINGBILLRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_PENDINGBILLRowDeleting(Me, New PARTY_PENDINGBILLRowChangeEvent(CType(e.Row,PARTY_PENDINGBILLRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_PENDINGBILLRow(ByVal row As PARTY_PENDINGBILLRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_PENDINGBILLRow
        Inherits DataRow
        
        Private tablePARTY_PENDINGBILL As PARTY_PENDINGBILLDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_PENDINGBILL = CType(Me.Table,PARTY_PENDINGBILLDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePARTY_PENDINGBILL.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property partydate As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.partydateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.partydateColumn) = value
            End Set
        End Property
        
        Public Property tax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.taxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.taxColumn) = value
            End Set
        End Property
        
        Public Property sertax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.sertaxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.sertaxColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.amountColumn) = value
            End Set
        End Property
        
        Public Property discount As Decimal
            Get
                Return CType(Me(Me.tablePARTY_PENDINGBILL.discountColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.discountColumn) = value
            End Set
        End Property
        
        Public Property totalamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.totalamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.totalamountColumn) = value
            End Set
        End Property
        
        Public Property itemtotamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.itemtotamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.itemtotamountColumn) = value
            End Set
        End Property
        
        Public Property banquethallamount As Decimal
            Get
                Return CType(Me(Me.tablePARTY_PENDINGBILL.banquethallamountColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.banquethallamountColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property RECAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_PENDINGBILL.RECAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_PENDINGBILL.RECAMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_PENDINGBILL.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspartydateNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.partydateColumn)
        End Function
        
        Public Sub SetpartydateNull()
            Me(Me.tablePARTY_PENDINGBILL.partydateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.taxColumn)
        End Function
        
        Public Sub SettaxNull()
            Me(Me.tablePARTY_PENDINGBILL.taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssertaxNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.sertaxColumn)
        End Function
        
        Public Sub SetsertaxNull()
            Me(Me.tablePARTY_PENDINGBILL.sertaxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tablePARTY_PENDINGBILL.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotalamountNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.totalamountColumn)
        End Function
        
        Public Sub SettotalamountNull()
            Me(Me.tablePARTY_PENDINGBILL.totalamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsitemtotamountNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.itemtotamountColumn)
        End Function
        
        Public Sub SetitemtotamountNull()
            Me(Me.tablePARTY_PENDINGBILL.itemtotamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_PENDINGBILL.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tablePARTY_PENDINGBILL.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_PENDINGBILL.RECAMOUNTColumn)
        End Function
        
        Public Sub SetRECAMOUNTNull()
            Me(Me.tablePARTY_PENDINGBILL.RECAMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_PENDINGBILLRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_PENDINGBILLRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_PENDINGBILLRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_PENDINGBILLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_MENU_LISTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCATEGORY As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMNAME As DataColumn
        
        Private columnTAXCODE As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnRATE As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_MENU_LIST")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CATEGORYColumn As DataColumn
            Get
                Return Me.columnCATEGORY
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMNAMEColumn As DataColumn
            Get
                Return Me.columnITEMNAME
            End Get
        End Property
        
        Friend ReadOnly Property TAXCODEColumn As DataColumn
            Get
                Return Me.columnTAXCODE
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_MENU_LISTRow
            Get
                Return CType(Me.Rows(index),PARTY_MENU_LISTRow)
            End Get
        End Property
        
        Public Event PARTY_MENU_LISTRowChanged As PARTY_MENU_LISTRowChangeEventHandler
        
        Public Event PARTY_MENU_LISTRowChanging As PARTY_MENU_LISTRowChangeEventHandler
        
        Public Event PARTY_MENU_LISTRowDeleted As PARTY_MENU_LISTRowChangeEventHandler
        
        Public Event PARTY_MENU_LISTRowDeleting As PARTY_MENU_LISTRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_MENU_LISTRow(ByVal row As PARTY_MENU_LISTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_MENU_LISTRow(ByVal CATEGORY As String, ByVal ITEMCODE As String, ByVal ITEMNAME As String, ByVal TAXCODE As String, ByVal UOM As String, ByVal RATE As Decimal) As PARTY_MENU_LISTRow
            Dim rowPARTY_MENU_LISTRow As PARTY_MENU_LISTRow = CType(Me.NewRow,PARTY_MENU_LISTRow)
            rowPARTY_MENU_LISTRow.ItemArray = New Object() {CATEGORY, ITEMCODE, ITEMNAME, TAXCODE, UOM, RATE}
            Me.Rows.Add(rowPARTY_MENU_LISTRow)
            Return rowPARTY_MENU_LISTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_MENU_LISTDataTable = CType(MyBase.Clone,PARTY_MENU_LISTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_MENU_LISTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCATEGORY = Me.Columns("CATEGORY")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMNAME = Me.Columns("ITEMNAME")
            Me.columnTAXCODE = Me.Columns("TAXCODE")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnRATE = Me.Columns("RATE")
        End Sub
        
        Private Sub InitClass()
            Me.columnCATEGORY = New DataColumn("CATEGORY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATEGORY)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMNAME = New DataColumn("ITEMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMNAME)
            Me.columnTAXCODE = New DataColumn("TAXCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXCODE)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnCATEGORY.ReadOnly = true
            Me.columnITEMCODE.ReadOnly = true
            Me.columnITEMNAME.ReadOnly = true
            Me.columnTAXCODE.ReadOnly = true
            Me.columnUOM.ReadOnly = true
            Me.columnRATE.ReadOnly = true
        End Sub
        
        Public Function NewPARTY_MENU_LISTRow() As PARTY_MENU_LISTRow
            Return CType(Me.NewRow,PARTY_MENU_LISTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_MENU_LISTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_MENU_LISTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_MENU_LISTRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_MENU_LISTRowChanged(Me, New PARTY_MENU_LISTRowChangeEvent(CType(e.Row,PARTY_MENU_LISTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_MENU_LISTRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_MENU_LISTRowChanging(Me, New PARTY_MENU_LISTRowChangeEvent(CType(e.Row,PARTY_MENU_LISTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_MENU_LISTRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_MENU_LISTRowDeleted(Me, New PARTY_MENU_LISTRowChangeEvent(CType(e.Row,PARTY_MENU_LISTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_MENU_LISTRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_MENU_LISTRowDeleting(Me, New PARTY_MENU_LISTRowChangeEvent(CType(e.Row,PARTY_MENU_LISTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_MENU_LISTRow(ByVal row As PARTY_MENU_LISTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_MENU_LISTRow
        Inherits DataRow
        
        Private tablePARTY_MENU_LIST As PARTY_MENU_LISTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_MENU_LIST = CType(Me.Table,PARTY_MENU_LISTDataTable)
        End Sub
        
        Public Property CATEGORY As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MENU_LIST.CATEGORYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MENU_LIST.CATEGORYColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MENU_LIST.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MENU_LIST.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MENU_LIST.ITEMNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MENU_LIST.ITEMNAMEColumn) = value
            End Set
        End Property
        
        Public Property TAXCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MENU_LIST.TAXCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MENU_LIST.TAXCODEColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MENU_LIST.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MENU_LIST.UOMColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MENU_LIST.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MENU_LIST.RATEColumn) = value
            End Set
        End Property
        
        Public Function IsCATEGORYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MENU_LIST.CATEGORYColumn)
        End Function
        
        Public Sub SetCATEGORYNull()
            Me(Me.tablePARTY_MENU_LIST.CATEGORYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MENU_LIST.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tablePARTY_MENU_LIST.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MENU_LIST.ITEMNAMEColumn)
        End Function
        
        Public Sub SetITEMNAMENull()
            Me(Me.tablePARTY_MENU_LIST.ITEMNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MENU_LIST.TAXCODEColumn)
        End Function
        
        Public Sub SetTAXCODENull()
            Me(Me.tablePARTY_MENU_LIST.TAXCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MENU_LIST.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tablePARTY_MENU_LIST.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MENU_LIST.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePARTY_MENU_LIST.RATEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_MENU_LISTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_MENU_LISTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_MENU_LISTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_MENU_LISTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
