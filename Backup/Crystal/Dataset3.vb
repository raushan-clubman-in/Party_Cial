'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.2494
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset3
    Inherits DataSet
    
    Private tablePARTY_SUMMARY_SECOND As PARTY_SUMMARY_SECONDDataTable
    
    Private tablePARTY_SUMMARY_ADJSUTED As PARTY_SUMMARY_ADJSUTEDDataTable
    
    Private tablePARTY_SUMMARY_NOTADJSUT As PARTY_SUMMARY_NOTADJSUTDataTable
    
    Private tablePARTY_VIEW_HALLBOOKINGDETAILS As PARTY_VIEW_HALLBOOKINGDETAILSDataTable
    
    Private tablePAR_BARITEM As PAR_BARITEMDataTable
    
    Private tableparty_itemmaster As party_itemmasterDataTable
    
    Private tablePAR_ITEMMASTER As PAR_ITEMMASTERDataTable
    
    Private tablePARTY_ARRANGEMASTERDET As PARTY_ARRANGEMASTERDETDataTable
    
    Private tablepar_ITEMTYPEMASTER As par_ITEMTYPEMASTERDataTable
    
    Private tableVIEW_PARTY_BILLING As VIEW_PARTY_BILLINGDataTable
    
    Private tableVIEW_PARTY_BILLING_ACCOUNTS As VIEW_PARTY_BILLING_ACCOUNTSDataTable
    
    Private tablePARTY_ACC_POST As PARTY_ACC_POSTDataTable
    
    Private tablecateringbillreport As cateringbillreportDataTable
    
    Private tablePARTY_ADDITEMS As PARTY_ADDITEMSDataTable
    
    Private tablePARTY_ADDITEMS1 As PARTY_ADDITEMS1DataTable
    
    Private tablePARTY_RESERVATIONDETAIL As PARTY_RESERVATIONDETAILDataTable
    
    Private tablePARTY_RECEIPTREPORT As PARTY_RECEIPTREPORTDataTable
    
    Private tablePARTY_RECEIPTREPORT1 As PARTY_RECEIPTREPORT1DataTable
    
    Private tablePARTY_BOOKDETAILS As PARTY_BOOKDETAILSDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PARTY_SUMMARY_SECOND")) Is Nothing) Then
                Me.Tables.Add(New PARTY_SUMMARY_SECONDDataTable(ds.Tables("PARTY_SUMMARY_SECOND")))
            End If
            If (Not (ds.Tables("PARTY_SUMMARY_ADJSUTED")) Is Nothing) Then
                Me.Tables.Add(New PARTY_SUMMARY_ADJSUTEDDataTable(ds.Tables("PARTY_SUMMARY_ADJSUTED")))
            End If
            If (Not (ds.Tables("PARTY_SUMMARY_NOTADJSUT")) Is Nothing) Then
                Me.Tables.Add(New PARTY_SUMMARY_NOTADJSUTDataTable(ds.Tables("PARTY_SUMMARY_NOTADJSUT")))
            End If
            If (Not (ds.Tables("PARTY_VIEW_HALLBOOKINGDETAILS")) Is Nothing) Then
                Me.Tables.Add(New PARTY_VIEW_HALLBOOKINGDETAILSDataTable(ds.Tables("PARTY_VIEW_HALLBOOKINGDETAILS")))
            End If
            If (Not (ds.Tables("PAR_BARITEM")) Is Nothing) Then
                Me.Tables.Add(New PAR_BARITEMDataTable(ds.Tables("PAR_BARITEM")))
            End If
            If (Not (ds.Tables("party_itemmaster")) Is Nothing) Then
                Me.Tables.Add(New party_itemmasterDataTable(ds.Tables("party_itemmaster")))
            End If
            If (Not (ds.Tables("PAR_ITEMMASTER")) Is Nothing) Then
                Me.Tables.Add(New PAR_ITEMMASTERDataTable(ds.Tables("PAR_ITEMMASTER")))
            End If
            If (Not (ds.Tables("PARTY_ARRANGEMASTERDET")) Is Nothing) Then
                Me.Tables.Add(New PARTY_ARRANGEMASTERDETDataTable(ds.Tables("PARTY_ARRANGEMASTERDET")))
            End If
            If (Not (ds.Tables("par_ITEMTYPEMASTER")) Is Nothing) Then
                Me.Tables.Add(New par_ITEMTYPEMASTERDataTable(ds.Tables("par_ITEMTYPEMASTER")))
            End If
            If (Not (ds.Tables("VIEW_PARTY_BILLING")) Is Nothing) Then
                Me.Tables.Add(New VIEW_PARTY_BILLINGDataTable(ds.Tables("VIEW_PARTY_BILLING")))
            End If
            If (Not (ds.Tables("VIEW_PARTY_BILLING_ACCOUNTS")) Is Nothing) Then
                Me.Tables.Add(New VIEW_PARTY_BILLING_ACCOUNTSDataTable(ds.Tables("VIEW_PARTY_BILLING_ACCOUNTS")))
            End If
            If (Not (ds.Tables("PARTY_ACC_POST")) Is Nothing) Then
                Me.Tables.Add(New PARTY_ACC_POSTDataTable(ds.Tables("PARTY_ACC_POST")))
            End If
            If (Not (ds.Tables("cateringbillreport")) Is Nothing) Then
                Me.Tables.Add(New cateringbillreportDataTable(ds.Tables("cateringbillreport")))
            End If
            If (Not (ds.Tables("PARTY_ADDITEMS")) Is Nothing) Then
                Me.Tables.Add(New PARTY_ADDITEMSDataTable(ds.Tables("PARTY_ADDITEMS")))
            End If
            If (Not (ds.Tables("PARTY_ADDITEMS1")) Is Nothing) Then
                Me.Tables.Add(New PARTY_ADDITEMS1DataTable(ds.Tables("PARTY_ADDITEMS1")))
            End If
            If (Not (ds.Tables("PARTY_RESERVATIONDETAIL")) Is Nothing) Then
                Me.Tables.Add(New PARTY_RESERVATIONDETAILDataTable(ds.Tables("PARTY_RESERVATIONDETAIL")))
            End If
            If (Not (ds.Tables("PARTY_RECEIPTREPORT")) Is Nothing) Then
                Me.Tables.Add(New PARTY_RECEIPTREPORTDataTable(ds.Tables("PARTY_RECEIPTREPORT")))
            End If
            If (Not (ds.Tables("PARTY_RECEIPTREPORT1")) Is Nothing) Then
                Me.Tables.Add(New PARTY_RECEIPTREPORT1DataTable(ds.Tables("PARTY_RECEIPTREPORT1")))
            End If
            If (Not (ds.Tables("PARTY_BOOKDETAILS")) Is Nothing) Then
                Me.Tables.Add(New PARTY_BOOKDETAILSDataTable(ds.Tables("PARTY_BOOKDETAILS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_SUMMARY_SECOND As PARTY_SUMMARY_SECONDDataTable
        Get
            Return Me.tablePARTY_SUMMARY_SECOND
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_SUMMARY_ADJSUTED As PARTY_SUMMARY_ADJSUTEDDataTable
        Get
            Return Me.tablePARTY_SUMMARY_ADJSUTED
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_SUMMARY_NOTADJSUT As PARTY_SUMMARY_NOTADJSUTDataTable
        Get
            Return Me.tablePARTY_SUMMARY_NOTADJSUT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_VIEW_HALLBOOKINGDETAILS As PARTY_VIEW_HALLBOOKINGDETAILSDataTable
        Get
            Return Me.tablePARTY_VIEW_HALLBOOKINGDETAILS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PAR_BARITEM As PAR_BARITEMDataTable
        Get
            Return Me.tablePAR_BARITEM
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property party_itemmaster As party_itemmasterDataTable
        Get
            Return Me.tableparty_itemmaster
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PAR_ITEMMASTER As PAR_ITEMMASTERDataTable
        Get
            Return Me.tablePAR_ITEMMASTER
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_ARRANGEMASTERDET As PARTY_ARRANGEMASTERDETDataTable
        Get
            Return Me.tablePARTY_ARRANGEMASTERDET
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property par_ITEMTYPEMASTER As par_ITEMTYPEMASTERDataTable
        Get
            Return Me.tablepar_ITEMTYPEMASTER
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARTY_BILLING As VIEW_PARTY_BILLINGDataTable
        Get
            Return Me.tableVIEW_PARTY_BILLING
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARTY_BILLING_ACCOUNTS As VIEW_PARTY_BILLING_ACCOUNTSDataTable
        Get
            Return Me.tableVIEW_PARTY_BILLING_ACCOUNTS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_ACC_POST As PARTY_ACC_POSTDataTable
        Get
            Return Me.tablePARTY_ACC_POST
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property cateringbillreport As cateringbillreportDataTable
        Get
            Return Me.tablecateringbillreport
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_ADDITEMS As PARTY_ADDITEMSDataTable
        Get
            Return Me.tablePARTY_ADDITEMS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_ADDITEMS1 As PARTY_ADDITEMS1DataTable
        Get
            Return Me.tablePARTY_ADDITEMS1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_RESERVATIONDETAIL As PARTY_RESERVATIONDETAILDataTable
        Get
            Return Me.tablePARTY_RESERVATIONDETAIL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_RECEIPTREPORT As PARTY_RECEIPTREPORTDataTable
        Get
            Return Me.tablePARTY_RECEIPTREPORT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_RECEIPTREPORT1 As PARTY_RECEIPTREPORT1DataTable
        Get
            Return Me.tablePARTY_RECEIPTREPORT1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_BOOKDETAILS As PARTY_BOOKDETAILSDataTable
        Get
            Return Me.tablePARTY_BOOKDETAILS
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset3 = CType(MyBase.Clone,Dataset3)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("PARTY_SUMMARY_SECOND")) Is Nothing) Then
            Me.Tables.Add(New PARTY_SUMMARY_SECONDDataTable(ds.Tables("PARTY_SUMMARY_SECOND")))
        End If
        If (Not (ds.Tables("PARTY_SUMMARY_ADJSUTED")) Is Nothing) Then
            Me.Tables.Add(New PARTY_SUMMARY_ADJSUTEDDataTable(ds.Tables("PARTY_SUMMARY_ADJSUTED")))
        End If
        If (Not (ds.Tables("PARTY_SUMMARY_NOTADJSUT")) Is Nothing) Then
            Me.Tables.Add(New PARTY_SUMMARY_NOTADJSUTDataTable(ds.Tables("PARTY_SUMMARY_NOTADJSUT")))
        End If
        If (Not (ds.Tables("PARTY_VIEW_HALLBOOKINGDETAILS")) Is Nothing) Then
            Me.Tables.Add(New PARTY_VIEW_HALLBOOKINGDETAILSDataTable(ds.Tables("PARTY_VIEW_HALLBOOKINGDETAILS")))
        End If
        If (Not (ds.Tables("PAR_BARITEM")) Is Nothing) Then
            Me.Tables.Add(New PAR_BARITEMDataTable(ds.Tables("PAR_BARITEM")))
        End If
        If (Not (ds.Tables("party_itemmaster")) Is Nothing) Then
            Me.Tables.Add(New party_itemmasterDataTable(ds.Tables("party_itemmaster")))
        End If
        If (Not (ds.Tables("PAR_ITEMMASTER")) Is Nothing) Then
            Me.Tables.Add(New PAR_ITEMMASTERDataTable(ds.Tables("PAR_ITEMMASTER")))
        End If
        If (Not (ds.Tables("PARTY_ARRANGEMASTERDET")) Is Nothing) Then
            Me.Tables.Add(New PARTY_ARRANGEMASTERDETDataTable(ds.Tables("PARTY_ARRANGEMASTERDET")))
        End If
        If (Not (ds.Tables("par_ITEMTYPEMASTER")) Is Nothing) Then
            Me.Tables.Add(New par_ITEMTYPEMASTERDataTable(ds.Tables("par_ITEMTYPEMASTER")))
        End If
        If (Not (ds.Tables("VIEW_PARTY_BILLING")) Is Nothing) Then
            Me.Tables.Add(New VIEW_PARTY_BILLINGDataTable(ds.Tables("VIEW_PARTY_BILLING")))
        End If
        If (Not (ds.Tables("VIEW_PARTY_BILLING_ACCOUNTS")) Is Nothing) Then
            Me.Tables.Add(New VIEW_PARTY_BILLING_ACCOUNTSDataTable(ds.Tables("VIEW_PARTY_BILLING_ACCOUNTS")))
        End If
        If (Not (ds.Tables("PARTY_ACC_POST")) Is Nothing) Then
            Me.Tables.Add(New PARTY_ACC_POSTDataTable(ds.Tables("PARTY_ACC_POST")))
        End If
        If (Not (ds.Tables("cateringbillreport")) Is Nothing) Then
            Me.Tables.Add(New cateringbillreportDataTable(ds.Tables("cateringbillreport")))
        End If
        If (Not (ds.Tables("PARTY_ADDITEMS")) Is Nothing) Then
            Me.Tables.Add(New PARTY_ADDITEMSDataTable(ds.Tables("PARTY_ADDITEMS")))
        End If
        If (Not (ds.Tables("PARTY_ADDITEMS1")) Is Nothing) Then
            Me.Tables.Add(New PARTY_ADDITEMS1DataTable(ds.Tables("PARTY_ADDITEMS1")))
        End If
        If (Not (ds.Tables("PARTY_RESERVATIONDETAIL")) Is Nothing) Then
            Me.Tables.Add(New PARTY_RESERVATIONDETAILDataTable(ds.Tables("PARTY_RESERVATIONDETAIL")))
        End If
        If (Not (ds.Tables("PARTY_RECEIPTREPORT")) Is Nothing) Then
            Me.Tables.Add(New PARTY_RECEIPTREPORTDataTable(ds.Tables("PARTY_RECEIPTREPORT")))
        End If
        If (Not (ds.Tables("PARTY_RECEIPTREPORT1")) Is Nothing) Then
            Me.Tables.Add(New PARTY_RECEIPTREPORT1DataTable(ds.Tables("PARTY_RECEIPTREPORT1")))
        End If
        If (Not (ds.Tables("PARTY_BOOKDETAILS")) Is Nothing) Then
            Me.Tables.Add(New PARTY_BOOKDETAILSDataTable(ds.Tables("PARTY_BOOKDETAILS")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePARTY_SUMMARY_SECOND = CType(Me.Tables("PARTY_SUMMARY_SECOND"),PARTY_SUMMARY_SECONDDataTable)
        If (Not (Me.tablePARTY_SUMMARY_SECOND) Is Nothing) Then
            Me.tablePARTY_SUMMARY_SECOND.InitVars
        End If
        Me.tablePARTY_SUMMARY_ADJSUTED = CType(Me.Tables("PARTY_SUMMARY_ADJSUTED"),PARTY_SUMMARY_ADJSUTEDDataTable)
        If (Not (Me.tablePARTY_SUMMARY_ADJSUTED) Is Nothing) Then
            Me.tablePARTY_SUMMARY_ADJSUTED.InitVars
        End If
        Me.tablePARTY_SUMMARY_NOTADJSUT = CType(Me.Tables("PARTY_SUMMARY_NOTADJSUT"),PARTY_SUMMARY_NOTADJSUTDataTable)
        If (Not (Me.tablePARTY_SUMMARY_NOTADJSUT) Is Nothing) Then
            Me.tablePARTY_SUMMARY_NOTADJSUT.InitVars
        End If
        Me.tablePARTY_VIEW_HALLBOOKINGDETAILS = CType(Me.Tables("PARTY_VIEW_HALLBOOKINGDETAILS"),PARTY_VIEW_HALLBOOKINGDETAILSDataTable)
        If (Not (Me.tablePARTY_VIEW_HALLBOOKINGDETAILS) Is Nothing) Then
            Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.InitVars
        End If
        Me.tablePAR_BARITEM = CType(Me.Tables("PAR_BARITEM"),PAR_BARITEMDataTable)
        If (Not (Me.tablePAR_BARITEM) Is Nothing) Then
            Me.tablePAR_BARITEM.InitVars
        End If
        Me.tableparty_itemmaster = CType(Me.Tables("party_itemmaster"),party_itemmasterDataTable)
        If (Not (Me.tableparty_itemmaster) Is Nothing) Then
            Me.tableparty_itemmaster.InitVars
        End If
        Me.tablePAR_ITEMMASTER = CType(Me.Tables("PAR_ITEMMASTER"),PAR_ITEMMASTERDataTable)
        If (Not (Me.tablePAR_ITEMMASTER) Is Nothing) Then
            Me.tablePAR_ITEMMASTER.InitVars
        End If
        Me.tablePARTY_ARRANGEMASTERDET = CType(Me.Tables("PARTY_ARRANGEMASTERDET"),PARTY_ARRANGEMASTERDETDataTable)
        If (Not (Me.tablePARTY_ARRANGEMASTERDET) Is Nothing) Then
            Me.tablePARTY_ARRANGEMASTERDET.InitVars
        End If
        Me.tablepar_ITEMTYPEMASTER = CType(Me.Tables("par_ITEMTYPEMASTER"),par_ITEMTYPEMASTERDataTable)
        If (Not (Me.tablepar_ITEMTYPEMASTER) Is Nothing) Then
            Me.tablepar_ITEMTYPEMASTER.InitVars
        End If
        Me.tableVIEW_PARTY_BILLING = CType(Me.Tables("VIEW_PARTY_BILLING"),VIEW_PARTY_BILLINGDataTable)
        If (Not (Me.tableVIEW_PARTY_BILLING) Is Nothing) Then
            Me.tableVIEW_PARTY_BILLING.InitVars
        End If
        Me.tableVIEW_PARTY_BILLING_ACCOUNTS = CType(Me.Tables("VIEW_PARTY_BILLING_ACCOUNTS"),VIEW_PARTY_BILLING_ACCOUNTSDataTable)
        If (Not (Me.tableVIEW_PARTY_BILLING_ACCOUNTS) Is Nothing) Then
            Me.tableVIEW_PARTY_BILLING_ACCOUNTS.InitVars
        End If
        Me.tablePARTY_ACC_POST = CType(Me.Tables("PARTY_ACC_POST"),PARTY_ACC_POSTDataTable)
        If (Not (Me.tablePARTY_ACC_POST) Is Nothing) Then
            Me.tablePARTY_ACC_POST.InitVars
        End If
        Me.tablecateringbillreport = CType(Me.Tables("cateringbillreport"),cateringbillreportDataTable)
        If (Not (Me.tablecateringbillreport) Is Nothing) Then
            Me.tablecateringbillreport.InitVars
        End If
        Me.tablePARTY_ADDITEMS = CType(Me.Tables("PARTY_ADDITEMS"),PARTY_ADDITEMSDataTable)
        If (Not (Me.tablePARTY_ADDITEMS) Is Nothing) Then
            Me.tablePARTY_ADDITEMS.InitVars
        End If
        Me.tablePARTY_ADDITEMS1 = CType(Me.Tables("PARTY_ADDITEMS1"),PARTY_ADDITEMS1DataTable)
        If (Not (Me.tablePARTY_ADDITEMS1) Is Nothing) Then
            Me.tablePARTY_ADDITEMS1.InitVars
        End If
        Me.tablePARTY_RESERVATIONDETAIL = CType(Me.Tables("PARTY_RESERVATIONDETAIL"),PARTY_RESERVATIONDETAILDataTable)
        If (Not (Me.tablePARTY_RESERVATIONDETAIL) Is Nothing) Then
            Me.tablePARTY_RESERVATIONDETAIL.InitVars
        End If
        Me.tablePARTY_RECEIPTREPORT = CType(Me.Tables("PARTY_RECEIPTREPORT"),PARTY_RECEIPTREPORTDataTable)
        If (Not (Me.tablePARTY_RECEIPTREPORT) Is Nothing) Then
            Me.tablePARTY_RECEIPTREPORT.InitVars
        End If
        Me.tablePARTY_RECEIPTREPORT1 = CType(Me.Tables("PARTY_RECEIPTREPORT1"),PARTY_RECEIPTREPORT1DataTable)
        If (Not (Me.tablePARTY_RECEIPTREPORT1) Is Nothing) Then
            Me.tablePARTY_RECEIPTREPORT1.InitVars
        End If
        Me.tablePARTY_BOOKDETAILS = CType(Me.Tables("PARTY_BOOKDETAILS"),PARTY_BOOKDETAILSDataTable)
        If (Not (Me.tablePARTY_BOOKDETAILS) Is Nothing) Then
            Me.tablePARTY_BOOKDETAILS.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset3"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset3.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePARTY_SUMMARY_SECOND = New PARTY_SUMMARY_SECONDDataTable
        Me.Tables.Add(Me.tablePARTY_SUMMARY_SECOND)
        Me.tablePARTY_SUMMARY_ADJSUTED = New PARTY_SUMMARY_ADJSUTEDDataTable
        Me.Tables.Add(Me.tablePARTY_SUMMARY_ADJSUTED)
        Me.tablePARTY_SUMMARY_NOTADJSUT = New PARTY_SUMMARY_NOTADJSUTDataTable
        Me.Tables.Add(Me.tablePARTY_SUMMARY_NOTADJSUT)
        Me.tablePARTY_VIEW_HALLBOOKINGDETAILS = New PARTY_VIEW_HALLBOOKINGDETAILSDataTable
        Me.Tables.Add(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS)
        Me.tablePAR_BARITEM = New PAR_BARITEMDataTable
        Me.Tables.Add(Me.tablePAR_BARITEM)
        Me.tableparty_itemmaster = New party_itemmasterDataTable
        Me.Tables.Add(Me.tableparty_itemmaster)
        Me.tablePAR_ITEMMASTER = New PAR_ITEMMASTERDataTable
        Me.Tables.Add(Me.tablePAR_ITEMMASTER)
        Me.tablePARTY_ARRANGEMASTERDET = New PARTY_ARRANGEMASTERDETDataTable
        Me.Tables.Add(Me.tablePARTY_ARRANGEMASTERDET)
        Me.tablepar_ITEMTYPEMASTER = New par_ITEMTYPEMASTERDataTable
        Me.Tables.Add(Me.tablepar_ITEMTYPEMASTER)
        Me.tableVIEW_PARTY_BILLING = New VIEW_PARTY_BILLINGDataTable
        Me.Tables.Add(Me.tableVIEW_PARTY_BILLING)
        Me.tableVIEW_PARTY_BILLING_ACCOUNTS = New VIEW_PARTY_BILLING_ACCOUNTSDataTable
        Me.Tables.Add(Me.tableVIEW_PARTY_BILLING_ACCOUNTS)
        Me.tablePARTY_ACC_POST = New PARTY_ACC_POSTDataTable
        Me.Tables.Add(Me.tablePARTY_ACC_POST)
        Me.tablecateringbillreport = New cateringbillreportDataTable
        Me.Tables.Add(Me.tablecateringbillreport)
        Me.tablePARTY_ADDITEMS = New PARTY_ADDITEMSDataTable
        Me.Tables.Add(Me.tablePARTY_ADDITEMS)
        Me.tablePARTY_ADDITEMS1 = New PARTY_ADDITEMS1DataTable
        Me.Tables.Add(Me.tablePARTY_ADDITEMS1)
        Me.tablePARTY_RESERVATIONDETAIL = New PARTY_RESERVATIONDETAILDataTable
        Me.Tables.Add(Me.tablePARTY_RESERVATIONDETAIL)
        Me.tablePARTY_RECEIPTREPORT = New PARTY_RECEIPTREPORTDataTable
        Me.Tables.Add(Me.tablePARTY_RECEIPTREPORT)
        Me.tablePARTY_RECEIPTREPORT1 = New PARTY_RECEIPTREPORT1DataTable
        Me.Tables.Add(Me.tablePARTY_RECEIPTREPORT1)
        Me.tablePARTY_BOOKDETAILS = New PARTY_BOOKDETAILSDataTable
        Me.Tables.Add(Me.tablePARTY_BOOKDETAILS)
    End Sub
    
    Private Function ShouldSerializePARTY_SUMMARY_SECOND() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_SUMMARY_ADJSUTED() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_SUMMARY_NOTADJSUT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_VIEW_HALLBOOKINGDETAILS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePAR_BARITEM() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeparty_itemmaster() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePAR_ITEMMASTER() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_ARRANGEMASTERDET() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepar_ITEMTYPEMASTER() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_PARTY_BILLING() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_PARTY_BILLING_ACCOUNTS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_ACC_POST() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializecateringbillreport() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_ADDITEMS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_ADDITEMS1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_RESERVATIONDETAIL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_RECEIPTREPORT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_RECEIPTREPORT1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_BOOKDETAILS() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PARTY_SUMMARY_SECONDRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_SUMMARY_SECONDRowChangeEvent)
    
    Public Delegate Sub PARTY_SUMMARY_ADJSUTEDRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_SUMMARY_ADJSUTEDRowChangeEvent)
    
    Public Delegate Sub PARTY_SUMMARY_NOTADJSUTRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_SUMMARY_NOTADJSUTRowChangeEvent)
    
    Public Delegate Sub PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEvent)
    
    Public Delegate Sub PAR_BARITEMRowChangeEventHandler(ByVal sender As Object, ByVal e As PAR_BARITEMRowChangeEvent)
    
    Public Delegate Sub party_itemmasterRowChangeEventHandler(ByVal sender As Object, ByVal e As party_itemmasterRowChangeEvent)
    
    Public Delegate Sub PAR_ITEMMASTERRowChangeEventHandler(ByVal sender As Object, ByVal e As PAR_ITEMMASTERRowChangeEvent)
    
    Public Delegate Sub PARTY_ARRANGEMASTERDETRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_ARRANGEMASTERDETRowChangeEvent)
    
    Public Delegate Sub par_ITEMTYPEMASTERRowChangeEventHandler(ByVal sender As Object, ByVal e As par_ITEMTYPEMASTERRowChangeEvent)
    
    Public Delegate Sub VIEW_PARTY_BILLINGRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARTY_BILLINGRowChangeEvent)
    
    Public Delegate Sub VIEW_PARTY_BILLING_ACCOUNTSRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARTY_BILLING_ACCOUNTSRowChangeEvent)
    
    Public Delegate Sub PARTY_ACC_POSTRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_ACC_POSTRowChangeEvent)
    
    Public Delegate Sub cateringbillreportRowChangeEventHandler(ByVal sender As Object, ByVal e As cateringbillreportRowChangeEvent)
    
    Public Delegate Sub PARTY_ADDITEMSRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_ADDITEMSRowChangeEvent)
    
    Public Delegate Sub PARTY_ADDITEMS1RowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_ADDITEMS1RowChangeEvent)
    
    Public Delegate Sub PARTY_RESERVATIONDETAILRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_RESERVATIONDETAILRowChangeEvent)
    
    Public Delegate Sub PARTY_RECEIPTREPORTRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_RECEIPTREPORTRowChangeEvent)
    
    Public Delegate Sub PARTY_RECEIPTREPORT1RowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_RECEIPTREPORT1RowChangeEvent)
    
    Public Delegate Sub PARTY_BOOKDETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_BOOKDETAILSRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_SUMMARY_SECONDDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLOCCODE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnBILAMT As DataColumn
        
        Private columnADVAMT As DataColumn
        
        Private columnBALAMT As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnVENAMT As DataColumn
        
        Private columnDINAMT As DataColumn
        
        Private columnCHIAMT As DataColumn
        
        Private columnHABAMT As DataColumn
        
        Private columnSOFAMT As DataColumn
        
        Private columnLIQAMT As DataColumn
        
        Private columnCIGAMT As DataColumn
        
        Private columnJUIAMT As DataColumn
        
        Private columnMUSAMT As DataColumn
        
        Private columnCOLAMT As DataColumn
        
        Private columnHALAMT As DataColumn
        
        Private columnARKAMT As DataColumn
        
        Private columnMISAMT As DataColumn
        
        Private columnSTFAMT As DataColumn
        
        Private columnSERAMT As DataColumn
        
        Private columnVAT As DataColumn
        
        Private columnCONT As DataColumn
        
        Private columnGRANDAMT As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_SUMMARY_SECOND")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property BILAMTColumn As DataColumn
            Get
                Return Me.columnBILAMT
            End Get
        End Property
        
        Friend ReadOnly Property ADVAMTColumn As DataColumn
            Get
                Return Me.columnADVAMT
            End Get
        End Property
        
        Friend ReadOnly Property BALAMTColumn As DataColumn
            Get
                Return Me.columnBALAMT
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property VENAMTColumn As DataColumn
            Get
                Return Me.columnVENAMT
            End Get
        End Property
        
        Friend ReadOnly Property DINAMTColumn As DataColumn
            Get
                Return Me.columnDINAMT
            End Get
        End Property
        
        Friend ReadOnly Property CHIAMTColumn As DataColumn
            Get
                Return Me.columnCHIAMT
            End Get
        End Property
        
        Friend ReadOnly Property HABAMTColumn As DataColumn
            Get
                Return Me.columnHABAMT
            End Get
        End Property
        
        Friend ReadOnly Property SOFAMTColumn As DataColumn
            Get
                Return Me.columnSOFAMT
            End Get
        End Property
        
        Friend ReadOnly Property LIQAMTColumn As DataColumn
            Get
                Return Me.columnLIQAMT
            End Get
        End Property
        
        Friend ReadOnly Property CIGAMTColumn As DataColumn
            Get
                Return Me.columnCIGAMT
            End Get
        End Property
        
        Friend ReadOnly Property JUIAMTColumn As DataColumn
            Get
                Return Me.columnJUIAMT
            End Get
        End Property
        
        Friend ReadOnly Property MUSAMTColumn As DataColumn
            Get
                Return Me.columnMUSAMT
            End Get
        End Property
        
        Friend ReadOnly Property COLAMTColumn As DataColumn
            Get
                Return Me.columnCOLAMT
            End Get
        End Property
        
        Friend ReadOnly Property HALAMTColumn As DataColumn
            Get
                Return Me.columnHALAMT
            End Get
        End Property
        
        Friend ReadOnly Property ARKAMTColumn As DataColumn
            Get
                Return Me.columnARKAMT
            End Get
        End Property
        
        Friend ReadOnly Property MISAMTColumn As DataColumn
            Get
                Return Me.columnMISAMT
            End Get
        End Property
        
        Friend ReadOnly Property STFAMTColumn As DataColumn
            Get
                Return Me.columnSTFAMT
            End Get
        End Property
        
        Friend ReadOnly Property SERAMTColumn As DataColumn
            Get
                Return Me.columnSERAMT
            End Get
        End Property
        
        Friend ReadOnly Property VATColumn As DataColumn
            Get
                Return Me.columnVAT
            End Get
        End Property
        
        Friend ReadOnly Property CONTColumn As DataColumn
            Get
                Return Me.columnCONT
            End Get
        End Property
        
        Friend ReadOnly Property GRANDAMTColumn As DataColumn
            Get
                Return Me.columnGRANDAMT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_SUMMARY_SECONDRow
            Get
                Return CType(Me.Rows(index),PARTY_SUMMARY_SECONDRow)
            End Get
        End Property
        
        Public Event PARTY_SUMMARY_SECONDRowChanged As PARTY_SUMMARY_SECONDRowChangeEventHandler
        
        Public Event PARTY_SUMMARY_SECONDRowChanging As PARTY_SUMMARY_SECONDRowChangeEventHandler
        
        Public Event PARTY_SUMMARY_SECONDRowDeleted As PARTY_SUMMARY_SECONDRowChangeEventHandler
        
        Public Event PARTY_SUMMARY_SECONDRowDeleting As PARTY_SUMMARY_SECONDRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_SUMMARY_SECONDRow(ByVal row As PARTY_SUMMARY_SECONDRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_SUMMARY_SECONDRow( _
                    ByVal LOCCODE As String,  _
                    ByVal MCODE As String,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal BILAMT As Decimal,  _
                    ByVal ADVAMT As Decimal,  _
                    ByVal BALAMT As Decimal,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal VENAMT As Decimal,  _
                    ByVal DINAMT As Decimal,  _
                    ByVal CHIAMT As Decimal,  _
                    ByVal HABAMT As Decimal,  _
                    ByVal SOFAMT As Decimal,  _
                    ByVal LIQAMT As Decimal,  _
                    ByVal CIGAMT As Decimal,  _
                    ByVal JUIAMT As Decimal,  _
                    ByVal MUSAMT As Decimal,  _
                    ByVal COLAMT As Decimal,  _
                    ByVal HALAMT As Decimal,  _
                    ByVal ARKAMT As Integer,  _
                    ByVal MISAMT As Integer,  _
                    ByVal STFAMT As Decimal,  _
                    ByVal SERAMT As Decimal,  _
                    ByVal VAT As Decimal,  _
                    ByVal CONT As Decimal,  _
                    ByVal GRANDAMT As Decimal) As PARTY_SUMMARY_SECONDRow
            Dim rowPARTY_SUMMARY_SECONDRow As PARTY_SUMMARY_SECONDRow = CType(Me.NewRow,PARTY_SUMMARY_SECONDRow)
            rowPARTY_SUMMARY_SECONDRow.ItemArray = New Object() {LOCCODE, MCODE, PARTYDATE, BOOKINGNO, BOOKINGDATE, BILAMT, ADVAMT, BALAMT, OCCUPANCY, VENAMT, DINAMT, CHIAMT, HABAMT, SOFAMT, LIQAMT, CIGAMT, JUIAMT, MUSAMT, COLAMT, HALAMT, ARKAMT, MISAMT, STFAMT, SERAMT, VAT, CONT, GRANDAMT}
            Me.Rows.Add(rowPARTY_SUMMARY_SECONDRow)
            Return rowPARTY_SUMMARY_SECONDRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_SUMMARY_SECONDDataTable = CType(MyBase.Clone,PARTY_SUMMARY_SECONDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_SUMMARY_SECONDDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnBILAMT = Me.Columns("BILAMT")
            Me.columnADVAMT = Me.Columns("ADVAMT")
            Me.columnBALAMT = Me.Columns("BALAMT")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnVENAMT = Me.Columns("VENAMT")
            Me.columnDINAMT = Me.Columns("DINAMT")
            Me.columnCHIAMT = Me.Columns("CHIAMT")
            Me.columnHABAMT = Me.Columns("HABAMT")
            Me.columnSOFAMT = Me.Columns("SOFAMT")
            Me.columnLIQAMT = Me.Columns("LIQAMT")
            Me.columnCIGAMT = Me.Columns("CIGAMT")
            Me.columnJUIAMT = Me.Columns("JUIAMT")
            Me.columnMUSAMT = Me.Columns("MUSAMT")
            Me.columnCOLAMT = Me.Columns("COLAMT")
            Me.columnHALAMT = Me.Columns("HALAMT")
            Me.columnARKAMT = Me.Columns("ARKAMT")
            Me.columnMISAMT = Me.Columns("MISAMT")
            Me.columnSTFAMT = Me.Columns("STFAMT")
            Me.columnSERAMT = Me.Columns("SERAMT")
            Me.columnVAT = Me.Columns("VAT")
            Me.columnCONT = Me.Columns("CONT")
            Me.columnGRANDAMT = Me.Columns("GRANDAMT")
        End Sub
        
        Private Sub InitClass()
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnBILAMT = New DataColumn("BILAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILAMT)
            Me.columnADVAMT = New DataColumn("ADVAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADVAMT)
            Me.columnBALAMT = New DataColumn("BALAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBALAMT)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnVENAMT = New DataColumn("VENAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVENAMT)
            Me.columnDINAMT = New DataColumn("DINAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDINAMT)
            Me.columnCHIAMT = New DataColumn("CHIAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHIAMT)
            Me.columnHABAMT = New DataColumn("HABAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHABAMT)
            Me.columnSOFAMT = New DataColumn("SOFAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSOFAMT)
            Me.columnLIQAMT = New DataColumn("LIQAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLIQAMT)
            Me.columnCIGAMT = New DataColumn("CIGAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCIGAMT)
            Me.columnJUIAMT = New DataColumn("JUIAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnJUIAMT)
            Me.columnMUSAMT = New DataColumn("MUSAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMUSAMT)
            Me.columnCOLAMT = New DataColumn("COLAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCOLAMT)
            Me.columnHALAMT = New DataColumn("HALAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALAMT)
            Me.columnARKAMT = New DataColumn("ARKAMT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARKAMT)
            Me.columnMISAMT = New DataColumn("MISAMT", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMISAMT)
            Me.columnSTFAMT = New DataColumn("STFAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTFAMT)
            Me.columnSERAMT = New DataColumn("SERAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSERAMT)
            Me.columnVAT = New DataColumn("VAT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVAT)
            Me.columnCONT = New DataColumn("CONT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONT)
            Me.columnGRANDAMT = New DataColumn("GRANDAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGRANDAMT)
        End Sub
        
        Public Function NewPARTY_SUMMARY_SECONDRow() As PARTY_SUMMARY_SECONDRow
            Return CType(Me.NewRow,PARTY_SUMMARY_SECONDRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_SUMMARY_SECONDRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_SUMMARY_SECONDRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_SUMMARY_SECONDRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_SUMMARY_SECONDRowChanged(Me, New PARTY_SUMMARY_SECONDRowChangeEvent(CType(e.Row,PARTY_SUMMARY_SECONDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_SUMMARY_SECONDRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_SUMMARY_SECONDRowChanging(Me, New PARTY_SUMMARY_SECONDRowChangeEvent(CType(e.Row,PARTY_SUMMARY_SECONDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_SUMMARY_SECONDRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_SUMMARY_SECONDRowDeleted(Me, New PARTY_SUMMARY_SECONDRowChangeEvent(CType(e.Row,PARTY_SUMMARY_SECONDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_SUMMARY_SECONDRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_SUMMARY_SECONDRowDeleting(Me, New PARTY_SUMMARY_SECONDRowChangeEvent(CType(e.Row,PARTY_SUMMARY_SECONDRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_SUMMARY_SECONDRow(ByVal row As PARTY_SUMMARY_SECONDRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_SUMMARY_SECONDRow
        Inherits DataRow
        
        Private tablePARTY_SUMMARY_SECOND As PARTY_SUMMARY_SECONDDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_SUMMARY_SECOND = CType(Me.Table,PARTY_SUMMARY_SECONDDataTable)
        End Sub
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.MCODEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property BILAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.BILAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.BILAMTColumn) = value
            End Set
        End Property
        
        Public Property ADVAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.ADVAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.ADVAMTColumn) = value
            End Set
        End Property
        
        Public Property BALAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.BALAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.BALAMTColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property VENAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.VENAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.VENAMTColumn) = value
            End Set
        End Property
        
        Public Property DINAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.DINAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.DINAMTColumn) = value
            End Set
        End Property
        
        Public Property CHIAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.CHIAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.CHIAMTColumn) = value
            End Set
        End Property
        
        Public Property HABAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.HABAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.HABAMTColumn) = value
            End Set
        End Property
        
        Public Property SOFAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.SOFAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.SOFAMTColumn) = value
            End Set
        End Property
        
        Public Property LIQAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.LIQAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.LIQAMTColumn) = value
            End Set
        End Property
        
        Public Property CIGAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.CIGAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.CIGAMTColumn) = value
            End Set
        End Property
        
        Public Property JUIAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.JUIAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.JUIAMTColumn) = value
            End Set
        End Property
        
        Public Property MUSAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.MUSAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.MUSAMTColumn) = value
            End Set
        End Property
        
        Public Property COLAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.COLAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.COLAMTColumn) = value
            End Set
        End Property
        
        Public Property HALAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.HALAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.HALAMTColumn) = value
            End Set
        End Property
        
        Public Property ARKAMT As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.ARKAMTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.ARKAMTColumn) = value
            End Set
        End Property
        
        Public Property MISAMT As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.MISAMTColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.MISAMTColumn) = value
            End Set
        End Property
        
        Public Property STFAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.STFAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.STFAMTColumn) = value
            End Set
        End Property
        
        Public Property SERAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.SERAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.SERAMTColumn) = value
            End Set
        End Property
        
        Public Property VAT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.VATColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.VATColumn) = value
            End Set
        End Property
        
        Public Property CONT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.CONTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.CONTColumn) = value
            End Set
        End Property
        
        Public Property GRANDAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_SECOND.GRANDAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_SECOND.GRANDAMTColumn) = value
            End Set
        End Property
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePARTY_SUMMARY_SECOND.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_SUMMARY_SECOND.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_SUMMARY_SECOND.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_SUMMARY_SECOND.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_SUMMARY_SECOND.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.BILAMTColumn)
        End Function
        
        Public Sub SetBILAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.BILAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADVAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.ADVAMTColumn)
        End Function
        
        Public Sub SetADVAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.ADVAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBALAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.BALAMTColumn)
        End Function
        
        Public Sub SetBALAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.BALAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVENAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.VENAMTColumn)
        End Function
        
        Public Sub SetVENAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.VENAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDINAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.DINAMTColumn)
        End Function
        
        Public Sub SetDINAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.DINAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHIAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.CHIAMTColumn)
        End Function
        
        Public Sub SetCHIAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.CHIAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHABAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.HABAMTColumn)
        End Function
        
        Public Sub SetHABAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.HABAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSOFAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.SOFAMTColumn)
        End Function
        
        Public Sub SetSOFAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.SOFAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLIQAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.LIQAMTColumn)
        End Function
        
        Public Sub SetLIQAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.LIQAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCIGAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.CIGAMTColumn)
        End Function
        
        Public Sub SetCIGAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.CIGAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsJUIAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.JUIAMTColumn)
        End Function
        
        Public Sub SetJUIAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.JUIAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMUSAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.MUSAMTColumn)
        End Function
        
        Public Sub SetMUSAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.MUSAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCOLAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.COLAMTColumn)
        End Function
        
        Public Sub SetCOLAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.COLAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.HALAMTColumn)
        End Function
        
        Public Sub SetHALAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.HALAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARKAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.ARKAMTColumn)
        End Function
        
        Public Sub SetARKAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.ARKAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMISAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.MISAMTColumn)
        End Function
        
        Public Sub SetMISAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.MISAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTFAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.STFAMTColumn)
        End Function
        
        Public Sub SetSTFAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.STFAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSERAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.SERAMTColumn)
        End Function
        
        Public Sub SetSERAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.SERAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVATNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.VATColumn)
        End Function
        
        Public Sub SetVATNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.VATColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.CONTColumn)
        End Function
        
        Public Sub SetCONTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.CONTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGRANDAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_SECOND.GRANDAMTColumn)
        End Function
        
        Public Sub SetGRANDAMTNull()
            Me(Me.tablePARTY_SUMMARY_SECOND.GRANDAMTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_SUMMARY_SECONDRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_SUMMARY_SECONDRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_SUMMARY_SECONDRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_SUMMARY_SECONDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_SUMMARY_ADJSUTEDDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLOCCODE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnRECEIPTNO As DataColumn
        
        Private columnRECEIPTDATE As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_SUMMARY_ADJSUTED")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTNOColumn As DataColumn
            Get
                Return Me.columnRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_SUMMARY_ADJSUTEDRow
            Get
                Return CType(Me.Rows(index),PARTY_SUMMARY_ADJSUTEDRow)
            End Get
        End Property
        
        Public Event PARTY_SUMMARY_ADJSUTEDRowChanged As PARTY_SUMMARY_ADJSUTEDRowChangeEventHandler
        
        Public Event PARTY_SUMMARY_ADJSUTEDRowChanging As PARTY_SUMMARY_ADJSUTEDRowChangeEventHandler
        
        Public Event PARTY_SUMMARY_ADJSUTEDRowDeleted As PARTY_SUMMARY_ADJSUTEDRowChangeEventHandler
        
        Public Event PARTY_SUMMARY_ADJSUTEDRowDeleting As PARTY_SUMMARY_ADJSUTEDRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_SUMMARY_ADJSUTEDRow(ByVal row As PARTY_SUMMARY_ADJSUTEDRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_SUMMARY_ADJSUTEDRow(ByVal LOCCODE As String, ByVal PARTYDATE As Date, ByVal MCODE As String, ByVal BOOKINGNO As Decimal, ByVal BOOKINGDATE As Date, ByVal RECEIPTNO As String, ByVal RECEIPTDATE As Date, ByVal AMOUNT As Decimal) As PARTY_SUMMARY_ADJSUTEDRow
            Dim rowPARTY_SUMMARY_ADJSUTEDRow As PARTY_SUMMARY_ADJSUTEDRow = CType(Me.NewRow,PARTY_SUMMARY_ADJSUTEDRow)
            rowPARTY_SUMMARY_ADJSUTEDRow.ItemArray = New Object() {LOCCODE, PARTYDATE, MCODE, BOOKINGNO, BOOKINGDATE, RECEIPTNO, RECEIPTDATE, AMOUNT}
            Me.Rows.Add(rowPARTY_SUMMARY_ADJSUTEDRow)
            Return rowPARTY_SUMMARY_ADJSUTEDRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_SUMMARY_ADJSUTEDDataTable = CType(MyBase.Clone,PARTY_SUMMARY_ADJSUTEDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_SUMMARY_ADJSUTEDDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnRECEIPTNO = Me.Columns("RECEIPTNO")
            Me.columnRECEIPTDATE = Me.Columns("RECEIPTDATE")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnRECEIPTNO = New DataColumn("RECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTNO)
            Me.columnRECEIPTDATE = New DataColumn("RECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTDATE)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
        End Sub
        
        Public Function NewPARTY_SUMMARY_ADJSUTEDRow() As PARTY_SUMMARY_ADJSUTEDRow
            Return CType(Me.NewRow,PARTY_SUMMARY_ADJSUTEDRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_SUMMARY_ADJSUTEDRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_SUMMARY_ADJSUTEDRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_SUMMARY_ADJSUTEDRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_SUMMARY_ADJSUTEDRowChanged(Me, New PARTY_SUMMARY_ADJSUTEDRowChangeEvent(CType(e.Row,PARTY_SUMMARY_ADJSUTEDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_SUMMARY_ADJSUTEDRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_SUMMARY_ADJSUTEDRowChanging(Me, New PARTY_SUMMARY_ADJSUTEDRowChangeEvent(CType(e.Row,PARTY_SUMMARY_ADJSUTEDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_SUMMARY_ADJSUTEDRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_SUMMARY_ADJSUTEDRowDeleted(Me, New PARTY_SUMMARY_ADJSUTEDRowChangeEvent(CType(e.Row,PARTY_SUMMARY_ADJSUTEDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_SUMMARY_ADJSUTEDRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_SUMMARY_ADJSUTEDRowDeleting(Me, New PARTY_SUMMARY_ADJSUTEDRowChangeEvent(CType(e.Row,PARTY_SUMMARY_ADJSUTEDRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_SUMMARY_ADJSUTEDRow(ByVal row As PARTY_SUMMARY_ADJSUTEDRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_SUMMARY_ADJSUTEDRow
        Inherits DataRow
        
        Private tablePARTY_SUMMARY_ADJSUTED As PARTY_SUMMARY_ADJSUTEDDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_SUMMARY_ADJSUTED = CType(Me.Table,PARTY_SUMMARY_ADJSUTEDDataTable)
        End Sub
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_ADJSUTED.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_ADJSUTED.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_ADJSUTED.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_ADJSUTED.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_ADJSUTED.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_ADJSUTED.MCODEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_ADJSUTED.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_ADJSUTED.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_ADJSUTED.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_ADJSUTED.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_ADJSUTED.RECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_ADJSUTED.RECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_ADJSUTED.RECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_ADJSUTED.RECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_ADJSUTED.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_ADJSUTED.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_ADJSUTED.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePARTY_SUMMARY_ADJSUTED.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_ADJSUTED.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_SUMMARY_ADJSUTED.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_ADJSUTED.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_SUMMARY_ADJSUTED.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_ADJSUTED.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_SUMMARY_ADJSUTED.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_ADJSUTED.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_SUMMARY_ADJSUTED.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_ADJSUTED.RECEIPTNOColumn)
        End Function
        
        Public Sub SetRECEIPTNONull()
            Me(Me.tablePARTY_SUMMARY_ADJSUTED.RECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_ADJSUTED.RECEIPTDATEColumn)
        End Function
        
        Public Sub SetRECEIPTDATENull()
            Me(Me.tablePARTY_SUMMARY_ADJSUTED.RECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_ADJSUTED.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_SUMMARY_ADJSUTED.AMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_SUMMARY_ADJSUTEDRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_SUMMARY_ADJSUTEDRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_SUMMARY_ADJSUTEDRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_SUMMARY_ADJSUTEDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_SUMMARY_NOTADJSUTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLOCCODE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnRECEIPTNO As DataColumn
        
        Private columnRECEIPTDATE As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_SUMMARY_NOTADJSUT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTNOColumn As DataColumn
            Get
                Return Me.columnRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_SUMMARY_NOTADJSUTRow
            Get
                Return CType(Me.Rows(index),PARTY_SUMMARY_NOTADJSUTRow)
            End Get
        End Property
        
        Public Event PARTY_SUMMARY_NOTADJSUTRowChanged As PARTY_SUMMARY_NOTADJSUTRowChangeEventHandler
        
        Public Event PARTY_SUMMARY_NOTADJSUTRowChanging As PARTY_SUMMARY_NOTADJSUTRowChangeEventHandler
        
        Public Event PARTY_SUMMARY_NOTADJSUTRowDeleted As PARTY_SUMMARY_NOTADJSUTRowChangeEventHandler
        
        Public Event PARTY_SUMMARY_NOTADJSUTRowDeleting As PARTY_SUMMARY_NOTADJSUTRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_SUMMARY_NOTADJSUTRow(ByVal row As PARTY_SUMMARY_NOTADJSUTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_SUMMARY_NOTADJSUTRow(ByVal LOCCODE As String, ByVal PARTYDATE As Date, ByVal MCODE As String, ByVal BOOKINGNO As Decimal, ByVal BOOKINGDATE As Date, ByVal RECEIPTNO As String, ByVal RECEIPTDATE As Date, ByVal AMOUNT As Decimal) As PARTY_SUMMARY_NOTADJSUTRow
            Dim rowPARTY_SUMMARY_NOTADJSUTRow As PARTY_SUMMARY_NOTADJSUTRow = CType(Me.NewRow,PARTY_SUMMARY_NOTADJSUTRow)
            rowPARTY_SUMMARY_NOTADJSUTRow.ItemArray = New Object() {LOCCODE, PARTYDATE, MCODE, BOOKINGNO, BOOKINGDATE, RECEIPTNO, RECEIPTDATE, AMOUNT}
            Me.Rows.Add(rowPARTY_SUMMARY_NOTADJSUTRow)
            Return rowPARTY_SUMMARY_NOTADJSUTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_SUMMARY_NOTADJSUTDataTable = CType(MyBase.Clone,PARTY_SUMMARY_NOTADJSUTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_SUMMARY_NOTADJSUTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnRECEIPTNO = Me.Columns("RECEIPTNO")
            Me.columnRECEIPTDATE = Me.Columns("RECEIPTDATE")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnRECEIPTNO = New DataColumn("RECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTNO)
            Me.columnRECEIPTDATE = New DataColumn("RECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTDATE)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
        End Sub
        
        Public Function NewPARTY_SUMMARY_NOTADJSUTRow() As PARTY_SUMMARY_NOTADJSUTRow
            Return CType(Me.NewRow,PARTY_SUMMARY_NOTADJSUTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_SUMMARY_NOTADJSUTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_SUMMARY_NOTADJSUTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_SUMMARY_NOTADJSUTRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_SUMMARY_NOTADJSUTRowChanged(Me, New PARTY_SUMMARY_NOTADJSUTRowChangeEvent(CType(e.Row,PARTY_SUMMARY_NOTADJSUTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_SUMMARY_NOTADJSUTRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_SUMMARY_NOTADJSUTRowChanging(Me, New PARTY_SUMMARY_NOTADJSUTRowChangeEvent(CType(e.Row,PARTY_SUMMARY_NOTADJSUTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_SUMMARY_NOTADJSUTRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_SUMMARY_NOTADJSUTRowDeleted(Me, New PARTY_SUMMARY_NOTADJSUTRowChangeEvent(CType(e.Row,PARTY_SUMMARY_NOTADJSUTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_SUMMARY_NOTADJSUTRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_SUMMARY_NOTADJSUTRowDeleting(Me, New PARTY_SUMMARY_NOTADJSUTRowChangeEvent(CType(e.Row,PARTY_SUMMARY_NOTADJSUTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_SUMMARY_NOTADJSUTRow(ByVal row As PARTY_SUMMARY_NOTADJSUTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_SUMMARY_NOTADJSUTRow
        Inherits DataRow
        
        Private tablePARTY_SUMMARY_NOTADJSUT As PARTY_SUMMARY_NOTADJSUTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_SUMMARY_NOTADJSUT = CType(Me.Table,PARTY_SUMMARY_NOTADJSUTDataTable)
        End Sub
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_NOTADJSUT.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_NOTADJSUT.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_NOTADJSUT.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_NOTADJSUT.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_NOTADJSUT.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_NOTADJSUT.MCODEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_NOTADJSUT.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_NOTADJSUT.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_NOTADJSUT.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_NOTADJSUT.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_NOTADJSUT.RECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_NOTADJSUT.RECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_NOTADJSUT.RECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_NOTADJSUT.RECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_SUMMARY_NOTADJSUT.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_SUMMARY_NOTADJSUT.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_NOTADJSUT.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePARTY_SUMMARY_NOTADJSUT.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_NOTADJSUT.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_SUMMARY_NOTADJSUT.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_NOTADJSUT.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_SUMMARY_NOTADJSUT.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_NOTADJSUT.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_SUMMARY_NOTADJSUT.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_NOTADJSUT.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_SUMMARY_NOTADJSUT.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_NOTADJSUT.RECEIPTNOColumn)
        End Function
        
        Public Sub SetRECEIPTNONull()
            Me(Me.tablePARTY_SUMMARY_NOTADJSUT.RECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_NOTADJSUT.RECEIPTDATEColumn)
        End Function
        
        Public Sub SetRECEIPTDATENull()
            Me(Me.tablePARTY_SUMMARY_NOTADJSUT.RECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_SUMMARY_NOTADJSUT.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_SUMMARY_NOTADJSUT.AMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_SUMMARY_NOTADJSUTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_SUMMARY_NOTADJSUTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_SUMMARY_NOTADJSUTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_SUMMARY_NOTADJSUTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_HALLBOOKINGDETAILSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLOCCODE As DataColumn
        
        Private columnCATEGORY As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnHALLDESC As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnveg As DataColumn
        
        Private columnnonveg As DataColumn
        
        Private columnPCODE As DataColumn
        
        Private columnHMLOCCODE As DataColumn
        
        Private columnLOCDESC As DataColumn
        
        Private columnPDESC As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columngroupcode As DataColumn
        
        Private columnPADD1 As DataColumn
        
        Private columnPADD2 As DataColumn
        
        Private columnPCITY As DataColumn
        
        Private columnPPHONE1 As DataColumn
        
        Private columnCEMAIL As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnFROMTIME As DataColumn
        
        Private columnTOTIME As DataColumn
        
        Private columnHALLAMOUNT As DataColumn
        
        Private columnBOOKINGSTATUS As DataColumn
        
        Private columnBOOKINGFLAG As DataColumn
        
        Private columnBILLINGFLAG As DataColumn
        
        Private columnCANCELFLAG As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnRECEIPTNO As DataColumn
        
        Private columnRECEIPTDATE As DataColumn
        
        Private columnRAMOUNT As DataColumn
        
        Private columnAMOUNTTYPE As DataColumn
        
        Private columnTTYPE As DataColumn
        
        Private columnPRROWID As DataColumn
        
        Private columnRITEMCODE As DataColumn
        
        Private columnRITEMDESC As DataColumn
        
        Private columnRQTY As DataColumn
        
        Private columnRRATE As DataColumn
        
        Private columnPRAMOUNT As DataColumn
        
        Private columnPRTAXPERC As DataColumn
        
        Private columnPRTAXAMOUNT As DataColumn
        
        Private columnPRTOTALAMOUNT As DataColumn
        
        Private columnTARIFFCODE As DataColumn
        
        Private columnTARIFFDESC As DataColumn
        
        Private columnTRATE As DataColumn
        
        Private columnAROWID As DataColumn
        
        Private columnAITEMCODE As DataColumn
        
        Private columnAITEMDESC As DataColumn
        
        Private columnAQTY As DataColumn
        
        Private columnARATE As DataColumn
        
        Private columnAAMOUNT As DataColumn
        
        Private columnATAXAMOUNT As DataColumn
        
        Private columnATOTALAMOUNT As DataColumn
        
        Private columnHALLTAXAMOUNT As DataColumn
        
        Private columnHALLTAXPERC As DataColumn
        
        Private columnHALLNETAMOUNT As DataColumn
        
        Private columnHOCCUPANCY As DataColumn
        
        Private columnISBFCHARGE As DataColumn
        
        Private columnASBFCHARGE As DataColumn
        
        Private columnTSBFCHARGE As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_VIEW_HALLBOOKINGDETAILS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property CATEGORYColumn As DataColumn
            Get
                Return Me.columnCATEGORY
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property HALLDESCColumn As DataColumn
            Get
                Return Me.columnHALLDESC
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property vegColumn As DataColumn
            Get
                Return Me.columnveg
            End Get
        End Property
        
        Friend ReadOnly Property nonvegColumn As DataColumn
            Get
                Return Me.columnnonveg
            End Get
        End Property
        
        Friend ReadOnly Property PCODEColumn As DataColumn
            Get
                Return Me.columnPCODE
            End Get
        End Property
        
        Friend ReadOnly Property HMLOCCODEColumn As DataColumn
            Get
                Return Me.columnHMLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property LOCDESCColumn As DataColumn
            Get
                Return Me.columnLOCDESC
            End Get
        End Property
        
        Friend ReadOnly Property PDESCColumn As DataColumn
            Get
                Return Me.columnPDESC
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property groupcodeColumn As DataColumn
            Get
                Return Me.columngroupcode
            End Get
        End Property
        
        Friend ReadOnly Property PADD1Column As DataColumn
            Get
                Return Me.columnPADD1
            End Get
        End Property
        
        Friend ReadOnly Property PADD2Column As DataColumn
            Get
                Return Me.columnPADD2
            End Get
        End Property
        
        Friend ReadOnly Property PCITYColumn As DataColumn
            Get
                Return Me.columnPCITY
            End Get
        End Property
        
        Friend ReadOnly Property PPHONE1Column As DataColumn
            Get
                Return Me.columnPPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property CEMAILColumn As DataColumn
            Get
                Return Me.columnCEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property FROMTIMEColumn As DataColumn
            Get
                Return Me.columnFROMTIME
            End Get
        End Property
        
        Friend ReadOnly Property TOTIMEColumn As DataColumn
            Get
                Return Me.columnTOTIME
            End Get
        End Property
        
        Friend ReadOnly Property HALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGSTATUSColumn As DataColumn
            Get
                Return Me.columnBOOKINGSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGFLAGColumn As DataColumn
            Get
                Return Me.columnBOOKINGFLAG
            End Get
        End Property
        
        Friend ReadOnly Property BILLINGFLAGColumn As DataColumn
            Get
                Return Me.columnBILLINGFLAG
            End Get
        End Property
        
        Friend ReadOnly Property CANCELFLAGColumn As DataColumn
            Get
                Return Me.columnCANCELFLAG
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTNOColumn As DataColumn
            Get
                Return Me.columnRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property RAMOUNTColumn As DataColumn
            Get
                Return Me.columnRAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTTYPEColumn As DataColumn
            Get
                Return Me.columnAMOUNTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property TTYPEColumn As DataColumn
            Get
                Return Me.columnTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property PRROWIDColumn As DataColumn
            Get
                Return Me.columnPRROWID
            End Get
        End Property
        
        Friend ReadOnly Property RITEMCODEColumn As DataColumn
            Get
                Return Me.columnRITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property RITEMDESCColumn As DataColumn
            Get
                Return Me.columnRITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property RQTYColumn As DataColumn
            Get
                Return Me.columnRQTY
            End Get
        End Property
        
        Friend ReadOnly Property RRATEColumn As DataColumn
            Get
                Return Me.columnRRATE
            End Get
        End Property
        
        Friend ReadOnly Property PRAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property PRTAXPERCColumn As DataColumn
            Get
                Return Me.columnPRTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property PRTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property PRTOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFCODEColumn As DataColumn
            Get
                Return Me.columnTARIFFCODE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFDESCColumn As DataColumn
            Get
                Return Me.columnTARIFFDESC
            End Get
        End Property
        
        Friend ReadOnly Property TRATEColumn As DataColumn
            Get
                Return Me.columnTRATE
            End Get
        End Property
        
        Friend ReadOnly Property AROWIDColumn As DataColumn
            Get
                Return Me.columnAROWID
            End Get
        End Property
        
        Friend ReadOnly Property AITEMCODEColumn As DataColumn
            Get
                Return Me.columnAITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property AITEMDESCColumn As DataColumn
            Get
                Return Me.columnAITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property AQTYColumn As DataColumn
            Get
                Return Me.columnAQTY
            End Get
        End Property
        
        Friend ReadOnly Property ARATEColumn As DataColumn
            Get
                Return Me.columnARATE
            End Get
        End Property
        
        Friend ReadOnly Property AAMOUNTColumn As DataColumn
            Get
                Return Me.columnAAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ATAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnATAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ATOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnATOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXPERCColumn As DataColumn
            Get
                Return Me.columnHALLTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property HALLNETAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLNETAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnHOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property ISBFCHARGEColumn As DataColumn
            Get
                Return Me.columnISBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property ASBFCHARGEColumn As DataColumn
            Get
                Return Me.columnASBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property TSBFCHARGEColumn As DataColumn
            Get
                Return Me.columnTSBFCHARGE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_VIEW_HALLBOOKINGDETAILSRow
            Get
                Return CType(Me.Rows(index),PARTY_VIEW_HALLBOOKINGDETAILSRow)
            End Get
        End Property
        
        Public Event PARTY_VIEW_HALLBOOKINGDETAILSRowChanged As PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEventHandler
        
        Public Event PARTY_VIEW_HALLBOOKINGDETAILSRowChanging As PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEventHandler
        
        Public Event PARTY_VIEW_HALLBOOKINGDETAILSRowDeleted As PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEventHandler
        
        Public Event PARTY_VIEW_HALLBOOKINGDETAILSRowDeleting As PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_VIEW_HALLBOOKINGDETAILSRow(ByVal row As PARTY_VIEW_HALLBOOKINGDETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_VIEW_HALLBOOKINGDETAILSRow( _
                    ByVal LOCCODE As String,  _
                    ByVal CATEGORY As String,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal HALLCODE As String,  _
                    ByVal HALLDESC As String,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal veg As String,  _
                    ByVal nonveg As String,  _
                    ByVal PCODE As String,  _
                    ByVal HMLOCCODE As String,  _
                    ByVal LOCDESC As String,  _
                    ByVal PDESC As String,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal groupcode As String,  _
                    ByVal PADD1 As String,  _
                    ByVal PADD2 As String,  _
                    ByVal PCITY As String,  _
                    ByVal PPHONE1 As String,  _
                    ByVal CEMAIL As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal FROMTIME As Decimal,  _
                    ByVal TOTIME As Decimal,  _
                    ByVal HALLAMOUNT As Decimal,  _
                    ByVal BOOKINGSTATUS As String,  _
                    ByVal BOOKINGFLAG As String,  _
                    ByVal BILLINGFLAG As String,  _
                    ByVal CANCELFLAG As String,  _
                    ByVal FREEZE As String,  _
                    ByVal RECEIPTNO As String,  _
                    ByVal RECEIPTDATE As Date,  _
                    ByVal RAMOUNT As Decimal,  _
                    ByVal AMOUNTTYPE As String,  _
                    ByVal TTYPE As String,  _
                    ByVal PRROWID As Decimal,  _
                    ByVal RITEMCODE As String,  _
                    ByVal RITEMDESC As String,  _
                    ByVal RQTY As Decimal,  _
                    ByVal RRATE As Decimal,  _
                    ByVal PRAMOUNT As Decimal,  _
                    ByVal PRTAXPERC As Decimal,  _
                    ByVal PRTAXAMOUNT As Decimal,  _
                    ByVal PRTOTALAMOUNT As Decimal,  _
                    ByVal TARIFFCODE As String,  _
                    ByVal TARIFFDESC As String,  _
                    ByVal TRATE As Decimal,  _
                    ByVal AROWID As Decimal,  _
                    ByVal AITEMCODE As String,  _
                    ByVal AITEMDESC As String,  _
                    ByVal AQTY As Decimal,  _
                    ByVal ARATE As Decimal,  _
                    ByVal AAMOUNT As Decimal,  _
                    ByVal ATAXAMOUNT As Decimal,  _
                    ByVal ATOTALAMOUNT As Decimal,  _
                    ByVal HALLTAXAMOUNT As Decimal,  _
                    ByVal HALLTAXPERC As Decimal,  _
                    ByVal HALLNETAMOUNT As Decimal,  _
                    ByVal HOCCUPANCY As Decimal,  _
                    ByVal ISBFCHARGE As String,  _
                    ByVal ASBFCHARGE As String,  _
                    ByVal TSBFCHARGE As String) As PARTY_VIEW_HALLBOOKINGDETAILSRow
            Dim rowPARTY_VIEW_HALLBOOKINGDETAILSRow As PARTY_VIEW_HALLBOOKINGDETAILSRow = CType(Me.NewRow,PARTY_VIEW_HALLBOOKINGDETAILSRow)
            rowPARTY_VIEW_HALLBOOKINGDETAILSRow.ItemArray = New Object() {LOCCODE, CATEGORY, BOOKINGTYPE, HALLCODE, HALLDESC, OCCUPANCY, veg, nonveg, PCODE, HMLOCCODE, LOCDESC, PDESC, BOOKINGNO, PARTYDATE, MCODE, MNAME, groupcode, PADD1, PADD2, PCITY, PPHONE1, CEMAIL, BOOKINGDATE, FROMTIME, TOTIME, HALLAMOUNT, BOOKINGSTATUS, BOOKINGFLAG, BILLINGFLAG, CANCELFLAG, FREEZE, RECEIPTNO, RECEIPTDATE, RAMOUNT, AMOUNTTYPE, TTYPE, PRROWID, RITEMCODE, RITEMDESC, RQTY, RRATE, PRAMOUNT, PRTAXPERC, PRTAXAMOUNT, PRTOTALAMOUNT, TARIFFCODE, TARIFFDESC, TRATE, AROWID, AITEMCODE, AITEMDESC, AQTY, ARATE, AAMOUNT, ATAXAMOUNT, ATOTALAMOUNT, HALLTAXAMOUNT, HALLTAXPERC, HALLNETAMOUNT, HOCCUPANCY, ISBFCHARGE, ASBFCHARGE, TSBFCHARGE}
            Me.Rows.Add(rowPARTY_VIEW_HALLBOOKINGDETAILSRow)
            Return rowPARTY_VIEW_HALLBOOKINGDETAILSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_VIEW_HALLBOOKINGDETAILSDataTable = CType(MyBase.Clone,PARTY_VIEW_HALLBOOKINGDETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_VIEW_HALLBOOKINGDETAILSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnCATEGORY = Me.Columns("CATEGORY")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnHALLDESC = Me.Columns("HALLDESC")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnveg = Me.Columns("veg")
            Me.columnnonveg = Me.Columns("nonveg")
            Me.columnPCODE = Me.Columns("PCODE")
            Me.columnHMLOCCODE = Me.Columns("HMLOCCODE")
            Me.columnLOCDESC = Me.Columns("LOCDESC")
            Me.columnPDESC = Me.Columns("PDESC")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columngroupcode = Me.Columns("groupcode")
            Me.columnPADD1 = Me.Columns("PADD1")
            Me.columnPADD2 = Me.Columns("PADD2")
            Me.columnPCITY = Me.Columns("PCITY")
            Me.columnPPHONE1 = Me.Columns("PPHONE1")
            Me.columnCEMAIL = Me.Columns("CEMAIL")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnFROMTIME = Me.Columns("FROMTIME")
            Me.columnTOTIME = Me.Columns("TOTIME")
            Me.columnHALLAMOUNT = Me.Columns("HALLAMOUNT")
            Me.columnBOOKINGSTATUS = Me.Columns("BOOKINGSTATUS")
            Me.columnBOOKINGFLAG = Me.Columns("BOOKINGFLAG")
            Me.columnBILLINGFLAG = Me.Columns("BILLINGFLAG")
            Me.columnCANCELFLAG = Me.Columns("CANCELFLAG")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnRECEIPTNO = Me.Columns("RECEIPTNO")
            Me.columnRECEIPTDATE = Me.Columns("RECEIPTDATE")
            Me.columnRAMOUNT = Me.Columns("RAMOUNT")
            Me.columnAMOUNTTYPE = Me.Columns("AMOUNTTYPE")
            Me.columnTTYPE = Me.Columns("TTYPE")
            Me.columnPRROWID = Me.Columns("PRROWID")
            Me.columnRITEMCODE = Me.Columns("RITEMCODE")
            Me.columnRITEMDESC = Me.Columns("RITEMDESC")
            Me.columnRQTY = Me.Columns("RQTY")
            Me.columnRRATE = Me.Columns("RRATE")
            Me.columnPRAMOUNT = Me.Columns("PRAMOUNT")
            Me.columnPRTAXPERC = Me.Columns("PRTAXPERC")
            Me.columnPRTAXAMOUNT = Me.Columns("PRTAXAMOUNT")
            Me.columnPRTOTALAMOUNT = Me.Columns("PRTOTALAMOUNT")
            Me.columnTARIFFCODE = Me.Columns("TARIFFCODE")
            Me.columnTARIFFDESC = Me.Columns("TARIFFDESC")
            Me.columnTRATE = Me.Columns("TRATE")
            Me.columnAROWID = Me.Columns("AROWID")
            Me.columnAITEMCODE = Me.Columns("AITEMCODE")
            Me.columnAITEMDESC = Me.Columns("AITEMDESC")
            Me.columnAQTY = Me.Columns("AQTY")
            Me.columnARATE = Me.Columns("ARATE")
            Me.columnAAMOUNT = Me.Columns("AAMOUNT")
            Me.columnATAXAMOUNT = Me.Columns("ATAXAMOUNT")
            Me.columnATOTALAMOUNT = Me.Columns("ATOTALAMOUNT")
            Me.columnHALLTAXAMOUNT = Me.Columns("HALLTAXAMOUNT")
            Me.columnHALLTAXPERC = Me.Columns("HALLTAXPERC")
            Me.columnHALLNETAMOUNT = Me.Columns("HALLNETAMOUNT")
            Me.columnHOCCUPANCY = Me.Columns("HOCCUPANCY")
            Me.columnISBFCHARGE = Me.Columns("ISBFCHARGE")
            Me.columnASBFCHARGE = Me.Columns("ASBFCHARGE")
            Me.columnTSBFCHARGE = Me.Columns("TSBFCHARGE")
        End Sub
        
        Private Sub InitClass()
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnCATEGORY = New DataColumn("CATEGORY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATEGORY)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnHALLDESC = New DataColumn("HALLDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLDESC)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnveg = New DataColumn("veg", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnveg)
            Me.columnnonveg = New DataColumn("nonveg", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnonveg)
            Me.columnPCODE = New DataColumn("PCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCODE)
            Me.columnHMLOCCODE = New DataColumn("HMLOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHMLOCCODE)
            Me.columnLOCDESC = New DataColumn("LOCDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCDESC)
            Me.columnPDESC = New DataColumn("PDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPDESC)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columngroupcode = New DataColumn("groupcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroupcode)
            Me.columnPADD1 = New DataColumn("PADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD1)
            Me.columnPADD2 = New DataColumn("PADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD2)
            Me.columnPCITY = New DataColumn("PCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCITY)
            Me.columnPPHONE1 = New DataColumn("PPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPHONE1)
            Me.columnCEMAIL = New DataColumn("CEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCEMAIL)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnFROMTIME = New DataColumn("FROMTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMTIME)
            Me.columnTOTIME = New DataColumn("TOTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTIME)
            Me.columnHALLAMOUNT = New DataColumn("HALLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLAMOUNT)
            Me.columnBOOKINGSTATUS = New DataColumn("BOOKINGSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGSTATUS)
            Me.columnBOOKINGFLAG = New DataColumn("BOOKINGFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGFLAG)
            Me.columnBILLINGFLAG = New DataColumn("BILLINGFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLINGFLAG)
            Me.columnCANCELFLAG = New DataColumn("CANCELFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELFLAG)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnRECEIPTNO = New DataColumn("RECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTNO)
            Me.columnRECEIPTDATE = New DataColumn("RECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTDATE)
            Me.columnRAMOUNT = New DataColumn("RAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRAMOUNT)
            Me.columnAMOUNTTYPE = New DataColumn("AMOUNTTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNTTYPE)
            Me.columnTTYPE = New DataColumn("TTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTYPE)
            Me.columnPRROWID = New DataColumn("PRROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRROWID)
            Me.columnRITEMCODE = New DataColumn("RITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRITEMCODE)
            Me.columnRITEMDESC = New DataColumn("RITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRITEMDESC)
            Me.columnRQTY = New DataColumn("RQTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRQTY)
            Me.columnRRATE = New DataColumn("RRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRRATE)
            Me.columnPRAMOUNT = New DataColumn("PRAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRAMOUNT)
            Me.columnPRTAXPERC = New DataColumn("PRTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTAXPERC)
            Me.columnPRTAXAMOUNT = New DataColumn("PRTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTAXAMOUNT)
            Me.columnPRTOTALAMOUNT = New DataColumn("PRTOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTOTALAMOUNT)
            Me.columnTARIFFCODE = New DataColumn("TARIFFCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFCODE)
            Me.columnTARIFFDESC = New DataColumn("TARIFFDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFDESC)
            Me.columnTRATE = New DataColumn("TRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTRATE)
            Me.columnAROWID = New DataColumn("AROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAROWID)
            Me.columnAITEMCODE = New DataColumn("AITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAITEMCODE)
            Me.columnAITEMDESC = New DataColumn("AITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAITEMDESC)
            Me.columnAQTY = New DataColumn("AQTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAQTY)
            Me.columnARATE = New DataColumn("ARATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARATE)
            Me.columnAAMOUNT = New DataColumn("AAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAAMOUNT)
            Me.columnATAXAMOUNT = New DataColumn("ATAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnATAXAMOUNT)
            Me.columnATOTALAMOUNT = New DataColumn("ATOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnATOTALAMOUNT)
            Me.columnHALLTAXAMOUNT = New DataColumn("HALLTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXAMOUNT)
            Me.columnHALLTAXPERC = New DataColumn("HALLTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXPERC)
            Me.columnHALLNETAMOUNT = New DataColumn("HALLNETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLNETAMOUNT)
            Me.columnHOCCUPANCY = New DataColumn("HOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHOCCUPANCY)
            Me.columnISBFCHARGE = New DataColumn("ISBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISBFCHARGE)
            Me.columnASBFCHARGE = New DataColumn("ASBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASBFCHARGE)
            Me.columnTSBFCHARGE = New DataColumn("TSBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTSBFCHARGE)
            Me.columnLOCCODE.ReadOnly = true
            Me.columnCATEGORY.ReadOnly = true
            Me.columnBOOKINGTYPE.ReadOnly = true
            Me.columnHALLCODE.ReadOnly = true
            Me.columnHALLDESC.ReadOnly = true
            Me.columnOCCUPANCY.ReadOnly = true
            Me.columnveg.ReadOnly = true
            Me.columnnonveg.ReadOnly = true
            Me.columnPCODE.ReadOnly = true
            Me.columnHMLOCCODE.ReadOnly = true
            Me.columnLOCDESC.ReadOnly = true
            Me.columnPDESC.ReadOnly = true
            Me.columnBOOKINGNO.ReadOnly = true
            Me.columnPARTYDATE.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columngroupcode.ReadOnly = true
            Me.columnPADD1.ReadOnly = true
            Me.columnPADD2.ReadOnly = true
            Me.columnPCITY.ReadOnly = true
            Me.columnPPHONE1.ReadOnly = true
            Me.columnCEMAIL.ReadOnly = true
            Me.columnBOOKINGDATE.ReadOnly = true
            Me.columnFROMTIME.ReadOnly = true
            Me.columnTOTIME.ReadOnly = true
            Me.columnHALLAMOUNT.ReadOnly = true
            Me.columnBOOKINGSTATUS.ReadOnly = true
            Me.columnBOOKINGFLAG.ReadOnly = true
            Me.columnBILLINGFLAG.ReadOnly = true
            Me.columnCANCELFLAG.ReadOnly = true
            Me.columnFREEZE.ReadOnly = true
            Me.columnRECEIPTNO.ReadOnly = true
            Me.columnRECEIPTDATE.ReadOnly = true
            Me.columnRAMOUNT.ReadOnly = true
            Me.columnAMOUNTTYPE.ReadOnly = true
            Me.columnTTYPE.ReadOnly = true
            Me.columnPRROWID.ReadOnly = true
            Me.columnRITEMCODE.ReadOnly = true
            Me.columnRITEMDESC.ReadOnly = true
            Me.columnRQTY.ReadOnly = true
            Me.columnRRATE.ReadOnly = true
            Me.columnPRAMOUNT.ReadOnly = true
            Me.columnPRTAXPERC.ReadOnly = true
            Me.columnPRTAXAMOUNT.ReadOnly = true
            Me.columnPRTOTALAMOUNT.ReadOnly = true
            Me.columnTARIFFCODE.ReadOnly = true
            Me.columnTARIFFDESC.ReadOnly = true
            Me.columnTRATE.ReadOnly = true
            Me.columnAROWID.ReadOnly = true
            Me.columnAITEMCODE.ReadOnly = true
            Me.columnAITEMDESC.ReadOnly = true
            Me.columnAQTY.ReadOnly = true
            Me.columnARATE.ReadOnly = true
            Me.columnAAMOUNT.ReadOnly = true
            Me.columnATAXAMOUNT.ReadOnly = true
            Me.columnATOTALAMOUNT.ReadOnly = true
            Me.columnHALLTAXAMOUNT.ReadOnly = true
            Me.columnHALLTAXPERC.ReadOnly = true
            Me.columnHALLNETAMOUNT.ReadOnly = true
            Me.columnHOCCUPANCY.ReadOnly = true
            Me.columnISBFCHARGE.ReadOnly = true
            Me.columnASBFCHARGE.ReadOnly = true
            Me.columnTSBFCHARGE.ReadOnly = true
        End Sub
        
        Public Function NewPARTY_VIEW_HALLBOOKINGDETAILSRow() As PARTY_VIEW_HALLBOOKINGDETAILSRow
            Return CType(Me.NewRow,PARTY_VIEW_HALLBOOKINGDETAILSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_VIEW_HALLBOOKINGDETAILSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_VIEW_HALLBOOKINGDETAILSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_VIEW_HALLBOOKINGDETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_HALLBOOKINGDETAILSRowChanged(Me, New PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEvent(CType(e.Row,PARTY_VIEW_HALLBOOKINGDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_VIEW_HALLBOOKINGDETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_HALLBOOKINGDETAILSRowChanging(Me, New PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEvent(CType(e.Row,PARTY_VIEW_HALLBOOKINGDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_VIEW_HALLBOOKINGDETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_HALLBOOKINGDETAILSRowDeleted(Me, New PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEvent(CType(e.Row,PARTY_VIEW_HALLBOOKINGDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_VIEW_HALLBOOKINGDETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_HALLBOOKINGDETAILSRowDeleting(Me, New PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEvent(CType(e.Row,PARTY_VIEW_HALLBOOKINGDETAILSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_VIEW_HALLBOOKINGDETAILSRow(ByVal row As PARTY_VIEW_HALLBOOKINGDETAILSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_HALLBOOKINGDETAILSRow
        Inherits DataRow
        
        Private tablePARTY_VIEW_HALLBOOKINGDETAILS As PARTY_VIEW_HALLBOOKINGDETAILSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_VIEW_HALLBOOKINGDETAILS = CType(Me.Table,PARTY_VIEW_HALLBOOKINGDETAILSDataTable)
        End Sub
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property CATEGORY As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CATEGORYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CATEGORYColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property HALLDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLDESCColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property veg As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.vegColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.vegColumn) = value
            End Set
        End Property
        
        Public Property nonveg As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.nonvegColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.nonvegColumn) = value
            End Set
        End Property
        
        Public Property PCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PCODEColumn) = value
            End Set
        End Property
        
        Public Property HMLOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HMLOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HMLOCCODEColumn) = value
            End Set
        End Property
        
        Public Property LOCDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.LOCDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.LOCDESCColumn) = value
            End Set
        End Property
        
        Public Property PDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PDESCColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property groupcode As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.groupcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.groupcodeColumn) = value
            End Set
        End Property
        
        Public Property PADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PADD1Column) = value
            End Set
        End Property
        
        Public Property PADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PADD2Column) = value
            End Set
        End Property
        
        Public Property PCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PCITYColumn) = value
            End Set
        End Property
        
        Public Property PPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PPHONE1Column) = value
            End Set
        End Property
        
        Public Property CEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CEMAILColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property FROMTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.FROMTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.FROMTIMEColumn) = value
            End Set
        End Property
        
        Public Property TOTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TOTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TOTIMEColumn) = value
            End Set
        End Property
        
        Public Property HALLAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGSTATUSColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGFLAGColumn) = value
            End Set
        End Property
        
        Public Property BILLINGFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BILLINGFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BILLINGFLAGColumn) = value
            End Set
        End Property
        
        Public Property CANCELFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CANCELFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CANCELFLAGColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property RAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNTTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AMOUNTTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AMOUNTTYPEColumn) = value
            End Set
        End Property
        
        Public Property TTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TTYPEColumn) = value
            End Set
        End Property
        
        Public Property PRROWID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRROWIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRROWIDColumn) = value
            End Set
        End Property
        
        Public Property RITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property RITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property RQTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RQTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RQTYColumn) = value
            End Set
        End Property
        
        Public Property RRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RRATEColumn) = value
            End Set
        End Property
        
        Public Property PRAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property PRTAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property PRTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property PRTOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TARIFFCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TARIFFCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TARIFFCODEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TARIFFDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TARIFFDESCColumn) = value
            End Set
        End Property
        
        Public Property TRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TRATEColumn) = value
            End Set
        End Property
        
        Public Property AROWID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AROWIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AROWIDColumn) = value
            End Set
        End Property
        
        Public Property AITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property AITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property AQTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AQTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AQTYColumn) = value
            End Set
        End Property
        
        Public Property ARATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ARATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ARATEColumn) = value
            End Set
        End Property
        
        Public Property AAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ATAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ATAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ATAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ATOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ATOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ATOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLTAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property HALLNETAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLNETAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLNETAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property ISBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ISBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ISBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property ASBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ASBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ASBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property TSBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TSBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TSBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATEGORYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CATEGORYColumn)
        End Function
        
        Public Sub SetCATEGORYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CATEGORYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGTYPEColumn)
        End Function
        
        Public Sub SetBOOKINGTYPENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLDESCColumn)
        End Function
        
        Public Sub SetHALLDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvegNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.vegColumn)
        End Function
        
        Public Sub SetvegNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.vegColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnonvegNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.nonvegColumn)
        End Function
        
        Public Sub SetnonvegNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.nonvegColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PCODEColumn)
        End Function
        
        Public Sub SetPCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHMLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HMLOCCODEColumn)
        End Function
        
        Public Sub SetHMLOCCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HMLOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.LOCDESCColumn)
        End Function
        
        Public Sub SetLOCDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.LOCDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PDESCColumn)
        End Function
        
        Public Sub SetPDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgroupcodeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.groupcodeColumn)
        End Function
        
        Public Sub SetgroupcodeNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.groupcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD1Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PADD1Column)
        End Function
        
        Public Sub SetPADD1Null()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD2Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PADD2Column)
        End Function
        
        Public Sub SetPADD2Null()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCITYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PCITYColumn)
        End Function
        
        Public Sub SetPCITYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PPHONE1Column)
        End Function
        
        Public Sub SetPPHONE1Null()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCEMAILNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CEMAILColumn)
        End Function
        
        Public Sub SetCEMAILNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.FROMTIMEColumn)
        End Function
        
        Public Sub SetFROMTIMENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.FROMTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TOTIMEColumn)
        End Function
        
        Public Sub SetTOTIMENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TOTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLAMOUNTColumn)
        End Function
        
        Public Sub SetHALLAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGSTATUSNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGSTATUSColumn)
        End Function
        
        Public Sub SetBOOKINGSTATUSNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGFLAGColumn)
        End Function
        
        Public Sub SetBOOKINGFLAGNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLINGFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BILLINGFLAGColumn)
        End Function
        
        Public Sub SetBILLINGFLAGNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BILLINGFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CANCELFLAGColumn)
        End Function
        
        Public Sub SetCANCELFLAGNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CANCELFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RECEIPTNOColumn)
        End Function
        
        Public Sub SetRECEIPTNONull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RECEIPTDATEColumn)
        End Function
        
        Public Sub SetRECEIPTDATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RAMOUNTColumn)
        End Function
        
        Public Sub SetRAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AMOUNTTYPEColumn)
        End Function
        
        Public Sub SetAMOUNTTYPENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AMOUNTTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TTYPEColumn)
        End Function
        
        Public Sub SetTTYPENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRROWIDNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRROWIDColumn)
        End Function
        
        Public Sub SetPRROWIDNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRROWIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RITEMCODEColumn)
        End Function
        
        Public Sub SetRITEMCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RITEMDESCColumn)
        End Function
        
        Public Sub SetRITEMDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RQTYColumn)
        End Function
        
        Public Sub SetRQTYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RQTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RRATEColumn)
        End Function
        
        Public Sub SetRRATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRAMOUNTColumn)
        End Function
        
        Public Sub SetPRAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTAXPERCColumn)
        End Function
        
        Public Sub SetPRTAXPERCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTAXAMOUNTColumn)
        End Function
        
        Public Sub SetPRTAXAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTOTALAMOUNTColumn)
        End Function
        
        Public Sub SetPRTOTALAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TARIFFCODEColumn)
        End Function
        
        Public Sub SetTARIFFCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TARIFFCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TARIFFDESCColumn)
        End Function
        
        Public Sub SetTARIFFDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TARIFFDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TRATEColumn)
        End Function
        
        Public Sub SetTRATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAROWIDNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AROWIDColumn)
        End Function
        
        Public Sub SetAROWIDNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AROWIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AITEMCODEColumn)
        End Function
        
        Public Sub SetAITEMCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AITEMDESCColumn)
        End Function
        
        Public Sub SetAITEMDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AQTYColumn)
        End Function
        
        Public Sub SetAQTYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AQTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ARATEColumn)
        End Function
        
        Public Sub SetARATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ARATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AAMOUNTColumn)
        End Function
        
        Public Sub SetAAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsATAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ATAXAMOUNTColumn)
        End Function
        
        Public Sub SetATAXAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ATAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsATOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ATOTALAMOUNTColumn)
        End Function
        
        Public Sub SetATOTALAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ATOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLTAXAMOUNTColumn)
        End Function
        
        Public Sub SetHALLTAXAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLTAXPERCColumn)
        End Function
        
        Public Sub SetHALLTAXPERCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLTAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLNETAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLNETAMOUNTColumn)
        End Function
        
        Public Sub SetHALLNETAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLNETAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HOCCUPANCYColumn)
        End Function
        
        Public Sub SetHOCCUPANCYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsISBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ISBFCHARGEColumn)
        End Function
        
        Public Sub SetISBFCHARGENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ISBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ASBFCHARGEColumn)
        End Function
        
        Public Sub SetASBFCHARGENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ASBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTSBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TSBFCHARGEColumn)
        End Function
        
        Public Sub SetTSBFCHARGENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TSBFCHARGEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_VIEW_HALLBOOKINGDETAILSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_VIEW_HALLBOOKINGDETAILSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_VIEW_HALLBOOKINGDETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_BARITEMDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLOCCODE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnREMARKS As DataColumn
        
        Private columnPOSCODE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Friend Sub New()
            MyBase.New("PAR_BARITEM")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property REMARKSColumn As DataColumn
            Get
                Return Me.columnREMARKS
            End Get
        End Property
        
        Friend ReadOnly Property POSCODEColumn As DataColumn
            Get
                Return Me.columnPOSCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PAR_BARITEMRow
            Get
                Return CType(Me.Rows(index),PAR_BARITEMRow)
            End Get
        End Property
        
        Public Event PAR_BARITEMRowChanged As PAR_BARITEMRowChangeEventHandler
        
        Public Event PAR_BARITEMRowChanging As PAR_BARITEMRowChangeEventHandler
        
        Public Event PAR_BARITEMRowDeleted As PAR_BARITEMRowChangeEventHandler
        
        Public Event PAR_BARITEMRowDeleting As PAR_BARITEMRowChangeEventHandler
        
        Public Overloads Sub AddPAR_BARITEMRow(ByVal row As PAR_BARITEMRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPAR_BARITEMRow( _
                    ByVal LOCCODE As String,  _
                    ByVal BOOKINGNO As String,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal REMARKS As String,  _
                    ByVal POSCODE As String,  _
                    ByVal ITEMCODE As String,  _
                    ByVal ITEMDESC As String,  _
                    ByVal UOM As String,  _
                    ByVal RATE As Decimal,  _
                    ByVal QTY As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal ADDUSERID As String,  _
                    ByVal ADDDATETIME As Date) As PAR_BARITEMRow
            Dim rowPAR_BARITEMRow As PAR_BARITEMRow = CType(Me.NewRow,PAR_BARITEMRow)
            rowPAR_BARITEMRow.ItemArray = New Object() {LOCCODE, BOOKINGNO, PARTYDATE, MCODE, MNAME, REMARKS, POSCODE, ITEMCODE, ITEMDESC, UOM, RATE, QTY, AMOUNT, TOTALAMOUNT, FREEZE, ADDUSERID, ADDDATETIME}
            Me.Rows.Add(rowPAR_BARITEMRow)
            Return rowPAR_BARITEMRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PAR_BARITEMDataTable = CType(MyBase.Clone,PAR_BARITEMDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PAR_BARITEMDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnREMARKS = Me.Columns("REMARKS")
            Me.columnPOSCODE = Me.Columns("POSCODE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
        End Sub
        
        Private Sub InitClass()
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnREMARKS = New DataColumn("REMARKS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREMARKS)
            Me.columnPOSCODE = New DataColumn("POSCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSCODE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
        End Sub
        
        Public Function NewPAR_BARITEMRow() As PAR_BARITEMRow
            Return CType(Me.NewRow,PAR_BARITEMRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PAR_BARITEMRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PAR_BARITEMRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PAR_BARITEMRowChangedEvent) Is Nothing) Then
                RaiseEvent PAR_BARITEMRowChanged(Me, New PAR_BARITEMRowChangeEvent(CType(e.Row,PAR_BARITEMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PAR_BARITEMRowChangingEvent) Is Nothing) Then
                RaiseEvent PAR_BARITEMRowChanging(Me, New PAR_BARITEMRowChangeEvent(CType(e.Row,PAR_BARITEMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PAR_BARITEMRowDeletedEvent) Is Nothing) Then
                RaiseEvent PAR_BARITEMRowDeleted(Me, New PAR_BARITEMRowChangeEvent(CType(e.Row,PAR_BARITEMRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PAR_BARITEMRowDeletingEvent) Is Nothing) Then
                RaiseEvent PAR_BARITEMRowDeleting(Me, New PAR_BARITEMRowChangeEvent(CType(e.Row,PAR_BARITEMRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePAR_BARITEMRow(ByVal row As PAR_BARITEMRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_BARITEMRow
        Inherits DataRow
        
        Private tablePAR_BARITEM As PAR_BARITEMDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePAR_BARITEM = CType(Me.Table,PAR_BARITEMDataTable)
        End Sub
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.BOOKINGNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property REMARKS As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.REMARKSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.REMARKSColumn) = value
            End Set
        End Property
        
        Public Property POSCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.POSCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.POSCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.UOMColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.RATEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.QTYColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_BARITEM.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_BARITEM.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePAR_BARITEM.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePAR_BARITEM.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePAR_BARITEM.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePAR_BARITEM.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablePAR_BARITEM.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREMARKSNull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.REMARKSColumn)
        End Function
        
        Public Sub SetREMARKSNull()
            Me(Me.tablePAR_BARITEM.REMARKSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOSCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.POSCODEColumn)
        End Function
        
        Public Sub SetPOSCODENull()
            Me(Me.tablePAR_BARITEM.POSCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tablePAR_BARITEM.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tablePAR_BARITEM.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tablePAR_BARITEM.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePAR_BARITEM.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tablePAR_BARITEM.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePAR_BARITEM.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePAR_BARITEM.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePAR_BARITEM.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tablePAR_BARITEM.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_BARITEM.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablePAR_BARITEM.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_BARITEMRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PAR_BARITEMRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PAR_BARITEMRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PAR_BARITEMRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_itemmasterDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Private columnITEMTYPECODE As DataColumn
        
        Private columnGROUPCODE As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnTAXPERC As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnadddatetime As DataColumn
        
        Private columnadduserid As DataColumn
        
        Private columnCGROUPCODE As DataColumn
        
        Private columnGROUPCODEOLD As DataColumn
        
        Private columnGLACCODE As DataColumn
        
        Private columnAUTOID As DataColumn
        
        Private columnSBFCHARGE As DataColumn
        
        Private columnCATEGORY As DataColumn
        
        Private columnGLCCODE As DataColumn
        
        Private columnGLACCODE1 As DataColumn
        
        Private columnGLCCODE1 As DataColumn
        
        Friend Sub New()
            MyBase.New("party_itemmaster")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property ITEMTYPECODEColumn As DataColumn
            Get
                Return Me.columnITEMTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property GROUPCODEColumn As DataColumn
            Get
                Return Me.columnGROUPCODE
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property TAXPERCColumn As DataColumn
            Get
                Return Me.columnTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property adddatetimeColumn As DataColumn
            Get
                Return Me.columnadddatetime
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Friend ReadOnly Property CGROUPCODEColumn As DataColumn
            Get
                Return Me.columnCGROUPCODE
            End Get
        End Property
        
        Friend ReadOnly Property GROUPCODEOLDColumn As DataColumn
            Get
                Return Me.columnGROUPCODEOLD
            End Get
        End Property
        
        Friend ReadOnly Property GLACCODEColumn As DataColumn
            Get
                Return Me.columnGLACCODE
            End Get
        End Property
        
        Friend ReadOnly Property AUTOIDColumn As DataColumn
            Get
                Return Me.columnAUTOID
            End Get
        End Property
        
        Friend ReadOnly Property SBFCHARGEColumn As DataColumn
            Get
                Return Me.columnSBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property CATEGORYColumn As DataColumn
            Get
                Return Me.columnCATEGORY
            End Get
        End Property
        
        Friend ReadOnly Property GLCCODEColumn As DataColumn
            Get
                Return Me.columnGLCCODE
            End Get
        End Property
        
        Friend ReadOnly Property GLACCODE1Column As DataColumn
            Get
                Return Me.columnGLACCODE1
            End Get
        End Property
        
        Friend ReadOnly Property GLCCODE1Column As DataColumn
            Get
                Return Me.columnGLCCODE1
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As party_itemmasterRow
            Get
                Return CType(Me.Rows(index),party_itemmasterRow)
            End Get
        End Property
        
        Public Event party_itemmasterRowChanged As party_itemmasterRowChangeEventHandler
        
        Public Event party_itemmasterRowChanging As party_itemmasterRowChangeEventHandler
        
        Public Event party_itemmasterRowDeleted As party_itemmasterRowChangeEventHandler
        
        Public Event party_itemmasterRowDeleting As party_itemmasterRowChangeEventHandler
        
        Public Overloads Sub Addparty_itemmasterRow(ByVal row As party_itemmasterRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addparty_itemmasterRow( _
                    ByVal ITEMCODE As String,  _
                    ByVal ITEMDESC As String,  _
                    ByVal ITEMTYPECODE As String,  _
                    ByVal GROUPCODE As String,  _
                    ByVal UOM As String,  _
                    ByVal RATE As Decimal,  _
                    ByVal TAXPERC As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal adddatetime As Date,  _
                    ByVal adduserid As String,  _
                    ByVal CGROUPCODE As String,  _
                    ByVal GROUPCODEOLD As String,  _
                    ByVal GLACCODE As String,  _
                    ByVal SBFCHARGE As String,  _
                    ByVal CATEGORY As String,  _
                    ByVal GLCCODE As String,  _
                    ByVal GLACCODE1 As String,  _
                    ByVal GLCCODE1 As String) As party_itemmasterRow
            Dim rowparty_itemmasterRow As party_itemmasterRow = CType(Me.NewRow,party_itemmasterRow)
            rowparty_itemmasterRow.ItemArray = New Object() {ITEMCODE, ITEMDESC, ITEMTYPECODE, GROUPCODE, UOM, RATE, TAXPERC, AMOUNT, FREEZE, adddatetime, adduserid, CGROUPCODE, GROUPCODEOLD, GLACCODE, Nothing, SBFCHARGE, CATEGORY, GLCCODE, GLACCODE1, GLCCODE1}
            Me.Rows.Add(rowparty_itemmasterRow)
            Return rowparty_itemmasterRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As party_itemmasterDataTable = CType(MyBase.Clone,party_itemmasterDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New party_itemmasterDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
            Me.columnITEMTYPECODE = Me.Columns("ITEMTYPECODE")
            Me.columnGROUPCODE = Me.Columns("GROUPCODE")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnTAXPERC = Me.Columns("TAXPERC")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnadddatetime = Me.Columns("adddatetime")
            Me.columnadduserid = Me.Columns("adduserid")
            Me.columnCGROUPCODE = Me.Columns("CGROUPCODE")
            Me.columnGROUPCODEOLD = Me.Columns("GROUPCODEOLD")
            Me.columnGLACCODE = Me.Columns("GLACCODE")
            Me.columnAUTOID = Me.Columns("AUTOID")
            Me.columnSBFCHARGE = Me.Columns("SBFCHARGE")
            Me.columnCATEGORY = Me.Columns("CATEGORY")
            Me.columnGLCCODE = Me.Columns("GLCCODE")
            Me.columnGLACCODE1 = Me.Columns("GLACCODE1")
            Me.columnGLCCODE1 = Me.Columns("GLCCODE1")
        End Sub
        
        Private Sub InitClass()
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columnITEMTYPECODE = New DataColumn("ITEMTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMTYPECODE)
            Me.columnGROUPCODE = New DataColumn("GROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPCODE)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnTAXPERC = New DataColumn("TAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXPERC)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnadddatetime = New DataColumn("adddatetime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddatetime)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
            Me.columnCGROUPCODE = New DataColumn("CGROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCGROUPCODE)
            Me.columnGROUPCODEOLD = New DataColumn("GROUPCODEOLD", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPCODEOLD)
            Me.columnGLACCODE = New DataColumn("GLACCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCODE)
            Me.columnAUTOID = New DataColumn("AUTOID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAUTOID)
            Me.columnSBFCHARGE = New DataColumn("SBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBFCHARGE)
            Me.columnCATEGORY = New DataColumn("CATEGORY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATEGORY)
            Me.columnGLCCODE = New DataColumn("GLCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLCCODE)
            Me.columnGLACCODE1 = New DataColumn("GLACCODE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCODE1)
            Me.columnGLCCODE1 = New DataColumn("GLCCODE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLCCODE1)
            Me.columnITEMCODE.AllowDBNull = false
            Me.columnAUTOID.AutoIncrement = true
            Me.columnAUTOID.AllowDBNull = false
            Me.columnAUTOID.ReadOnly = true
        End Sub
        
        Public Function Newparty_itemmasterRow() As party_itemmasterRow
            Return CType(Me.NewRow,party_itemmasterRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New party_itemmasterRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(party_itemmasterRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.party_itemmasterRowChangedEvent) Is Nothing) Then
                RaiseEvent party_itemmasterRowChanged(Me, New party_itemmasterRowChangeEvent(CType(e.Row,party_itemmasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.party_itemmasterRowChangingEvent) Is Nothing) Then
                RaiseEvent party_itemmasterRowChanging(Me, New party_itemmasterRowChangeEvent(CType(e.Row,party_itemmasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.party_itemmasterRowDeletedEvent) Is Nothing) Then
                RaiseEvent party_itemmasterRowDeleted(Me, New party_itemmasterRowChangeEvent(CType(e.Row,party_itemmasterRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.party_itemmasterRowDeletingEvent) Is Nothing) Then
                RaiseEvent party_itemmasterRowDeleting(Me, New party_itemmasterRowChangeEvent(CType(e.Row,party_itemmasterRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeparty_itemmasterRow(ByVal row As party_itemmasterRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_itemmasterRow
        Inherits DataRow
        
        Private tableparty_itemmaster As party_itemmasterDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableparty_itemmaster = CType(Me.Table,party_itemmasterDataTable)
        End Sub
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tableparty_itemmaster.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tableparty_itemmaster.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property ITEMTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.ITEMTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.ITEMTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property GROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.GROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.GROUPCODEColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.UOMColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.RATEColumn) = value
            End Set
        End Property
        
        Public Property TAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.TAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.TAXPERCColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property adddatetime As Date
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.adddatetimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.adddatetimeColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.adduseridColumn) = value
            End Set
        End Property
        
        Public Property CGROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.CGROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.CGROUPCODEColumn) = value
            End Set
        End Property
        
        Public Property GROUPCODEOLD As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.GROUPCODEOLDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.GROUPCODEOLDColumn) = value
            End Set
        End Property
        
        Public Property GLACCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.GLACCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.GLACCODEColumn) = value
            End Set
        End Property
        
        Public Property AUTOID As Decimal
            Get
                Return CType(Me(Me.tableparty_itemmaster.AUTOIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableparty_itemmaster.AUTOIDColumn) = value
            End Set
        End Property
        
        Public Property SBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.SBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.SBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property CATEGORY As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.CATEGORYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.CATEGORYColumn) = value
            End Set
        End Property
        
        Public Property GLCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.GLCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.GLCCODEColumn) = value
            End Set
        End Property
        
        Public Property GLACCODE1 As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.GLACCODE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.GLACCODE1Column) = value
            End Set
        End Property
        
        Public Property GLCCODE1 As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_itemmaster.GLCCODE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_itemmaster.GLCCODE1Column) = value
            End Set
        End Property
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tableparty_itemmaster.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.ITEMTYPECODEColumn)
        End Function
        
        Public Sub SetITEMTYPECODENull()
            Me(Me.tableparty_itemmaster.ITEMTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.GROUPCODEColumn)
        End Function
        
        Public Sub SetGROUPCODENull()
            Me(Me.tableparty_itemmaster.GROUPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tableparty_itemmaster.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tableparty_itemmaster.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.TAXPERCColumn)
        End Function
        
        Public Sub SetTAXPERCNull()
            Me(Me.tableparty_itemmaster.TAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableparty_itemmaster.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tableparty_itemmaster.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddatetimeNull() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.adddatetimeColumn)
        End Function
        
        Public Sub SetadddatetimeNull()
            Me(Me.tableparty_itemmaster.adddatetimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tableparty_itemmaster.adduseridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.CGROUPCODEColumn)
        End Function
        
        Public Sub SetCGROUPCODENull()
            Me(Me.tableparty_itemmaster.CGROUPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPCODEOLDNull() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.GROUPCODEOLDColumn)
        End Function
        
        Public Sub SetGROUPCODEOLDNull()
            Me(Me.tableparty_itemmaster.GROUPCODEOLDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCODENull() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.GLACCODEColumn)
        End Function
        
        Public Sub SetGLACCODENull()
            Me(Me.tableparty_itemmaster.GLACCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.SBFCHARGEColumn)
        End Function
        
        Public Sub SetSBFCHARGENull()
            Me(Me.tableparty_itemmaster.SBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATEGORYNull() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.CATEGORYColumn)
        End Function
        
        Public Sub SetCATEGORYNull()
            Me(Me.tableparty_itemmaster.CATEGORYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLCCODENull() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.GLCCODEColumn)
        End Function
        
        Public Sub SetGLCCODENull()
            Me(Me.tableparty_itemmaster.GLCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCODE1Null() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.GLACCODE1Column)
        End Function
        
        Public Sub SetGLACCODE1Null()
            Me(Me.tableparty_itemmaster.GLACCODE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLCCODE1Null() As Boolean
            Return Me.IsNull(Me.tableparty_itemmaster.GLCCODE1Column)
        End Function
        
        Public Sub SetGLCCODE1Null()
            Me(Me.tableparty_itemmaster.GLCCODE1Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_itemmasterRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As party_itemmasterRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As party_itemmasterRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As party_itemmasterRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_ITEMMASTERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Private columnITEMTYPECODE As DataColumn
        
        Private columnGROUPCODE As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnTAXPERC As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnadddatetime As DataColumn
        
        Private columnadduserid As DataColumn
        
        Private columnCGROUPCODE As DataColumn
        
        Private columnGROUPCODEOLD As DataColumn
        
        Private columnGLACCODE As DataColumn
        
        Private columnAUTOID As DataColumn
        
        Private columnSBFCHARGE As DataColumn
        
        Private columnCATEGORY As DataColumn
        
        Private columnGLCCODE As DataColumn
        
        Private columnGLACCODE1 As DataColumn
        
        Private columnGLCCODE1 As DataColumn
        
        Friend Sub New()
            MyBase.New("PAR_ITEMMASTER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property ITEMTYPECODEColumn As DataColumn
            Get
                Return Me.columnITEMTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property GROUPCODEColumn As DataColumn
            Get
                Return Me.columnGROUPCODE
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property TAXPERCColumn As DataColumn
            Get
                Return Me.columnTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property adddatetimeColumn As DataColumn
            Get
                Return Me.columnadddatetime
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Friend ReadOnly Property CGROUPCODEColumn As DataColumn
            Get
                Return Me.columnCGROUPCODE
            End Get
        End Property
        
        Friend ReadOnly Property GROUPCODEOLDColumn As DataColumn
            Get
                Return Me.columnGROUPCODEOLD
            End Get
        End Property
        
        Friend ReadOnly Property GLACCODEColumn As DataColumn
            Get
                Return Me.columnGLACCODE
            End Get
        End Property
        
        Friend ReadOnly Property AUTOIDColumn As DataColumn
            Get
                Return Me.columnAUTOID
            End Get
        End Property
        
        Friend ReadOnly Property SBFCHARGEColumn As DataColumn
            Get
                Return Me.columnSBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property CATEGORYColumn As DataColumn
            Get
                Return Me.columnCATEGORY
            End Get
        End Property
        
        Friend ReadOnly Property GLCCODEColumn As DataColumn
            Get
                Return Me.columnGLCCODE
            End Get
        End Property
        
        Friend ReadOnly Property GLACCODE1Column As DataColumn
            Get
                Return Me.columnGLACCODE1
            End Get
        End Property
        
        Friend ReadOnly Property GLCCODE1Column As DataColumn
            Get
                Return Me.columnGLCCODE1
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PAR_ITEMMASTERRow
            Get
                Return CType(Me.Rows(index),PAR_ITEMMASTERRow)
            End Get
        End Property
        
        Public Event PAR_ITEMMASTERRowChanged As PAR_ITEMMASTERRowChangeEventHandler
        
        Public Event PAR_ITEMMASTERRowChanging As PAR_ITEMMASTERRowChangeEventHandler
        
        Public Event PAR_ITEMMASTERRowDeleted As PAR_ITEMMASTERRowChangeEventHandler
        
        Public Event PAR_ITEMMASTERRowDeleting As PAR_ITEMMASTERRowChangeEventHandler
        
        Public Overloads Sub AddPAR_ITEMMASTERRow(ByVal row As PAR_ITEMMASTERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPAR_ITEMMASTERRow( _
                    ByVal ITEMCODE As String,  _
                    ByVal ITEMDESC As String,  _
                    ByVal ITEMTYPECODE As String,  _
                    ByVal GROUPCODE As String,  _
                    ByVal UOM As String,  _
                    ByVal RATE As Decimal,  _
                    ByVal TAXPERC As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal adddatetime As Date,  _
                    ByVal adduserid As String,  _
                    ByVal CGROUPCODE As String,  _
                    ByVal GROUPCODEOLD As String,  _
                    ByVal GLACCODE As String,  _
                    ByVal SBFCHARGE As String,  _
                    ByVal CATEGORY As String,  _
                    ByVal GLCCODE As String,  _
                    ByVal GLACCODE1 As String,  _
                    ByVal GLCCODE1 As String) As PAR_ITEMMASTERRow
            Dim rowPAR_ITEMMASTERRow As PAR_ITEMMASTERRow = CType(Me.NewRow,PAR_ITEMMASTERRow)
            rowPAR_ITEMMASTERRow.ItemArray = New Object() {ITEMCODE, ITEMDESC, ITEMTYPECODE, GROUPCODE, UOM, RATE, TAXPERC, AMOUNT, FREEZE, adddatetime, adduserid, CGROUPCODE, GROUPCODEOLD, GLACCODE, Nothing, SBFCHARGE, CATEGORY, GLCCODE, GLACCODE1, GLCCODE1}
            Me.Rows.Add(rowPAR_ITEMMASTERRow)
            Return rowPAR_ITEMMASTERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PAR_ITEMMASTERDataTable = CType(MyBase.Clone,PAR_ITEMMASTERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PAR_ITEMMASTERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
            Me.columnITEMTYPECODE = Me.Columns("ITEMTYPECODE")
            Me.columnGROUPCODE = Me.Columns("GROUPCODE")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnTAXPERC = Me.Columns("TAXPERC")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnadddatetime = Me.Columns("adddatetime")
            Me.columnadduserid = Me.Columns("adduserid")
            Me.columnCGROUPCODE = Me.Columns("CGROUPCODE")
            Me.columnGROUPCODEOLD = Me.Columns("GROUPCODEOLD")
            Me.columnGLACCODE = Me.Columns("GLACCODE")
            Me.columnAUTOID = Me.Columns("AUTOID")
            Me.columnSBFCHARGE = Me.Columns("SBFCHARGE")
            Me.columnCATEGORY = Me.Columns("CATEGORY")
            Me.columnGLCCODE = Me.Columns("GLCCODE")
            Me.columnGLACCODE1 = Me.Columns("GLACCODE1")
            Me.columnGLCCODE1 = Me.Columns("GLCCODE1")
        End Sub
        
        Private Sub InitClass()
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columnITEMTYPECODE = New DataColumn("ITEMTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMTYPECODE)
            Me.columnGROUPCODE = New DataColumn("GROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPCODE)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnTAXPERC = New DataColumn("TAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXPERC)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnadddatetime = New DataColumn("adddatetime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddatetime)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
            Me.columnCGROUPCODE = New DataColumn("CGROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCGROUPCODE)
            Me.columnGROUPCODEOLD = New DataColumn("GROUPCODEOLD", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPCODEOLD)
            Me.columnGLACCODE = New DataColumn("GLACCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCODE)
            Me.columnAUTOID = New DataColumn("AUTOID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAUTOID)
            Me.columnSBFCHARGE = New DataColumn("SBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBFCHARGE)
            Me.columnCATEGORY = New DataColumn("CATEGORY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATEGORY)
            Me.columnGLCCODE = New DataColumn("GLCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLCCODE)
            Me.columnGLACCODE1 = New DataColumn("GLACCODE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCODE1)
            Me.columnGLCCODE1 = New DataColumn("GLCCODE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLCCODE1)
            Me.columnITEMCODE.AllowDBNull = false
            Me.columnAUTOID.AutoIncrement = true
            Me.columnAUTOID.AllowDBNull = false
            Me.columnAUTOID.ReadOnly = true
        End Sub
        
        Public Function NewPAR_ITEMMASTERRow() As PAR_ITEMMASTERRow
            Return CType(Me.NewRow,PAR_ITEMMASTERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PAR_ITEMMASTERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PAR_ITEMMASTERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PAR_ITEMMASTERRowChangedEvent) Is Nothing) Then
                RaiseEvent PAR_ITEMMASTERRowChanged(Me, New PAR_ITEMMASTERRowChangeEvent(CType(e.Row,PAR_ITEMMASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PAR_ITEMMASTERRowChangingEvent) Is Nothing) Then
                RaiseEvent PAR_ITEMMASTERRowChanging(Me, New PAR_ITEMMASTERRowChangeEvent(CType(e.Row,PAR_ITEMMASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PAR_ITEMMASTERRowDeletedEvent) Is Nothing) Then
                RaiseEvent PAR_ITEMMASTERRowDeleted(Me, New PAR_ITEMMASTERRowChangeEvent(CType(e.Row,PAR_ITEMMASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PAR_ITEMMASTERRowDeletingEvent) Is Nothing) Then
                RaiseEvent PAR_ITEMMASTERRowDeleting(Me, New PAR_ITEMMASTERRowChangeEvent(CType(e.Row,PAR_ITEMMASTERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePAR_ITEMMASTERRow(ByVal row As PAR_ITEMMASTERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_ITEMMASTERRow
        Inherits DataRow
        
        Private tablePAR_ITEMMASTER As PAR_ITEMMASTERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePAR_ITEMMASTER = CType(Me.Table,PAR_ITEMMASTERDataTable)
        End Sub
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tablePAR_ITEMMASTER.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property ITEMTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.ITEMTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.ITEMTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property GROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.GROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.GROUPCODEColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.UOMColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.RATEColumn) = value
            End Set
        End Property
        
        Public Property TAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.TAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.TAXPERCColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property adddatetime As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.adddatetimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.adddatetimeColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.adduseridColumn) = value
            End Set
        End Property
        
        Public Property CGROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.CGROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.CGROUPCODEColumn) = value
            End Set
        End Property
        
        Public Property GROUPCODEOLD As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.GROUPCODEOLDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.GROUPCODEOLDColumn) = value
            End Set
        End Property
        
        Public Property GLACCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.GLACCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.GLACCODEColumn) = value
            End Set
        End Property
        
        Public Property AUTOID As Decimal
            Get
                Return CType(Me(Me.tablePAR_ITEMMASTER.AUTOIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.AUTOIDColumn) = value
            End Set
        End Property
        
        Public Property SBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.SBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.SBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property CATEGORY As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.CATEGORYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.CATEGORYColumn) = value
            End Set
        End Property
        
        Public Property GLCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.GLCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.GLCCODEColumn) = value
            End Set
        End Property
        
        Public Property GLACCODE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.GLACCODE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.GLACCODE1Column) = value
            End Set
        End Property
        
        Public Property GLCCODE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ITEMMASTER.GLCCODE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ITEMMASTER.GLCCODE1Column) = value
            End Set
        End Property
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tablePAR_ITEMMASTER.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMTYPECODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.ITEMTYPECODEColumn)
        End Function
        
        Public Sub SetITEMTYPECODENull()
            Me(Me.tablePAR_ITEMMASTER.ITEMTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.GROUPCODEColumn)
        End Function
        
        Public Sub SetGROUPCODENull()
            Me(Me.tablePAR_ITEMMASTER.GROUPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tablePAR_ITEMMASTER.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePAR_ITEMMASTER.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.TAXPERCColumn)
        End Function
        
        Public Sub SetTAXPERCNull()
            Me(Me.tablePAR_ITEMMASTER.TAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePAR_ITEMMASTER.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePAR_ITEMMASTER.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddatetimeNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.adddatetimeColumn)
        End Function
        
        Public Sub SetadddatetimeNull()
            Me(Me.tablePAR_ITEMMASTER.adddatetimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tablePAR_ITEMMASTER.adduseridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.CGROUPCODEColumn)
        End Function
        
        Public Sub SetCGROUPCODENull()
            Me(Me.tablePAR_ITEMMASTER.CGROUPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPCODEOLDNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.GROUPCODEOLDColumn)
        End Function
        
        Public Sub SetGROUPCODEOLDNull()
            Me(Me.tablePAR_ITEMMASTER.GROUPCODEOLDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.GLACCODEColumn)
        End Function
        
        Public Sub SetGLACCODENull()
            Me(Me.tablePAR_ITEMMASTER.GLACCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.SBFCHARGEColumn)
        End Function
        
        Public Sub SetSBFCHARGENull()
            Me(Me.tablePAR_ITEMMASTER.SBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATEGORYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.CATEGORYColumn)
        End Function
        
        Public Sub SetCATEGORYNull()
            Me(Me.tablePAR_ITEMMASTER.CATEGORYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLCCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.GLCCODEColumn)
        End Function
        
        Public Sub SetGLCCODENull()
            Me(Me.tablePAR_ITEMMASTER.GLCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCODE1Null() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.GLACCODE1Column)
        End Function
        
        Public Sub SetGLACCODE1Null()
            Me(Me.tablePAR_ITEMMASTER.GLACCODE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLCCODE1Null() As Boolean
            Return Me.IsNull(Me.tablePAR_ITEMMASTER.GLCCODE1Column)
        End Function
        
        Public Sub SetGLCCODE1Null()
            Me(Me.tablePAR_ITEMMASTER.GLCCODE1Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_ITEMMASTERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PAR_ITEMMASTERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PAR_ITEMMASTERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PAR_ITEMMASTERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ARRANGEMASTERDETDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnROWID As DataColumn
        
        Private columnARRCODE As DataColumn
        
        Private columnARRDESCRIPTION As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columncategory As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnAddDateTime As DataColumn
        
        Private columnadduserid As DataColumn
        
        Private columnItemtypecode As DataColumn
        
        Private columnCGROUPCODE As DataColumn
        
        Private columnglaccode As DataColumn
        
        Private columnSBFCHARGE As DataColumn
        
        Private columnGLCCODE As DataColumn
        
        Private columnGLACCODE1 As DataColumn
        
        Private columnGLCCODE1 As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_ARRANGEMASTERDET")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ROWIDColumn As DataColumn
            Get
                Return Me.columnROWID
            End Get
        End Property
        
        Friend ReadOnly Property ARRCODEColumn As DataColumn
            Get
                Return Me.columnARRCODE
            End Get
        End Property
        
        Friend ReadOnly Property ARRDESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnARRDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property categoryColumn As DataColumn
            Get
                Return Me.columncategory
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property AddDateTimeColumn As DataColumn
            Get
                Return Me.columnAddDateTime
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Friend ReadOnly Property ItemtypecodeColumn As DataColumn
            Get
                Return Me.columnItemtypecode
            End Get
        End Property
        
        Friend ReadOnly Property CGROUPCODEColumn As DataColumn
            Get
                Return Me.columnCGROUPCODE
            End Get
        End Property
        
        Friend ReadOnly Property glaccodeColumn As DataColumn
            Get
                Return Me.columnglaccode
            End Get
        End Property
        
        Friend ReadOnly Property SBFCHARGEColumn As DataColumn
            Get
                Return Me.columnSBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property GLCCODEColumn As DataColumn
            Get
                Return Me.columnGLCCODE
            End Get
        End Property
        
        Friend ReadOnly Property GLACCODE1Column As DataColumn
            Get
                Return Me.columnGLACCODE1
            End Get
        End Property
        
        Friend ReadOnly Property GLCCODE1Column As DataColumn
            Get
                Return Me.columnGLCCODE1
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_ARRANGEMASTERDETRow
            Get
                Return CType(Me.Rows(index),PARTY_ARRANGEMASTERDETRow)
            End Get
        End Property
        
        Public Event PARTY_ARRANGEMASTERDETRowChanged As PARTY_ARRANGEMASTERDETRowChangeEventHandler
        
        Public Event PARTY_ARRANGEMASTERDETRowChanging As PARTY_ARRANGEMASTERDETRowChangeEventHandler
        
        Public Event PARTY_ARRANGEMASTERDETRowDeleted As PARTY_ARRANGEMASTERDETRowChangeEventHandler
        
        Public Event PARTY_ARRANGEMASTERDETRowDeleting As PARTY_ARRANGEMASTERDETRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_ARRANGEMASTERDETRow(ByVal row As PARTY_ARRANGEMASTERDETRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_ARRANGEMASTERDETRow(ByVal ARRCODE As String, ByVal ARRDESCRIPTION As String, ByVal RATE As Decimal, ByVal category As String, ByVal UOM As String, ByVal FREEZE As String, ByVal AddDateTime As Date, ByVal adduserid As String, ByVal Itemtypecode As String, ByVal CGROUPCODE As String, ByVal glaccode As String, ByVal SBFCHARGE As String, ByVal GLCCODE As String, ByVal GLACCODE1 As String, ByVal GLCCODE1 As String) As PARTY_ARRANGEMASTERDETRow
            Dim rowPARTY_ARRANGEMASTERDETRow As PARTY_ARRANGEMASTERDETRow = CType(Me.NewRow,PARTY_ARRANGEMASTERDETRow)
            rowPARTY_ARRANGEMASTERDETRow.ItemArray = New Object() {Nothing, ARRCODE, ARRDESCRIPTION, RATE, category, UOM, FREEZE, AddDateTime, adduserid, Itemtypecode, CGROUPCODE, glaccode, SBFCHARGE, GLCCODE, GLACCODE1, GLCCODE1}
            Me.Rows.Add(rowPARTY_ARRANGEMASTERDETRow)
            Return rowPARTY_ARRANGEMASTERDETRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_ARRANGEMASTERDETDataTable = CType(MyBase.Clone,PARTY_ARRANGEMASTERDETDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_ARRANGEMASTERDETDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnROWID = Me.Columns("ROWID")
            Me.columnARRCODE = Me.Columns("ARRCODE")
            Me.columnARRDESCRIPTION = Me.Columns("ARRDESCRIPTION")
            Me.columnRATE = Me.Columns("RATE")
            Me.columncategory = Me.Columns("category")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnAddDateTime = Me.Columns("AddDateTime")
            Me.columnadduserid = Me.Columns("adduserid")
            Me.columnItemtypecode = Me.Columns("Itemtypecode")
            Me.columnCGROUPCODE = Me.Columns("CGROUPCODE")
            Me.columnglaccode = Me.Columns("glaccode")
            Me.columnSBFCHARGE = Me.Columns("SBFCHARGE")
            Me.columnGLCCODE = Me.Columns("GLCCODE")
            Me.columnGLACCODE1 = Me.Columns("GLACCODE1")
            Me.columnGLCCODE1 = Me.Columns("GLCCODE1")
        End Sub
        
        Private Sub InitClass()
            Me.columnROWID = New DataColumn("ROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROWID)
            Me.columnARRCODE = New DataColumn("ARRCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRCODE)
            Me.columnARRDESCRIPTION = New DataColumn("ARRDESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRDESCRIPTION)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columncategory = New DataColumn("category", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncategory)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnAddDateTime = New DataColumn("AddDateTime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddDateTime)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
            Me.columnItemtypecode = New DataColumn("Itemtypecode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemtypecode)
            Me.columnCGROUPCODE = New DataColumn("CGROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCGROUPCODE)
            Me.columnglaccode = New DataColumn("glaccode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnglaccode)
            Me.columnSBFCHARGE = New DataColumn("SBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBFCHARGE)
            Me.columnGLCCODE = New DataColumn("GLCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLCCODE)
            Me.columnGLACCODE1 = New DataColumn("GLACCODE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCODE1)
            Me.columnGLCCODE1 = New DataColumn("GLCCODE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLCCODE1)
            Me.columnROWID.AutoIncrement = true
            Me.columnROWID.AllowDBNull = false
            Me.columnROWID.ReadOnly = true
            Me.columnARRCODE.AllowDBNull = false
        End Sub
        
        Public Function NewPARTY_ARRANGEMASTERDETRow() As PARTY_ARRANGEMASTERDETRow
            Return CType(Me.NewRow,PARTY_ARRANGEMASTERDETRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_ARRANGEMASTERDETRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_ARRANGEMASTERDETRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_ARRANGEMASTERDETRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_ARRANGEMASTERDETRowChanged(Me, New PARTY_ARRANGEMASTERDETRowChangeEvent(CType(e.Row,PARTY_ARRANGEMASTERDETRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_ARRANGEMASTERDETRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_ARRANGEMASTERDETRowChanging(Me, New PARTY_ARRANGEMASTERDETRowChangeEvent(CType(e.Row,PARTY_ARRANGEMASTERDETRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_ARRANGEMASTERDETRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_ARRANGEMASTERDETRowDeleted(Me, New PARTY_ARRANGEMASTERDETRowChangeEvent(CType(e.Row,PARTY_ARRANGEMASTERDETRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_ARRANGEMASTERDETRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_ARRANGEMASTERDETRowDeleting(Me, New PARTY_ARRANGEMASTERDETRowChangeEvent(CType(e.Row,PARTY_ARRANGEMASTERDETRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_ARRANGEMASTERDETRow(ByVal row As PARTY_ARRANGEMASTERDETRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ARRANGEMASTERDETRow
        Inherits DataRow
        
        Private tablePARTY_ARRANGEMASTERDET As PARTY_ARRANGEMASTERDETDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_ARRANGEMASTERDET = CType(Me.Table,PARTY_ARRANGEMASTERDETDataTable)
        End Sub
        
        Public Property ROWID As Decimal
            Get
                Return CType(Me(Me.tablePARTY_ARRANGEMASTERDET.ROWIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_ARRANGEMASTERDET.ROWIDColumn) = value
            End Set
        End Property
        
        Public Property ARRCODE As String
            Get
                Return CType(Me(Me.tablePARTY_ARRANGEMASTERDET.ARRCODEColumn),String)
            End Get
            Set
                Me(Me.tablePARTY_ARRANGEMASTERDET.ARRCODEColumn) = value
            End Set
        End Property
        
        Public Property ARRDESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGEMASTERDET.ARRDESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGEMASTERDET.ARRDESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGEMASTERDET.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGEMASTERDET.RATEColumn) = value
            End Set
        End Property
        
        Public Property category As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGEMASTERDET.categoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGEMASTERDET.categoryColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGEMASTERDET.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGEMASTERDET.UOMColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGEMASTERDET.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGEMASTERDET.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property AddDateTime As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGEMASTERDET.AddDateTimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGEMASTERDET.AddDateTimeColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGEMASTERDET.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGEMASTERDET.adduseridColumn) = value
            End Set
        End Property
        
        Public Property Itemtypecode As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGEMASTERDET.ItemtypecodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGEMASTERDET.ItemtypecodeColumn) = value
            End Set
        End Property
        
        Public Property CGROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGEMASTERDET.CGROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGEMASTERDET.CGROUPCODEColumn) = value
            End Set
        End Property
        
        Public Property glaccode As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGEMASTERDET.glaccodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGEMASTERDET.glaccodeColumn) = value
            End Set
        End Property
        
        Public Property SBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGEMASTERDET.SBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGEMASTERDET.SBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property GLCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGEMASTERDET.GLCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGEMASTERDET.GLCCODEColumn) = value
            End Set
        End Property
        
        Public Property GLACCODE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGEMASTERDET.GLACCODE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGEMASTERDET.GLACCODE1Column) = value
            End Set
        End Property
        
        Public Property GLCCODE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGEMASTERDET.GLCCODE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGEMASTERDET.GLCCODE1Column) = value
            End Set
        End Property
        
        Public Function IsARRDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGEMASTERDET.ARRDESCRIPTIONColumn)
        End Function
        
        Public Sub SetARRDESCRIPTIONNull()
            Me(Me.tablePARTY_ARRANGEMASTERDET.ARRDESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGEMASTERDET.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePARTY_ARRANGEMASTERDET.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscategoryNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGEMASTERDET.categoryColumn)
        End Function
        
        Public Sub SetcategoryNull()
            Me(Me.tablePARTY_ARRANGEMASTERDET.categoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGEMASTERDET.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tablePARTY_ARRANGEMASTERDET.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGEMASTERDET.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePARTY_ARRANGEMASTERDET.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddDateTimeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGEMASTERDET.AddDateTimeColumn)
        End Function
        
        Public Sub SetAddDateTimeNull()
            Me(Me.tablePARTY_ARRANGEMASTERDET.AddDateTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGEMASTERDET.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tablePARTY_ARRANGEMASTERDET.adduseridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemtypecodeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGEMASTERDET.ItemtypecodeColumn)
        End Function
        
        Public Sub SetItemtypecodeNull()
            Me(Me.tablePARTY_ARRANGEMASTERDET.ItemtypecodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGEMASTERDET.CGROUPCODEColumn)
        End Function
        
        Public Sub SetCGROUPCODENull()
            Me(Me.tablePARTY_ARRANGEMASTERDET.CGROUPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsglaccodeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGEMASTERDET.glaccodeColumn)
        End Function
        
        Public Sub SetglaccodeNull()
            Me(Me.tablePARTY_ARRANGEMASTERDET.glaccodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGEMASTERDET.SBFCHARGEColumn)
        End Function
        
        Public Sub SetSBFCHARGENull()
            Me(Me.tablePARTY_ARRANGEMASTERDET.SBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGEMASTERDET.GLCCODEColumn)
        End Function
        
        Public Sub SetGLCCODENull()
            Me(Me.tablePARTY_ARRANGEMASTERDET.GLCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCODE1Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGEMASTERDET.GLACCODE1Column)
        End Function
        
        Public Sub SetGLACCODE1Null()
            Me(Me.tablePARTY_ARRANGEMASTERDET.GLACCODE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLCCODE1Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGEMASTERDET.GLCCODE1Column)
        End Function
        
        Public Sub SetGLCCODE1Null()
            Me(Me.tablePARTY_ARRANGEMASTERDET.GLCCODE1Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ARRANGEMASTERDETRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_ARRANGEMASTERDETRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_ARRANGEMASTERDETRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_ARRANGEMASTERDETRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class par_ITEMTYPEMASTERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnItemTypeCode As DataColumn
        
        Private columnItemTypeseqno As DataColumn
        
        Private columnItemTypeDesc As DataColumn
        
        Private columnAccountCode As DataColumn
        
        Private columnAcctsegno As DataColumn
        
        Private columnTaxPercentage As DataColumn
        
        Private columnTaxCode As DataColumn
        
        Private columnFreeze As DataColumn
        
        Private columnStartingDate As DataColumn
        
        Private columnEndingDate As DataColumn
        
        Private columnAddUserin As DataColumn
        
        Private columnAddDateTime As DataColumn
        
        Friend Sub New()
            MyBase.New("par_ITEMTYPEMASTER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ItemTypeCodeColumn As DataColumn
            Get
                Return Me.columnItemTypeCode
            End Get
        End Property
        
        Friend ReadOnly Property ItemTypeseqnoColumn As DataColumn
            Get
                Return Me.columnItemTypeseqno
            End Get
        End Property
        
        Friend ReadOnly Property ItemTypeDescColumn As DataColumn
            Get
                Return Me.columnItemTypeDesc
            End Get
        End Property
        
        Friend ReadOnly Property AccountCodeColumn As DataColumn
            Get
                Return Me.columnAccountCode
            End Get
        End Property
        
        Friend ReadOnly Property AcctsegnoColumn As DataColumn
            Get
                Return Me.columnAcctsegno
            End Get
        End Property
        
        Friend ReadOnly Property TaxPercentageColumn As DataColumn
            Get
                Return Me.columnTaxPercentage
            End Get
        End Property
        
        Friend ReadOnly Property TaxCodeColumn As DataColumn
            Get
                Return Me.columnTaxCode
            End Get
        End Property
        
        Friend ReadOnly Property FreezeColumn As DataColumn
            Get
                Return Me.columnFreeze
            End Get
        End Property
        
        Friend ReadOnly Property StartingDateColumn As DataColumn
            Get
                Return Me.columnStartingDate
            End Get
        End Property
        
        Friend ReadOnly Property EndingDateColumn As DataColumn
            Get
                Return Me.columnEndingDate
            End Get
        End Property
        
        Friend ReadOnly Property AddUserinColumn As DataColumn
            Get
                Return Me.columnAddUserin
            End Get
        End Property
        
        Friend ReadOnly Property AddDateTimeColumn As DataColumn
            Get
                Return Me.columnAddDateTime
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As par_ITEMTYPEMASTERRow
            Get
                Return CType(Me.Rows(index),par_ITEMTYPEMASTERRow)
            End Get
        End Property
        
        Public Event par_ITEMTYPEMASTERRowChanged As par_ITEMTYPEMASTERRowChangeEventHandler
        
        Public Event par_ITEMTYPEMASTERRowChanging As par_ITEMTYPEMASTERRowChangeEventHandler
        
        Public Event par_ITEMTYPEMASTERRowDeleted As par_ITEMTYPEMASTERRowChangeEventHandler
        
        Public Event par_ITEMTYPEMASTERRowDeleting As par_ITEMTYPEMASTERRowChangeEventHandler
        
        Public Overloads Sub Addpar_ITEMTYPEMASTERRow(ByVal row As par_ITEMTYPEMASTERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpar_ITEMTYPEMASTERRow(ByVal ItemTypeCode As String, ByVal ItemTypeseqno As Decimal, ByVal ItemTypeDesc As String, ByVal AccountCode As String, ByVal Acctsegno As Decimal, ByVal TaxPercentage As Double, ByVal TaxCode As String, ByVal Freeze As String, ByVal StartingDate As Date, ByVal EndingDate As Date, ByVal AddUserin As String, ByVal AddDateTime As Date) As par_ITEMTYPEMASTERRow
            Dim rowpar_ITEMTYPEMASTERRow As par_ITEMTYPEMASTERRow = CType(Me.NewRow,par_ITEMTYPEMASTERRow)
            rowpar_ITEMTYPEMASTERRow.ItemArray = New Object() {ItemTypeCode, ItemTypeseqno, ItemTypeDesc, AccountCode, Acctsegno, TaxPercentage, TaxCode, Freeze, StartingDate, EndingDate, AddUserin, AddDateTime}
            Me.Rows.Add(rowpar_ITEMTYPEMASTERRow)
            Return rowpar_ITEMTYPEMASTERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As par_ITEMTYPEMASTERDataTable = CType(MyBase.Clone,par_ITEMTYPEMASTERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New par_ITEMTYPEMASTERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnItemTypeCode = Me.Columns("ItemTypeCode")
            Me.columnItemTypeseqno = Me.Columns("ItemTypeseqno")
            Me.columnItemTypeDesc = Me.Columns("ItemTypeDesc")
            Me.columnAccountCode = Me.Columns("AccountCode")
            Me.columnAcctsegno = Me.Columns("Acctsegno")
            Me.columnTaxPercentage = Me.Columns("TaxPercentage")
            Me.columnTaxCode = Me.Columns("TaxCode")
            Me.columnFreeze = Me.Columns("Freeze")
            Me.columnStartingDate = Me.Columns("StartingDate")
            Me.columnEndingDate = Me.Columns("EndingDate")
            Me.columnAddUserin = Me.Columns("AddUserin")
            Me.columnAddDateTime = Me.Columns("AddDateTime")
        End Sub
        
        Private Sub InitClass()
            Me.columnItemTypeCode = New DataColumn("ItemTypeCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemTypeCode)
            Me.columnItemTypeseqno = New DataColumn("ItemTypeseqno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemTypeseqno)
            Me.columnItemTypeDesc = New DataColumn("ItemTypeDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemTypeDesc)
            Me.columnAccountCode = New DataColumn("AccountCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAccountCode)
            Me.columnAcctsegno = New DataColumn("Acctsegno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcctsegno)
            Me.columnTaxPercentage = New DataColumn("TaxPercentage", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTaxPercentage)
            Me.columnTaxCode = New DataColumn("TaxCode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTaxCode)
            Me.columnFreeze = New DataColumn("Freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFreeze)
            Me.columnStartingDate = New DataColumn("StartingDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnStartingDate)
            Me.columnEndingDate = New DataColumn("EndingDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEndingDate)
            Me.columnAddUserin = New DataColumn("AddUserin", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddUserin)
            Me.columnAddDateTime = New DataColumn("AddDateTime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddDateTime)
            Me.columnItemTypeCode.AllowDBNull = false
        End Sub
        
        Public Function Newpar_ITEMTYPEMASTERRow() As par_ITEMTYPEMASTERRow
            Return CType(Me.NewRow,par_ITEMTYPEMASTERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New par_ITEMTYPEMASTERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(par_ITEMTYPEMASTERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.par_ITEMTYPEMASTERRowChangedEvent) Is Nothing) Then
                RaiseEvent par_ITEMTYPEMASTERRowChanged(Me, New par_ITEMTYPEMASTERRowChangeEvent(CType(e.Row,par_ITEMTYPEMASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.par_ITEMTYPEMASTERRowChangingEvent) Is Nothing) Then
                RaiseEvent par_ITEMTYPEMASTERRowChanging(Me, New par_ITEMTYPEMASTERRowChangeEvent(CType(e.Row,par_ITEMTYPEMASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.par_ITEMTYPEMASTERRowDeletedEvent) Is Nothing) Then
                RaiseEvent par_ITEMTYPEMASTERRowDeleted(Me, New par_ITEMTYPEMASTERRowChangeEvent(CType(e.Row,par_ITEMTYPEMASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.par_ITEMTYPEMASTERRowDeletingEvent) Is Nothing) Then
                RaiseEvent par_ITEMTYPEMASTERRowDeleting(Me, New par_ITEMTYPEMASTERRowChangeEvent(CType(e.Row,par_ITEMTYPEMASTERRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepar_ITEMTYPEMASTERRow(ByVal row As par_ITEMTYPEMASTERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class par_ITEMTYPEMASTERRow
        Inherits DataRow
        
        Private tablepar_ITEMTYPEMASTER As par_ITEMTYPEMASTERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepar_ITEMTYPEMASTER = CType(Me.Table,par_ITEMTYPEMASTERDataTable)
        End Sub
        
        Public Property ItemTypeCode As String
            Get
                Return CType(Me(Me.tablepar_ITEMTYPEMASTER.ItemTypeCodeColumn),String)
            End Get
            Set
                Me(Me.tablepar_ITEMTYPEMASTER.ItemTypeCodeColumn) = value
            End Set
        End Property
        
        Public Property ItemTypeseqno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepar_ITEMTYPEMASTER.ItemTypeseqnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_ITEMTYPEMASTER.ItemTypeseqnoColumn) = value
            End Set
        End Property
        
        Public Property ItemTypeDesc As String
            Get
                Try 
                    Return CType(Me(Me.tablepar_ITEMTYPEMASTER.ItemTypeDescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_ITEMTYPEMASTER.ItemTypeDescColumn) = value
            End Set
        End Property
        
        Public Property AccountCode As String
            Get
                Try 
                    Return CType(Me(Me.tablepar_ITEMTYPEMASTER.AccountCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_ITEMTYPEMASTER.AccountCodeColumn) = value
            End Set
        End Property
        
        Public Property Acctsegno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepar_ITEMTYPEMASTER.AcctsegnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_ITEMTYPEMASTER.AcctsegnoColumn) = value
            End Set
        End Property
        
        Public Property TaxPercentage As Double
            Get
                Try 
                    Return CType(Me(Me.tablepar_ITEMTYPEMASTER.TaxPercentageColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_ITEMTYPEMASTER.TaxPercentageColumn) = value
            End Set
        End Property
        
        Public Property TaxCode As String
            Get
                Try 
                    Return CType(Me(Me.tablepar_ITEMTYPEMASTER.TaxCodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_ITEMTYPEMASTER.TaxCodeColumn) = value
            End Set
        End Property
        
        Public Property Freeze As String
            Get
                Try 
                    Return CType(Me(Me.tablepar_ITEMTYPEMASTER.FreezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_ITEMTYPEMASTER.FreezeColumn) = value
            End Set
        End Property
        
        Public Property StartingDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablepar_ITEMTYPEMASTER.StartingDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_ITEMTYPEMASTER.StartingDateColumn) = value
            End Set
        End Property
        
        Public Property EndingDate As Date
            Get
                Try 
                    Return CType(Me(Me.tablepar_ITEMTYPEMASTER.EndingDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_ITEMTYPEMASTER.EndingDateColumn) = value
            End Set
        End Property
        
        Public Property AddUserin As String
            Get
                Try 
                    Return CType(Me(Me.tablepar_ITEMTYPEMASTER.AddUserinColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_ITEMTYPEMASTER.AddUserinColumn) = value
            End Set
        End Property
        
        Public Property AddDateTime As Date
            Get
                Try 
                    Return CType(Me(Me.tablepar_ITEMTYPEMASTER.AddDateTimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepar_ITEMTYPEMASTER.AddDateTimeColumn) = value
            End Set
        End Property
        
        Public Function IsItemTypeseqnoNull() As Boolean
            Return Me.IsNull(Me.tablepar_ITEMTYPEMASTER.ItemTypeseqnoColumn)
        End Function
        
        Public Sub SetItemTypeseqnoNull()
            Me(Me.tablepar_ITEMTYPEMASTER.ItemTypeseqnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemTypeDescNull() As Boolean
            Return Me.IsNull(Me.tablepar_ITEMTYPEMASTER.ItemTypeDescColumn)
        End Function
        
        Public Sub SetItemTypeDescNull()
            Me(Me.tablepar_ITEMTYPEMASTER.ItemTypeDescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAccountCodeNull() As Boolean
            Return Me.IsNull(Me.tablepar_ITEMTYPEMASTER.AccountCodeColumn)
        End Function
        
        Public Sub SetAccountCodeNull()
            Me(Me.tablepar_ITEMTYPEMASTER.AccountCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAcctsegnoNull() As Boolean
            Return Me.IsNull(Me.tablepar_ITEMTYPEMASTER.AcctsegnoColumn)
        End Function
        
        Public Sub SetAcctsegnoNull()
            Me(Me.tablepar_ITEMTYPEMASTER.AcctsegnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTaxPercentageNull() As Boolean
            Return Me.IsNull(Me.tablepar_ITEMTYPEMASTER.TaxPercentageColumn)
        End Function
        
        Public Sub SetTaxPercentageNull()
            Me(Me.tablepar_ITEMTYPEMASTER.TaxPercentageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTaxCodeNull() As Boolean
            Return Me.IsNull(Me.tablepar_ITEMTYPEMASTER.TaxCodeColumn)
        End Function
        
        Public Sub SetTaxCodeNull()
            Me(Me.tablepar_ITEMTYPEMASTER.TaxCodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFreezeNull() As Boolean
            Return Me.IsNull(Me.tablepar_ITEMTYPEMASTER.FreezeColumn)
        End Function
        
        Public Sub SetFreezeNull()
            Me(Me.tablepar_ITEMTYPEMASTER.FreezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsStartingDateNull() As Boolean
            Return Me.IsNull(Me.tablepar_ITEMTYPEMASTER.StartingDateColumn)
        End Function
        
        Public Sub SetStartingDateNull()
            Me(Me.tablepar_ITEMTYPEMASTER.StartingDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEndingDateNull() As Boolean
            Return Me.IsNull(Me.tablepar_ITEMTYPEMASTER.EndingDateColumn)
        End Function
        
        Public Sub SetEndingDateNull()
            Me(Me.tablepar_ITEMTYPEMASTER.EndingDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddUserinNull() As Boolean
            Return Me.IsNull(Me.tablepar_ITEMTYPEMASTER.AddUserinColumn)
        End Function
        
        Public Sub SetAddUserinNull()
            Me(Me.tablepar_ITEMTYPEMASTER.AddUserinColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddDateTimeNull() As Boolean
            Return Me.IsNull(Me.tablepar_ITEMTYPEMASTER.AddDateTimeColumn)
        End Function
        
        Public Sub SetAddDateTimeNull()
            Me(Me.tablepar_ITEMTYPEMASTER.AddDateTimeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class par_ITEMTYPEMASTERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As par_ITEMTYPEMASTERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As par_ITEMTYPEMASTERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As par_ITEMTYPEMASTERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_BILLINGDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnloccode As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnHALLTYPE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnADVANCE As DataColumn
        
        Private columnHALLAMOUNT As DataColumn
        
        Private columnHALLTAXAMOUNT As DataColumn
        
        Private columnHALL As DataColumn
        
        Private columnBOOKINGTARIFFAMOUNT As DataColumn
        
        Private columnEXCESSTARIFFAMOUNT As DataColumn
        
        Private columnTARIFFTAXAMOUNT As DataColumn
        
        Private columnTARIFFAMOUNT As DataColumn
        
        Private columnRESTAMOUNT As DataColumn
        
        Private columnRESTTAXAMOUNT As DataColumn
        
        Private columnREST As DataColumn
        
        Private columnoccupancy As DataColumn
        
        Private columnVEG As DataColumn
        
        Private columnNONVEG As DataColumn
        
        Private columnARRMENTAMOUNT As DataColumn
        
        Private columnARRMENTTAXAMOUNT As DataColumn
        
        Private columnARRMENT As DataColumn
        
        Private columnCAMOUNT As DataColumn
        
        Private columnSBFCHARGE As DataColumn
        
        Private columnNETPAYABLE As DataColumn
        
        Private columnNETAMOUNT As DataColumn
        
        Private columnNETTAX As DataColumn
        
        Private columnhalltypedesc As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_PARTY_BILLING")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property loccodeColumn As DataColumn
            Get
                Return Me.columnloccode
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property HALLTYPEColumn As DataColumn
            Get
                Return Me.columnHALLTYPE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property ADVANCEColumn As DataColumn
            Get
                Return Me.columnADVANCE
            End Get
        End Property
        
        Friend ReadOnly Property HALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLColumn As DataColumn
            Get
                Return Me.columnHALL
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnBOOKINGTARIFFAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property EXCESSTARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnEXCESSTARIFFAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTARIFFTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnTARIFFAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESTTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTColumn As DataColumn
            Get
                Return Me.columnREST
            End Get
        End Property
        
        Friend ReadOnly Property occupancyColumn As DataColumn
            Get
                Return Me.columnoccupancy
            End Get
        End Property
        
        Friend ReadOnly Property VEGColumn As DataColumn
            Get
                Return Me.columnVEG
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGColumn As DataColumn
            Get
                Return Me.columnNONVEG
            End Get
        End Property
        
        Friend ReadOnly Property ARRMENTAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRMENTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ARRMENTTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRMENTTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ARRMENTColumn As DataColumn
            Get
                Return Me.columnARRMENT
            End Get
        End Property
        
        Friend ReadOnly Property CAMOUNTColumn As DataColumn
            Get
                Return Me.columnCAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property SBFCHARGEColumn As DataColumn
            Get
                Return Me.columnSBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property NETPAYABLEColumn As DataColumn
            Get
                Return Me.columnNETPAYABLE
            End Get
        End Property
        
        Friend ReadOnly Property NETAMOUNTColumn As DataColumn
            Get
                Return Me.columnNETAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property NETTAXColumn As DataColumn
            Get
                Return Me.columnNETTAX
            End Get
        End Property
        
        Friend ReadOnly Property halltypedescColumn As DataColumn
            Get
                Return Me.columnhalltypedesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARTY_BILLINGRow
            Get
                Return CType(Me.Rows(index),VIEW_PARTY_BILLINGRow)
            End Get
        End Property
        
        Public Event VIEW_PARTY_BILLINGRowChanged As VIEW_PARTY_BILLINGRowChangeEventHandler
        
        Public Event VIEW_PARTY_BILLINGRowChanging As VIEW_PARTY_BILLINGRowChangeEventHandler
        
        Public Event VIEW_PARTY_BILLINGRowDeleted As VIEW_PARTY_BILLINGRowChangeEventHandler
        
        Public Event VIEW_PARTY_BILLINGRowDeleting As VIEW_PARTY_BILLINGRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_PARTY_BILLINGRow(ByVal row As VIEW_PARTY_BILLINGRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_PARTY_BILLINGRow( _
                    ByVal loccode As String,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal HALLTYPE As String,  _
                    ByVal MCODE As String,  _
                    ByVal ASSOCIATENAME As String,  _
                    ByVal MNAME As String,  _
                    ByVal HALLCODE As String,  _
                    ByVal ADVANCE As Decimal,  _
                    ByVal HALLAMOUNT As Decimal,  _
                    ByVal HALLTAXAMOUNT As Decimal,  _
                    ByVal HALL As Decimal,  _
                    ByVal BOOKINGTARIFFAMOUNT As Decimal,  _
                    ByVal EXCESSTARIFFAMOUNT As Decimal,  _
                    ByVal TARIFFTAXAMOUNT As Decimal,  _
                    ByVal TARIFFAMOUNT As Decimal,  _
                    ByVal RESTAMOUNT As Decimal,  _
                    ByVal RESTTAXAMOUNT As Decimal,  _
                    ByVal REST As Decimal,  _
                    ByVal occupancy As Decimal,  _
                    ByVal VEG As Decimal,  _
                    ByVal NONVEG As Decimal,  _
                    ByVal ARRMENTAMOUNT As Decimal,  _
                    ByVal ARRMENTTAXAMOUNT As Decimal,  _
                    ByVal ARRMENT As Decimal,  _
                    ByVal CAMOUNT As Decimal,  _
                    ByVal SBFCHARGE As Decimal,  _
                    ByVal NETPAYABLE As Decimal,  _
                    ByVal NETAMOUNT As Decimal,  _
                    ByVal NETTAX As Decimal,  _
                    ByVal halltypedesc As String) As VIEW_PARTY_BILLINGRow
            Dim rowVIEW_PARTY_BILLINGRow As VIEW_PARTY_BILLINGRow = CType(Me.NewRow,VIEW_PARTY_BILLINGRow)
            rowVIEW_PARTY_BILLINGRow.ItemArray = New Object() {loccode, BOOKINGTYPE, BOOKINGNO, FREEZE, BOOKINGDATE, PARTYDATE, HALLTYPE, MCODE, ASSOCIATENAME, MNAME, HALLCODE, ADVANCE, HALLAMOUNT, HALLTAXAMOUNT, HALL, BOOKINGTARIFFAMOUNT, EXCESSTARIFFAMOUNT, TARIFFTAXAMOUNT, TARIFFAMOUNT, RESTAMOUNT, RESTTAXAMOUNT, REST, occupancy, VEG, NONVEG, ARRMENTAMOUNT, ARRMENTTAXAMOUNT, ARRMENT, CAMOUNT, SBFCHARGE, NETPAYABLE, NETAMOUNT, NETTAX, halltypedesc}
            Me.Rows.Add(rowVIEW_PARTY_BILLINGRow)
            Return rowVIEW_PARTY_BILLINGRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_PARTY_BILLINGDataTable = CType(MyBase.Clone,VIEW_PARTY_BILLINGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_PARTY_BILLINGDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnloccode = Me.Columns("loccode")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnHALLTYPE = Me.Columns("HALLTYPE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnADVANCE = Me.Columns("ADVANCE")
            Me.columnHALLAMOUNT = Me.Columns("HALLAMOUNT")
            Me.columnHALLTAXAMOUNT = Me.Columns("HALLTAXAMOUNT")
            Me.columnHALL = Me.Columns("HALL")
            Me.columnBOOKINGTARIFFAMOUNT = Me.Columns("BOOKINGTARIFFAMOUNT")
            Me.columnEXCESSTARIFFAMOUNT = Me.Columns("EXCESSTARIFFAMOUNT")
            Me.columnTARIFFTAXAMOUNT = Me.Columns("TARIFFTAXAMOUNT")
            Me.columnTARIFFAMOUNT = Me.Columns("TARIFFAMOUNT")
            Me.columnRESTAMOUNT = Me.Columns("RESTAMOUNT")
            Me.columnRESTTAXAMOUNT = Me.Columns("RESTTAXAMOUNT")
            Me.columnREST = Me.Columns("REST")
            Me.columnoccupancy = Me.Columns("occupancy")
            Me.columnVEG = Me.Columns("VEG")
            Me.columnNONVEG = Me.Columns("NONVEG")
            Me.columnARRMENTAMOUNT = Me.Columns("ARRMENTAMOUNT")
            Me.columnARRMENTTAXAMOUNT = Me.Columns("ARRMENTTAXAMOUNT")
            Me.columnARRMENT = Me.Columns("ARRMENT")
            Me.columnCAMOUNT = Me.Columns("CAMOUNT")
            Me.columnSBFCHARGE = Me.Columns("SBFCHARGE")
            Me.columnNETPAYABLE = Me.Columns("NETPAYABLE")
            Me.columnNETAMOUNT = Me.Columns("NETAMOUNT")
            Me.columnNETTAX = Me.Columns("NETTAX")
            Me.columnhalltypedesc = Me.Columns("halltypedesc")
        End Sub
        
        Private Sub InitClass()
            Me.columnloccode = New DataColumn("loccode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloccode)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnHALLTYPE = New DataColumn("HALLTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTYPE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnADVANCE = New DataColumn("ADVANCE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADVANCE)
            Me.columnHALLAMOUNT = New DataColumn("HALLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLAMOUNT)
            Me.columnHALLTAXAMOUNT = New DataColumn("HALLTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXAMOUNT)
            Me.columnHALL = New DataColumn("HALL", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALL)
            Me.columnBOOKINGTARIFFAMOUNT = New DataColumn("BOOKINGTARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTARIFFAMOUNT)
            Me.columnEXCESSTARIFFAMOUNT = New DataColumn("EXCESSTARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEXCESSTARIFFAMOUNT)
            Me.columnTARIFFTAXAMOUNT = New DataColumn("TARIFFTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFTAXAMOUNT)
            Me.columnTARIFFAMOUNT = New DataColumn("TARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFAMOUNT)
            Me.columnRESTAMOUNT = New DataColumn("RESTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTAMOUNT)
            Me.columnRESTTAXAMOUNT = New DataColumn("RESTTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTTAXAMOUNT)
            Me.columnREST = New DataColumn("REST", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREST)
            Me.columnoccupancy = New DataColumn("occupancy", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoccupancy)
            Me.columnVEG = New DataColumn("VEG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEG)
            Me.columnNONVEG = New DataColumn("NONVEG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEG)
            Me.columnARRMENTAMOUNT = New DataColumn("ARRMENTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRMENTAMOUNT)
            Me.columnARRMENTTAXAMOUNT = New DataColumn("ARRMENTTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRMENTTAXAMOUNT)
            Me.columnARRMENT = New DataColumn("ARRMENT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRMENT)
            Me.columnCAMOUNT = New DataColumn("CAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCAMOUNT)
            Me.columnSBFCHARGE = New DataColumn("SBFCHARGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBFCHARGE)
            Me.columnNETPAYABLE = New DataColumn("NETPAYABLE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETPAYABLE)
            Me.columnNETAMOUNT = New DataColumn("NETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETAMOUNT)
            Me.columnNETTAX = New DataColumn("NETTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETTAX)
            Me.columnhalltypedesc = New DataColumn("halltypedesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltypedesc)
            Me.columnloccode.AllowDBNull = false
            Me.columnBOOKINGTYPE.AllowDBNull = false
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnFREEZE.AllowDBNull = false
            Me.columnBOOKINGDATE.AllowDBNull = false
            Me.columnPARTYDATE.AllowDBNull = false
            Me.columnHALLTYPE.AllowDBNull = false
            Me.columnMCODE.AllowDBNull = false
            Me.columnASSOCIATENAME.AllowDBNull = false
            Me.columnMNAME.AllowDBNull = false
            Me.columnHALLCODE.AllowDBNull = false
            Me.columnADVANCE.AllowDBNull = false
            Me.columnHALLAMOUNT.AllowDBNull = false
            Me.columnHALLTAXAMOUNT.AllowDBNull = false
            Me.columnBOOKINGTARIFFAMOUNT.AllowDBNull = false
            Me.columnEXCESSTARIFFAMOUNT.AllowDBNull = false
            Me.columnTARIFFTAXAMOUNT.AllowDBNull = false
            Me.columnRESTAMOUNT.AllowDBNull = false
            Me.columnRESTTAXAMOUNT.AllowDBNull = false
            Me.columnoccupancy.AllowDBNull = false
            Me.columnVEG.AllowDBNull = false
            Me.columnNONVEG.AllowDBNull = false
            Me.columnARRMENTAMOUNT.AllowDBNull = false
            Me.columnARRMENTTAXAMOUNT.AllowDBNull = false
            Me.columnCAMOUNT.AllowDBNull = false
            Me.columnSBFCHARGE.AllowDBNull = false
            Me.columnNETPAYABLE.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_PARTY_BILLINGRow() As VIEW_PARTY_BILLINGRow
            Return CType(Me.NewRow,VIEW_PARTY_BILLINGRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_PARTY_BILLINGRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_PARTY_BILLINGRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARTY_BILLINGRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BILLINGRowChanged(Me, New VIEW_PARTY_BILLINGRowChangeEvent(CType(e.Row,VIEW_PARTY_BILLINGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARTY_BILLINGRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BILLINGRowChanging(Me, New VIEW_PARTY_BILLINGRowChangeEvent(CType(e.Row,VIEW_PARTY_BILLINGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARTY_BILLINGRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BILLINGRowDeleted(Me, New VIEW_PARTY_BILLINGRowChangeEvent(CType(e.Row,VIEW_PARTY_BILLINGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARTY_BILLINGRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BILLINGRowDeleting(Me, New VIEW_PARTY_BILLINGRowChangeEvent(CType(e.Row,VIEW_PARTY_BILLINGRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_PARTY_BILLINGRow(ByVal row As VIEW_PARTY_BILLINGRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_BILLINGRow
        Inherits DataRow
        
        Private tableVIEW_PARTY_BILLING As VIEW_PARTY_BILLINGDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARTY_BILLING = CType(Me.Table,VIEW_PARTY_BILLINGDataTable)
        End Sub
        
        Public Property loccode As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.loccodeColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.loccodeColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.BOOKINGTYPEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.FREEZEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.BOOKINGDATEColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.PARTYDATEColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property HALLTYPE As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.HALLTYPEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.HALLTYPEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.MCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.ASSOCIATENAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.MNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.HALLCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property ADVANCE As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.ADVANCEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.ADVANCEColumn) = value
            End Set
        End Property
        
        Public Property HALLAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.HALLAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.HALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.HALLTAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.HALLTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALL As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING.HALLColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.HALLColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTARIFFAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.BOOKINGTARIFFAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.BOOKINGTARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property EXCESSTARIFFAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.EXCESSTARIFFAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.EXCESSTARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TARIFFTAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.TARIFFTAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.TARIFFTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TARIFFAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING.TARIFFAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.TARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESTAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.RESTAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.RESTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESTTAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.RESTTAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.RESTTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property REST As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING.RESTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.RESTColumn) = value
            End Set
        End Property
        
        Public Property occupancy As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.occupancyColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.occupancyColumn) = value
            End Set
        End Property
        
        Public Property VEG As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.VEGColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.VEGColumn) = value
            End Set
        End Property
        
        Public Property NONVEG As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.NONVEGColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.NONVEGColumn) = value
            End Set
        End Property
        
        Public Property ARRMENTAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.ARRMENTAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.ARRMENTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ARRMENTTAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.ARRMENTTAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.ARRMENTTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ARRMENT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING.ARRMENTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.ARRMENTColumn) = value
            End Set
        End Property
        
        Public Property CAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.CAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.CAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property SBFCHARGE As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.SBFCHARGEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.SBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property NETPAYABLE As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.NETPAYABLEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.NETPAYABLEColumn) = value
            End Set
        End Property
        
        Public Property NETAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING.NETAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.NETAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property NETTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING.NETTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.NETTAXColumn) = value
            End Set
        End Property
        
        Public Property halltypedesc As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING.halltypedescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.halltypedescColumn) = value
            End Set
        End Property
        
        Public Function IsHALLNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING.HALLColumn)
        End Function
        
        Public Sub SetHALLNull()
            Me(Me.tableVIEW_PARTY_BILLING.HALLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING.TARIFFAMOUNTColumn)
        End Function
        
        Public Sub SetTARIFFAMOUNTNull()
            Me(Me.tableVIEW_PARTY_BILLING.TARIFFAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING.RESTColumn)
        End Function
        
        Public Sub SetRESTNull()
            Me(Me.tableVIEW_PARTY_BILLING.RESTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRMENTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING.ARRMENTColumn)
        End Function
        
        Public Sub SetARRMENTNull()
            Me(Me.tableVIEW_PARTY_BILLING.ARRMENTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNETAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING.NETAMOUNTColumn)
        End Function
        
        Public Sub SetNETAMOUNTNull()
            Me(Me.tableVIEW_PARTY_BILLING.NETAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNETTAXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING.NETTAXColumn)
        End Function
        
        Public Sub SetNETTAXNull()
            Me(Me.tableVIEW_PARTY_BILLING.NETTAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalltypedescNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING.halltypedescColumn)
        End Function
        
        Public Sub SethalltypedescNull()
            Me(Me.tableVIEW_PARTY_BILLING.halltypedescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_BILLINGRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_PARTY_BILLINGRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_PARTY_BILLINGRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_PARTY_BILLINGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_BILLING_ACCOUNTSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnloccode As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnHALLTYPE As DataColumn
        
        Private columnhalltypedesc As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnADVANCE As DataColumn
        
        Private columnHALLAMOUNT As DataColumn
        
        Private columnHALLTAXAMOUNT As DataColumn
        
        Private columnHALL As DataColumn
        
        Private columnBOOKINGTARIFFAMOUNT As DataColumn
        
        Private columnEXCESSTARIFFAMOUNT As DataColumn
        
        Private columnTARIFFTAXAMOUNT As DataColumn
        
        Private columnTARIFFAMOUNT As DataColumn
        
        Private columnRESTAMOUNT As DataColumn
        
        Private columnRESTTAXAMOUNT As DataColumn
        
        Private columnREST As DataColumn
        
        Private columnoccupancy As DataColumn
        
        Private columnVEG As DataColumn
        
        Private columnNONVEG As DataColumn
        
        Private columnARRMENTAMOUNT As DataColumn
        
        Private columnARRMENTTAXAMOUNT As DataColumn
        
        Private columnARRMENT As DataColumn
        
        Private columnCAMOUNT As DataColumn
        
        Private columnSBFCHARGE As DataColumn
        
        Private columnNETPAYABLE As DataColumn
        
        Private columnNETAMOUNT As DataColumn
        
        Private columnNETTAX As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_PARTY_BILLING_ACCOUNTS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property loccodeColumn As DataColumn
            Get
                Return Me.columnloccode
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property HALLTYPEColumn As DataColumn
            Get
                Return Me.columnHALLTYPE
            End Get
        End Property
        
        Friend ReadOnly Property halltypedescColumn As DataColumn
            Get
                Return Me.columnhalltypedesc
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property ADVANCEColumn As DataColumn
            Get
                Return Me.columnADVANCE
            End Get
        End Property
        
        Friend ReadOnly Property HALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLColumn As DataColumn
            Get
                Return Me.columnHALL
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnBOOKINGTARIFFAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property EXCESSTARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnEXCESSTARIFFAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTARIFFTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnTARIFFAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESTTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTColumn As DataColumn
            Get
                Return Me.columnREST
            End Get
        End Property
        
        Friend ReadOnly Property occupancyColumn As DataColumn
            Get
                Return Me.columnoccupancy
            End Get
        End Property
        
        Friend ReadOnly Property VEGColumn As DataColumn
            Get
                Return Me.columnVEG
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGColumn As DataColumn
            Get
                Return Me.columnNONVEG
            End Get
        End Property
        
        Friend ReadOnly Property ARRMENTAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRMENTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ARRMENTTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRMENTTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ARRMENTColumn As DataColumn
            Get
                Return Me.columnARRMENT
            End Get
        End Property
        
        Friend ReadOnly Property CAMOUNTColumn As DataColumn
            Get
                Return Me.columnCAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property SBFCHARGEColumn As DataColumn
            Get
                Return Me.columnSBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property NETPAYABLEColumn As DataColumn
            Get
                Return Me.columnNETPAYABLE
            End Get
        End Property
        
        Friend ReadOnly Property NETAMOUNTColumn As DataColumn
            Get
                Return Me.columnNETAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property NETTAXColumn As DataColumn
            Get
                Return Me.columnNETTAX
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARTY_BILLING_ACCOUNTSRow
            Get
                Return CType(Me.Rows(index),VIEW_PARTY_BILLING_ACCOUNTSRow)
            End Get
        End Property
        
        Public Event VIEW_PARTY_BILLING_ACCOUNTSRowChanged As VIEW_PARTY_BILLING_ACCOUNTSRowChangeEventHandler
        
        Public Event VIEW_PARTY_BILLING_ACCOUNTSRowChanging As VIEW_PARTY_BILLING_ACCOUNTSRowChangeEventHandler
        
        Public Event VIEW_PARTY_BILLING_ACCOUNTSRowDeleted As VIEW_PARTY_BILLING_ACCOUNTSRowChangeEventHandler
        
        Public Event VIEW_PARTY_BILLING_ACCOUNTSRowDeleting As VIEW_PARTY_BILLING_ACCOUNTSRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_PARTY_BILLING_ACCOUNTSRow(ByVal row As VIEW_PARTY_BILLING_ACCOUNTSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_PARTY_BILLING_ACCOUNTSRow( _
                    ByVal loccode As String,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal HALLTYPE As String,  _
                    ByVal halltypedesc As String,  _
                    ByVal MCODE As String,  _
                    ByVal ASSOCIATENAME As String,  _
                    ByVal MNAME As String,  _
                    ByVal HALLCODE As String,  _
                    ByVal ADVANCE As Decimal,  _
                    ByVal HALLAMOUNT As Decimal,  _
                    ByVal HALLTAXAMOUNT As Decimal,  _
                    ByVal HALL As Decimal,  _
                    ByVal BOOKINGTARIFFAMOUNT As Decimal,  _
                    ByVal EXCESSTARIFFAMOUNT As Decimal,  _
                    ByVal TARIFFTAXAMOUNT As Decimal,  _
                    ByVal TARIFFAMOUNT As Decimal,  _
                    ByVal RESTAMOUNT As Decimal,  _
                    ByVal RESTTAXAMOUNT As Decimal,  _
                    ByVal REST As Decimal,  _
                    ByVal occupancy As Decimal,  _
                    ByVal VEG As Decimal,  _
                    ByVal NONVEG As Decimal,  _
                    ByVal ARRMENTAMOUNT As Decimal,  _
                    ByVal ARRMENTTAXAMOUNT As Decimal,  _
                    ByVal ARRMENT As Decimal,  _
                    ByVal CAMOUNT As Decimal,  _
                    ByVal SBFCHARGE As Decimal,  _
                    ByVal NETPAYABLE As Decimal,  _
                    ByVal NETAMOUNT As Decimal,  _
                    ByVal NETTAX As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal) As VIEW_PARTY_BILLING_ACCOUNTSRow
            Dim rowVIEW_PARTY_BILLING_ACCOUNTSRow As VIEW_PARTY_BILLING_ACCOUNTSRow = CType(Me.NewRow,VIEW_PARTY_BILLING_ACCOUNTSRow)
            rowVIEW_PARTY_BILLING_ACCOUNTSRow.ItemArray = New Object() {loccode, BOOKINGTYPE, BOOKINGNO, FREEZE, BOOKINGDATE, PARTYDATE, HALLTYPE, halltypedesc, MCODE, ASSOCIATENAME, MNAME, HALLCODE, ADVANCE, HALLAMOUNT, HALLTAXAMOUNT, HALL, BOOKINGTARIFFAMOUNT, EXCESSTARIFFAMOUNT, TARIFFTAXAMOUNT, TARIFFAMOUNT, RESTAMOUNT, RESTTAXAMOUNT, REST, occupancy, VEG, NONVEG, ARRMENTAMOUNT, ARRMENTTAXAMOUNT, ARRMENT, CAMOUNT, SBFCHARGE, NETPAYABLE, NETAMOUNT, NETTAX, TOTALAMOUNT}
            Me.Rows.Add(rowVIEW_PARTY_BILLING_ACCOUNTSRow)
            Return rowVIEW_PARTY_BILLING_ACCOUNTSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_PARTY_BILLING_ACCOUNTSDataTable = CType(MyBase.Clone,VIEW_PARTY_BILLING_ACCOUNTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_PARTY_BILLING_ACCOUNTSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnloccode = Me.Columns("loccode")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnHALLTYPE = Me.Columns("HALLTYPE")
            Me.columnhalltypedesc = Me.Columns("halltypedesc")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnADVANCE = Me.Columns("ADVANCE")
            Me.columnHALLAMOUNT = Me.Columns("HALLAMOUNT")
            Me.columnHALLTAXAMOUNT = Me.Columns("HALLTAXAMOUNT")
            Me.columnHALL = Me.Columns("HALL")
            Me.columnBOOKINGTARIFFAMOUNT = Me.Columns("BOOKINGTARIFFAMOUNT")
            Me.columnEXCESSTARIFFAMOUNT = Me.Columns("EXCESSTARIFFAMOUNT")
            Me.columnTARIFFTAXAMOUNT = Me.Columns("TARIFFTAXAMOUNT")
            Me.columnTARIFFAMOUNT = Me.Columns("TARIFFAMOUNT")
            Me.columnRESTAMOUNT = Me.Columns("RESTAMOUNT")
            Me.columnRESTTAXAMOUNT = Me.Columns("RESTTAXAMOUNT")
            Me.columnREST = Me.Columns("REST")
            Me.columnoccupancy = Me.Columns("occupancy")
            Me.columnVEG = Me.Columns("VEG")
            Me.columnNONVEG = Me.Columns("NONVEG")
            Me.columnARRMENTAMOUNT = Me.Columns("ARRMENTAMOUNT")
            Me.columnARRMENTTAXAMOUNT = Me.Columns("ARRMENTTAXAMOUNT")
            Me.columnARRMENT = Me.Columns("ARRMENT")
            Me.columnCAMOUNT = Me.Columns("CAMOUNT")
            Me.columnSBFCHARGE = Me.Columns("SBFCHARGE")
            Me.columnNETPAYABLE = Me.Columns("NETPAYABLE")
            Me.columnNETAMOUNT = Me.Columns("NETAMOUNT")
            Me.columnNETTAX = Me.Columns("NETTAX")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnloccode = New DataColumn("loccode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloccode)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnHALLTYPE = New DataColumn("HALLTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTYPE)
            Me.columnhalltypedesc = New DataColumn("halltypedesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltypedesc)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnADVANCE = New DataColumn("ADVANCE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADVANCE)
            Me.columnHALLAMOUNT = New DataColumn("HALLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLAMOUNT)
            Me.columnHALLTAXAMOUNT = New DataColumn("HALLTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXAMOUNT)
            Me.columnHALL = New DataColumn("HALL", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALL)
            Me.columnBOOKINGTARIFFAMOUNT = New DataColumn("BOOKINGTARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTARIFFAMOUNT)
            Me.columnEXCESSTARIFFAMOUNT = New DataColumn("EXCESSTARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEXCESSTARIFFAMOUNT)
            Me.columnTARIFFTAXAMOUNT = New DataColumn("TARIFFTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFTAXAMOUNT)
            Me.columnTARIFFAMOUNT = New DataColumn("TARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFAMOUNT)
            Me.columnRESTAMOUNT = New DataColumn("RESTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTAMOUNT)
            Me.columnRESTTAXAMOUNT = New DataColumn("RESTTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTTAXAMOUNT)
            Me.columnREST = New DataColumn("REST", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREST)
            Me.columnoccupancy = New DataColumn("occupancy", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoccupancy)
            Me.columnVEG = New DataColumn("VEG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEG)
            Me.columnNONVEG = New DataColumn("NONVEG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEG)
            Me.columnARRMENTAMOUNT = New DataColumn("ARRMENTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRMENTAMOUNT)
            Me.columnARRMENTTAXAMOUNT = New DataColumn("ARRMENTTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRMENTTAXAMOUNT)
            Me.columnARRMENT = New DataColumn("ARRMENT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRMENT)
            Me.columnCAMOUNT = New DataColumn("CAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCAMOUNT)
            Me.columnSBFCHARGE = New DataColumn("SBFCHARGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBFCHARGE)
            Me.columnNETPAYABLE = New DataColumn("NETPAYABLE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETPAYABLE)
            Me.columnNETAMOUNT = New DataColumn("NETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETAMOUNT)
            Me.columnNETTAX = New DataColumn("NETTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETTAX)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnloccode.AllowDBNull = false
            Me.columnBOOKINGTYPE.AllowDBNull = false
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnFREEZE.AllowDBNull = false
            Me.columnBOOKINGDATE.AllowDBNull = false
            Me.columnPARTYDATE.AllowDBNull = false
            Me.columnHALLTYPE.AllowDBNull = false
            Me.columnhalltypedesc.AllowDBNull = false
            Me.columnMCODE.AllowDBNull = false
            Me.columnASSOCIATENAME.AllowDBNull = false
            Me.columnMNAME.AllowDBNull = false
            Me.columnHALLCODE.AllowDBNull = false
            Me.columnADVANCE.AllowDBNull = false
            Me.columnHALLAMOUNT.AllowDBNull = false
            Me.columnHALLTAXAMOUNT.AllowDBNull = false
            Me.columnBOOKINGTARIFFAMOUNT.AllowDBNull = false
            Me.columnEXCESSTARIFFAMOUNT.AllowDBNull = false
            Me.columnTARIFFTAXAMOUNT.AllowDBNull = false
            Me.columnRESTAMOUNT.AllowDBNull = false
            Me.columnRESTTAXAMOUNT.AllowDBNull = false
            Me.columnoccupancy.AllowDBNull = false
            Me.columnVEG.AllowDBNull = false
            Me.columnNONVEG.AllowDBNull = false
            Me.columnARRMENTAMOUNT.AllowDBNull = false
            Me.columnARRMENTTAXAMOUNT.AllowDBNull = false
            Me.columnCAMOUNT.AllowDBNull = false
            Me.columnSBFCHARGE.AllowDBNull = false
            Me.columnNETPAYABLE.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_PARTY_BILLING_ACCOUNTSRow() As VIEW_PARTY_BILLING_ACCOUNTSRow
            Return CType(Me.NewRow,VIEW_PARTY_BILLING_ACCOUNTSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_PARTY_BILLING_ACCOUNTSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_PARTY_BILLING_ACCOUNTSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARTY_BILLING_ACCOUNTSRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BILLING_ACCOUNTSRowChanged(Me, New VIEW_PARTY_BILLING_ACCOUNTSRowChangeEvent(CType(e.Row,VIEW_PARTY_BILLING_ACCOUNTSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARTY_BILLING_ACCOUNTSRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BILLING_ACCOUNTSRowChanging(Me, New VIEW_PARTY_BILLING_ACCOUNTSRowChangeEvent(CType(e.Row,VIEW_PARTY_BILLING_ACCOUNTSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARTY_BILLING_ACCOUNTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BILLING_ACCOUNTSRowDeleted(Me, New VIEW_PARTY_BILLING_ACCOUNTSRowChangeEvent(CType(e.Row,VIEW_PARTY_BILLING_ACCOUNTSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARTY_BILLING_ACCOUNTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BILLING_ACCOUNTSRowDeleting(Me, New VIEW_PARTY_BILLING_ACCOUNTSRowChangeEvent(CType(e.Row,VIEW_PARTY_BILLING_ACCOUNTSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_PARTY_BILLING_ACCOUNTSRow(ByVal row As VIEW_PARTY_BILLING_ACCOUNTSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_BILLING_ACCOUNTSRow
        Inherits DataRow
        
        Private tableVIEW_PARTY_BILLING_ACCOUNTS As VIEW_PARTY_BILLING_ACCOUNTSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARTY_BILLING_ACCOUNTS = CType(Me.Table,VIEW_PARTY_BILLING_ACCOUNTSDataTable)
        End Sub
        
        Public Property loccode As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.loccodeColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.loccodeColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.BOOKINGTYPEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.FREEZEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.BOOKINGDATEColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.PARTYDATEColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property HALLTYPE As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.HALLTYPEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.HALLTYPEColumn) = value
            End Set
        End Property
        
        Public Property halltypedesc As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.halltypedescColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.halltypedescColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.MCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.ASSOCIATENAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.MNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.HALLCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property ADVANCE As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.ADVANCEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.ADVANCEColumn) = value
            End Set
        End Property
        
        Public Property HALLAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.HALLAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.HALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.HALLTAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.HALLTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALL As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.HALLColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.HALLColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTARIFFAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.BOOKINGTARIFFAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.BOOKINGTARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property EXCESSTARIFFAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.EXCESSTARIFFAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.EXCESSTARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TARIFFTAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.TARIFFTAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.TARIFFTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TARIFFAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.TARIFFAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.TARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESTAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.RESTAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.RESTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESTTAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.RESTTAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.RESTTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property REST As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.RESTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.RESTColumn) = value
            End Set
        End Property
        
        Public Property occupancy As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.occupancyColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.occupancyColumn) = value
            End Set
        End Property
        
        Public Property VEG As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.VEGColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.VEGColumn) = value
            End Set
        End Property
        
        Public Property NONVEG As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.NONVEGColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.NONVEGColumn) = value
            End Set
        End Property
        
        Public Property ARRMENTAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.ARRMENTAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.ARRMENTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ARRMENTTAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.ARRMENTTAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.ARRMENTTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ARRMENT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.ARRMENTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.ARRMENTColumn) = value
            End Set
        End Property
        
        Public Property CAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.CAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.CAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property SBFCHARGE As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.SBFCHARGEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.SBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property NETPAYABLE As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.NETPAYABLEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.NETPAYABLEColumn) = value
            End Set
        End Property
        
        Public Property NETAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.NETAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.NETAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property NETTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.NETTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.NETTAXColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsHALLNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.HALLColumn)
        End Function
        
        Public Sub SetHALLNull()
            Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.HALLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.TARIFFAMOUNTColumn)
        End Function
        
        Public Sub SetTARIFFAMOUNTNull()
            Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.TARIFFAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.RESTColumn)
        End Function
        
        Public Sub SetRESTNull()
            Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.RESTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRMENTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.ARRMENTColumn)
        End Function
        
        Public Sub SetARRMENTNull()
            Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.ARRMENTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNETAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.NETAMOUNTColumn)
        End Function
        
        Public Sub SetNETAMOUNTNull()
            Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.NETAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNETTAXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.NETTAXColumn)
        End Function
        
        Public Sub SetNETTAXNull()
            Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.NETTAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tableVIEW_PARTY_BILLING_ACCOUNTS.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_BILLING_ACCOUNTSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_PARTY_BILLING_ACCOUNTSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_PARTY_BILLING_ACCOUNTSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_PARTY_BILLING_ACCOUNTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ACC_POSTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnACCOUNTCODE As DataColumn
        
        Private columnACDESC As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnCASHAMT As DataColumn
        
        Private columnBANKAMT As DataColumn
        
        Private columnMEMAMT As DataColumn
        
        Private columnPOSTFLAG As DataColumn
        
        Private columnslcode As DataColumn
        
        Private columnsldesc As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_ACC_POST")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property ACCOUNTCODEColumn As DataColumn
            Get
                Return Me.columnACCOUNTCODE
            End Get
        End Property
        
        Friend ReadOnly Property ACDESCColumn As DataColumn
            Get
                Return Me.columnACDESC
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property CASHAMTColumn As DataColumn
            Get
                Return Me.columnCASHAMT
            End Get
        End Property
        
        Friend ReadOnly Property BANKAMTColumn As DataColumn
            Get
                Return Me.columnBANKAMT
            End Get
        End Property
        
        Friend ReadOnly Property MEMAMTColumn As DataColumn
            Get
                Return Me.columnMEMAMT
            End Get
        End Property
        
        Friend ReadOnly Property POSTFLAGColumn As DataColumn
            Get
                Return Me.columnPOSTFLAG
            End Get
        End Property
        
        Friend ReadOnly Property slcodeColumn As DataColumn
            Get
                Return Me.columnslcode
            End Get
        End Property
        
        Friend ReadOnly Property sldescColumn As DataColumn
            Get
                Return Me.columnsldesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_ACC_POSTRow
            Get
                Return CType(Me.Rows(index),PARTY_ACC_POSTRow)
            End Get
        End Property
        
        Public Event PARTY_ACC_POSTRowChanged As PARTY_ACC_POSTRowChangeEventHandler
        
        Public Event PARTY_ACC_POSTRowChanging As PARTY_ACC_POSTRowChangeEventHandler
        
        Public Event PARTY_ACC_POSTRowDeleted As PARTY_ACC_POSTRowChangeEventHandler
        
        Public Event PARTY_ACC_POSTRowDeleting As PARTY_ACC_POSTRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_ACC_POSTRow(ByVal row As PARTY_ACC_POSTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_ACC_POSTRow(ByVal BOOKINGNO As String, ByVal PARTYDATE As Date, ByVal ACCOUNTCODE As String, ByVal ACDESC As String, ByVal TOTALAMOUNT As Decimal, ByVal CASHAMT As Decimal, ByVal BANKAMT As Decimal, ByVal MEMAMT As Decimal, ByVal POSTFLAG As String, ByVal slcode As String, ByVal sldesc As String) As PARTY_ACC_POSTRow
            Dim rowPARTY_ACC_POSTRow As PARTY_ACC_POSTRow = CType(Me.NewRow,PARTY_ACC_POSTRow)
            rowPARTY_ACC_POSTRow.ItemArray = New Object() {BOOKINGNO, PARTYDATE, ACCOUNTCODE, ACDESC, TOTALAMOUNT, CASHAMT, BANKAMT, MEMAMT, POSTFLAG, slcode, sldesc}
            Me.Rows.Add(rowPARTY_ACC_POSTRow)
            Return rowPARTY_ACC_POSTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_ACC_POSTDataTable = CType(MyBase.Clone,PARTY_ACC_POSTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_ACC_POSTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnACCOUNTCODE = Me.Columns("ACCOUNTCODE")
            Me.columnACDESC = Me.Columns("ACDESC")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnCASHAMT = Me.Columns("CASHAMT")
            Me.columnBANKAMT = Me.Columns("BANKAMT")
            Me.columnMEMAMT = Me.Columns("MEMAMT")
            Me.columnPOSTFLAG = Me.Columns("POSTFLAG")
            Me.columnslcode = Me.Columns("slcode")
            Me.columnsldesc = Me.Columns("sldesc")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnACCOUNTCODE = New DataColumn("ACCOUNTCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnACCOUNTCODE)
            Me.columnACDESC = New DataColumn("ACDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnACDESC)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnCASHAMT = New DataColumn("CASHAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCASHAMT)
            Me.columnBANKAMT = New DataColumn("BANKAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBANKAMT)
            Me.columnMEMAMT = New DataColumn("MEMAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMAMT)
            Me.columnPOSTFLAG = New DataColumn("POSTFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSTFLAG)
            Me.columnslcode = New DataColumn("slcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnslcode)
            Me.columnsldesc = New DataColumn("sldesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsldesc)
        End Sub
        
        Public Function NewPARTY_ACC_POSTRow() As PARTY_ACC_POSTRow
            Return CType(Me.NewRow,PARTY_ACC_POSTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_ACC_POSTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_ACC_POSTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_ACC_POSTRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_ACC_POSTRowChanged(Me, New PARTY_ACC_POSTRowChangeEvent(CType(e.Row,PARTY_ACC_POSTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_ACC_POSTRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_ACC_POSTRowChanging(Me, New PARTY_ACC_POSTRowChangeEvent(CType(e.Row,PARTY_ACC_POSTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_ACC_POSTRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_ACC_POSTRowDeleted(Me, New PARTY_ACC_POSTRowChangeEvent(CType(e.Row,PARTY_ACC_POSTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_ACC_POSTRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_ACC_POSTRowDeleting(Me, New PARTY_ACC_POSTRowChangeEvent(CType(e.Row,PARTY_ACC_POSTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_ACC_POSTRow(ByVal row As PARTY_ACC_POSTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ACC_POSTRow
        Inherits DataRow
        
        Private tablePARTY_ACC_POST As PARTY_ACC_POSTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_ACC_POST = CType(Me.Table,PARTY_ACC_POSTDataTable)
        End Sub
        
        Public Property BOOKINGNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ACC_POST.BOOKINGNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ACC_POST.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ACC_POST.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ACC_POST.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property ACCOUNTCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ACC_POST.ACCOUNTCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ACC_POST.ACCOUNTCODEColumn) = value
            End Set
        End Property
        
        Public Property ACDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ACC_POST.ACDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ACC_POST.ACDESCColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ACC_POST.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ACC_POST.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property CASHAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ACC_POST.CASHAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ACC_POST.CASHAMTColumn) = value
            End Set
        End Property
        
        Public Property BANKAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ACC_POST.BANKAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ACC_POST.BANKAMTColumn) = value
            End Set
        End Property
        
        Public Property MEMAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ACC_POST.MEMAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ACC_POST.MEMAMTColumn) = value
            End Set
        End Property
        
        Public Property POSTFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ACC_POST.POSTFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ACC_POST.POSTFLAGColumn) = value
            End Set
        End Property
        
        Public Property slcode As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ACC_POST.slcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ACC_POST.slcodeColumn) = value
            End Set
        End Property
        
        Public Property sldesc As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ACC_POST.sldescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ACC_POST.sldescColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ACC_POST.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_ACC_POST.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ACC_POST.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_ACC_POST.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsACCOUNTCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ACC_POST.ACCOUNTCODEColumn)
        End Function
        
        Public Sub SetACCOUNTCODENull()
            Me(Me.tablePARTY_ACC_POST.ACCOUNTCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsACDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ACC_POST.ACDESCColumn)
        End Function
        
        Public Sub SetACDESCNull()
            Me(Me.tablePARTY_ACC_POST.ACDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ACC_POST.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePARTY_ACC_POST.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCASHAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ACC_POST.CASHAMTColumn)
        End Function
        
        Public Sub SetCASHAMTNull()
            Me(Me.tablePARTY_ACC_POST.CASHAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBANKAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ACC_POST.BANKAMTColumn)
        End Function
        
        Public Sub SetBANKAMTNull()
            Me(Me.tablePARTY_ACC_POST.BANKAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ACC_POST.MEMAMTColumn)
        End Function
        
        Public Sub SetMEMAMTNull()
            Me(Me.tablePARTY_ACC_POST.MEMAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOSTFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ACC_POST.POSTFLAGColumn)
        End Function
        
        Public Sub SetPOSTFLAGNull()
            Me(Me.tablePARTY_ACC_POST.POSTFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsslcodeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ACC_POST.slcodeColumn)
        End Function
        
        Public Sub SetslcodeNull()
            Me(Me.tablePARTY_ACC_POST.slcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssldescNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ACC_POST.sldescColumn)
        End Function
        
        Public Sub SetsldescNull()
            Me(Me.tablePARTY_ACC_POST.sldescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ACC_POSTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_ACC_POSTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_ACC_POSTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_ACC_POSTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cateringbillreportDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnHALLDESC As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnVEG As DataColumn
        
        Private columnNONVEG As DataColumn
        
        Private columnVEGRATE As DataColumn
        
        Private columnNONVEGRATE As DataColumn
        
        Private columnVEGRATE1 As DataColumn
        
        Private columnVEGAMOUNT As DataColumn
        
        Private columnNONVEGRATE1 As DataColumn
        
        Private columnNONVEGAMOUNT As DataColumn
        
        Private columnTOTALTARIFFAMOUNT As DataColumn
        
        Private columnRESTAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("cateringbillreport")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property HALLDESCColumn As DataColumn
            Get
                Return Me.columnHALLDESC
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property VEGColumn As DataColumn
            Get
                Return Me.columnVEG
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGColumn As DataColumn
            Get
                Return Me.columnNONVEG
            End Get
        End Property
        
        Friend ReadOnly Property VEGRATEColumn As DataColumn
            Get
                Return Me.columnVEGRATE
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGRATEColumn As DataColumn
            Get
                Return Me.columnNONVEGRATE
            End Get
        End Property
        
        Friend ReadOnly Property VEGRATE1Column As DataColumn
            Get
                Return Me.columnVEGRATE1
            End Get
        End Property
        
        Friend ReadOnly Property VEGAMOUNTColumn As DataColumn
            Get
                Return Me.columnVEGAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGRATE1Column As DataColumn
            Get
                Return Me.columnNONVEGRATE1
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGAMOUNTColumn As DataColumn
            Get
                Return Me.columnNONVEGAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALTARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALTARIFFAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESTAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As cateringbillreportRow
            Get
                Return CType(Me.Rows(index),cateringbillreportRow)
            End Get
        End Property
        
        Public Event cateringbillreportRowChanged As cateringbillreportRowChangeEventHandler
        
        Public Event cateringbillreportRowChanging As cateringbillreportRowChangeEventHandler
        
        Public Event cateringbillreportRowDeleted As cateringbillreportRowChangeEventHandler
        
        Public Event cateringbillreportRowDeleting As cateringbillreportRowChangeEventHandler
        
        Public Overloads Sub AddcateringbillreportRow(ByVal row As cateringbillreportRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddcateringbillreportRow( _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal HALLDESC As String,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal VEG As Decimal,  _
                    ByVal NONVEG As Decimal,  _
                    ByVal VEGRATE As Decimal,  _
                    ByVal NONVEGRATE As Decimal,  _
                    ByVal VEGRATE1 As Decimal,  _
                    ByVal VEGAMOUNT As Decimal,  _
                    ByVal NONVEGRATE1 As Decimal,  _
                    ByVal NONVEGAMOUNT As Decimal,  _
                    ByVal TOTALTARIFFAMOUNT As Decimal,  _
                    ByVal RESTAMOUNT As Decimal) As cateringbillreportRow
            Dim rowcateringbillreportRow As cateringbillreportRow = CType(Me.NewRow,cateringbillreportRow)
            rowcateringbillreportRow.ItemArray = New Object() {BOOKINGNO, HALLDESC, MCODE, MNAME, BOOKINGDATE, PARTYDATE, VEG, NONVEG, VEGRATE, NONVEGRATE, VEGRATE1, VEGAMOUNT, NONVEGRATE1, NONVEGAMOUNT, TOTALTARIFFAMOUNT, RESTAMOUNT}
            Me.Rows.Add(rowcateringbillreportRow)
            Return rowcateringbillreportRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As cateringbillreportDataTable = CType(MyBase.Clone,cateringbillreportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New cateringbillreportDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnHALLDESC = Me.Columns("HALLDESC")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnVEG = Me.Columns("VEG")
            Me.columnNONVEG = Me.Columns("NONVEG")
            Me.columnVEGRATE = Me.Columns("VEGRATE")
            Me.columnNONVEGRATE = Me.Columns("NONVEGRATE")
            Me.columnVEGRATE1 = Me.Columns("VEGRATE1")
            Me.columnVEGAMOUNT = Me.Columns("VEGAMOUNT")
            Me.columnNONVEGRATE1 = Me.Columns("NONVEGRATE1")
            Me.columnNONVEGAMOUNT = Me.Columns("NONVEGAMOUNT")
            Me.columnTOTALTARIFFAMOUNT = Me.Columns("TOTALTARIFFAMOUNT")
            Me.columnRESTAMOUNT = Me.Columns("RESTAMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnHALLDESC = New DataColumn("HALLDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLDESC)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnVEG = New DataColumn("VEG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEG)
            Me.columnNONVEG = New DataColumn("NONVEG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEG)
            Me.columnVEGRATE = New DataColumn("VEGRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEGRATE)
            Me.columnNONVEGRATE = New DataColumn("NONVEGRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEGRATE)
            Me.columnVEGRATE1 = New DataColumn("VEGRATE1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEGRATE1)
            Me.columnVEGAMOUNT = New DataColumn("VEGAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEGAMOUNT)
            Me.columnNONVEGRATE1 = New DataColumn("NONVEGRATE1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEGRATE1)
            Me.columnNONVEGAMOUNT = New DataColumn("NONVEGAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEGAMOUNT)
            Me.columnTOTALTARIFFAMOUNT = New DataColumn("TOTALTARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALTARIFFAMOUNT)
            Me.columnRESTAMOUNT = New DataColumn("RESTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTAMOUNT)
            Me.columnBOOKINGNO.ReadOnly = true
            Me.columnHALLDESC.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnBOOKINGDATE.ReadOnly = true
            Me.columnPARTYDATE.ReadOnly = true
            Me.columnVEG.ReadOnly = true
            Me.columnNONVEG.ReadOnly = true
            Me.columnVEGRATE1.ReadOnly = true
            Me.columnVEGAMOUNT.ReadOnly = true
            Me.columnNONVEGRATE1.ReadOnly = true
            Me.columnNONVEGAMOUNT.ReadOnly = true
            Me.columnTOTALTARIFFAMOUNT.ReadOnly = true
        End Sub
        
        Public Function NewcateringbillreportRow() As cateringbillreportRow
            Return CType(Me.NewRow,cateringbillreportRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New cateringbillreportRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(cateringbillreportRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.cateringbillreportRowChangedEvent) Is Nothing) Then
                RaiseEvent cateringbillreportRowChanged(Me, New cateringbillreportRowChangeEvent(CType(e.Row,cateringbillreportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.cateringbillreportRowChangingEvent) Is Nothing) Then
                RaiseEvent cateringbillreportRowChanging(Me, New cateringbillreportRowChangeEvent(CType(e.Row,cateringbillreportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.cateringbillreportRowDeletedEvent) Is Nothing) Then
                RaiseEvent cateringbillreportRowDeleted(Me, New cateringbillreportRowChangeEvent(CType(e.Row,cateringbillreportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.cateringbillreportRowDeletingEvent) Is Nothing) Then
                RaiseEvent cateringbillreportRowDeleting(Me, New cateringbillreportRowChangeEvent(CType(e.Row,cateringbillreportRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovecateringbillreportRow(ByVal row As cateringbillreportRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cateringbillreportRow
        Inherits DataRow
        
        Private tablecateringbillreport As cateringbillreportDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablecateringbillreport = CType(Me.Table,cateringbillreportDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablecateringbillreport.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecateringbillreport.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property HALLDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablecateringbillreport.HALLDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecateringbillreport.HALLDESCColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablecateringbillreport.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecateringbillreport.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablecateringbillreport.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecateringbillreport.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablecateringbillreport.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecateringbillreport.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablecateringbillreport.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecateringbillreport.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property VEG As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablecateringbillreport.VEGColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecateringbillreport.VEGColumn) = value
            End Set
        End Property
        
        Public Property NONVEG As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablecateringbillreport.NONVEGColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecateringbillreport.NONVEGColumn) = value
            End Set
        End Property
        
        Public Property VEGRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablecateringbillreport.VEGRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecateringbillreport.VEGRATEColumn) = value
            End Set
        End Property
        
        Public Property NONVEGRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablecateringbillreport.NONVEGRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecateringbillreport.NONVEGRATEColumn) = value
            End Set
        End Property
        
        Public Property VEGRATE1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablecateringbillreport.VEGRATE1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecateringbillreport.VEGRATE1Column) = value
            End Set
        End Property
        
        Public Property VEGAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablecateringbillreport.VEGAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecateringbillreport.VEGAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property NONVEGRATE1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablecateringbillreport.NONVEGRATE1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecateringbillreport.NONVEGRATE1Column) = value
            End Set
        End Property
        
        Public Property NONVEGAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablecateringbillreport.NONVEGAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecateringbillreport.NONVEGAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALTARIFFAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablecateringbillreport.TOTALTARIFFAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecateringbillreport.TOTALTARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESTAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablecateringbillreport.RESTAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablecateringbillreport.RESTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablecateringbillreport.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablecateringbillreport.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLDESCNull() As Boolean
            Return Me.IsNull(Me.tablecateringbillreport.HALLDESCColumn)
        End Function
        
        Public Sub SetHALLDESCNull()
            Me(Me.tablecateringbillreport.HALLDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablecateringbillreport.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablecateringbillreport.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablecateringbillreport.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablecateringbillreport.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablecateringbillreport.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablecateringbillreport.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablecateringbillreport.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablecateringbillreport.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGNull() As Boolean
            Return Me.IsNull(Me.tablecateringbillreport.VEGColumn)
        End Function
        
        Public Sub SetVEGNull()
            Me(Me.tablecateringbillreport.VEGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNONVEGNull() As Boolean
            Return Me.IsNull(Me.tablecateringbillreport.NONVEGColumn)
        End Function
        
        Public Sub SetNONVEGNull()
            Me(Me.tablecateringbillreport.NONVEGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGRATENull() As Boolean
            Return Me.IsNull(Me.tablecateringbillreport.VEGRATEColumn)
        End Function
        
        Public Sub SetVEGRATENull()
            Me(Me.tablecateringbillreport.VEGRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNONVEGRATENull() As Boolean
            Return Me.IsNull(Me.tablecateringbillreport.NONVEGRATEColumn)
        End Function
        
        Public Sub SetNONVEGRATENull()
            Me(Me.tablecateringbillreport.NONVEGRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGRATE1Null() As Boolean
            Return Me.IsNull(Me.tablecateringbillreport.VEGRATE1Column)
        End Function
        
        Public Sub SetVEGRATE1Null()
            Me(Me.tablecateringbillreport.VEGRATE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablecateringbillreport.VEGAMOUNTColumn)
        End Function
        
        Public Sub SetVEGAMOUNTNull()
            Me(Me.tablecateringbillreport.VEGAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNONVEGRATE1Null() As Boolean
            Return Me.IsNull(Me.tablecateringbillreport.NONVEGRATE1Column)
        End Function
        
        Public Sub SetNONVEGRATE1Null()
            Me(Me.tablecateringbillreport.NONVEGRATE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsNONVEGAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablecateringbillreport.NONVEGAMOUNTColumn)
        End Function
        
        Public Sub SetNONVEGAMOUNTNull()
            Me(Me.tablecateringbillreport.NONVEGAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALTARIFFAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablecateringbillreport.TOTALTARIFFAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALTARIFFAMOUNTNull()
            Me(Me.tablecateringbillreport.TOTALTARIFFAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablecateringbillreport.RESTAMOUNTColumn)
        End Function
        
        Public Sub SetRESTAMOUNTNull()
            Me(Me.tablecateringbillreport.RESTAMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class cateringbillreportRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As cateringbillreportRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As cateringbillreportRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As cateringbillreportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ADDITEMSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnROWID As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnTTYPE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnROUNDOFF As DataColumn
        
        Private columnTAXPERC As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnCANCELAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Private columnGROUPCODE As DataColumn
        
        Private columnMENUCODE As DataColumn
        
        Private columnTARIFFCODE As DataColumn
        
        Private columnMAXITEMS As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnCHITNO As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnHALLDESC As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_ADDITEMS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ROWIDColumn As DataColumn
            Get
                Return Me.columnROWID
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property TTYPEColumn As DataColumn
            Get
                Return Me.columnTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property ROUNDOFFColumn As DataColumn
            Get
                Return Me.columnROUNDOFF
            End Get
        End Property
        
        Friend ReadOnly Property TAXPERCColumn As DataColumn
            Get
                Return Me.columnTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property CANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property GROUPCODEColumn As DataColumn
            Get
                Return Me.columnGROUPCODE
            End Get
        End Property
        
        Friend ReadOnly Property MENUCODEColumn As DataColumn
            Get
                Return Me.columnMENUCODE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFCODEColumn As DataColumn
            Get
                Return Me.columnTARIFFCODE
            End Get
        End Property
        
        Friend ReadOnly Property MAXITEMSColumn As DataColumn
            Get
                Return Me.columnMAXITEMS
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property CHITNOColumn As DataColumn
            Get
                Return Me.columnCHITNO
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property HALLDESCColumn As DataColumn
            Get
                Return Me.columnHALLDESC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_ADDITEMSRow
            Get
                Return CType(Me.Rows(index),PARTY_ADDITEMSRow)
            End Get
        End Property
        
        Public Event PARTY_ADDITEMSRowChanged As PARTY_ADDITEMSRowChangeEventHandler
        
        Public Event PARTY_ADDITEMSRowChanging As PARTY_ADDITEMSRowChangeEventHandler
        
        Public Event PARTY_ADDITEMSRowDeleted As PARTY_ADDITEMSRowChangeEventHandler
        
        Public Event PARTY_ADDITEMSRowDeleting As PARTY_ADDITEMSRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_ADDITEMSRow(ByVal row As PARTY_ADDITEMSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_ADDITEMSRow( _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal TTYPE As String,  _
                    ByVal ITEMCODE As String,  _
                    ByVal RATE As Decimal,  _
                    ByVal QTY As Decimal,  _
                    ByVal ROUNDOFF As Decimal,  _
                    ByVal TAXPERC As Decimal,  _
                    ByVal TAXAMOUNT As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal CANCELAMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal ADDUSERID As String,  _
                    ByVal ADDDATETIME As Date,  _
                    ByVal GROUPCODE As String,  _
                    ByVal MENUCODE As String,  _
                    ByVal TARIFFCODE As String,  _
                    ByVal MAXITEMS As Decimal,  _
                    ByVal LOCCODE As String,  _
                    ByVal CHITNO As String,  _
                    ByVal ITEMDESC As String,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal HALLDESC As String) As PARTY_ADDITEMSRow
            Dim rowPARTY_ADDITEMSRow As PARTY_ADDITEMSRow = CType(Me.NewRow,PARTY_ADDITEMSRow)
            rowPARTY_ADDITEMSRow.ItemArray = New Object() {Nothing, BOOKINGNO, BOOKINGTYPE, BOOKINGDATE, TTYPE, ITEMCODE, RATE, QTY, ROUNDOFF, TAXPERC, TAXAMOUNT, AMOUNT, TOTALAMOUNT, CANCELAMOUNT, FREEZE, ADDUSERID, ADDDATETIME, GROUPCODE, MENUCODE, TARIFFCODE, MAXITEMS, LOCCODE, CHITNO, ITEMDESC, PARTYDATE, MCODE, MNAME, HALLDESC}
            Me.Rows.Add(rowPARTY_ADDITEMSRow)
            Return rowPARTY_ADDITEMSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_ADDITEMSDataTable = CType(MyBase.Clone,PARTY_ADDITEMSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_ADDITEMSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnROWID = Me.Columns("ROWID")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnTTYPE = Me.Columns("TTYPE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnROUNDOFF = Me.Columns("ROUNDOFF")
            Me.columnTAXPERC = Me.Columns("TAXPERC")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnCANCELAMOUNT = Me.Columns("CANCELAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
            Me.columnGROUPCODE = Me.Columns("GROUPCODE")
            Me.columnMENUCODE = Me.Columns("MENUCODE")
            Me.columnTARIFFCODE = Me.Columns("TARIFFCODE")
            Me.columnMAXITEMS = Me.Columns("MAXITEMS")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnCHITNO = Me.Columns("CHITNO")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnHALLDESC = Me.Columns("HALLDESC")
        End Sub
        
        Private Sub InitClass()
            Me.columnROWID = New DataColumn("ROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROWID)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnTTYPE = New DataColumn("TTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTYPE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnROUNDOFF = New DataColumn("ROUNDOFF", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROUNDOFF)
            Me.columnTAXPERC = New DataColumn("TAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXPERC)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnCANCELAMOUNT = New DataColumn("CANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnGROUPCODE = New DataColumn("GROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPCODE)
            Me.columnMENUCODE = New DataColumn("MENUCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMENUCODE)
            Me.columnTARIFFCODE = New DataColumn("TARIFFCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFCODE)
            Me.columnMAXITEMS = New DataColumn("MAXITEMS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMAXITEMS)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnCHITNO = New DataColumn("CHITNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHITNO)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnHALLDESC = New DataColumn("HALLDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLDESC)
            Me.columnROWID.AutoIncrement = true
            Me.columnROWID.AllowDBNull = false
            Me.columnROWID.ReadOnly = true
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnBOOKINGTYPE.AllowDBNull = false
            Me.columnITEMCODE.AllowDBNull = false
            Me.columnPARTYDATE.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columnHALLDESC.ReadOnly = true
        End Sub
        
        Public Function NewPARTY_ADDITEMSRow() As PARTY_ADDITEMSRow
            Return CType(Me.NewRow,PARTY_ADDITEMSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_ADDITEMSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_ADDITEMSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_ADDITEMSRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_ADDITEMSRowChanged(Me, New PARTY_ADDITEMSRowChangeEvent(CType(e.Row,PARTY_ADDITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_ADDITEMSRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_ADDITEMSRowChanging(Me, New PARTY_ADDITEMSRowChangeEvent(CType(e.Row,PARTY_ADDITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_ADDITEMSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_ADDITEMSRowDeleted(Me, New PARTY_ADDITEMSRowChangeEvent(CType(e.Row,PARTY_ADDITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_ADDITEMSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_ADDITEMSRowDeleting(Me, New PARTY_ADDITEMSRowChangeEvent(CType(e.Row,PARTY_ADDITEMSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_ADDITEMSRow(ByVal row As PARTY_ADDITEMSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ADDITEMSRow
        Inherits DataRow
        
        Private tablePARTY_ADDITEMS As PARTY_ADDITEMSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_ADDITEMS = CType(Me.Table,PARTY_ADDITEMSDataTable)
        End Sub
        
        Public Property ROWID As Decimal
            Get
                Return CType(Me(Me.tablePARTY_ADDITEMS.ROWIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.ROWIDColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePARTY_ADDITEMS.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Return CType(Me(Me.tablePARTY_ADDITEMS.BOOKINGTYPEColumn),String)
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property TTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.TTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.TTYPEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tablePARTY_ADDITEMS.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.RATEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.QTYColumn) = value
            End Set
        End Property
        
        Public Property ROUNDOFF As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.ROUNDOFFColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.ROUNDOFFColumn) = value
            End Set
        End Property
        
        Public Property TAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.TAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.TAXPERCColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property CANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.CANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.CANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property GROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.GROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.GROUPCODEColumn) = value
            End Set
        End Property
        
        Public Property MENUCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.MENUCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.MENUCODEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.TARIFFCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.TARIFFCODEColumn) = value
            End Set
        End Property
        
        Public Property MAXITEMS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.MAXITEMSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.MAXITEMSColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property CHITNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.CHITNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.CHITNOColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property HALLDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS.HALLDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS.HALLDESCColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_ADDITEMS.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.TTYPEColumn)
        End Function
        
        Public Sub SetTTYPENull()
            Me(Me.tablePARTY_ADDITEMS.TTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePARTY_ADDITEMS.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tablePARTY_ADDITEMS.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsROUNDOFFNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.ROUNDOFFColumn)
        End Function
        
        Public Sub SetROUNDOFFNull()
            Me(Me.tablePARTY_ADDITEMS.ROUNDOFFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.TAXPERCColumn)
        End Function
        
        Public Sub SetTAXPERCNull()
            Me(Me.tablePARTY_ADDITEMS.TAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tablePARTY_ADDITEMS.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_ADDITEMS.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePARTY_ADDITEMS.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.CANCELAMOUNTColumn)
        End Function
        
        Public Sub SetCANCELAMOUNTNull()
            Me(Me.tablePARTY_ADDITEMS.CANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePARTY_ADDITEMS.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tablePARTY_ADDITEMS.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablePARTY_ADDITEMS.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.GROUPCODEColumn)
        End Function
        
        Public Sub SetGROUPCODENull()
            Me(Me.tablePARTY_ADDITEMS.GROUPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMENUCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.MENUCODEColumn)
        End Function
        
        Public Sub SetMENUCODENull()
            Me(Me.tablePARTY_ADDITEMS.MENUCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.TARIFFCODEColumn)
        End Function
        
        Public Sub SetTARIFFCODENull()
            Me(Me.tablePARTY_ADDITEMS.TARIFFCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMAXITEMSNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.MAXITEMSColumn)
        End Function
        
        Public Sub SetMAXITEMSNull()
            Me(Me.tablePARTY_ADDITEMS.MAXITEMSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePARTY_ADDITEMS.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHITNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.CHITNOColumn)
        End Function
        
        Public Sub SetCHITNONull()
            Me(Me.tablePARTY_ADDITEMS.CHITNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tablePARTY_ADDITEMS.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_ADDITEMS.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_ADDITEMS.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablePARTY_ADDITEMS.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS.HALLDESCColumn)
        End Function
        
        Public Sub SetHALLDESCNull()
            Me(Me.tablePARTY_ADDITEMS.HALLDESCColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ADDITEMSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_ADDITEMSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_ADDITEMSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_ADDITEMSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ADDITEMS1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnROWID As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnFROMTIME As DataColumn
        
        Private columnTOTIME As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnHALLTAXFLAG As DataColumn
        
        Private columnADVANCE As DataColumn
        
        Private columnHALLAMOUNT As DataColumn
        
        Private columnHALLTAXPERC As DataColumn
        
        Private columnHALLTAXAMOUNT As DataColumn
        
        Private columnBOOKINGTARIFFAMOUNT As DataColumn
        
        Private columnEXCESSTARIFFAMOUNT As DataColumn
        
        Private columnRESTAMOUNT As DataColumn
        
        Private columnRESTTAXAMOUNT As DataColumn
        
        Private columnARRMENTAMOUNT As DataColumn
        
        Private columnARRMENTTAXAMOUNT As DataColumn
        
        Private columnRECEIPTNO As DataColumn
        
        Private columnRECEIPTDATE As DataColumn
        
        Private columnHALLCANCELAMOUNT As DataColumn
        
        Private columnRESCANCELAMOUNT As DataColumn
        
        Private columnARRCANCELAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnFROMHRS As DataColumn
        
        Private columnTOHRS As DataColumn
        
        Private columnCANCELDATE As DataColumn
        
        Private columnNETPAYABLE As DataColumn
        
        Private columnSBFCHARGE As DataColumn
        
        Private columnTARIFFTAXAMOUNT As DataColumn
        
        Private columnBOOKINGOCCUPANCY As DataColumn
        
        Private columnBILLINGOCCUPANCY As DataColumn
        
        Private columnABOOKINGOCCUPANCY As DataColumn
        
        Private columnABILLINGOCCUPANCY As DataColumn
        
        Private columnALLOWEDOCCUPANCY As DataColumn
        
        Private columnDIFFOCCUPANCY As DataColumn
        
        Private columnhallamt As DataColumn
        
        Private columnhalltaxamt As DataColumn
        
        Private columnhallnetamt As DataColumn
        
        Private columnrcamt As DataColumn
        
        Private columnRESAMT As DataColumn
        
        Private columnRESTAXAMT As DataColumn
        
        Private columnRESTOTALAMT As DataColumn
        
        Private columnRESSBFAMT As DataColumn
        
        Private columnBARAMT As DataColumn
        
        Private columnBARTAXAMT As DataColumn
        
        Private columnBARTOTALAMT As DataColumn
        
        Private columnBARSBFAMT As DataColumn
        
        Private columnTARSBFCHARGE As DataColumn
        
        Private columnTRATE As DataColumn
        
        Private columnDRATE As DataColumn
        
        Private columnDIFFVALUE As DataColumn
        
        Private columnBOOKINGVALUE As DataColumn
        
        Private columnTARIFFVALUE As DataColumn
        
        Private columnTARIFFSBF As DataColumn
        
        Private columnTARIFFTAXAMT As DataColumn
        
        Private columnARRAMT As DataColumn
        
        Private columnARRTAXAMT As DataColumn
        
        Private columnARRTOTALAMT As DataColumn
        
        Private columnARRSBFAMT As DataColumn
        
        Private columnTAXTOTAL As DataColumn
        
        Private columnSTAX As DataColumn
        
        Private columnGROSSTOTAL As DataColumn
        
        Private columnNETTOTAL As DataColumn
        
        Private columntbillamount As DataColumn
        
        Private columnSBFTAX As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnCONT As DataColumn
        
        Private columnVAT As DataColumn
        
        Private columnINVOICENO As DataColumn
        
        Private columnveg As DataColumn
        
        Private columnnonveg As DataColumn
        
        Private columnVoid As DataColumn
        
        Private columnVEGRATE As DataColumn
        
        Private columnNONVEGRATE As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_ADDITEMS1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ROWIDColumn As DataColumn
            Get
                Return Me.columnROWID
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property FROMTIMEColumn As DataColumn
            Get
                Return Me.columnFROMTIME
            End Get
        End Property
        
        Friend ReadOnly Property TOTIMEColumn As DataColumn
            Get
                Return Me.columnTOTIME
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXFLAGColumn As DataColumn
            Get
                Return Me.columnHALLTAXFLAG
            End Get
        End Property
        
        Friend ReadOnly Property ADVANCEColumn As DataColumn
            Get
                Return Me.columnADVANCE
            End Get
        End Property
        
        Friend ReadOnly Property HALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXPERCColumn As DataColumn
            Get
                Return Me.columnHALLTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnBOOKINGTARIFFAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property EXCESSTARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnEXCESSTARIFFAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESTTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ARRMENTAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRMENTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ARRMENTTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRMENTTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTNOColumn As DataColumn
            Get
                Return Me.columnRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property HALLCANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESCANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ARRCANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property FROMHRSColumn As DataColumn
            Get
                Return Me.columnFROMHRS
            End Get
        End Property
        
        Friend ReadOnly Property TOHRSColumn As DataColumn
            Get
                Return Me.columnTOHRS
            End Get
        End Property
        
        Friend ReadOnly Property CANCELDATEColumn As DataColumn
            Get
                Return Me.columnCANCELDATE
            End Get
        End Property
        
        Friend ReadOnly Property NETPAYABLEColumn As DataColumn
            Get
                Return Me.columnNETPAYABLE
            End Get
        End Property
        
        Friend ReadOnly Property SBFCHARGEColumn As DataColumn
            Get
                Return Me.columnSBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTARIFFTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnBOOKINGOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property BILLINGOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnBILLINGOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property ABOOKINGOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnABOOKINGOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property ABILLINGOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnABILLINGOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property ALLOWEDOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnALLOWEDOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property DIFFOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnDIFFOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property hallamtColumn As DataColumn
            Get
                Return Me.columnhallamt
            End Get
        End Property
        
        Friend ReadOnly Property halltaxamtColumn As DataColumn
            Get
                Return Me.columnhalltaxamt
            End Get
        End Property
        
        Friend ReadOnly Property hallnetamtColumn As DataColumn
            Get
                Return Me.columnhallnetamt
            End Get
        End Property
        
        Friend ReadOnly Property rcamtColumn As DataColumn
            Get
                Return Me.columnrcamt
            End Get
        End Property
        
        Friend ReadOnly Property RESAMTColumn As DataColumn
            Get
                Return Me.columnRESAMT
            End Get
        End Property
        
        Friend ReadOnly Property RESTAXAMTColumn As DataColumn
            Get
                Return Me.columnRESTAXAMT
            End Get
        End Property
        
        Friend ReadOnly Property RESTOTALAMTColumn As DataColumn
            Get
                Return Me.columnRESTOTALAMT
            End Get
        End Property
        
        Friend ReadOnly Property RESSBFAMTColumn As DataColumn
            Get
                Return Me.columnRESSBFAMT
            End Get
        End Property
        
        Friend ReadOnly Property BARAMTColumn As DataColumn
            Get
                Return Me.columnBARAMT
            End Get
        End Property
        
        Friend ReadOnly Property BARTAXAMTColumn As DataColumn
            Get
                Return Me.columnBARTAXAMT
            End Get
        End Property
        
        Friend ReadOnly Property BARTOTALAMTColumn As DataColumn
            Get
                Return Me.columnBARTOTALAMT
            End Get
        End Property
        
        Friend ReadOnly Property BARSBFAMTColumn As DataColumn
            Get
                Return Me.columnBARSBFAMT
            End Get
        End Property
        
        Friend ReadOnly Property TARSBFCHARGEColumn As DataColumn
            Get
                Return Me.columnTARSBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property TRATEColumn As DataColumn
            Get
                Return Me.columnTRATE
            End Get
        End Property
        
        Friend ReadOnly Property DRATEColumn As DataColumn
            Get
                Return Me.columnDRATE
            End Get
        End Property
        
        Friend ReadOnly Property DIFFVALUEColumn As DataColumn
            Get
                Return Me.columnDIFFVALUE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGVALUEColumn As DataColumn
            Get
                Return Me.columnBOOKINGVALUE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFVALUEColumn As DataColumn
            Get
                Return Me.columnTARIFFVALUE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFSBFColumn As DataColumn
            Get
                Return Me.columnTARIFFSBF
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFTAXAMTColumn As DataColumn
            Get
                Return Me.columnTARIFFTAXAMT
            End Get
        End Property
        
        Friend ReadOnly Property ARRAMTColumn As DataColumn
            Get
                Return Me.columnARRAMT
            End Get
        End Property
        
        Friend ReadOnly Property ARRTAXAMTColumn As DataColumn
            Get
                Return Me.columnARRTAXAMT
            End Get
        End Property
        
        Friend ReadOnly Property ARRTOTALAMTColumn As DataColumn
            Get
                Return Me.columnARRTOTALAMT
            End Get
        End Property
        
        Friend ReadOnly Property ARRSBFAMTColumn As DataColumn
            Get
                Return Me.columnARRSBFAMT
            End Get
        End Property
        
        Friend ReadOnly Property TAXTOTALColumn As DataColumn
            Get
                Return Me.columnTAXTOTAL
            End Get
        End Property
        
        Friend ReadOnly Property STAXColumn As DataColumn
            Get
                Return Me.columnSTAX
            End Get
        End Property
        
        Friend ReadOnly Property GROSSTOTALColumn As DataColumn
            Get
                Return Me.columnGROSSTOTAL
            End Get
        End Property
        
        Friend ReadOnly Property NETTOTALColumn As DataColumn
            Get
                Return Me.columnNETTOTAL
            End Get
        End Property
        
        Friend ReadOnly Property tbillamountColumn As DataColumn
            Get
                Return Me.columntbillamount
            End Get
        End Property
        
        Friend ReadOnly Property SBFTAXColumn As DataColumn
            Get
                Return Me.columnSBFTAX
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property CONTColumn As DataColumn
            Get
                Return Me.columnCONT
            End Get
        End Property
        
        Friend ReadOnly Property VATColumn As DataColumn
            Get
                Return Me.columnVAT
            End Get
        End Property
        
        Friend ReadOnly Property INVOICENOColumn As DataColumn
            Get
                Return Me.columnINVOICENO
            End Get
        End Property
        
        Friend ReadOnly Property vegColumn As DataColumn
            Get
                Return Me.columnveg
            End Get
        End Property
        
        Friend ReadOnly Property nonvegColumn As DataColumn
            Get
                Return Me.columnnonveg
            End Get
        End Property
        
        Friend ReadOnly Property VoidColumn As DataColumn
            Get
                Return Me.columnVoid
            End Get
        End Property
        
        Friend ReadOnly Property VEGRATEColumn As DataColumn
            Get
                Return Me.columnVEGRATE
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGRATEColumn As DataColumn
            Get
                Return Me.columnNONVEGRATE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_ADDITEMS1Row
            Get
                Return CType(Me.Rows(index),PARTY_ADDITEMS1Row)
            End Get
        End Property
        
        Public Event PARTY_ADDITEMS1RowChanged As PARTY_ADDITEMS1RowChangeEventHandler
        
        Public Event PARTY_ADDITEMS1RowChanging As PARTY_ADDITEMS1RowChangeEventHandler
        
        Public Event PARTY_ADDITEMS1RowDeleted As PARTY_ADDITEMS1RowChangeEventHandler
        
        Public Event PARTY_ADDITEMS1RowDeleting As PARTY_ADDITEMS1RowChangeEventHandler
        
        Public Overloads Sub AddPARTY_ADDITEMS1Row(ByVal row As PARTY_ADDITEMS1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_ADDITEMS1Row( _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal FROMTIME As Decimal,  _
                    ByVal TOTIME As Decimal,  _
                    ByVal MCODE As String,  _
                    ByVal ASSOCIATENAME As String,  _
                    ByVal HALLCODE As String,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal HALLTAXFLAG As String,  _
                    ByVal ADVANCE As Decimal,  _
                    ByVal HALLAMOUNT As Decimal,  _
                    ByVal HALLTAXPERC As Decimal,  _
                    ByVal HALLTAXAMOUNT As Decimal,  _
                    ByVal BOOKINGTARIFFAMOUNT As Decimal,  _
                    ByVal EXCESSTARIFFAMOUNT As Decimal,  _
                    ByVal RESTAMOUNT As Decimal,  _
                    ByVal RESTTAXAMOUNT As Decimal,  _
                    ByVal ARRMENTAMOUNT As Decimal,  _
                    ByVal ARRMENTTAXAMOUNT As Decimal,  _
                    ByVal RECEIPTNO As String,  _
                    ByVal RECEIPTDATE As Date,  _
                    ByVal HALLCANCELAMOUNT As Decimal,  _
                    ByVal RESCANCELAMOUNT As Decimal,  _
                    ByVal ARRCANCELAMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal ADDDATETIME As Date,  _
                    ByVal ADDUSERID As String,  _
                    ByVal FROMHRS As Decimal,  _
                    ByVal TOHRS As Decimal,  _
                    ByVal CANCELDATE As Date,  _
                    ByVal NETPAYABLE As Decimal,  _
                    ByVal SBFCHARGE As Decimal,  _
                    ByVal TARIFFTAXAMOUNT As Decimal,  _
                    ByVal BOOKINGOCCUPANCY As Decimal,  _
                    ByVal BILLINGOCCUPANCY As Decimal,  _
                    ByVal ABOOKINGOCCUPANCY As Decimal,  _
                    ByVal ABILLINGOCCUPANCY As Decimal,  _
                    ByVal ALLOWEDOCCUPANCY As Decimal,  _
                    ByVal DIFFOCCUPANCY As Decimal,  _
                    ByVal hallamt As Decimal,  _
                    ByVal halltaxamt As Decimal,  _
                    ByVal hallnetamt As Decimal,  _
                    ByVal rcamt As Decimal,  _
                    ByVal RESAMT As Decimal,  _
                    ByVal RESTAXAMT As Decimal,  _
                    ByVal RESTOTALAMT As Decimal,  _
                    ByVal RESSBFAMT As Decimal,  _
                    ByVal BARAMT As Decimal,  _
                    ByVal BARTAXAMT As Decimal,  _
                    ByVal BARTOTALAMT As Decimal,  _
                    ByVal BARSBFAMT As Decimal,  _
                    ByVal TARSBFCHARGE As Decimal,  _
                    ByVal TRATE As Decimal,  _
                    ByVal DRATE As Decimal,  _
                    ByVal DIFFVALUE As Decimal,  _
                    ByVal BOOKINGVALUE As Decimal,  _
                    ByVal TARIFFVALUE As Decimal,  _
                    ByVal TARIFFSBF As Decimal,  _
                    ByVal TARIFFTAXAMT As Decimal,  _
                    ByVal ARRAMT As Decimal,  _
                    ByVal ARRTAXAMT As Decimal,  _
                    ByVal ARRTOTALAMT As Decimal,  _
                    ByVal ARRSBFAMT As Decimal,  _
                    ByVal TAXTOTAL As Decimal,  _
                    ByVal STAX As Decimal,  _
                    ByVal GROSSTOTAL As Decimal,  _
                    ByVal NETTOTAL As Decimal,  _
                    ByVal tbillamount As Decimal,  _
                    ByVal SBFTAX As Decimal,  _
                    ByVal LOCCODE As String,  _
                    ByVal CONT As Decimal,  _
                    ByVal VAT As Decimal,  _
                    ByVal INVOICENO As Decimal,  _
                    ByVal veg As Decimal,  _
                    ByVal nonveg As Decimal,  _
                    ByVal Void As String,  _
                    ByVal VEGRATE As Decimal,  _
                    ByVal NONVEGRATE As Decimal) As PARTY_ADDITEMS1Row
            Dim rowPARTY_ADDITEMS1Row As PARTY_ADDITEMS1Row = CType(Me.NewRow,PARTY_ADDITEMS1Row)
            rowPARTY_ADDITEMS1Row.ItemArray = New Object() {Nothing, BOOKINGTYPE, BOOKINGNO, BOOKINGDATE, PARTYDATE, FROMTIME, TOTIME, MCODE, ASSOCIATENAME, HALLCODE, OCCUPANCY, DESCRIPTION, HALLTAXFLAG, ADVANCE, HALLAMOUNT, HALLTAXPERC, HALLTAXAMOUNT, BOOKINGTARIFFAMOUNT, EXCESSTARIFFAMOUNT, RESTAMOUNT, RESTTAXAMOUNT, ARRMENTAMOUNT, ARRMENTTAXAMOUNT, RECEIPTNO, RECEIPTDATE, HALLCANCELAMOUNT, RESCANCELAMOUNT, ARRCANCELAMOUNT, FREEZE, ADDDATETIME, ADDUSERID, FROMHRS, TOHRS, CANCELDATE, NETPAYABLE, SBFCHARGE, TARIFFTAXAMOUNT, BOOKINGOCCUPANCY, BILLINGOCCUPANCY, ABOOKINGOCCUPANCY, ABILLINGOCCUPANCY, ALLOWEDOCCUPANCY, DIFFOCCUPANCY, hallamt, halltaxamt, hallnetamt, rcamt, RESAMT, RESTAXAMT, RESTOTALAMT, RESSBFAMT, BARAMT, BARTAXAMT, BARTOTALAMT, BARSBFAMT, TARSBFCHARGE, TRATE, DRATE, DIFFVALUE, BOOKINGVALUE, TARIFFVALUE, TARIFFSBF, TARIFFTAXAMT, ARRAMT, ARRTAXAMT, ARRTOTALAMT, ARRSBFAMT, TAXTOTAL, STAX, GROSSTOTAL, NETTOTAL, tbillamount, SBFTAX, LOCCODE, CONT, VAT, INVOICENO, veg, nonveg, Void, VEGRATE, NONVEGRATE}
            Me.Rows.Add(rowPARTY_ADDITEMS1Row)
            Return rowPARTY_ADDITEMS1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_ADDITEMS1DataTable = CType(MyBase.Clone,PARTY_ADDITEMS1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_ADDITEMS1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnROWID = Me.Columns("ROWID")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnFROMTIME = Me.Columns("FROMTIME")
            Me.columnTOTIME = Me.Columns("TOTIME")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnHALLTAXFLAG = Me.Columns("HALLTAXFLAG")
            Me.columnADVANCE = Me.Columns("ADVANCE")
            Me.columnHALLAMOUNT = Me.Columns("HALLAMOUNT")
            Me.columnHALLTAXPERC = Me.Columns("HALLTAXPERC")
            Me.columnHALLTAXAMOUNT = Me.Columns("HALLTAXAMOUNT")
            Me.columnBOOKINGTARIFFAMOUNT = Me.Columns("BOOKINGTARIFFAMOUNT")
            Me.columnEXCESSTARIFFAMOUNT = Me.Columns("EXCESSTARIFFAMOUNT")
            Me.columnRESTAMOUNT = Me.Columns("RESTAMOUNT")
            Me.columnRESTTAXAMOUNT = Me.Columns("RESTTAXAMOUNT")
            Me.columnARRMENTAMOUNT = Me.Columns("ARRMENTAMOUNT")
            Me.columnARRMENTTAXAMOUNT = Me.Columns("ARRMENTTAXAMOUNT")
            Me.columnRECEIPTNO = Me.Columns("RECEIPTNO")
            Me.columnRECEIPTDATE = Me.Columns("RECEIPTDATE")
            Me.columnHALLCANCELAMOUNT = Me.Columns("HALLCANCELAMOUNT")
            Me.columnRESCANCELAMOUNT = Me.Columns("RESCANCELAMOUNT")
            Me.columnARRCANCELAMOUNT = Me.Columns("ARRCANCELAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnFROMHRS = Me.Columns("FROMHRS")
            Me.columnTOHRS = Me.Columns("TOHRS")
            Me.columnCANCELDATE = Me.Columns("CANCELDATE")
            Me.columnNETPAYABLE = Me.Columns("NETPAYABLE")
            Me.columnSBFCHARGE = Me.Columns("SBFCHARGE")
            Me.columnTARIFFTAXAMOUNT = Me.Columns("TARIFFTAXAMOUNT")
            Me.columnBOOKINGOCCUPANCY = Me.Columns("BOOKINGOCCUPANCY")
            Me.columnBILLINGOCCUPANCY = Me.Columns("BILLINGOCCUPANCY")
            Me.columnABOOKINGOCCUPANCY = Me.Columns("ABOOKINGOCCUPANCY")
            Me.columnABILLINGOCCUPANCY = Me.Columns("ABILLINGOCCUPANCY")
            Me.columnALLOWEDOCCUPANCY = Me.Columns("ALLOWEDOCCUPANCY")
            Me.columnDIFFOCCUPANCY = Me.Columns("DIFFOCCUPANCY")
            Me.columnhallamt = Me.Columns("hallamt")
            Me.columnhalltaxamt = Me.Columns("halltaxamt")
            Me.columnhallnetamt = Me.Columns("hallnetamt")
            Me.columnrcamt = Me.Columns("rcamt")
            Me.columnRESAMT = Me.Columns("RESAMT")
            Me.columnRESTAXAMT = Me.Columns("RESTAXAMT")
            Me.columnRESTOTALAMT = Me.Columns("RESTOTALAMT")
            Me.columnRESSBFAMT = Me.Columns("RESSBFAMT")
            Me.columnBARAMT = Me.Columns("BARAMT")
            Me.columnBARTAXAMT = Me.Columns("BARTAXAMT")
            Me.columnBARTOTALAMT = Me.Columns("BARTOTALAMT")
            Me.columnBARSBFAMT = Me.Columns("BARSBFAMT")
            Me.columnTARSBFCHARGE = Me.Columns("TARSBFCHARGE")
            Me.columnTRATE = Me.Columns("TRATE")
            Me.columnDRATE = Me.Columns("DRATE")
            Me.columnDIFFVALUE = Me.Columns("DIFFVALUE")
            Me.columnBOOKINGVALUE = Me.Columns("BOOKINGVALUE")
            Me.columnTARIFFVALUE = Me.Columns("TARIFFVALUE")
            Me.columnTARIFFSBF = Me.Columns("TARIFFSBF")
            Me.columnTARIFFTAXAMT = Me.Columns("TARIFFTAXAMT")
            Me.columnARRAMT = Me.Columns("ARRAMT")
            Me.columnARRTAXAMT = Me.Columns("ARRTAXAMT")
            Me.columnARRTOTALAMT = Me.Columns("ARRTOTALAMT")
            Me.columnARRSBFAMT = Me.Columns("ARRSBFAMT")
            Me.columnTAXTOTAL = Me.Columns("TAXTOTAL")
            Me.columnSTAX = Me.Columns("STAX")
            Me.columnGROSSTOTAL = Me.Columns("GROSSTOTAL")
            Me.columnNETTOTAL = Me.Columns("NETTOTAL")
            Me.columntbillamount = Me.Columns("tbillamount")
            Me.columnSBFTAX = Me.Columns("SBFTAX")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnCONT = Me.Columns("CONT")
            Me.columnVAT = Me.Columns("VAT")
            Me.columnINVOICENO = Me.Columns("INVOICENO")
            Me.columnveg = Me.Columns("veg")
            Me.columnnonveg = Me.Columns("nonveg")
            Me.columnVoid = Me.Columns("Void")
            Me.columnVEGRATE = Me.Columns("VEGRATE")
            Me.columnNONVEGRATE = Me.Columns("NONVEGRATE")
        End Sub
        
        Private Sub InitClass()
            Me.columnROWID = New DataColumn("ROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROWID)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnFROMTIME = New DataColumn("FROMTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMTIME)
            Me.columnTOTIME = New DataColumn("TOTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTIME)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnHALLTAXFLAG = New DataColumn("HALLTAXFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXFLAG)
            Me.columnADVANCE = New DataColumn("ADVANCE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADVANCE)
            Me.columnHALLAMOUNT = New DataColumn("HALLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLAMOUNT)
            Me.columnHALLTAXPERC = New DataColumn("HALLTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXPERC)
            Me.columnHALLTAXAMOUNT = New DataColumn("HALLTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXAMOUNT)
            Me.columnBOOKINGTARIFFAMOUNT = New DataColumn("BOOKINGTARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTARIFFAMOUNT)
            Me.columnEXCESSTARIFFAMOUNT = New DataColumn("EXCESSTARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEXCESSTARIFFAMOUNT)
            Me.columnRESTAMOUNT = New DataColumn("RESTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTAMOUNT)
            Me.columnRESTTAXAMOUNT = New DataColumn("RESTTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTTAXAMOUNT)
            Me.columnARRMENTAMOUNT = New DataColumn("ARRMENTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRMENTAMOUNT)
            Me.columnARRMENTTAXAMOUNT = New DataColumn("ARRMENTTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRMENTTAXAMOUNT)
            Me.columnRECEIPTNO = New DataColumn("RECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTNO)
            Me.columnRECEIPTDATE = New DataColumn("RECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTDATE)
            Me.columnHALLCANCELAMOUNT = New DataColumn("HALLCANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCANCELAMOUNT)
            Me.columnRESCANCELAMOUNT = New DataColumn("RESCANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESCANCELAMOUNT)
            Me.columnARRCANCELAMOUNT = New DataColumn("ARRCANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRCANCELAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnFROMHRS = New DataColumn("FROMHRS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMHRS)
            Me.columnTOHRS = New DataColumn("TOHRS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOHRS)
            Me.columnCANCELDATE = New DataColumn("CANCELDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELDATE)
            Me.columnNETPAYABLE = New DataColumn("NETPAYABLE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETPAYABLE)
            Me.columnSBFCHARGE = New DataColumn("SBFCHARGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBFCHARGE)
            Me.columnTARIFFTAXAMOUNT = New DataColumn("TARIFFTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFTAXAMOUNT)
            Me.columnBOOKINGOCCUPANCY = New DataColumn("BOOKINGOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGOCCUPANCY)
            Me.columnBILLINGOCCUPANCY = New DataColumn("BILLINGOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLINGOCCUPANCY)
            Me.columnABOOKINGOCCUPANCY = New DataColumn("ABOOKINGOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnABOOKINGOCCUPANCY)
            Me.columnABILLINGOCCUPANCY = New DataColumn("ABILLINGOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnABILLINGOCCUPANCY)
            Me.columnALLOWEDOCCUPANCY = New DataColumn("ALLOWEDOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnALLOWEDOCCUPANCY)
            Me.columnDIFFOCCUPANCY = New DataColumn("DIFFOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDIFFOCCUPANCY)
            Me.columnhallamt = New DataColumn("hallamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallamt)
            Me.columnhalltaxamt = New DataColumn("halltaxamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltaxamt)
            Me.columnhallnetamt = New DataColumn("hallnetamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallnetamt)
            Me.columnrcamt = New DataColumn("rcamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrcamt)
            Me.columnRESAMT = New DataColumn("RESAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESAMT)
            Me.columnRESTAXAMT = New DataColumn("RESTAXAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTAXAMT)
            Me.columnRESTOTALAMT = New DataColumn("RESTOTALAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTOTALAMT)
            Me.columnRESSBFAMT = New DataColumn("RESSBFAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESSBFAMT)
            Me.columnBARAMT = New DataColumn("BARAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBARAMT)
            Me.columnBARTAXAMT = New DataColumn("BARTAXAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBARTAXAMT)
            Me.columnBARTOTALAMT = New DataColumn("BARTOTALAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBARTOTALAMT)
            Me.columnBARSBFAMT = New DataColumn("BARSBFAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBARSBFAMT)
            Me.columnTARSBFCHARGE = New DataColumn("TARSBFCHARGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARSBFCHARGE)
            Me.columnTRATE = New DataColumn("TRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTRATE)
            Me.columnDRATE = New DataColumn("DRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDRATE)
            Me.columnDIFFVALUE = New DataColumn("DIFFVALUE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDIFFVALUE)
            Me.columnBOOKINGVALUE = New DataColumn("BOOKINGVALUE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGVALUE)
            Me.columnTARIFFVALUE = New DataColumn("TARIFFVALUE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFVALUE)
            Me.columnTARIFFSBF = New DataColumn("TARIFFSBF", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFSBF)
            Me.columnTARIFFTAXAMT = New DataColumn("TARIFFTAXAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFTAXAMT)
            Me.columnARRAMT = New DataColumn("ARRAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRAMT)
            Me.columnARRTAXAMT = New DataColumn("ARRTAXAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRTAXAMT)
            Me.columnARRTOTALAMT = New DataColumn("ARRTOTALAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRTOTALAMT)
            Me.columnARRSBFAMT = New DataColumn("ARRSBFAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRSBFAMT)
            Me.columnTAXTOTAL = New DataColumn("TAXTOTAL", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXTOTAL)
            Me.columnSTAX = New DataColumn("STAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTAX)
            Me.columnGROSSTOTAL = New DataColumn("GROSSTOTAL", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROSSTOTAL)
            Me.columnNETTOTAL = New DataColumn("NETTOTAL", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETTOTAL)
            Me.columntbillamount = New DataColumn("tbillamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntbillamount)
            Me.columnSBFTAX = New DataColumn("SBFTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBFTAX)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnCONT = New DataColumn("CONT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONT)
            Me.columnVAT = New DataColumn("VAT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVAT)
            Me.columnINVOICENO = New DataColumn("INVOICENO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINVOICENO)
            Me.columnveg = New DataColumn("veg", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnveg)
            Me.columnnonveg = New DataColumn("nonveg", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnonveg)
            Me.columnVoid = New DataColumn("Void", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVoid)
            Me.columnVEGRATE = New DataColumn("VEGRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEGRATE)
            Me.columnNONVEGRATE = New DataColumn("NONVEGRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEGRATE)
            Me.columnROWID.AutoIncrement = true
            Me.columnROWID.AllowDBNull = false
            Me.columnROWID.ReadOnly = true
        End Sub
        
        Public Function NewPARTY_ADDITEMS1Row() As PARTY_ADDITEMS1Row
            Return CType(Me.NewRow,PARTY_ADDITEMS1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_ADDITEMS1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_ADDITEMS1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_ADDITEMS1RowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_ADDITEMS1RowChanged(Me, New PARTY_ADDITEMS1RowChangeEvent(CType(e.Row,PARTY_ADDITEMS1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_ADDITEMS1RowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_ADDITEMS1RowChanging(Me, New PARTY_ADDITEMS1RowChangeEvent(CType(e.Row,PARTY_ADDITEMS1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_ADDITEMS1RowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_ADDITEMS1RowDeleted(Me, New PARTY_ADDITEMS1RowChangeEvent(CType(e.Row,PARTY_ADDITEMS1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_ADDITEMS1RowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_ADDITEMS1RowDeleting(Me, New PARTY_ADDITEMS1RowChangeEvent(CType(e.Row,PARTY_ADDITEMS1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_ADDITEMS1Row(ByVal row As PARTY_ADDITEMS1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ADDITEMS1Row
        Inherits DataRow
        
        Private tablePARTY_ADDITEMS1 As PARTY_ADDITEMS1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_ADDITEMS1 = CType(Me.Table,PARTY_ADDITEMS1DataTable)
        End Sub
        
        Public Property ROWID As Decimal
            Get
                Return CType(Me(Me.tablePARTY_ADDITEMS1.ROWIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.ROWIDColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.BOOKINGTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property FROMTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.FROMTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.FROMTIMEColumn) = value
            End Set
        End Property
        
        Public Property TOTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.TOTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.TOTIMEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.HALLTAXFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.HALLTAXFLAGColumn) = value
            End Set
        End Property
        
        Public Property ADVANCE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.ADVANCEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.ADVANCEColumn) = value
            End Set
        End Property
        
        Public Property HALLAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.HALLAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.HALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.HALLTAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.HALLTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.HALLTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.HALLTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTARIFFAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.BOOKINGTARIFFAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.BOOKINGTARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property EXCESSTARIFFAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.EXCESSTARIFFAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.EXCESSTARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESTAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.RESTAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.RESTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESTTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.RESTTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.RESTTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ARRMENTAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.ARRMENTAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.ARRMENTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ARRMENTTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.ARRMENTTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.ARRMENTTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.RECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.RECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.RECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.RECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property HALLCANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.HALLCANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.HALLCANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESCANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.RESCANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.RESCANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ARRCANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.ARRCANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.ARRCANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property FROMHRS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.FROMHRSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.FROMHRSColumn) = value
            End Set
        End Property
        
        Public Property TOHRS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.TOHRSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.TOHRSColumn) = value
            End Set
        End Property
        
        Public Property CANCELDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.CANCELDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.CANCELDATEColumn) = value
            End Set
        End Property
        
        Public Property NETPAYABLE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.NETPAYABLEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.NETPAYABLEColumn) = value
            End Set
        End Property
        
        Public Property SBFCHARGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.SBFCHARGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.SBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.TARIFFTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.TARIFFTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.BOOKINGOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.BOOKINGOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property BILLINGOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.BILLINGOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.BILLINGOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property ABOOKINGOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.ABOOKINGOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.ABOOKINGOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property ABILLINGOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.ABILLINGOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.ABILLINGOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property ALLOWEDOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.ALLOWEDOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.ALLOWEDOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property DIFFOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.DIFFOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.DIFFOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property hallamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.hallamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.hallamtColumn) = value
            End Set
        End Property
        
        Public Property halltaxamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.halltaxamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.halltaxamtColumn) = value
            End Set
        End Property
        
        Public Property hallnetamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.hallnetamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.hallnetamtColumn) = value
            End Set
        End Property
        
        Public Property rcamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.rcamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.rcamtColumn) = value
            End Set
        End Property
        
        Public Property RESAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.RESAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.RESAMTColumn) = value
            End Set
        End Property
        
        Public Property RESTAXAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.RESTAXAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.RESTAXAMTColumn) = value
            End Set
        End Property
        
        Public Property RESTOTALAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.RESTOTALAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.RESTOTALAMTColumn) = value
            End Set
        End Property
        
        Public Property RESSBFAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.RESSBFAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.RESSBFAMTColumn) = value
            End Set
        End Property
        
        Public Property BARAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.BARAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.BARAMTColumn) = value
            End Set
        End Property
        
        Public Property BARTAXAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.BARTAXAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.BARTAXAMTColumn) = value
            End Set
        End Property
        
        Public Property BARTOTALAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.BARTOTALAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.BARTOTALAMTColumn) = value
            End Set
        End Property
        
        Public Property BARSBFAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.BARSBFAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.BARSBFAMTColumn) = value
            End Set
        End Property
        
        Public Property TARSBFCHARGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.TARSBFCHARGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.TARSBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property TRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.TRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.TRATEColumn) = value
            End Set
        End Property
        
        Public Property DRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.DRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.DRATEColumn) = value
            End Set
        End Property
        
        Public Property DIFFVALUE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.DIFFVALUEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.DIFFVALUEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGVALUE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.BOOKINGVALUEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.BOOKINGVALUEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFVALUE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.TARIFFVALUEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.TARIFFVALUEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFSBF As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.TARIFFSBFColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.TARIFFSBFColumn) = value
            End Set
        End Property
        
        Public Property TARIFFTAXAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.TARIFFTAXAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.TARIFFTAXAMTColumn) = value
            End Set
        End Property
        
        Public Property ARRAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.ARRAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.ARRAMTColumn) = value
            End Set
        End Property
        
        Public Property ARRTAXAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.ARRTAXAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.ARRTAXAMTColumn) = value
            End Set
        End Property
        
        Public Property ARRTOTALAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.ARRTOTALAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.ARRTOTALAMTColumn) = value
            End Set
        End Property
        
        Public Property ARRSBFAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.ARRSBFAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.ARRSBFAMTColumn) = value
            End Set
        End Property
        
        Public Property TAXTOTAL As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.TAXTOTALColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.TAXTOTALColumn) = value
            End Set
        End Property
        
        Public Property STAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.STAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.STAXColumn) = value
            End Set
        End Property
        
        Public Property GROSSTOTAL As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.GROSSTOTALColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.GROSSTOTALColumn) = value
            End Set
        End Property
        
        Public Property NETTOTAL As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.NETTOTALColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.NETTOTALColumn) = value
            End Set
        End Property
        
        Public Property tbillamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.tbillamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.tbillamountColumn) = value
            End Set
        End Property
        
        Public Property SBFTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.SBFTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.SBFTAXColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property CONT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.CONTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.CONTColumn) = value
            End Set
        End Property
        
        Public Property VAT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.VATColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.VATColumn) = value
            End Set
        End Property
        
        Public Property INVOICENO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.INVOICENOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.INVOICENOColumn) = value
            End Set
        End Property
        
        Public Property veg As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.vegColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.vegColumn) = value
            End Set
        End Property
        
        Public Property nonveg As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.nonvegColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.nonvegColumn) = value
            End Set
        End Property
        
        Public Property Void As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.VoidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.VoidColumn) = value
            End Set
        End Property
        
        Public Property VEGRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.VEGRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.VEGRATEColumn) = value
            End Set
        End Property
        
        Public Property NONVEGRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ADDITEMS1.NONVEGRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ADDITEMS1.NONVEGRATEColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.BOOKINGTYPEColumn)
        End Function
        
        Public Sub SetBOOKINGTYPENull()
            Me(Me.tablePARTY_ADDITEMS1.BOOKINGTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_ADDITEMS1.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_ADDITEMS1.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_ADDITEMS1.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.FROMTIMEColumn)
        End Function
        
        Public Sub SetFROMTIMENull()
            Me(Me.tablePARTY_ADDITEMS1.FROMTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.TOTIMEColumn)
        End Function
        
        Public Sub SetTOTIMENull()
            Me(Me.tablePARTY_ADDITEMS1.TOTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_ADDITEMS1.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tablePARTY_ADDITEMS1.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablePARTY_ADDITEMS1.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablePARTY_ADDITEMS1.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablePARTY_ADDITEMS1.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.HALLTAXFLAGColumn)
        End Function
        
        Public Sub SetHALLTAXFLAGNull()
            Me(Me.tablePARTY_ADDITEMS1.HALLTAXFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADVANCENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.ADVANCEColumn)
        End Function
        
        Public Sub SetADVANCENull()
            Me(Me.tablePARTY_ADDITEMS1.ADVANCEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.HALLAMOUNTColumn)
        End Function
        
        Public Sub SetHALLAMOUNTNull()
            Me(Me.tablePARTY_ADDITEMS1.HALLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.HALLTAXPERCColumn)
        End Function
        
        Public Sub SetHALLTAXPERCNull()
            Me(Me.tablePARTY_ADDITEMS1.HALLTAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.HALLTAXAMOUNTColumn)
        End Function
        
        Public Sub SetHALLTAXAMOUNTNull()
            Me(Me.tablePARTY_ADDITEMS1.HALLTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGTARIFFAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.BOOKINGTARIFFAMOUNTColumn)
        End Function
        
        Public Sub SetBOOKINGTARIFFAMOUNTNull()
            Me(Me.tablePARTY_ADDITEMS1.BOOKINGTARIFFAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEXCESSTARIFFAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.EXCESSTARIFFAMOUNTColumn)
        End Function
        
        Public Sub SetEXCESSTARIFFAMOUNTNull()
            Me(Me.tablePARTY_ADDITEMS1.EXCESSTARIFFAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.RESTAMOUNTColumn)
        End Function
        
        Public Sub SetRESTAMOUNTNull()
            Me(Me.tablePARTY_ADDITEMS1.RESTAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.RESTTAXAMOUNTColumn)
        End Function
        
        Public Sub SetRESTTAXAMOUNTNull()
            Me(Me.tablePARTY_ADDITEMS1.RESTTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRMENTAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.ARRMENTAMOUNTColumn)
        End Function
        
        Public Sub SetARRMENTAMOUNTNull()
            Me(Me.tablePARTY_ADDITEMS1.ARRMENTAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRMENTTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.ARRMENTTAXAMOUNTColumn)
        End Function
        
        Public Sub SetARRMENTTAXAMOUNTNull()
            Me(Me.tablePARTY_ADDITEMS1.ARRMENTTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.RECEIPTNOColumn)
        End Function
        
        Public Sub SetRECEIPTNONull()
            Me(Me.tablePARTY_ADDITEMS1.RECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.RECEIPTDATEColumn)
        End Function
        
        Public Sub SetRECEIPTDATENull()
            Me(Me.tablePARTY_ADDITEMS1.RECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.HALLCANCELAMOUNTColumn)
        End Function
        
        Public Sub SetHALLCANCELAMOUNTNull()
            Me(Me.tablePARTY_ADDITEMS1.HALLCANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.RESCANCELAMOUNTColumn)
        End Function
        
        Public Sub SetRESCANCELAMOUNTNull()
            Me(Me.tablePARTY_ADDITEMS1.RESCANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.ARRCANCELAMOUNTColumn)
        End Function
        
        Public Sub SetARRCANCELAMOUNTNull()
            Me(Me.tablePARTY_ADDITEMS1.ARRCANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePARTY_ADDITEMS1.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablePARTY_ADDITEMS1.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tablePARTY_ADDITEMS1.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMHRSNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.FROMHRSColumn)
        End Function
        
        Public Sub SetFROMHRSNull()
            Me(Me.tablePARTY_ADDITEMS1.FROMHRSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOHRSNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.TOHRSColumn)
        End Function
        
        Public Sub SetTOHRSNull()
            Me(Me.tablePARTY_ADDITEMS1.TOHRSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.CANCELDATEColumn)
        End Function
        
        Public Sub SetCANCELDATENull()
            Me(Me.tablePARTY_ADDITEMS1.CANCELDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNETPAYABLENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.NETPAYABLEColumn)
        End Function
        
        Public Sub SetNETPAYABLENull()
            Me(Me.tablePARTY_ADDITEMS1.NETPAYABLEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.SBFCHARGEColumn)
        End Function
        
        Public Sub SetSBFCHARGENull()
            Me(Me.tablePARTY_ADDITEMS1.SBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.TARIFFTAXAMOUNTColumn)
        End Function
        
        Public Sub SetTARIFFTAXAMOUNTNull()
            Me(Me.tablePARTY_ADDITEMS1.TARIFFTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.BOOKINGOCCUPANCYColumn)
        End Function
        
        Public Sub SetBOOKINGOCCUPANCYNull()
            Me(Me.tablePARTY_ADDITEMS1.BOOKINGOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLINGOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.BILLINGOCCUPANCYColumn)
        End Function
        
        Public Sub SetBILLINGOCCUPANCYNull()
            Me(Me.tablePARTY_ADDITEMS1.BILLINGOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsABOOKINGOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.ABOOKINGOCCUPANCYColumn)
        End Function
        
        Public Sub SetABOOKINGOCCUPANCYNull()
            Me(Me.tablePARTY_ADDITEMS1.ABOOKINGOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsABILLINGOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.ABILLINGOCCUPANCYColumn)
        End Function
        
        Public Sub SetABILLINGOCCUPANCYNull()
            Me(Me.tablePARTY_ADDITEMS1.ABILLINGOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsALLOWEDOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.ALLOWEDOCCUPANCYColumn)
        End Function
        
        Public Sub SetALLOWEDOCCUPANCYNull()
            Me(Me.tablePARTY_ADDITEMS1.ALLOWEDOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDIFFOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.DIFFOCCUPANCYColumn)
        End Function
        
        Public Sub SetDIFFOCCUPANCYNull()
            Me(Me.tablePARTY_ADDITEMS1.DIFFOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallamtNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.hallamtColumn)
        End Function
        
        Public Sub SethallamtNull()
            Me(Me.tablePARTY_ADDITEMS1.hallamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalltaxamtNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.halltaxamtColumn)
        End Function
        
        Public Sub SethalltaxamtNull()
            Me(Me.tablePARTY_ADDITEMS1.halltaxamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallnetamtNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.hallnetamtColumn)
        End Function
        
        Public Sub SethallnetamtNull()
            Me(Me.tablePARTY_ADDITEMS1.hallnetamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrcamtNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.rcamtColumn)
        End Function
        
        Public Sub SetrcamtNull()
            Me(Me.tablePARTY_ADDITEMS1.rcamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.RESAMTColumn)
        End Function
        
        Public Sub SetRESAMTNull()
            Me(Me.tablePARTY_ADDITEMS1.RESAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTAXAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.RESTAXAMTColumn)
        End Function
        
        Public Sub SetRESTAXAMTNull()
            Me(Me.tablePARTY_ADDITEMS1.RESTAXAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTOTALAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.RESTOTALAMTColumn)
        End Function
        
        Public Sub SetRESTOTALAMTNull()
            Me(Me.tablePARTY_ADDITEMS1.RESTOTALAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESSBFAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.RESSBFAMTColumn)
        End Function
        
        Public Sub SetRESSBFAMTNull()
            Me(Me.tablePARTY_ADDITEMS1.RESSBFAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBARAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.BARAMTColumn)
        End Function
        
        Public Sub SetBARAMTNull()
            Me(Me.tablePARTY_ADDITEMS1.BARAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBARTAXAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.BARTAXAMTColumn)
        End Function
        
        Public Sub SetBARTAXAMTNull()
            Me(Me.tablePARTY_ADDITEMS1.BARTAXAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBARTOTALAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.BARTOTALAMTColumn)
        End Function
        
        Public Sub SetBARTOTALAMTNull()
            Me(Me.tablePARTY_ADDITEMS1.BARTOTALAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBARSBFAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.BARSBFAMTColumn)
        End Function
        
        Public Sub SetBARSBFAMTNull()
            Me(Me.tablePARTY_ADDITEMS1.BARSBFAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARSBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.TARSBFCHARGEColumn)
        End Function
        
        Public Sub SetTARSBFCHARGENull()
            Me(Me.tablePARTY_ADDITEMS1.TARSBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.TRATEColumn)
        End Function
        
        Public Sub SetTRATENull()
            Me(Me.tablePARTY_ADDITEMS1.TRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.DRATEColumn)
        End Function
        
        Public Sub SetDRATENull()
            Me(Me.tablePARTY_ADDITEMS1.DRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDIFFVALUENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.DIFFVALUEColumn)
        End Function
        
        Public Sub SetDIFFVALUENull()
            Me(Me.tablePARTY_ADDITEMS1.DIFFVALUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGVALUENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.BOOKINGVALUEColumn)
        End Function
        
        Public Sub SetBOOKINGVALUENull()
            Me(Me.tablePARTY_ADDITEMS1.BOOKINGVALUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFVALUENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.TARIFFVALUEColumn)
        End Function
        
        Public Sub SetTARIFFVALUENull()
            Me(Me.tablePARTY_ADDITEMS1.TARIFFVALUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFSBFNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.TARIFFSBFColumn)
        End Function
        
        Public Sub SetTARIFFSBFNull()
            Me(Me.tablePARTY_ADDITEMS1.TARIFFSBFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFTAXAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.TARIFFTAXAMTColumn)
        End Function
        
        Public Sub SetTARIFFTAXAMTNull()
            Me(Me.tablePARTY_ADDITEMS1.TARIFFTAXAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.ARRAMTColumn)
        End Function
        
        Public Sub SetARRAMTNull()
            Me(Me.tablePARTY_ADDITEMS1.ARRAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRTAXAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.ARRTAXAMTColumn)
        End Function
        
        Public Sub SetARRTAXAMTNull()
            Me(Me.tablePARTY_ADDITEMS1.ARRTAXAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRTOTALAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.ARRTOTALAMTColumn)
        End Function
        
        Public Sub SetARRTOTALAMTNull()
            Me(Me.tablePARTY_ADDITEMS1.ARRTOTALAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRSBFAMTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.ARRSBFAMTColumn)
        End Function
        
        Public Sub SetARRSBFAMTNull()
            Me(Me.tablePARTY_ADDITEMS1.ARRSBFAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXTOTALNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.TAXTOTALColumn)
        End Function
        
        Public Sub SetTAXTOTALNull()
            Me(Me.tablePARTY_ADDITEMS1.TAXTOTALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTAXNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.STAXColumn)
        End Function
        
        Public Sub SetSTAXNull()
            Me(Me.tablePARTY_ADDITEMS1.STAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROSSTOTALNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.GROSSTOTALColumn)
        End Function
        
        Public Sub SetGROSSTOTALNull()
            Me(Me.tablePARTY_ADDITEMS1.GROSSTOTALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNETTOTALNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.NETTOTALColumn)
        End Function
        
        Public Sub SetNETTOTALNull()
            Me(Me.tablePARTY_ADDITEMS1.NETTOTALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstbillamountNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.tbillamountColumn)
        End Function
        
        Public Sub SettbillamountNull()
            Me(Me.tablePARTY_ADDITEMS1.tbillamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSBFTAXNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.SBFTAXColumn)
        End Function
        
        Public Sub SetSBFTAXNull()
            Me(Me.tablePARTY_ADDITEMS1.SBFTAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePARTY_ADDITEMS1.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.CONTColumn)
        End Function
        
        Public Sub SetCONTNull()
            Me(Me.tablePARTY_ADDITEMS1.CONTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVATNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.VATColumn)
        End Function
        
        Public Sub SetVATNull()
            Me(Me.tablePARTY_ADDITEMS1.VATColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsINVOICENONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.INVOICENOColumn)
        End Function
        
        Public Sub SetINVOICENONull()
            Me(Me.tablePARTY_ADDITEMS1.INVOICENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvegNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.vegColumn)
        End Function
        
        Public Sub SetvegNull()
            Me(Me.tablePARTY_ADDITEMS1.vegColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnonvegNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.nonvegColumn)
        End Function
        
        Public Sub SetnonvegNull()
            Me(Me.tablePARTY_ADDITEMS1.nonvegColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVoidNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.VoidColumn)
        End Function
        
        Public Sub SetVoidNull()
            Me(Me.tablePARTY_ADDITEMS1.VoidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.VEGRATEColumn)
        End Function
        
        Public Sub SetVEGRATENull()
            Me(Me.tablePARTY_ADDITEMS1.VEGRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNONVEGRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ADDITEMS1.NONVEGRATEColumn)
        End Function
        
        Public Sub SetNONVEGRATENull()
            Me(Me.tablePARTY_ADDITEMS1.NONVEGRATEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ADDITEMS1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_ADDITEMS1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_ADDITEMS1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_ADDITEMS1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RESERVATIONDETAILDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnGUESTNAME As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnHALLNETAMOUNT As DataColumn
        
        Private columnDISCOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnHALLTYPE As DataColumn
        
        Private columnHALLTYPEDESC As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_RESERVATIONDETAIL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property GUESTNAMEColumn As DataColumn
            Get
                Return Me.columnGUESTNAME
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property HALLNETAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLNETAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property DISCOUNTColumn As DataColumn
            Get
                Return Me.columnDISCOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property HALLTYPEColumn As DataColumn
            Get
                Return Me.columnHALLTYPE
            End Get
        End Property
        
        Friend ReadOnly Property HALLTYPEDESCColumn As DataColumn
            Get
                Return Me.columnHALLTYPEDESC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_RESERVATIONDETAILRow
            Get
                Return CType(Me.Rows(index),PARTY_RESERVATIONDETAILRow)
            End Get
        End Property
        
        Public Event PARTY_RESERVATIONDETAILRowChanged As PARTY_RESERVATIONDETAILRowChangeEventHandler
        
        Public Event PARTY_RESERVATIONDETAILRowChanging As PARTY_RESERVATIONDETAILRowChangeEventHandler
        
        Public Event PARTY_RESERVATIONDETAILRowDeleted As PARTY_RESERVATIONDETAILRowChangeEventHandler
        
        Public Event PARTY_RESERVATIONDETAILRowDeleting As PARTY_RESERVATIONDETAILRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_RESERVATIONDETAILRow(ByVal row As PARTY_RESERVATIONDETAILRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_RESERVATIONDETAILRow(ByVal BOOKINGNO As Decimal, ByVal PARTYDATE As Date, ByVal MCODE As String, ByVal ASSOCIATENAME As String, ByVal GUESTNAME As String, ByVal BOOKINGDATE As Date, ByVal DESCRIPTION As String, ByVal FREEZE As String, ByVal HALLNETAMOUNT As Decimal, ByVal DISCOUNT As Decimal, ByVal TOTALAMOUNT As Decimal, ByVal HALLCODE As String, ByVal HALLTYPE As String, ByVal HALLTYPEDESC As String) As PARTY_RESERVATIONDETAILRow
            Dim rowPARTY_RESERVATIONDETAILRow As PARTY_RESERVATIONDETAILRow = CType(Me.NewRow,PARTY_RESERVATIONDETAILRow)
            rowPARTY_RESERVATIONDETAILRow.ItemArray = New Object() {BOOKINGNO, PARTYDATE, MCODE, ASSOCIATENAME, GUESTNAME, BOOKINGDATE, DESCRIPTION, FREEZE, HALLNETAMOUNT, DISCOUNT, TOTALAMOUNT, HALLCODE, HALLTYPE, HALLTYPEDESC}
            Me.Rows.Add(rowPARTY_RESERVATIONDETAILRow)
            Return rowPARTY_RESERVATIONDETAILRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_RESERVATIONDETAILDataTable = CType(MyBase.Clone,PARTY_RESERVATIONDETAILDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_RESERVATIONDETAILDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnGUESTNAME = Me.Columns("GUESTNAME")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnHALLNETAMOUNT = Me.Columns("HALLNETAMOUNT")
            Me.columnDISCOUNT = Me.Columns("DISCOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnHALLTYPE = Me.Columns("HALLTYPE")
            Me.columnHALLTYPEDESC = Me.Columns("HALLTYPEDESC")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnGUESTNAME = New DataColumn("GUESTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGUESTNAME)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnHALLNETAMOUNT = New DataColumn("HALLNETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLNETAMOUNT)
            Me.columnDISCOUNT = New DataColumn("DISCOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDISCOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnHALLTYPE = New DataColumn("HALLTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTYPE)
            Me.columnHALLTYPEDESC = New DataColumn("HALLTYPEDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTYPEDESC)
            Me.columnGUESTNAME.ReadOnly = true
            Me.columnTOTALAMOUNT.ReadOnly = true
        End Sub
        
        Public Function NewPARTY_RESERVATIONDETAILRow() As PARTY_RESERVATIONDETAILRow
            Return CType(Me.NewRow,PARTY_RESERVATIONDETAILRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_RESERVATIONDETAILRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_RESERVATIONDETAILRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_RESERVATIONDETAILRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_RESERVATIONDETAILRowChanged(Me, New PARTY_RESERVATIONDETAILRowChangeEvent(CType(e.Row,PARTY_RESERVATIONDETAILRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_RESERVATIONDETAILRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_RESERVATIONDETAILRowChanging(Me, New PARTY_RESERVATIONDETAILRowChangeEvent(CType(e.Row,PARTY_RESERVATIONDETAILRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_RESERVATIONDETAILRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_RESERVATIONDETAILRowDeleted(Me, New PARTY_RESERVATIONDETAILRowChangeEvent(CType(e.Row,PARTY_RESERVATIONDETAILRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_RESERVATIONDETAILRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_RESERVATIONDETAILRowDeleting(Me, New PARTY_RESERVATIONDETAILRowChangeEvent(CType(e.Row,PARTY_RESERVATIONDETAILRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_RESERVATIONDETAILRow(ByVal row As PARTY_RESERVATIONDETAILRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RESERVATIONDETAILRow
        Inherits DataRow
        
        Private tablePARTY_RESERVATIONDETAIL As PARTY_RESERVATIONDETAILDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_RESERVATIONDETAIL = CType(Me.Table,PARTY_RESERVATIONDETAILDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESERVATIONDETAIL.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESERVATIONDETAIL.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESERVATIONDETAIL.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESERVATIONDETAIL.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESERVATIONDETAIL.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESERVATIONDETAIL.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESERVATIONDETAIL.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESERVATIONDETAIL.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property GUESTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESERVATIONDETAIL.GUESTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESERVATIONDETAIL.GUESTNAMEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESERVATIONDETAIL.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESERVATIONDETAIL.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESERVATIONDETAIL.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESERVATIONDETAIL.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESERVATIONDETAIL.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESERVATIONDETAIL.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property HALLNETAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESERVATIONDETAIL.HALLNETAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESERVATIONDETAIL.HALLNETAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property DISCOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESERVATIONDETAIL.DISCOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESERVATIONDETAIL.DISCOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESERVATIONDETAIL.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESERVATIONDETAIL.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESERVATIONDETAIL.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESERVATIONDETAIL.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property HALLTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESERVATIONDETAIL.HALLTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESERVATIONDETAIL.HALLTYPEColumn) = value
            End Set
        End Property
        
        Public Property HALLTYPEDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESERVATIONDETAIL.HALLTYPEDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESERVATIONDETAIL.HALLTYPEDESCColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESERVATIONDETAIL.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_RESERVATIONDETAIL.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESERVATIONDETAIL.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_RESERVATIONDETAIL.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESERVATIONDETAIL.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_RESERVATIONDETAIL.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESERVATIONDETAIL.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tablePARTY_RESERVATIONDETAIL.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGUESTNAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESERVATIONDETAIL.GUESTNAMEColumn)
        End Function
        
        Public Sub SetGUESTNAMENull()
            Me(Me.tablePARTY_RESERVATIONDETAIL.GUESTNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESERVATIONDETAIL.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_RESERVATIONDETAIL.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESERVATIONDETAIL.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablePARTY_RESERVATIONDETAIL.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESERVATIONDETAIL.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePARTY_RESERVATIONDETAIL.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLNETAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESERVATIONDETAIL.HALLNETAMOUNTColumn)
        End Function
        
        Public Sub SetHALLNETAMOUNTNull()
            Me(Me.tablePARTY_RESERVATIONDETAIL.HALLNETAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDISCOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESERVATIONDETAIL.DISCOUNTColumn)
        End Function
        
        Public Sub SetDISCOUNTNull()
            Me(Me.tablePARTY_RESERVATIONDETAIL.DISCOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESERVATIONDETAIL.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePARTY_RESERVATIONDETAIL.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESERVATIONDETAIL.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablePARTY_RESERVATIONDETAIL.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESERVATIONDETAIL.HALLTYPEColumn)
        End Function
        
        Public Sub SetHALLTYPENull()
            Me(Me.tablePARTY_RESERVATIONDETAIL.HALLTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTYPEDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESERVATIONDETAIL.HALLTYPEDESCColumn)
        End Function
        
        Public Sub SetHALLTYPEDESCNull()
            Me(Me.tablePARTY_RESERVATIONDETAIL.HALLTYPEDESCColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RESERVATIONDETAILRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_RESERVATIONDETAILRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_RESERVATIONDETAILRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_RESERVATIONDETAILRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RECEIPTREPORTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnPARTYRECEIPTNO As DataColumn
        
        Private columnPARTYRECEIPTDATE As DataColumn
        
        Private columnadduserid As DataColumn
        
        Private columnRECEIPTTYPE As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnReceiptheaddesc As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_RECEIPTREPORT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTNOColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTTYPEColumn As DataColumn
            Get
                Return Me.columnRECEIPTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheaddescColumn As DataColumn
            Get
                Return Me.columnReceiptheaddesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_RECEIPTREPORTRow
            Get
                Return CType(Me.Rows(index),PARTY_RECEIPTREPORTRow)
            End Get
        End Property
        
        Public Event PARTY_RECEIPTREPORTRowChanged As PARTY_RECEIPTREPORTRowChangeEventHandler
        
        Public Event PARTY_RECEIPTREPORTRowChanging As PARTY_RECEIPTREPORTRowChangeEventHandler
        
        Public Event PARTY_RECEIPTREPORTRowDeleted As PARTY_RECEIPTREPORTRowChangeEventHandler
        
        Public Event PARTY_RECEIPTREPORTRowDeleting As PARTY_RECEIPTREPORTRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_RECEIPTREPORTRow(ByVal row As PARTY_RECEIPTREPORTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_RECEIPTREPORTRow(ByVal BOOKINGNO As Decimal, ByVal AMOUNT As Decimal, ByVal PARTYRECEIPTNO As String, ByVal PARTYRECEIPTDATE As Date, ByVal adduserid As String, ByVal RECEIPTTYPE As String, ByVal PAYMENTMODE As String, ByVal Receiptheaddesc As String) As PARTY_RECEIPTREPORTRow
            Dim rowPARTY_RECEIPTREPORTRow As PARTY_RECEIPTREPORTRow = CType(Me.NewRow,PARTY_RECEIPTREPORTRow)
            rowPARTY_RECEIPTREPORTRow.ItemArray = New Object() {BOOKINGNO, AMOUNT, PARTYRECEIPTNO, PARTYRECEIPTDATE, adduserid, RECEIPTTYPE, PAYMENTMODE, Receiptheaddesc}
            Me.Rows.Add(rowPARTY_RECEIPTREPORTRow)
            Return rowPARTY_RECEIPTREPORTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_RECEIPTREPORTDataTable = CType(MyBase.Clone,PARTY_RECEIPTREPORTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_RECEIPTREPORTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnPARTYRECEIPTNO = Me.Columns("PARTYRECEIPTNO")
            Me.columnPARTYRECEIPTDATE = Me.Columns("PARTYRECEIPTDATE")
            Me.columnadduserid = Me.Columns("adduserid")
            Me.columnRECEIPTTYPE = Me.Columns("RECEIPTTYPE")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnReceiptheaddesc = Me.Columns("Receiptheaddesc")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnPARTYRECEIPTNO = New DataColumn("PARTYRECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTNO)
            Me.columnPARTYRECEIPTDATE = New DataColumn("PARTYRECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTDATE)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
            Me.columnRECEIPTTYPE = New DataColumn("RECEIPTTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTTYPE)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnReceiptheaddesc = New DataColumn("Receiptheaddesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheaddesc)
        End Sub
        
        Public Function NewPARTY_RECEIPTREPORTRow() As PARTY_RECEIPTREPORTRow
            Return CType(Me.NewRow,PARTY_RECEIPTREPORTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_RECEIPTREPORTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_RECEIPTREPORTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_RECEIPTREPORTRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_RECEIPTREPORTRowChanged(Me, New PARTY_RECEIPTREPORTRowChangeEvent(CType(e.Row,PARTY_RECEIPTREPORTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_RECEIPTREPORTRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_RECEIPTREPORTRowChanging(Me, New PARTY_RECEIPTREPORTRowChangeEvent(CType(e.Row,PARTY_RECEIPTREPORTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_RECEIPTREPORTRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_RECEIPTREPORTRowDeleted(Me, New PARTY_RECEIPTREPORTRowChangeEvent(CType(e.Row,PARTY_RECEIPTREPORTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_RECEIPTREPORTRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_RECEIPTREPORTRowDeleting(Me, New PARTY_RECEIPTREPORTRowChangeEvent(CType(e.Row,PARTY_RECEIPTREPORTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_RECEIPTREPORTRow(ByVal row As PARTY_RECEIPTREPORTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RECEIPTREPORTRow
        Inherits DataRow
        
        Private tablePARTY_RECEIPTREPORT As PARTY_RECEIPTREPORTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_RECEIPTREPORT = CType(Me.Table,PARTY_RECEIPTREPORTDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.adduseridColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.RECEIPTTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.RECEIPTTYPEColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.PAYMENTMODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property Receiptheaddesc As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.ReceiptheaddescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.ReceiptheaddescColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_RECEIPTREPORT.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_RECEIPTREPORT.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTNOColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTNONull()
            Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTDATEColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTDATENull()
            Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tablePARTY_RECEIPTREPORT.adduseridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.RECEIPTTYPEColumn)
        End Function
        
        Public Sub SetRECEIPTTYPENull()
            Me(Me.tablePARTY_RECEIPTREPORT.RECEIPTTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYMENTMODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.PAYMENTMODEColumn)
        End Function
        
        Public Sub SetPAYMENTMODENull()
            Me(Me.tablePARTY_RECEIPTREPORT.PAYMENTMODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheaddescNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.ReceiptheaddescColumn)
        End Function
        
        Public Sub SetReceiptheaddescNull()
            Me(Me.tablePARTY_RECEIPTREPORT.ReceiptheaddescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RECEIPTREPORTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_RECEIPTREPORTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_RECEIPTREPORTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_RECEIPTREPORTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RECEIPTREPORT1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnPARTYRECEIPTNO As DataColumn
        
        Private columnPARTYRECEIPTDATE As DataColumn
        
        Private columnadduserid As DataColumn
        
        Private columnRECEIPTTYPE As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnReceiptheaddesc As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_RECEIPTREPORT1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTNOColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTTYPEColumn As DataColumn
            Get
                Return Me.columnRECEIPTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheaddescColumn As DataColumn
            Get
                Return Me.columnReceiptheaddesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_RECEIPTREPORT1Row
            Get
                Return CType(Me.Rows(index),PARTY_RECEIPTREPORT1Row)
            End Get
        End Property
        
        Public Event PARTY_RECEIPTREPORT1RowChanged As PARTY_RECEIPTREPORT1RowChangeEventHandler
        
        Public Event PARTY_RECEIPTREPORT1RowChanging As PARTY_RECEIPTREPORT1RowChangeEventHandler
        
        Public Event PARTY_RECEIPTREPORT1RowDeleted As PARTY_RECEIPTREPORT1RowChangeEventHandler
        
        Public Event PARTY_RECEIPTREPORT1RowDeleting As PARTY_RECEIPTREPORT1RowChangeEventHandler
        
        Public Overloads Sub AddPARTY_RECEIPTREPORT1Row(ByVal row As PARTY_RECEIPTREPORT1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_RECEIPTREPORT1Row(ByVal BOOKINGNO As Decimal, ByVal AMOUNT As Decimal, ByVal PARTYRECEIPTNO As String, ByVal PARTYRECEIPTDATE As Date, ByVal adduserid As String, ByVal RECEIPTTYPE As String, ByVal PAYMENTMODE As String, ByVal Receiptheaddesc As String) As PARTY_RECEIPTREPORT1Row
            Dim rowPARTY_RECEIPTREPORT1Row As PARTY_RECEIPTREPORT1Row = CType(Me.NewRow,PARTY_RECEIPTREPORT1Row)
            rowPARTY_RECEIPTREPORT1Row.ItemArray = New Object() {BOOKINGNO, AMOUNT, PARTYRECEIPTNO, PARTYRECEIPTDATE, adduserid, RECEIPTTYPE, PAYMENTMODE, Receiptheaddesc}
            Me.Rows.Add(rowPARTY_RECEIPTREPORT1Row)
            Return rowPARTY_RECEIPTREPORT1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_RECEIPTREPORT1DataTable = CType(MyBase.Clone,PARTY_RECEIPTREPORT1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_RECEIPTREPORT1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnPARTYRECEIPTNO = Me.Columns("PARTYRECEIPTNO")
            Me.columnPARTYRECEIPTDATE = Me.Columns("PARTYRECEIPTDATE")
            Me.columnadduserid = Me.Columns("adduserid")
            Me.columnRECEIPTTYPE = Me.Columns("RECEIPTTYPE")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnReceiptheaddesc = Me.Columns("Receiptheaddesc")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnPARTYRECEIPTNO = New DataColumn("PARTYRECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTNO)
            Me.columnPARTYRECEIPTDATE = New DataColumn("PARTYRECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTDATE)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
            Me.columnRECEIPTTYPE = New DataColumn("RECEIPTTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTTYPE)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnReceiptheaddesc = New DataColumn("Receiptheaddesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheaddesc)
        End Sub
        
        Public Function NewPARTY_RECEIPTREPORT1Row() As PARTY_RECEIPTREPORT1Row
            Return CType(Me.NewRow,PARTY_RECEIPTREPORT1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_RECEIPTREPORT1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_RECEIPTREPORT1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_RECEIPTREPORT1RowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_RECEIPTREPORT1RowChanged(Me, New PARTY_RECEIPTREPORT1RowChangeEvent(CType(e.Row,PARTY_RECEIPTREPORT1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_RECEIPTREPORT1RowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_RECEIPTREPORT1RowChanging(Me, New PARTY_RECEIPTREPORT1RowChangeEvent(CType(e.Row,PARTY_RECEIPTREPORT1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_RECEIPTREPORT1RowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_RECEIPTREPORT1RowDeleted(Me, New PARTY_RECEIPTREPORT1RowChangeEvent(CType(e.Row,PARTY_RECEIPTREPORT1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_RECEIPTREPORT1RowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_RECEIPTREPORT1RowDeleting(Me, New PARTY_RECEIPTREPORT1RowChangeEvent(CType(e.Row,PARTY_RECEIPTREPORT1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_RECEIPTREPORT1Row(ByVal row As PARTY_RECEIPTREPORT1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RECEIPTREPORT1Row
        Inherits DataRow
        
        Private tablePARTY_RECEIPTREPORT1 As PARTY_RECEIPTREPORT1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_RECEIPTREPORT1 = CType(Me.Table,PARTY_RECEIPTREPORT1DataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT1.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT1.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT1.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT1.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT1.PARTYRECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT1.PARTYRECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT1.PARTYRECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT1.PARTYRECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT1.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT1.adduseridColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT1.RECEIPTTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT1.RECEIPTTYPEColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT1.PAYMENTMODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT1.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property Receiptheaddesc As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT1.ReceiptheaddescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT1.ReceiptheaddescColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT1.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_RECEIPTREPORT1.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT1.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_RECEIPTREPORT1.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT1.PARTYRECEIPTNOColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTNONull()
            Me(Me.tablePARTY_RECEIPTREPORT1.PARTYRECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT1.PARTYRECEIPTDATEColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTDATENull()
            Me(Me.tablePARTY_RECEIPTREPORT1.PARTYRECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT1.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tablePARTY_RECEIPTREPORT1.adduseridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT1.RECEIPTTYPEColumn)
        End Function
        
        Public Sub SetRECEIPTTYPENull()
            Me(Me.tablePARTY_RECEIPTREPORT1.RECEIPTTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYMENTMODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT1.PAYMENTMODEColumn)
        End Function
        
        Public Sub SetPAYMENTMODENull()
            Me(Me.tablePARTY_RECEIPTREPORT1.PAYMENTMODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheaddescNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT1.ReceiptheaddescColumn)
        End Function
        
        Public Sub SetReceiptheaddescNull()
            Me(Me.tablePARTY_RECEIPTREPORT1.ReceiptheaddescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RECEIPTREPORT1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_RECEIPTREPORT1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_RECEIPTREPORT1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_RECEIPTREPORT1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BOOKDETAILSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMEMBERID As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnVEG As DataColumn
        
        Private columnNONVEG As DataColumn
        
        Private columnGUESTNAME As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnFROMTIME As DataColumn
        
        Private columnTOTIME As DataColumn
        
        Private columnPARTYRECEIPTNO As DataColumn
        
        Private columnPARTYRECEIPTDATE As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnReceiptheaddesc As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnRECEIPTTYPE As DataColumn
        
        Private columnadduserid As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_BOOKDETAILS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERIDColumn As DataColumn
            Get
                Return Me.columnMEMBERID
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property VEGColumn As DataColumn
            Get
                Return Me.columnVEG
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGColumn As DataColumn
            Get
                Return Me.columnNONVEG
            End Get
        End Property
        
        Friend ReadOnly Property GUESTNAMEColumn As DataColumn
            Get
                Return Me.columnGUESTNAME
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property FROMTIMEColumn As DataColumn
            Get
                Return Me.columnFROMTIME
            End Get
        End Property
        
        Friend ReadOnly Property TOTIMEColumn As DataColumn
            Get
                Return Me.columnTOTIME
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTNOColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheaddescColumn As DataColumn
            Get
                Return Me.columnReceiptheaddesc
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTTYPEColumn As DataColumn
            Get
                Return Me.columnRECEIPTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_BOOKDETAILSRow
            Get
                Return CType(Me.Rows(index),PARTY_BOOKDETAILSRow)
            End Get
        End Property
        
        Public Event PARTY_BOOKDETAILSRowChanged As PARTY_BOOKDETAILSRowChangeEventHandler
        
        Public Event PARTY_BOOKDETAILSRowChanging As PARTY_BOOKDETAILSRowChangeEventHandler
        
        Public Event PARTY_BOOKDETAILSRowDeleted As PARTY_BOOKDETAILSRowChangeEventHandler
        
        Public Event PARTY_BOOKDETAILSRowDeleting As PARTY_BOOKDETAILSRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_BOOKDETAILSRow(ByVal row As PARTY_BOOKDETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_BOOKDETAILSRow( _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal MEMBERID As String,  _
                    ByVal ASSOCIATENAME As String,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal VEG As String,  _
                    ByVal NONVEG As String,  _
                    ByVal GUESTNAME As String,  _
                    ByVal HALLCODE As String,  _
                    ByVal FROMTIME As Decimal,  _
                    ByVal TOTIME As Decimal,  _
                    ByVal PARTYRECEIPTNO As String,  _
                    ByVal PARTYRECEIPTDATE As Date,  _
                    ByVal PAYMENTMODE As String,  _
                    ByVal Receiptheaddesc As String,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal RECEIPTTYPE As String,  _
                    ByVal adduserid As String) As PARTY_BOOKDETAILSRow
            Dim rowPARTY_BOOKDETAILSRow As PARTY_BOOKDETAILSRow = CType(Me.NewRow,PARTY_BOOKDETAILSRow)
            rowPARTY_BOOKDETAILSRow.ItemArray = New Object() {BOOKINGNO, BOOKINGDATE, PARTYDATE, MEMBERID, ASSOCIATENAME, DESCRIPTION, OCCUPANCY, VEG, NONVEG, GUESTNAME, HALLCODE, FROMTIME, TOTIME, PARTYRECEIPTNO, PARTYRECEIPTDATE, PAYMENTMODE, Receiptheaddesc, AMOUNT, RECEIPTTYPE, adduserid}
            Me.Rows.Add(rowPARTY_BOOKDETAILSRow)
            Return rowPARTY_BOOKDETAILSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_BOOKDETAILSDataTable = CType(MyBase.Clone,PARTY_BOOKDETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_BOOKDETAILSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMEMBERID = Me.Columns("MEMBERID")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnVEG = Me.Columns("VEG")
            Me.columnNONVEG = Me.Columns("NONVEG")
            Me.columnGUESTNAME = Me.Columns("GUESTNAME")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnFROMTIME = Me.Columns("FROMTIME")
            Me.columnTOTIME = Me.Columns("TOTIME")
            Me.columnPARTYRECEIPTNO = Me.Columns("PARTYRECEIPTNO")
            Me.columnPARTYRECEIPTDATE = Me.Columns("PARTYRECEIPTDATE")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnReceiptheaddesc = Me.Columns("Receiptheaddesc")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnRECEIPTTYPE = Me.Columns("RECEIPTTYPE")
            Me.columnadduserid = Me.Columns("adduserid")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMEMBERID = New DataColumn("MEMBERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERID)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnVEG = New DataColumn("VEG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEG)
            Me.columnNONVEG = New DataColumn("NONVEG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEG)
            Me.columnGUESTNAME = New DataColumn("GUESTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGUESTNAME)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnFROMTIME = New DataColumn("FROMTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMTIME)
            Me.columnTOTIME = New DataColumn("TOTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTIME)
            Me.columnPARTYRECEIPTNO = New DataColumn("PARTYRECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTNO)
            Me.columnPARTYRECEIPTDATE = New DataColumn("PARTYRECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTDATE)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnReceiptheaddesc = New DataColumn("Receiptheaddesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheaddesc)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnRECEIPTTYPE = New DataColumn("RECEIPTTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTTYPE)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
        End Sub
        
        Public Function NewPARTY_BOOKDETAILSRow() As PARTY_BOOKDETAILSRow
            Return CType(Me.NewRow,PARTY_BOOKDETAILSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_BOOKDETAILSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_BOOKDETAILSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_BOOKDETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_BOOKDETAILSRowChanged(Me, New PARTY_BOOKDETAILSRowChangeEvent(CType(e.Row,PARTY_BOOKDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_BOOKDETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_BOOKDETAILSRowChanging(Me, New PARTY_BOOKDETAILSRowChangeEvent(CType(e.Row,PARTY_BOOKDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_BOOKDETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_BOOKDETAILSRowDeleted(Me, New PARTY_BOOKDETAILSRowChangeEvent(CType(e.Row,PARTY_BOOKDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_BOOKDETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_BOOKDETAILSRowDeleting(Me, New PARTY_BOOKDETAILSRowChangeEvent(CType(e.Row,PARTY_BOOKDETAILSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_BOOKDETAILSRow(ByVal row As PARTY_BOOKDETAILSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BOOKDETAILSRow
        Inherits DataRow
        
        Private tablePARTY_BOOKDETAILS As PARTY_BOOKDETAILSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_BOOKDETAILS = CType(Me.Table,PARTY_BOOKDETAILSDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.MEMBERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.MEMBERIDColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property VEG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.VEGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.VEGColumn) = value
            End Set
        End Property
        
        Public Property NONVEG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.NONVEGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.NONVEGColumn) = value
            End Set
        End Property
        
        Public Property GUESTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.GUESTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.GUESTNAMEColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property FROMTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.FROMTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.FROMTIMEColumn) = value
            End Set
        End Property
        
        Public Property TOTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.TOTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.TOTIMEColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.PARTYRECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.PARTYRECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.PARTYRECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.PARTYRECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.PAYMENTMODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property Receiptheaddesc As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.ReceiptheaddescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.ReceiptheaddescColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.RECEIPTTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.RECEIPTTYPEColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.adduseridColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_BOOKDETAILS.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_BOOKDETAILS.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_BOOKDETAILS.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERIDNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.MEMBERIDColumn)
        End Function
        
        Public Sub SetMEMBERIDNull()
            Me(Me.tablePARTY_BOOKDETAILS.MEMBERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tablePARTY_BOOKDETAILS.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablePARTY_BOOKDETAILS.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablePARTY_BOOKDETAILS.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.VEGColumn)
        End Function
        
        Public Sub SetVEGNull()
            Me(Me.tablePARTY_BOOKDETAILS.VEGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNONVEGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.NONVEGColumn)
        End Function
        
        Public Sub SetNONVEGNull()
            Me(Me.tablePARTY_BOOKDETAILS.NONVEGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGUESTNAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.GUESTNAMEColumn)
        End Function
        
        Public Sub SetGUESTNAMENull()
            Me(Me.tablePARTY_BOOKDETAILS.GUESTNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablePARTY_BOOKDETAILS.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.FROMTIMEColumn)
        End Function
        
        Public Sub SetFROMTIMENull()
            Me(Me.tablePARTY_BOOKDETAILS.FROMTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.TOTIMEColumn)
        End Function
        
        Public Sub SetTOTIMENull()
            Me(Me.tablePARTY_BOOKDETAILS.TOTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.PARTYRECEIPTNOColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTNONull()
            Me(Me.tablePARTY_BOOKDETAILS.PARTYRECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.PARTYRECEIPTDATEColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTDATENull()
            Me(Me.tablePARTY_BOOKDETAILS.PARTYRECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYMENTMODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.PAYMENTMODEColumn)
        End Function
        
        Public Sub SetPAYMENTMODENull()
            Me(Me.tablePARTY_BOOKDETAILS.PAYMENTMODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheaddescNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.ReceiptheaddescColumn)
        End Function
        
        Public Sub SetReceiptheaddescNull()
            Me(Me.tablePARTY_BOOKDETAILS.ReceiptheaddescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_BOOKDETAILS.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.RECEIPTTYPEColumn)
        End Function
        
        Public Sub SetRECEIPTTYPENull()
            Me(Me.tablePARTY_BOOKDETAILS.RECEIPTTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tablePARTY_BOOKDETAILS.adduseridColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BOOKDETAILSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_BOOKDETAILSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_BOOKDETAILSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_BOOKDETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
