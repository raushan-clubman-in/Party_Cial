'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class Dataset1
    Inherits DataSet
    
    Private tablePARTY_VIEW_HALLSTATUS As PARTY_VIEW_HALLSTATUSDataTable
    
    Private tablePARTY_VIEW_BOOKING_DETAILS As PARTY_VIEW_BOOKING_DETAILSDataTable
    
    Private tableparty_view_hallhistory As party_view_hallhistoryDataTable
    
    Private tableVIEW_PARTY_CANCELLATIONHISTORY As VIEW_PARTY_CANCELLATIONHISTORYDataTable
    
    Private tableVIEW_PARTY_CANCELLATIONHISTORY1 As VIEW_PARTY_CANCELLATIONHISTORY1DataTable
    
    Private tableVIEW_PARTY_CATEGORYHISTORY As VIEW_PARTY_CATEGORYHISTORYDataTable
    
    Private tableVIEW_PARTY_GROUPHISTORY As VIEW_PARTY_GROUPHISTORYDataTable
    
    Private tableVIEW_PARTY_locationHISTORY As VIEW_PARTY_locationHISTORYDataTable
    
    Private tableVIEW_PARTY_MENUGROUPHISTORY As VIEW_PARTY_MENUGROUPHISTORYDataTable
    
    Private tableVIEW_PARTY_MENUHISTORY As VIEW_PARTY_MENUHISTORYDataTable
    
    Private tableVIEW_PARTY_PURPOSEHISTORY As VIEW_PARTY_PURPOSEHISTORYDataTable
    
    Private tableVIEW_PARTY_TARIFFHISTORY As VIEW_PARTY_TARIFFHISTORYDataTable
    
    Private tablemembermaster_view As membermaster_viewDataTable
    
    Private tableVIEW_MEMBERMASTER As VIEW_MEMBERMASTERDataTable
    
    Private tableparty_REST_itemwise As party_REST_itemwiseDataTable
    
    Private tableparty_arrangemaster_hdr As party_arrangemaster_hdrDataTable
    
    Private tableparty_restaurant As party_restaurantDataTable
    
    Private tableparty_grouping_details As party_grouping_detailsDataTable
    
    Private tableVIEW_PARTY_BOOKINGDETAILS As VIEW_PARTY_BOOKINGDETAILSDataTable
    
    Private tableCREDIT_MEMBER_MPOSTING As CREDIT_MEMBER_MPOSTINGDataTable
    
    Private tableVIEW_PARTY_BILLING As VIEW_PARTY_BILLINGDataTable
    
    Private tableParty_TariffHdr As Party_TariffHdrDataTable
    
    Private tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSDataTable
    
    Private tablePRATY_VIEW_PARTYHALLDETAILS As PRATY_VIEW_PARTYHALLDETAILSDataTable
    
    Private tablePRATY_VIEW_PARTYLIQURITEMS As PRATY_VIEW_PARTYLIQURITEMSDataTable
    
    Private tablePRATY_VIEW_PARTYHALLDETAILS1 As PRATY_VIEW_PARTYHALLDETAILS1DataTable
    
    Private tablePARTY_BAR_CONSUMPTION As PARTY_BAR_CONSUMPTIONDataTable
    
    Private tablePARTY_TAR_VIEW1 As PARTY_TAR_VIEW1DataTable
    
    Private tablePARTY_VIEW_HALLBOOKINGDETAILS As PARTY_VIEW_HALLBOOKINGDETAILSDataTable
    
    Private tablePARTY_RESTITEMS As PARTY_RESTITEMSDataTable
    
    Private tableVIEW_PARTY_BOOKINGDETAILS1 As VIEW_PARTY_BOOKINGDETAILS1DataTable
    
    Private tablepartyarrangementfinal As partyarrangementfinalDataTable
    
    Private tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW As PARTY_VIEW_HALLBOOKINGDETAILS_NEWDataTable
    
    Private tablepartyreceiptvoucher1 As partyreceiptvoucher1DataTable
    
    Private tablePARTY_VIEWHEAD As PARTY_VIEWHEADDataTable
    
    Private tablepartyreceiptvoucher As partyreceiptvoucherDataTable
    
    Private tablePARTY_MENU As PARTY_MENUDataTable
    
    Private tablePARTY_ARRANGE As PARTY_ARRANGEDataTable
    
    Private tableparty_arrangement_book As party_arrangement_bookDataTable
    
    Private tableparty_menu_book As party_menu_bookDataTable
    
    Private tablePARTY_MEN As PARTY_MENDataTable
    
    Private tablePAR_ARRANGEMENT As PAR_ARRANGEMENTDataTable
    
    Private tablePAR_HDR As PAR_HDRDataTable
    
    Private tablePAR_RECEIPTS As PAR_RECEIPTSDataTable
    
    Private tablePAR_RECEIPTS_REFUND As PAR_RECEIPTS_REFUNDDataTable
    
    Private tablepartyreceiptreport As partyreceiptreportDataTable
    
    Private tablePAR_HALLBOOKING As PAR_HALLBOOKINGDataTable
    
    Private tablepartyreceiptvoucher_CANCEL As partyreceiptvoucher_CANCELDataTable
    
    Private tablePARTY_ITEM_DISCOUNT As PARTY_ITEM_DISCOUNTDataTable
    
    Private tableHALLBOOKINGDISCOUNT As HALLBOOKINGDISCOUNTDataTable
    
    Private tableBANQUETFREEZEREPORT As BANQUETFREEZEREPORTDataTable
    
    Private tablepartyreceiptreport_REFUND As partyreceiptreport_REFUNDDataTable
    
    Private tabletotalbanquetreport As totalbanquetreportDataTable
    
    Private tablePAR_ADDITIONALITEMS As PAR_ADDITIONALITEMSDataTable
    
    Private tablePARTY_BOOKDETAILS As PARTY_BOOKDETAILSDataTable
    
    Private tablefoodorder1 As foodorder1DataTable
    
    Private tableparty_receiptsummary As party_receiptsummaryDataTable
    
    Private tableparty_book_memberwise As party_book_memberwiseDataTable
    
    Private tablePARTY_RECEIPTREPORT As PARTY_RECEIPTREPORTDataTable
    
    Private tablePARTY_BOOKDETAILS1 As PARTY_BOOKDETAILS1DataTable
    
    Private tablepartyreceipt_view As partyreceipt_viewDataTable
    
    Private tablePARTY_BILLDETAILS As PARTY_BILLDETAILSDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("PARTY_VIEW_HALLSTATUS")) Is Nothing) Then
                Me.Tables.Add(New PARTY_VIEW_HALLSTATUSDataTable(ds.Tables("PARTY_VIEW_HALLSTATUS")))
            End If
            If (Not (ds.Tables("PARTY_VIEW_BOOKING_DETAILS")) Is Nothing) Then
                Me.Tables.Add(New PARTY_VIEW_BOOKING_DETAILSDataTable(ds.Tables("PARTY_VIEW_BOOKING_DETAILS")))
            End If
            If (Not (ds.Tables("party_view_hallhistory")) Is Nothing) Then
                Me.Tables.Add(New party_view_hallhistoryDataTable(ds.Tables("party_view_hallhistory")))
            End If
            If (Not (ds.Tables("VIEW_PARTY_CANCELLATIONHISTORY")) Is Nothing) Then
                Me.Tables.Add(New VIEW_PARTY_CANCELLATIONHISTORYDataTable(ds.Tables("VIEW_PARTY_CANCELLATIONHISTORY")))
            End If
            If (Not (ds.Tables("VIEW_PARTY_CANCELLATIONHISTORY1")) Is Nothing) Then
                Me.Tables.Add(New VIEW_PARTY_CANCELLATIONHISTORY1DataTable(ds.Tables("VIEW_PARTY_CANCELLATIONHISTORY1")))
            End If
            If (Not (ds.Tables("VIEW_PARTY_CATEGORYHISTORY")) Is Nothing) Then
                Me.Tables.Add(New VIEW_PARTY_CATEGORYHISTORYDataTable(ds.Tables("VIEW_PARTY_CATEGORYHISTORY")))
            End If
            If (Not (ds.Tables("VIEW_PARTY_GROUPHISTORY")) Is Nothing) Then
                Me.Tables.Add(New VIEW_PARTY_GROUPHISTORYDataTable(ds.Tables("VIEW_PARTY_GROUPHISTORY")))
            End If
            If (Not (ds.Tables("VIEW_PARTY_locationHISTORY")) Is Nothing) Then
                Me.Tables.Add(New VIEW_PARTY_locationHISTORYDataTable(ds.Tables("VIEW_PARTY_locationHISTORY")))
            End If
            If (Not (ds.Tables("VIEW_PARTY_MENUGROUPHISTORY")) Is Nothing) Then
                Me.Tables.Add(New VIEW_PARTY_MENUGROUPHISTORYDataTable(ds.Tables("VIEW_PARTY_MENUGROUPHISTORY")))
            End If
            If (Not (ds.Tables("VIEW_PARTY_MENUHISTORY")) Is Nothing) Then
                Me.Tables.Add(New VIEW_PARTY_MENUHISTORYDataTable(ds.Tables("VIEW_PARTY_MENUHISTORY")))
            End If
            If (Not (ds.Tables("VIEW_PARTY_PURPOSEHISTORY")) Is Nothing) Then
                Me.Tables.Add(New VIEW_PARTY_PURPOSEHISTORYDataTable(ds.Tables("VIEW_PARTY_PURPOSEHISTORY")))
            End If
            If (Not (ds.Tables("VIEW_PARTY_TARIFFHISTORY")) Is Nothing) Then
                Me.Tables.Add(New VIEW_PARTY_TARIFFHISTORYDataTable(ds.Tables("VIEW_PARTY_TARIFFHISTORY")))
            End If
            If (Not (ds.Tables("membermaster_view")) Is Nothing) Then
                Me.Tables.Add(New membermaster_viewDataTable(ds.Tables("membermaster_view")))
            End If
            If (Not (ds.Tables("VIEW_MEMBERMASTER")) Is Nothing) Then
                Me.Tables.Add(New VIEW_MEMBERMASTERDataTable(ds.Tables("VIEW_MEMBERMASTER")))
            End If
            If (Not (ds.Tables("party_REST_itemwise")) Is Nothing) Then
                Me.Tables.Add(New party_REST_itemwiseDataTable(ds.Tables("party_REST_itemwise")))
            End If
            If (Not (ds.Tables("party_arrangemaster_hdr")) Is Nothing) Then
                Me.Tables.Add(New party_arrangemaster_hdrDataTable(ds.Tables("party_arrangemaster_hdr")))
            End If
            If (Not (ds.Tables("party_restaurant")) Is Nothing) Then
                Me.Tables.Add(New party_restaurantDataTable(ds.Tables("party_restaurant")))
            End If
            If (Not (ds.Tables("party_grouping_details")) Is Nothing) Then
                Me.Tables.Add(New party_grouping_detailsDataTable(ds.Tables("party_grouping_details")))
            End If
            If (Not (ds.Tables("VIEW_PARTY_BOOKINGDETAILS")) Is Nothing) Then
                Me.Tables.Add(New VIEW_PARTY_BOOKINGDETAILSDataTable(ds.Tables("VIEW_PARTY_BOOKINGDETAILS")))
            End If
            If (Not (ds.Tables("CREDIT_MEMBER_MPOSTING")) Is Nothing) Then
                Me.Tables.Add(New CREDIT_MEMBER_MPOSTINGDataTable(ds.Tables("CREDIT_MEMBER_MPOSTING")))
            End If
            If (Not (ds.Tables("VIEW_PARTY_BILLING")) Is Nothing) Then
                Me.Tables.Add(New VIEW_PARTY_BILLINGDataTable(ds.Tables("VIEW_PARTY_BILLING")))
            End If
            If (Not (ds.Tables("Party_TariffHdr")) Is Nothing) Then
                Me.Tables.Add(New Party_TariffHdrDataTable(ds.Tables("Party_TariffHdr")))
            End If
            If (Not (ds.Tables("PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS")) Is Nothing) Then
                Me.Tables.Add(New PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSDataTable(ds.Tables("PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS")))
            End If
            If (Not (ds.Tables("PRATY_VIEW_PARTYHALLDETAILS")) Is Nothing) Then
                Me.Tables.Add(New PRATY_VIEW_PARTYHALLDETAILSDataTable(ds.Tables("PRATY_VIEW_PARTYHALLDETAILS")))
            End If
            If (Not (ds.Tables("PRATY_VIEW_PARTYLIQURITEMS")) Is Nothing) Then
                Me.Tables.Add(New PRATY_VIEW_PARTYLIQURITEMSDataTable(ds.Tables("PRATY_VIEW_PARTYLIQURITEMS")))
            End If
            If (Not (ds.Tables("PRATY_VIEW_PARTYHALLDETAILS1")) Is Nothing) Then
                Me.Tables.Add(New PRATY_VIEW_PARTYHALLDETAILS1DataTable(ds.Tables("PRATY_VIEW_PARTYHALLDETAILS1")))
            End If
            If (Not (ds.Tables("PARTY_BAR_CONSUMPTION")) Is Nothing) Then
                Me.Tables.Add(New PARTY_BAR_CONSUMPTIONDataTable(ds.Tables("PARTY_BAR_CONSUMPTION")))
            End If
            If (Not (ds.Tables("PARTY_TAR_VIEW1")) Is Nothing) Then
                Me.Tables.Add(New PARTY_TAR_VIEW1DataTable(ds.Tables("PARTY_TAR_VIEW1")))
            End If
            If (Not (ds.Tables("PARTY_VIEW_HALLBOOKINGDETAILS")) Is Nothing) Then
                Me.Tables.Add(New PARTY_VIEW_HALLBOOKINGDETAILSDataTable(ds.Tables("PARTY_VIEW_HALLBOOKINGDETAILS")))
            End If
            If (Not (ds.Tables("PARTY_RESTITEMS")) Is Nothing) Then
                Me.Tables.Add(New PARTY_RESTITEMSDataTable(ds.Tables("PARTY_RESTITEMS")))
            End If
            If (Not (ds.Tables("VIEW_PARTY_BOOKINGDETAILS1")) Is Nothing) Then
                Me.Tables.Add(New VIEW_PARTY_BOOKINGDETAILS1DataTable(ds.Tables("VIEW_PARTY_BOOKINGDETAILS1")))
            End If
            If (Not (ds.Tables("partyarrangementfinal")) Is Nothing) Then
                Me.Tables.Add(New partyarrangementfinalDataTable(ds.Tables("partyarrangementfinal")))
            End If
            If (Not (ds.Tables("PARTY_VIEW_HALLBOOKINGDETAILS_NEW")) Is Nothing) Then
                Me.Tables.Add(New PARTY_VIEW_HALLBOOKINGDETAILS_NEWDataTable(ds.Tables("PARTY_VIEW_HALLBOOKINGDETAILS_NEW")))
            End If
            If (Not (ds.Tables("partyreceiptvoucher1")) Is Nothing) Then
                Me.Tables.Add(New partyreceiptvoucher1DataTable(ds.Tables("partyreceiptvoucher1")))
            End If
            If (Not (ds.Tables("PARTY_VIEWHEAD")) Is Nothing) Then
                Me.Tables.Add(New PARTY_VIEWHEADDataTable(ds.Tables("PARTY_VIEWHEAD")))
            End If
            If (Not (ds.Tables("partyreceiptvoucher")) Is Nothing) Then
                Me.Tables.Add(New partyreceiptvoucherDataTable(ds.Tables("partyreceiptvoucher")))
            End If
            If (Not (ds.Tables("PARTY_MENU")) Is Nothing) Then
                Me.Tables.Add(New PARTY_MENUDataTable(ds.Tables("PARTY_MENU")))
            End If
            If (Not (ds.Tables("PARTY_ARRANGE")) Is Nothing) Then
                Me.Tables.Add(New PARTY_ARRANGEDataTable(ds.Tables("PARTY_ARRANGE")))
            End If
            If (Not (ds.Tables("party_arrangement_book")) Is Nothing) Then
                Me.Tables.Add(New party_arrangement_bookDataTable(ds.Tables("party_arrangement_book")))
            End If
            If (Not (ds.Tables("party_menu_book")) Is Nothing) Then
                Me.Tables.Add(New party_menu_bookDataTable(ds.Tables("party_menu_book")))
            End If
            If (Not (ds.Tables("PARTY_MEN")) Is Nothing) Then
                Me.Tables.Add(New PARTY_MENDataTable(ds.Tables("PARTY_MEN")))
            End If
            If (Not (ds.Tables("PAR_ARRANGEMENT")) Is Nothing) Then
                Me.Tables.Add(New PAR_ARRANGEMENTDataTable(ds.Tables("PAR_ARRANGEMENT")))
            End If
            If (Not (ds.Tables("PAR_HDR")) Is Nothing) Then
                Me.Tables.Add(New PAR_HDRDataTable(ds.Tables("PAR_HDR")))
            End If
            If (Not (ds.Tables("PAR_RECEIPTS")) Is Nothing) Then
                Me.Tables.Add(New PAR_RECEIPTSDataTable(ds.Tables("PAR_RECEIPTS")))
            End If
            If (Not (ds.Tables("PAR_RECEIPTS_REFUND")) Is Nothing) Then
                Me.Tables.Add(New PAR_RECEIPTS_REFUNDDataTable(ds.Tables("PAR_RECEIPTS_REFUND")))
            End If
            If (Not (ds.Tables("partyreceiptreport")) Is Nothing) Then
                Me.Tables.Add(New partyreceiptreportDataTable(ds.Tables("partyreceiptreport")))
            End If
            If (Not (ds.Tables("PAR_HALLBOOKING")) Is Nothing) Then
                Me.Tables.Add(New PAR_HALLBOOKINGDataTable(ds.Tables("PAR_HALLBOOKING")))
            End If
            If (Not (ds.Tables("partyreceiptvoucher_CANCEL")) Is Nothing) Then
                Me.Tables.Add(New partyreceiptvoucher_CANCELDataTable(ds.Tables("partyreceiptvoucher_CANCEL")))
            End If
            If (Not (ds.Tables("PARTY_ITEM_DISCOUNT")) Is Nothing) Then
                Me.Tables.Add(New PARTY_ITEM_DISCOUNTDataTable(ds.Tables("PARTY_ITEM_DISCOUNT")))
            End If
            If (Not (ds.Tables("HALLBOOKINGDISCOUNT")) Is Nothing) Then
                Me.Tables.Add(New HALLBOOKINGDISCOUNTDataTable(ds.Tables("HALLBOOKINGDISCOUNT")))
            End If
            If (Not (ds.Tables("BANQUETFREEZEREPORT")) Is Nothing) Then
                Me.Tables.Add(New BANQUETFREEZEREPORTDataTable(ds.Tables("BANQUETFREEZEREPORT")))
            End If
            If (Not (ds.Tables("partyreceiptreport_REFUND")) Is Nothing) Then
                Me.Tables.Add(New partyreceiptreport_REFUNDDataTable(ds.Tables("partyreceiptreport_REFUND")))
            End If
            If (Not (ds.Tables("totalbanquetreport")) Is Nothing) Then
                Me.Tables.Add(New totalbanquetreportDataTable(ds.Tables("totalbanquetreport")))
            End If
            If (Not (ds.Tables("PAR_ADDITIONALITEMS")) Is Nothing) Then
                Me.Tables.Add(New PAR_ADDITIONALITEMSDataTable(ds.Tables("PAR_ADDITIONALITEMS")))
            End If
            If (Not (ds.Tables("PARTY_BOOKDETAILS")) Is Nothing) Then
                Me.Tables.Add(New PARTY_BOOKDETAILSDataTable(ds.Tables("PARTY_BOOKDETAILS")))
            End If
            If (Not (ds.Tables("foodorder1")) Is Nothing) Then
                Me.Tables.Add(New foodorder1DataTable(ds.Tables("foodorder1")))
            End If
            If (Not (ds.Tables("party_receiptsummary")) Is Nothing) Then
                Me.Tables.Add(New party_receiptsummaryDataTable(ds.Tables("party_receiptsummary")))
            End If
            If (Not (ds.Tables("party_book_memberwise")) Is Nothing) Then
                Me.Tables.Add(New party_book_memberwiseDataTable(ds.Tables("party_book_memberwise")))
            End If
            If (Not (ds.Tables("PARTY_RECEIPTREPORT")) Is Nothing) Then
                Me.Tables.Add(New PARTY_RECEIPTREPORTDataTable(ds.Tables("PARTY_RECEIPTREPORT")))
            End If
            If (Not (ds.Tables("PARTY_BOOKDETAILS1")) Is Nothing) Then
                Me.Tables.Add(New PARTY_BOOKDETAILS1DataTable(ds.Tables("PARTY_BOOKDETAILS1")))
            End If
            If (Not (ds.Tables("partyreceipt_view")) Is Nothing) Then
                Me.Tables.Add(New partyreceipt_viewDataTable(ds.Tables("partyreceipt_view")))
            End If
            If (Not (ds.Tables("PARTY_BILLDETAILS")) Is Nothing) Then
                Me.Tables.Add(New PARTY_BILLDETAILSDataTable(ds.Tables("PARTY_BILLDETAILS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_VIEW_HALLSTATUS As PARTY_VIEW_HALLSTATUSDataTable
        Get
            Return Me.tablePARTY_VIEW_HALLSTATUS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_VIEW_BOOKING_DETAILS As PARTY_VIEW_BOOKING_DETAILSDataTable
        Get
            Return Me.tablePARTY_VIEW_BOOKING_DETAILS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property party_view_hallhistory As party_view_hallhistoryDataTable
        Get
            Return Me.tableparty_view_hallhistory
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARTY_CANCELLATIONHISTORY As VIEW_PARTY_CANCELLATIONHISTORYDataTable
        Get
            Return Me.tableVIEW_PARTY_CANCELLATIONHISTORY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARTY_CANCELLATIONHISTORY1 As VIEW_PARTY_CANCELLATIONHISTORY1DataTable
        Get
            Return Me.tableVIEW_PARTY_CANCELLATIONHISTORY1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARTY_CATEGORYHISTORY As VIEW_PARTY_CATEGORYHISTORYDataTable
        Get
            Return Me.tableVIEW_PARTY_CATEGORYHISTORY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARTY_GROUPHISTORY As VIEW_PARTY_GROUPHISTORYDataTable
        Get
            Return Me.tableVIEW_PARTY_GROUPHISTORY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARTY_locationHISTORY As VIEW_PARTY_locationHISTORYDataTable
        Get
            Return Me.tableVIEW_PARTY_locationHISTORY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARTY_MENUGROUPHISTORY As VIEW_PARTY_MENUGROUPHISTORYDataTable
        Get
            Return Me.tableVIEW_PARTY_MENUGROUPHISTORY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARTY_MENUHISTORY As VIEW_PARTY_MENUHISTORYDataTable
        Get
            Return Me.tableVIEW_PARTY_MENUHISTORY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARTY_PURPOSEHISTORY As VIEW_PARTY_PURPOSEHISTORYDataTable
        Get
            Return Me.tableVIEW_PARTY_PURPOSEHISTORY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARTY_TARIFFHISTORY As VIEW_PARTY_TARIFFHISTORYDataTable
        Get
            Return Me.tableVIEW_PARTY_TARIFFHISTORY
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property membermaster_view As membermaster_viewDataTable
        Get
            Return Me.tablemembermaster_view
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_MEMBERMASTER As VIEW_MEMBERMASTERDataTable
        Get
            Return Me.tableVIEW_MEMBERMASTER
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property party_REST_itemwise As party_REST_itemwiseDataTable
        Get
            Return Me.tableparty_REST_itemwise
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property party_arrangemaster_hdr As party_arrangemaster_hdrDataTable
        Get
            Return Me.tableparty_arrangemaster_hdr
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property party_restaurant As party_restaurantDataTable
        Get
            Return Me.tableparty_restaurant
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property party_grouping_details As party_grouping_detailsDataTable
        Get
            Return Me.tableparty_grouping_details
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARTY_BOOKINGDETAILS As VIEW_PARTY_BOOKINGDETAILSDataTable
        Get
            Return Me.tableVIEW_PARTY_BOOKINGDETAILS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CREDIT_MEMBER_MPOSTING As CREDIT_MEMBER_MPOSTINGDataTable
        Get
            Return Me.tableCREDIT_MEMBER_MPOSTING
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARTY_BILLING As VIEW_PARTY_BILLINGDataTable
        Get
            Return Me.tableVIEW_PARTY_BILLING
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Party_TariffHdr As Party_TariffHdrDataTable
        Get
            Return Me.tableParty_TariffHdr
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSDataTable
        Get
            Return Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRATY_VIEW_PARTYHALLDETAILS As PRATY_VIEW_PARTYHALLDETAILSDataTable
        Get
            Return Me.tablePRATY_VIEW_PARTYHALLDETAILS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRATY_VIEW_PARTYLIQURITEMS As PRATY_VIEW_PARTYLIQURITEMSDataTable
        Get
            Return Me.tablePRATY_VIEW_PARTYLIQURITEMS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PRATY_VIEW_PARTYHALLDETAILS1 As PRATY_VIEW_PARTYHALLDETAILS1DataTable
        Get
            Return Me.tablePRATY_VIEW_PARTYHALLDETAILS1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_BAR_CONSUMPTION As PARTY_BAR_CONSUMPTIONDataTable
        Get
            Return Me.tablePARTY_BAR_CONSUMPTION
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_TAR_VIEW1 As PARTY_TAR_VIEW1DataTable
        Get
            Return Me.tablePARTY_TAR_VIEW1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_VIEW_HALLBOOKINGDETAILS As PARTY_VIEW_HALLBOOKINGDETAILSDataTable
        Get
            Return Me.tablePARTY_VIEW_HALLBOOKINGDETAILS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_RESTITEMS As PARTY_RESTITEMSDataTable
        Get
            Return Me.tablePARTY_RESTITEMS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VIEW_PARTY_BOOKINGDETAILS1 As VIEW_PARTY_BOOKINGDETAILS1DataTable
        Get
            Return Me.tableVIEW_PARTY_BOOKINGDETAILS1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property partyarrangementfinal As partyarrangementfinalDataTable
        Get
            Return Me.tablepartyarrangementfinal
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_VIEW_HALLBOOKINGDETAILS_NEW As PARTY_VIEW_HALLBOOKINGDETAILS_NEWDataTable
        Get
            Return Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property partyreceiptvoucher1 As partyreceiptvoucher1DataTable
        Get
            Return Me.tablepartyreceiptvoucher1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_VIEWHEAD As PARTY_VIEWHEADDataTable
        Get
            Return Me.tablePARTY_VIEWHEAD
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property partyreceiptvoucher As partyreceiptvoucherDataTable
        Get
            Return Me.tablepartyreceiptvoucher
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_MENU As PARTY_MENUDataTable
        Get
            Return Me.tablePARTY_MENU
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_ARRANGE As PARTY_ARRANGEDataTable
        Get
            Return Me.tablePARTY_ARRANGE
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property party_arrangement_book As party_arrangement_bookDataTable
        Get
            Return Me.tableparty_arrangement_book
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property party_menu_book As party_menu_bookDataTable
        Get
            Return Me.tableparty_menu_book
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_MEN As PARTY_MENDataTable
        Get
            Return Me.tablePARTY_MEN
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PAR_ARRANGEMENT As PAR_ARRANGEMENTDataTable
        Get
            Return Me.tablePAR_ARRANGEMENT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PAR_HDR As PAR_HDRDataTable
        Get
            Return Me.tablePAR_HDR
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PAR_RECEIPTS As PAR_RECEIPTSDataTable
        Get
            Return Me.tablePAR_RECEIPTS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PAR_RECEIPTS_REFUND As PAR_RECEIPTS_REFUNDDataTable
        Get
            Return Me.tablePAR_RECEIPTS_REFUND
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property partyreceiptreport As partyreceiptreportDataTable
        Get
            Return Me.tablepartyreceiptreport
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PAR_HALLBOOKING As PAR_HALLBOOKINGDataTable
        Get
            Return Me.tablePAR_HALLBOOKING
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property partyreceiptvoucher_CANCEL As partyreceiptvoucher_CANCELDataTable
        Get
            Return Me.tablepartyreceiptvoucher_CANCEL
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_ITEM_DISCOUNT As PARTY_ITEM_DISCOUNTDataTable
        Get
            Return Me.tablePARTY_ITEM_DISCOUNT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property HALLBOOKINGDISCOUNT As HALLBOOKINGDISCOUNTDataTable
        Get
            Return Me.tableHALLBOOKINGDISCOUNT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BANQUETFREEZEREPORT As BANQUETFREEZEREPORTDataTable
        Get
            Return Me.tableBANQUETFREEZEREPORT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property partyreceiptreport_REFUND As partyreceiptreport_REFUNDDataTable
        Get
            Return Me.tablepartyreceiptreport_REFUND
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property totalbanquetreport As totalbanquetreportDataTable
        Get
            Return Me.tabletotalbanquetreport
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PAR_ADDITIONALITEMS As PAR_ADDITIONALITEMSDataTable
        Get
            Return Me.tablePAR_ADDITIONALITEMS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_BOOKDETAILS As PARTY_BOOKDETAILSDataTable
        Get
            Return Me.tablePARTY_BOOKDETAILS
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property foodorder1 As foodorder1DataTable
        Get
            Return Me.tablefoodorder1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property party_receiptsummary As party_receiptsummaryDataTable
        Get
            Return Me.tableparty_receiptsummary
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property party_book_memberwise As party_book_memberwiseDataTable
        Get
            Return Me.tableparty_book_memberwise
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_RECEIPTREPORT As PARTY_RECEIPTREPORTDataTable
        Get
            Return Me.tablePARTY_RECEIPTREPORT
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_BOOKDETAILS1 As PARTY_BOOKDETAILS1DataTable
        Get
            Return Me.tablePARTY_BOOKDETAILS1
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property partyreceipt_view As partyreceipt_viewDataTable
        Get
            Return Me.tablepartyreceipt_view
        End Get
    End Property
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PARTY_BILLDETAILS As PARTY_BILLDETAILSDataTable
        Get
            Return Me.tablePARTY_BILLDETAILS
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As Dataset1 = CType(MyBase.Clone,Dataset1)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("PARTY_VIEW_HALLSTATUS")) Is Nothing) Then
            Me.Tables.Add(New PARTY_VIEW_HALLSTATUSDataTable(ds.Tables("PARTY_VIEW_HALLSTATUS")))
        End If
        If (Not (ds.Tables("PARTY_VIEW_BOOKING_DETAILS")) Is Nothing) Then
            Me.Tables.Add(New PARTY_VIEW_BOOKING_DETAILSDataTable(ds.Tables("PARTY_VIEW_BOOKING_DETAILS")))
        End If
        If (Not (ds.Tables("party_view_hallhistory")) Is Nothing) Then
            Me.Tables.Add(New party_view_hallhistoryDataTable(ds.Tables("party_view_hallhistory")))
        End If
        If (Not (ds.Tables("VIEW_PARTY_CANCELLATIONHISTORY")) Is Nothing) Then
            Me.Tables.Add(New VIEW_PARTY_CANCELLATIONHISTORYDataTable(ds.Tables("VIEW_PARTY_CANCELLATIONHISTORY")))
        End If
        If (Not (ds.Tables("VIEW_PARTY_CANCELLATIONHISTORY1")) Is Nothing) Then
            Me.Tables.Add(New VIEW_PARTY_CANCELLATIONHISTORY1DataTable(ds.Tables("VIEW_PARTY_CANCELLATIONHISTORY1")))
        End If
        If (Not (ds.Tables("VIEW_PARTY_CATEGORYHISTORY")) Is Nothing) Then
            Me.Tables.Add(New VIEW_PARTY_CATEGORYHISTORYDataTable(ds.Tables("VIEW_PARTY_CATEGORYHISTORY")))
        End If
        If (Not (ds.Tables("VIEW_PARTY_GROUPHISTORY")) Is Nothing) Then
            Me.Tables.Add(New VIEW_PARTY_GROUPHISTORYDataTable(ds.Tables("VIEW_PARTY_GROUPHISTORY")))
        End If
        If (Not (ds.Tables("VIEW_PARTY_locationHISTORY")) Is Nothing) Then
            Me.Tables.Add(New VIEW_PARTY_locationHISTORYDataTable(ds.Tables("VIEW_PARTY_locationHISTORY")))
        End If
        If (Not (ds.Tables("VIEW_PARTY_MENUGROUPHISTORY")) Is Nothing) Then
            Me.Tables.Add(New VIEW_PARTY_MENUGROUPHISTORYDataTable(ds.Tables("VIEW_PARTY_MENUGROUPHISTORY")))
        End If
        If (Not (ds.Tables("VIEW_PARTY_MENUHISTORY")) Is Nothing) Then
            Me.Tables.Add(New VIEW_PARTY_MENUHISTORYDataTable(ds.Tables("VIEW_PARTY_MENUHISTORY")))
        End If
        If (Not (ds.Tables("VIEW_PARTY_PURPOSEHISTORY")) Is Nothing) Then
            Me.Tables.Add(New VIEW_PARTY_PURPOSEHISTORYDataTable(ds.Tables("VIEW_PARTY_PURPOSEHISTORY")))
        End If
        If (Not (ds.Tables("VIEW_PARTY_TARIFFHISTORY")) Is Nothing) Then
            Me.Tables.Add(New VIEW_PARTY_TARIFFHISTORYDataTable(ds.Tables("VIEW_PARTY_TARIFFHISTORY")))
        End If
        If (Not (ds.Tables("membermaster_view")) Is Nothing) Then
            Me.Tables.Add(New membermaster_viewDataTable(ds.Tables("membermaster_view")))
        End If
        If (Not (ds.Tables("VIEW_MEMBERMASTER")) Is Nothing) Then
            Me.Tables.Add(New VIEW_MEMBERMASTERDataTable(ds.Tables("VIEW_MEMBERMASTER")))
        End If
        If (Not (ds.Tables("party_REST_itemwise")) Is Nothing) Then
            Me.Tables.Add(New party_REST_itemwiseDataTable(ds.Tables("party_REST_itemwise")))
        End If
        If (Not (ds.Tables("party_arrangemaster_hdr")) Is Nothing) Then
            Me.Tables.Add(New party_arrangemaster_hdrDataTable(ds.Tables("party_arrangemaster_hdr")))
        End If
        If (Not (ds.Tables("party_restaurant")) Is Nothing) Then
            Me.Tables.Add(New party_restaurantDataTable(ds.Tables("party_restaurant")))
        End If
        If (Not (ds.Tables("party_grouping_details")) Is Nothing) Then
            Me.Tables.Add(New party_grouping_detailsDataTable(ds.Tables("party_grouping_details")))
        End If
        If (Not (ds.Tables("VIEW_PARTY_BOOKINGDETAILS")) Is Nothing) Then
            Me.Tables.Add(New VIEW_PARTY_BOOKINGDETAILSDataTable(ds.Tables("VIEW_PARTY_BOOKINGDETAILS")))
        End If
        If (Not (ds.Tables("CREDIT_MEMBER_MPOSTING")) Is Nothing) Then
            Me.Tables.Add(New CREDIT_MEMBER_MPOSTINGDataTable(ds.Tables("CREDIT_MEMBER_MPOSTING")))
        End If
        If (Not (ds.Tables("VIEW_PARTY_BILLING")) Is Nothing) Then
            Me.Tables.Add(New VIEW_PARTY_BILLINGDataTable(ds.Tables("VIEW_PARTY_BILLING")))
        End If
        If (Not (ds.Tables("Party_TariffHdr")) Is Nothing) Then
            Me.Tables.Add(New Party_TariffHdrDataTable(ds.Tables("Party_TariffHdr")))
        End If
        If (Not (ds.Tables("PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS")) Is Nothing) Then
            Me.Tables.Add(New PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSDataTable(ds.Tables("PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS")))
        End If
        If (Not (ds.Tables("PRATY_VIEW_PARTYHALLDETAILS")) Is Nothing) Then
            Me.Tables.Add(New PRATY_VIEW_PARTYHALLDETAILSDataTable(ds.Tables("PRATY_VIEW_PARTYHALLDETAILS")))
        End If
        If (Not (ds.Tables("PRATY_VIEW_PARTYLIQURITEMS")) Is Nothing) Then
            Me.Tables.Add(New PRATY_VIEW_PARTYLIQURITEMSDataTable(ds.Tables("PRATY_VIEW_PARTYLIQURITEMS")))
        End If
        If (Not (ds.Tables("PRATY_VIEW_PARTYHALLDETAILS1")) Is Nothing) Then
            Me.Tables.Add(New PRATY_VIEW_PARTYHALLDETAILS1DataTable(ds.Tables("PRATY_VIEW_PARTYHALLDETAILS1")))
        End If
        If (Not (ds.Tables("PARTY_BAR_CONSUMPTION")) Is Nothing) Then
            Me.Tables.Add(New PARTY_BAR_CONSUMPTIONDataTable(ds.Tables("PARTY_BAR_CONSUMPTION")))
        End If
        If (Not (ds.Tables("PARTY_TAR_VIEW1")) Is Nothing) Then
            Me.Tables.Add(New PARTY_TAR_VIEW1DataTable(ds.Tables("PARTY_TAR_VIEW1")))
        End If
        If (Not (ds.Tables("PARTY_VIEW_HALLBOOKINGDETAILS")) Is Nothing) Then
            Me.Tables.Add(New PARTY_VIEW_HALLBOOKINGDETAILSDataTable(ds.Tables("PARTY_VIEW_HALLBOOKINGDETAILS")))
        End If
        If (Not (ds.Tables("PARTY_RESTITEMS")) Is Nothing) Then
            Me.Tables.Add(New PARTY_RESTITEMSDataTable(ds.Tables("PARTY_RESTITEMS")))
        End If
        If (Not (ds.Tables("VIEW_PARTY_BOOKINGDETAILS1")) Is Nothing) Then
            Me.Tables.Add(New VIEW_PARTY_BOOKINGDETAILS1DataTable(ds.Tables("VIEW_PARTY_BOOKINGDETAILS1")))
        End If
        If (Not (ds.Tables("partyarrangementfinal")) Is Nothing) Then
            Me.Tables.Add(New partyarrangementfinalDataTable(ds.Tables("partyarrangementfinal")))
        End If
        If (Not (ds.Tables("PARTY_VIEW_HALLBOOKINGDETAILS_NEW")) Is Nothing) Then
            Me.Tables.Add(New PARTY_VIEW_HALLBOOKINGDETAILS_NEWDataTable(ds.Tables("PARTY_VIEW_HALLBOOKINGDETAILS_NEW")))
        End If
        If (Not (ds.Tables("partyreceiptvoucher1")) Is Nothing) Then
            Me.Tables.Add(New partyreceiptvoucher1DataTable(ds.Tables("partyreceiptvoucher1")))
        End If
        If (Not (ds.Tables("PARTY_VIEWHEAD")) Is Nothing) Then
            Me.Tables.Add(New PARTY_VIEWHEADDataTable(ds.Tables("PARTY_VIEWHEAD")))
        End If
        If (Not (ds.Tables("partyreceiptvoucher")) Is Nothing) Then
            Me.Tables.Add(New partyreceiptvoucherDataTable(ds.Tables("partyreceiptvoucher")))
        End If
        If (Not (ds.Tables("PARTY_MENU")) Is Nothing) Then
            Me.Tables.Add(New PARTY_MENUDataTable(ds.Tables("PARTY_MENU")))
        End If
        If (Not (ds.Tables("PARTY_ARRANGE")) Is Nothing) Then
            Me.Tables.Add(New PARTY_ARRANGEDataTable(ds.Tables("PARTY_ARRANGE")))
        End If
        If (Not (ds.Tables("party_arrangement_book")) Is Nothing) Then
            Me.Tables.Add(New party_arrangement_bookDataTable(ds.Tables("party_arrangement_book")))
        End If
        If (Not (ds.Tables("party_menu_book")) Is Nothing) Then
            Me.Tables.Add(New party_menu_bookDataTable(ds.Tables("party_menu_book")))
        End If
        If (Not (ds.Tables("PARTY_MEN")) Is Nothing) Then
            Me.Tables.Add(New PARTY_MENDataTable(ds.Tables("PARTY_MEN")))
        End If
        If (Not (ds.Tables("PAR_ARRANGEMENT")) Is Nothing) Then
            Me.Tables.Add(New PAR_ARRANGEMENTDataTable(ds.Tables("PAR_ARRANGEMENT")))
        End If
        If (Not (ds.Tables("PAR_HDR")) Is Nothing) Then
            Me.Tables.Add(New PAR_HDRDataTable(ds.Tables("PAR_HDR")))
        End If
        If (Not (ds.Tables("PAR_RECEIPTS")) Is Nothing) Then
            Me.Tables.Add(New PAR_RECEIPTSDataTable(ds.Tables("PAR_RECEIPTS")))
        End If
        If (Not (ds.Tables("PAR_RECEIPTS_REFUND")) Is Nothing) Then
            Me.Tables.Add(New PAR_RECEIPTS_REFUNDDataTable(ds.Tables("PAR_RECEIPTS_REFUND")))
        End If
        If (Not (ds.Tables("partyreceiptreport")) Is Nothing) Then
            Me.Tables.Add(New partyreceiptreportDataTable(ds.Tables("partyreceiptreport")))
        End If
        If (Not (ds.Tables("PAR_HALLBOOKING")) Is Nothing) Then
            Me.Tables.Add(New PAR_HALLBOOKINGDataTable(ds.Tables("PAR_HALLBOOKING")))
        End If
        If (Not (ds.Tables("partyreceiptvoucher_CANCEL")) Is Nothing) Then
            Me.Tables.Add(New partyreceiptvoucher_CANCELDataTable(ds.Tables("partyreceiptvoucher_CANCEL")))
        End If
        If (Not (ds.Tables("PARTY_ITEM_DISCOUNT")) Is Nothing) Then
            Me.Tables.Add(New PARTY_ITEM_DISCOUNTDataTable(ds.Tables("PARTY_ITEM_DISCOUNT")))
        End If
        If (Not (ds.Tables("HALLBOOKINGDISCOUNT")) Is Nothing) Then
            Me.Tables.Add(New HALLBOOKINGDISCOUNTDataTable(ds.Tables("HALLBOOKINGDISCOUNT")))
        End If
        If (Not (ds.Tables("BANQUETFREEZEREPORT")) Is Nothing) Then
            Me.Tables.Add(New BANQUETFREEZEREPORTDataTable(ds.Tables("BANQUETFREEZEREPORT")))
        End If
        If (Not (ds.Tables("partyreceiptreport_REFUND")) Is Nothing) Then
            Me.Tables.Add(New partyreceiptreport_REFUNDDataTable(ds.Tables("partyreceiptreport_REFUND")))
        End If
        If (Not (ds.Tables("totalbanquetreport")) Is Nothing) Then
            Me.Tables.Add(New totalbanquetreportDataTable(ds.Tables("totalbanquetreport")))
        End If
        If (Not (ds.Tables("PAR_ADDITIONALITEMS")) Is Nothing) Then
            Me.Tables.Add(New PAR_ADDITIONALITEMSDataTable(ds.Tables("PAR_ADDITIONALITEMS")))
        End If
        If (Not (ds.Tables("PARTY_BOOKDETAILS")) Is Nothing) Then
            Me.Tables.Add(New PARTY_BOOKDETAILSDataTable(ds.Tables("PARTY_BOOKDETAILS")))
        End If
        If (Not (ds.Tables("foodorder1")) Is Nothing) Then
            Me.Tables.Add(New foodorder1DataTable(ds.Tables("foodorder1")))
        End If
        If (Not (ds.Tables("party_receiptsummary")) Is Nothing) Then
            Me.Tables.Add(New party_receiptsummaryDataTable(ds.Tables("party_receiptsummary")))
        End If
        If (Not (ds.Tables("party_book_memberwise")) Is Nothing) Then
            Me.Tables.Add(New party_book_memberwiseDataTable(ds.Tables("party_book_memberwise")))
        End If
        If (Not (ds.Tables("PARTY_RECEIPTREPORT")) Is Nothing) Then
            Me.Tables.Add(New PARTY_RECEIPTREPORTDataTable(ds.Tables("PARTY_RECEIPTREPORT")))
        End If
        If (Not (ds.Tables("PARTY_BOOKDETAILS1")) Is Nothing) Then
            Me.Tables.Add(New PARTY_BOOKDETAILS1DataTable(ds.Tables("PARTY_BOOKDETAILS1")))
        End If
        If (Not (ds.Tables("partyreceipt_view")) Is Nothing) Then
            Me.Tables.Add(New partyreceipt_viewDataTable(ds.Tables("partyreceipt_view")))
        End If
        If (Not (ds.Tables("PARTY_BILLDETAILS")) Is Nothing) Then
            Me.Tables.Add(New PARTY_BILLDETAILSDataTable(ds.Tables("PARTY_BILLDETAILS")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tablePARTY_VIEW_HALLSTATUS = CType(Me.Tables("PARTY_VIEW_HALLSTATUS"),PARTY_VIEW_HALLSTATUSDataTable)
        If (Not (Me.tablePARTY_VIEW_HALLSTATUS) Is Nothing) Then
            Me.tablePARTY_VIEW_HALLSTATUS.InitVars
        End If
        Me.tablePARTY_VIEW_BOOKING_DETAILS = CType(Me.Tables("PARTY_VIEW_BOOKING_DETAILS"),PARTY_VIEW_BOOKING_DETAILSDataTable)
        If (Not (Me.tablePARTY_VIEW_BOOKING_DETAILS) Is Nothing) Then
            Me.tablePARTY_VIEW_BOOKING_DETAILS.InitVars
        End If
        Me.tableparty_view_hallhistory = CType(Me.Tables("party_view_hallhistory"),party_view_hallhistoryDataTable)
        If (Not (Me.tableparty_view_hallhistory) Is Nothing) Then
            Me.tableparty_view_hallhistory.InitVars
        End If
        Me.tableVIEW_PARTY_CANCELLATIONHISTORY = CType(Me.Tables("VIEW_PARTY_CANCELLATIONHISTORY"),VIEW_PARTY_CANCELLATIONHISTORYDataTable)
        If (Not (Me.tableVIEW_PARTY_CANCELLATIONHISTORY) Is Nothing) Then
            Me.tableVIEW_PARTY_CANCELLATIONHISTORY.InitVars
        End If
        Me.tableVIEW_PARTY_CANCELLATIONHISTORY1 = CType(Me.Tables("VIEW_PARTY_CANCELLATIONHISTORY1"),VIEW_PARTY_CANCELLATIONHISTORY1DataTable)
        If (Not (Me.tableVIEW_PARTY_CANCELLATIONHISTORY1) Is Nothing) Then
            Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.InitVars
        End If
        Me.tableVIEW_PARTY_CATEGORYHISTORY = CType(Me.Tables("VIEW_PARTY_CATEGORYHISTORY"),VIEW_PARTY_CATEGORYHISTORYDataTable)
        If (Not (Me.tableVIEW_PARTY_CATEGORYHISTORY) Is Nothing) Then
            Me.tableVIEW_PARTY_CATEGORYHISTORY.InitVars
        End If
        Me.tableVIEW_PARTY_GROUPHISTORY = CType(Me.Tables("VIEW_PARTY_GROUPHISTORY"),VIEW_PARTY_GROUPHISTORYDataTable)
        If (Not (Me.tableVIEW_PARTY_GROUPHISTORY) Is Nothing) Then
            Me.tableVIEW_PARTY_GROUPHISTORY.InitVars
        End If
        Me.tableVIEW_PARTY_locationHISTORY = CType(Me.Tables("VIEW_PARTY_locationHISTORY"),VIEW_PARTY_locationHISTORYDataTable)
        If (Not (Me.tableVIEW_PARTY_locationHISTORY) Is Nothing) Then
            Me.tableVIEW_PARTY_locationHISTORY.InitVars
        End If
        Me.tableVIEW_PARTY_MENUGROUPHISTORY = CType(Me.Tables("VIEW_PARTY_MENUGROUPHISTORY"),VIEW_PARTY_MENUGROUPHISTORYDataTable)
        If (Not (Me.tableVIEW_PARTY_MENUGROUPHISTORY) Is Nothing) Then
            Me.tableVIEW_PARTY_MENUGROUPHISTORY.InitVars
        End If
        Me.tableVIEW_PARTY_MENUHISTORY = CType(Me.Tables("VIEW_PARTY_MENUHISTORY"),VIEW_PARTY_MENUHISTORYDataTable)
        If (Not (Me.tableVIEW_PARTY_MENUHISTORY) Is Nothing) Then
            Me.tableVIEW_PARTY_MENUHISTORY.InitVars
        End If
        Me.tableVIEW_PARTY_PURPOSEHISTORY = CType(Me.Tables("VIEW_PARTY_PURPOSEHISTORY"),VIEW_PARTY_PURPOSEHISTORYDataTable)
        If (Not (Me.tableVIEW_PARTY_PURPOSEHISTORY) Is Nothing) Then
            Me.tableVIEW_PARTY_PURPOSEHISTORY.InitVars
        End If
        Me.tableVIEW_PARTY_TARIFFHISTORY = CType(Me.Tables("VIEW_PARTY_TARIFFHISTORY"),VIEW_PARTY_TARIFFHISTORYDataTable)
        If (Not (Me.tableVIEW_PARTY_TARIFFHISTORY) Is Nothing) Then
            Me.tableVIEW_PARTY_TARIFFHISTORY.InitVars
        End If
        Me.tablemembermaster_view = CType(Me.Tables("membermaster_view"),membermaster_viewDataTable)
        If (Not (Me.tablemembermaster_view) Is Nothing) Then
            Me.tablemembermaster_view.InitVars
        End If
        Me.tableVIEW_MEMBERMASTER = CType(Me.Tables("VIEW_MEMBERMASTER"),VIEW_MEMBERMASTERDataTable)
        If (Not (Me.tableVIEW_MEMBERMASTER) Is Nothing) Then
            Me.tableVIEW_MEMBERMASTER.InitVars
        End If
        Me.tableparty_REST_itemwise = CType(Me.Tables("party_REST_itemwise"),party_REST_itemwiseDataTable)
        If (Not (Me.tableparty_REST_itemwise) Is Nothing) Then
            Me.tableparty_REST_itemwise.InitVars
        End If
        Me.tableparty_arrangemaster_hdr = CType(Me.Tables("party_arrangemaster_hdr"),party_arrangemaster_hdrDataTable)
        If (Not (Me.tableparty_arrangemaster_hdr) Is Nothing) Then
            Me.tableparty_arrangemaster_hdr.InitVars
        End If
        Me.tableparty_restaurant = CType(Me.Tables("party_restaurant"),party_restaurantDataTable)
        If (Not (Me.tableparty_restaurant) Is Nothing) Then
            Me.tableparty_restaurant.InitVars
        End If
        Me.tableparty_grouping_details = CType(Me.Tables("party_grouping_details"),party_grouping_detailsDataTable)
        If (Not (Me.tableparty_grouping_details) Is Nothing) Then
            Me.tableparty_grouping_details.InitVars
        End If
        Me.tableVIEW_PARTY_BOOKINGDETAILS = CType(Me.Tables("VIEW_PARTY_BOOKINGDETAILS"),VIEW_PARTY_BOOKINGDETAILSDataTable)
        If (Not (Me.tableVIEW_PARTY_BOOKINGDETAILS) Is Nothing) Then
            Me.tableVIEW_PARTY_BOOKINGDETAILS.InitVars
        End If
        Me.tableCREDIT_MEMBER_MPOSTING = CType(Me.Tables("CREDIT_MEMBER_MPOSTING"),CREDIT_MEMBER_MPOSTINGDataTable)
        If (Not (Me.tableCREDIT_MEMBER_MPOSTING) Is Nothing) Then
            Me.tableCREDIT_MEMBER_MPOSTING.InitVars
        End If
        Me.tableVIEW_PARTY_BILLING = CType(Me.Tables("VIEW_PARTY_BILLING"),VIEW_PARTY_BILLINGDataTable)
        If (Not (Me.tableVIEW_PARTY_BILLING) Is Nothing) Then
            Me.tableVIEW_PARTY_BILLING.InitVars
        End If
        Me.tableParty_TariffHdr = CType(Me.Tables("Party_TariffHdr"),Party_TariffHdrDataTable)
        If (Not (Me.tableParty_TariffHdr) Is Nothing) Then
            Me.tableParty_TariffHdr.InitVars
        End If
        Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS = CType(Me.Tables("PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS"),PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSDataTable)
        If (Not (Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS) Is Nothing) Then
            Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.InitVars
        End If
        Me.tablePRATY_VIEW_PARTYHALLDETAILS = CType(Me.Tables("PRATY_VIEW_PARTYHALLDETAILS"),PRATY_VIEW_PARTYHALLDETAILSDataTable)
        If (Not (Me.tablePRATY_VIEW_PARTYHALLDETAILS) Is Nothing) Then
            Me.tablePRATY_VIEW_PARTYHALLDETAILS.InitVars
        End If
        Me.tablePRATY_VIEW_PARTYLIQURITEMS = CType(Me.Tables("PRATY_VIEW_PARTYLIQURITEMS"),PRATY_VIEW_PARTYLIQURITEMSDataTable)
        If (Not (Me.tablePRATY_VIEW_PARTYLIQURITEMS) Is Nothing) Then
            Me.tablePRATY_VIEW_PARTYLIQURITEMS.InitVars
        End If
        Me.tablePRATY_VIEW_PARTYHALLDETAILS1 = CType(Me.Tables("PRATY_VIEW_PARTYHALLDETAILS1"),PRATY_VIEW_PARTYHALLDETAILS1DataTable)
        If (Not (Me.tablePRATY_VIEW_PARTYHALLDETAILS1) Is Nothing) Then
            Me.tablePRATY_VIEW_PARTYHALLDETAILS1.InitVars
        End If
        Me.tablePARTY_BAR_CONSUMPTION = CType(Me.Tables("PARTY_BAR_CONSUMPTION"),PARTY_BAR_CONSUMPTIONDataTable)
        If (Not (Me.tablePARTY_BAR_CONSUMPTION) Is Nothing) Then
            Me.tablePARTY_BAR_CONSUMPTION.InitVars
        End If
        Me.tablePARTY_TAR_VIEW1 = CType(Me.Tables("PARTY_TAR_VIEW1"),PARTY_TAR_VIEW1DataTable)
        If (Not (Me.tablePARTY_TAR_VIEW1) Is Nothing) Then
            Me.tablePARTY_TAR_VIEW1.InitVars
        End If
        Me.tablePARTY_VIEW_HALLBOOKINGDETAILS = CType(Me.Tables("PARTY_VIEW_HALLBOOKINGDETAILS"),PARTY_VIEW_HALLBOOKINGDETAILSDataTable)
        If (Not (Me.tablePARTY_VIEW_HALLBOOKINGDETAILS) Is Nothing) Then
            Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.InitVars
        End If
        Me.tablePARTY_RESTITEMS = CType(Me.Tables("PARTY_RESTITEMS"),PARTY_RESTITEMSDataTable)
        If (Not (Me.tablePARTY_RESTITEMS) Is Nothing) Then
            Me.tablePARTY_RESTITEMS.InitVars
        End If
        Me.tableVIEW_PARTY_BOOKINGDETAILS1 = CType(Me.Tables("VIEW_PARTY_BOOKINGDETAILS1"),VIEW_PARTY_BOOKINGDETAILS1DataTable)
        If (Not (Me.tableVIEW_PARTY_BOOKINGDETAILS1) Is Nothing) Then
            Me.tableVIEW_PARTY_BOOKINGDETAILS1.InitVars
        End If
        Me.tablepartyarrangementfinal = CType(Me.Tables("partyarrangementfinal"),partyarrangementfinalDataTable)
        If (Not (Me.tablepartyarrangementfinal) Is Nothing) Then
            Me.tablepartyarrangementfinal.InitVars
        End If
        Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW = CType(Me.Tables("PARTY_VIEW_HALLBOOKINGDETAILS_NEW"),PARTY_VIEW_HALLBOOKINGDETAILS_NEWDataTable)
        If (Not (Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW) Is Nothing) Then
            Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.InitVars
        End If
        Me.tablepartyreceiptvoucher1 = CType(Me.Tables("partyreceiptvoucher1"),partyreceiptvoucher1DataTable)
        If (Not (Me.tablepartyreceiptvoucher1) Is Nothing) Then
            Me.tablepartyreceiptvoucher1.InitVars
        End If
        Me.tablePARTY_VIEWHEAD = CType(Me.Tables("PARTY_VIEWHEAD"),PARTY_VIEWHEADDataTable)
        If (Not (Me.tablePARTY_VIEWHEAD) Is Nothing) Then
            Me.tablePARTY_VIEWHEAD.InitVars
        End If
        Me.tablepartyreceiptvoucher = CType(Me.Tables("partyreceiptvoucher"),partyreceiptvoucherDataTable)
        If (Not (Me.tablepartyreceiptvoucher) Is Nothing) Then
            Me.tablepartyreceiptvoucher.InitVars
        End If
        Me.tablePARTY_MENU = CType(Me.Tables("PARTY_MENU"),PARTY_MENUDataTable)
        If (Not (Me.tablePARTY_MENU) Is Nothing) Then
            Me.tablePARTY_MENU.InitVars
        End If
        Me.tablePARTY_ARRANGE = CType(Me.Tables("PARTY_ARRANGE"),PARTY_ARRANGEDataTable)
        If (Not (Me.tablePARTY_ARRANGE) Is Nothing) Then
            Me.tablePARTY_ARRANGE.InitVars
        End If
        Me.tableparty_arrangement_book = CType(Me.Tables("party_arrangement_book"),party_arrangement_bookDataTable)
        If (Not (Me.tableparty_arrangement_book) Is Nothing) Then
            Me.tableparty_arrangement_book.InitVars
        End If
        Me.tableparty_menu_book = CType(Me.Tables("party_menu_book"),party_menu_bookDataTable)
        If (Not (Me.tableparty_menu_book) Is Nothing) Then
            Me.tableparty_menu_book.InitVars
        End If
        Me.tablePARTY_MEN = CType(Me.Tables("PARTY_MEN"),PARTY_MENDataTable)
        If (Not (Me.tablePARTY_MEN) Is Nothing) Then
            Me.tablePARTY_MEN.InitVars
        End If
        Me.tablePAR_ARRANGEMENT = CType(Me.Tables("PAR_ARRANGEMENT"),PAR_ARRANGEMENTDataTable)
        If (Not (Me.tablePAR_ARRANGEMENT) Is Nothing) Then
            Me.tablePAR_ARRANGEMENT.InitVars
        End If
        Me.tablePAR_HDR = CType(Me.Tables("PAR_HDR"),PAR_HDRDataTable)
        If (Not (Me.tablePAR_HDR) Is Nothing) Then
            Me.tablePAR_HDR.InitVars
        End If
        Me.tablePAR_RECEIPTS = CType(Me.Tables("PAR_RECEIPTS"),PAR_RECEIPTSDataTable)
        If (Not (Me.tablePAR_RECEIPTS) Is Nothing) Then
            Me.tablePAR_RECEIPTS.InitVars
        End If
        Me.tablePAR_RECEIPTS_REFUND = CType(Me.Tables("PAR_RECEIPTS_REFUND"),PAR_RECEIPTS_REFUNDDataTable)
        If (Not (Me.tablePAR_RECEIPTS_REFUND) Is Nothing) Then
            Me.tablePAR_RECEIPTS_REFUND.InitVars
        End If
        Me.tablepartyreceiptreport = CType(Me.Tables("partyreceiptreport"),partyreceiptreportDataTable)
        If (Not (Me.tablepartyreceiptreport) Is Nothing) Then
            Me.tablepartyreceiptreport.InitVars
        End If
        Me.tablePAR_HALLBOOKING = CType(Me.Tables("PAR_HALLBOOKING"),PAR_HALLBOOKINGDataTable)
        If (Not (Me.tablePAR_HALLBOOKING) Is Nothing) Then
            Me.tablePAR_HALLBOOKING.InitVars
        End If
        Me.tablepartyreceiptvoucher_CANCEL = CType(Me.Tables("partyreceiptvoucher_CANCEL"),partyreceiptvoucher_CANCELDataTable)
        If (Not (Me.tablepartyreceiptvoucher_CANCEL) Is Nothing) Then
            Me.tablepartyreceiptvoucher_CANCEL.InitVars
        End If
        Me.tablePARTY_ITEM_DISCOUNT = CType(Me.Tables("PARTY_ITEM_DISCOUNT"),PARTY_ITEM_DISCOUNTDataTable)
        If (Not (Me.tablePARTY_ITEM_DISCOUNT) Is Nothing) Then
            Me.tablePARTY_ITEM_DISCOUNT.InitVars
        End If
        Me.tableHALLBOOKINGDISCOUNT = CType(Me.Tables("HALLBOOKINGDISCOUNT"),HALLBOOKINGDISCOUNTDataTable)
        If (Not (Me.tableHALLBOOKINGDISCOUNT) Is Nothing) Then
            Me.tableHALLBOOKINGDISCOUNT.InitVars
        End If
        Me.tableBANQUETFREEZEREPORT = CType(Me.Tables("BANQUETFREEZEREPORT"),BANQUETFREEZEREPORTDataTable)
        If (Not (Me.tableBANQUETFREEZEREPORT) Is Nothing) Then
            Me.tableBANQUETFREEZEREPORT.InitVars
        End If
        Me.tablepartyreceiptreport_REFUND = CType(Me.Tables("partyreceiptreport_REFUND"),partyreceiptreport_REFUNDDataTable)
        If (Not (Me.tablepartyreceiptreport_REFUND) Is Nothing) Then
            Me.tablepartyreceiptreport_REFUND.InitVars
        End If
        Me.tabletotalbanquetreport = CType(Me.Tables("totalbanquetreport"),totalbanquetreportDataTable)
        If (Not (Me.tabletotalbanquetreport) Is Nothing) Then
            Me.tabletotalbanquetreport.InitVars
        End If
        Me.tablePAR_ADDITIONALITEMS = CType(Me.Tables("PAR_ADDITIONALITEMS"),PAR_ADDITIONALITEMSDataTable)
        If (Not (Me.tablePAR_ADDITIONALITEMS) Is Nothing) Then
            Me.tablePAR_ADDITIONALITEMS.InitVars
        End If
        Me.tablePARTY_BOOKDETAILS = CType(Me.Tables("PARTY_BOOKDETAILS"),PARTY_BOOKDETAILSDataTable)
        If (Not (Me.tablePARTY_BOOKDETAILS) Is Nothing) Then
            Me.tablePARTY_BOOKDETAILS.InitVars
        End If
        Me.tablefoodorder1 = CType(Me.Tables("foodorder1"),foodorder1DataTable)
        If (Not (Me.tablefoodorder1) Is Nothing) Then
            Me.tablefoodorder1.InitVars
        End If
        Me.tableparty_receiptsummary = CType(Me.Tables("party_receiptsummary"),party_receiptsummaryDataTable)
        If (Not (Me.tableparty_receiptsummary) Is Nothing) Then
            Me.tableparty_receiptsummary.InitVars
        End If
        Me.tableparty_book_memberwise = CType(Me.Tables("party_book_memberwise"),party_book_memberwiseDataTable)
        If (Not (Me.tableparty_book_memberwise) Is Nothing) Then
            Me.tableparty_book_memberwise.InitVars
        End If
        Me.tablePARTY_RECEIPTREPORT = CType(Me.Tables("PARTY_RECEIPTREPORT"),PARTY_RECEIPTREPORTDataTable)
        If (Not (Me.tablePARTY_RECEIPTREPORT) Is Nothing) Then
            Me.tablePARTY_RECEIPTREPORT.InitVars
        End If
        Me.tablePARTY_BOOKDETAILS1 = CType(Me.Tables("PARTY_BOOKDETAILS1"),PARTY_BOOKDETAILS1DataTable)
        If (Not (Me.tablePARTY_BOOKDETAILS1) Is Nothing) Then
            Me.tablePARTY_BOOKDETAILS1.InitVars
        End If
        Me.tablepartyreceipt_view = CType(Me.Tables("partyreceipt_view"),partyreceipt_viewDataTable)
        If (Not (Me.tablepartyreceipt_view) Is Nothing) Then
            Me.tablepartyreceipt_view.InitVars
        End If
        Me.tablePARTY_BILLDETAILS = CType(Me.Tables("PARTY_BILLDETAILS"),PARTY_BILLDETAILSDataTable)
        If (Not (Me.tablePARTY_BILLDETAILS) Is Nothing) Then
            Me.tablePARTY_BILLDETAILS.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "Dataset1"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Dataset1.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tablePARTY_VIEW_HALLSTATUS = New PARTY_VIEW_HALLSTATUSDataTable
        Me.Tables.Add(Me.tablePARTY_VIEW_HALLSTATUS)
        Me.tablePARTY_VIEW_BOOKING_DETAILS = New PARTY_VIEW_BOOKING_DETAILSDataTable
        Me.Tables.Add(Me.tablePARTY_VIEW_BOOKING_DETAILS)
        Me.tableparty_view_hallhistory = New party_view_hallhistoryDataTable
        Me.Tables.Add(Me.tableparty_view_hallhistory)
        Me.tableVIEW_PARTY_CANCELLATIONHISTORY = New VIEW_PARTY_CANCELLATIONHISTORYDataTable
        Me.Tables.Add(Me.tableVIEW_PARTY_CANCELLATIONHISTORY)
        Me.tableVIEW_PARTY_CANCELLATIONHISTORY1 = New VIEW_PARTY_CANCELLATIONHISTORY1DataTable
        Me.Tables.Add(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1)
        Me.tableVIEW_PARTY_CATEGORYHISTORY = New VIEW_PARTY_CATEGORYHISTORYDataTable
        Me.Tables.Add(Me.tableVIEW_PARTY_CATEGORYHISTORY)
        Me.tableVIEW_PARTY_GROUPHISTORY = New VIEW_PARTY_GROUPHISTORYDataTable
        Me.Tables.Add(Me.tableVIEW_PARTY_GROUPHISTORY)
        Me.tableVIEW_PARTY_locationHISTORY = New VIEW_PARTY_locationHISTORYDataTable
        Me.Tables.Add(Me.tableVIEW_PARTY_locationHISTORY)
        Me.tableVIEW_PARTY_MENUGROUPHISTORY = New VIEW_PARTY_MENUGROUPHISTORYDataTable
        Me.Tables.Add(Me.tableVIEW_PARTY_MENUGROUPHISTORY)
        Me.tableVIEW_PARTY_MENUHISTORY = New VIEW_PARTY_MENUHISTORYDataTable
        Me.Tables.Add(Me.tableVIEW_PARTY_MENUHISTORY)
        Me.tableVIEW_PARTY_PURPOSEHISTORY = New VIEW_PARTY_PURPOSEHISTORYDataTable
        Me.Tables.Add(Me.tableVIEW_PARTY_PURPOSEHISTORY)
        Me.tableVIEW_PARTY_TARIFFHISTORY = New VIEW_PARTY_TARIFFHISTORYDataTable
        Me.Tables.Add(Me.tableVIEW_PARTY_TARIFFHISTORY)
        Me.tablemembermaster_view = New membermaster_viewDataTable
        Me.Tables.Add(Me.tablemembermaster_view)
        Me.tableVIEW_MEMBERMASTER = New VIEW_MEMBERMASTERDataTable
        Me.Tables.Add(Me.tableVIEW_MEMBERMASTER)
        Me.tableparty_REST_itemwise = New party_REST_itemwiseDataTable
        Me.Tables.Add(Me.tableparty_REST_itemwise)
        Me.tableparty_arrangemaster_hdr = New party_arrangemaster_hdrDataTable
        Me.Tables.Add(Me.tableparty_arrangemaster_hdr)
        Me.tableparty_restaurant = New party_restaurantDataTable
        Me.Tables.Add(Me.tableparty_restaurant)
        Me.tableparty_grouping_details = New party_grouping_detailsDataTable
        Me.Tables.Add(Me.tableparty_grouping_details)
        Me.tableVIEW_PARTY_BOOKINGDETAILS = New VIEW_PARTY_BOOKINGDETAILSDataTable
        Me.Tables.Add(Me.tableVIEW_PARTY_BOOKINGDETAILS)
        Me.tableCREDIT_MEMBER_MPOSTING = New CREDIT_MEMBER_MPOSTINGDataTable
        Me.Tables.Add(Me.tableCREDIT_MEMBER_MPOSTING)
        Me.tableVIEW_PARTY_BILLING = New VIEW_PARTY_BILLINGDataTable
        Me.Tables.Add(Me.tableVIEW_PARTY_BILLING)
        Me.tableParty_TariffHdr = New Party_TariffHdrDataTable
        Me.Tables.Add(Me.tableParty_TariffHdr)
        Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS = New PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSDataTable
        Me.Tables.Add(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS)
        Me.tablePRATY_VIEW_PARTYHALLDETAILS = New PRATY_VIEW_PARTYHALLDETAILSDataTable
        Me.Tables.Add(Me.tablePRATY_VIEW_PARTYHALLDETAILS)
        Me.tablePRATY_VIEW_PARTYLIQURITEMS = New PRATY_VIEW_PARTYLIQURITEMSDataTable
        Me.Tables.Add(Me.tablePRATY_VIEW_PARTYLIQURITEMS)
        Me.tablePRATY_VIEW_PARTYHALLDETAILS1 = New PRATY_VIEW_PARTYHALLDETAILS1DataTable
        Me.Tables.Add(Me.tablePRATY_VIEW_PARTYHALLDETAILS1)
        Me.tablePARTY_BAR_CONSUMPTION = New PARTY_BAR_CONSUMPTIONDataTable
        Me.Tables.Add(Me.tablePARTY_BAR_CONSUMPTION)
        Me.tablePARTY_TAR_VIEW1 = New PARTY_TAR_VIEW1DataTable
        Me.Tables.Add(Me.tablePARTY_TAR_VIEW1)
        Me.tablePARTY_VIEW_HALLBOOKINGDETAILS = New PARTY_VIEW_HALLBOOKINGDETAILSDataTable
        Me.Tables.Add(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS)
        Me.tablePARTY_RESTITEMS = New PARTY_RESTITEMSDataTable
        Me.Tables.Add(Me.tablePARTY_RESTITEMS)
        Me.tableVIEW_PARTY_BOOKINGDETAILS1 = New VIEW_PARTY_BOOKINGDETAILS1DataTable
        Me.Tables.Add(Me.tableVIEW_PARTY_BOOKINGDETAILS1)
        Me.tablepartyarrangementfinal = New partyarrangementfinalDataTable
        Me.Tables.Add(Me.tablepartyarrangementfinal)
        Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW = New PARTY_VIEW_HALLBOOKINGDETAILS_NEWDataTable
        Me.Tables.Add(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW)
        Me.tablepartyreceiptvoucher1 = New partyreceiptvoucher1DataTable
        Me.Tables.Add(Me.tablepartyreceiptvoucher1)
        Me.tablePARTY_VIEWHEAD = New PARTY_VIEWHEADDataTable
        Me.Tables.Add(Me.tablePARTY_VIEWHEAD)
        Me.tablepartyreceiptvoucher = New partyreceiptvoucherDataTable
        Me.Tables.Add(Me.tablepartyreceiptvoucher)
        Me.tablePARTY_MENU = New PARTY_MENUDataTable
        Me.Tables.Add(Me.tablePARTY_MENU)
        Me.tablePARTY_ARRANGE = New PARTY_ARRANGEDataTable
        Me.Tables.Add(Me.tablePARTY_ARRANGE)
        Me.tableparty_arrangement_book = New party_arrangement_bookDataTable
        Me.Tables.Add(Me.tableparty_arrangement_book)
        Me.tableparty_menu_book = New party_menu_bookDataTable
        Me.Tables.Add(Me.tableparty_menu_book)
        Me.tablePARTY_MEN = New PARTY_MENDataTable
        Me.Tables.Add(Me.tablePARTY_MEN)
        Me.tablePAR_ARRANGEMENT = New PAR_ARRANGEMENTDataTable
        Me.Tables.Add(Me.tablePAR_ARRANGEMENT)
        Me.tablePAR_HDR = New PAR_HDRDataTable
        Me.Tables.Add(Me.tablePAR_HDR)
        Me.tablePAR_RECEIPTS = New PAR_RECEIPTSDataTable
        Me.Tables.Add(Me.tablePAR_RECEIPTS)
        Me.tablePAR_RECEIPTS_REFUND = New PAR_RECEIPTS_REFUNDDataTable
        Me.Tables.Add(Me.tablePAR_RECEIPTS_REFUND)
        Me.tablepartyreceiptreport = New partyreceiptreportDataTable
        Me.Tables.Add(Me.tablepartyreceiptreport)
        Me.tablePAR_HALLBOOKING = New PAR_HALLBOOKINGDataTable
        Me.Tables.Add(Me.tablePAR_HALLBOOKING)
        Me.tablepartyreceiptvoucher_CANCEL = New partyreceiptvoucher_CANCELDataTable
        Me.Tables.Add(Me.tablepartyreceiptvoucher_CANCEL)
        Me.tablePARTY_ITEM_DISCOUNT = New PARTY_ITEM_DISCOUNTDataTable
        Me.Tables.Add(Me.tablePARTY_ITEM_DISCOUNT)
        Me.tableHALLBOOKINGDISCOUNT = New HALLBOOKINGDISCOUNTDataTable
        Me.Tables.Add(Me.tableHALLBOOKINGDISCOUNT)
        Me.tableBANQUETFREEZEREPORT = New BANQUETFREEZEREPORTDataTable
        Me.Tables.Add(Me.tableBANQUETFREEZEREPORT)
        Me.tablepartyreceiptreport_REFUND = New partyreceiptreport_REFUNDDataTable
        Me.Tables.Add(Me.tablepartyreceiptreport_REFUND)
        Me.tabletotalbanquetreport = New totalbanquetreportDataTable
        Me.Tables.Add(Me.tabletotalbanquetreport)
        Me.tablePAR_ADDITIONALITEMS = New PAR_ADDITIONALITEMSDataTable
        Me.Tables.Add(Me.tablePAR_ADDITIONALITEMS)
        Me.tablePARTY_BOOKDETAILS = New PARTY_BOOKDETAILSDataTable
        Me.Tables.Add(Me.tablePARTY_BOOKDETAILS)
        Me.tablefoodorder1 = New foodorder1DataTable
        Me.Tables.Add(Me.tablefoodorder1)
        Me.tableparty_receiptsummary = New party_receiptsummaryDataTable
        Me.Tables.Add(Me.tableparty_receiptsummary)
        Me.tableparty_book_memberwise = New party_book_memberwiseDataTable
        Me.Tables.Add(Me.tableparty_book_memberwise)
        Me.tablePARTY_RECEIPTREPORT = New PARTY_RECEIPTREPORTDataTable
        Me.Tables.Add(Me.tablePARTY_RECEIPTREPORT)
        Me.tablePARTY_BOOKDETAILS1 = New PARTY_BOOKDETAILS1DataTable
        Me.Tables.Add(Me.tablePARTY_BOOKDETAILS1)
        Me.tablepartyreceipt_view = New partyreceipt_viewDataTable
        Me.Tables.Add(Me.tablepartyreceipt_view)
        Me.tablePARTY_BILLDETAILS = New PARTY_BILLDETAILSDataTable
        Me.Tables.Add(Me.tablePARTY_BILLDETAILS)
    End Sub
    
    Private Function ShouldSerializePARTY_VIEW_HALLSTATUS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_VIEW_BOOKING_DETAILS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeparty_view_hallhistory() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_PARTY_CANCELLATIONHISTORY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_PARTY_CANCELLATIONHISTORY1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_PARTY_CATEGORYHISTORY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_PARTY_GROUPHISTORY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_PARTY_locationHISTORY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_PARTY_MENUGROUPHISTORY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_PARTY_MENUHISTORY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_PARTY_PURPOSEHISTORY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_PARTY_TARIFFHISTORY() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializemembermaster_view() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_MEMBERMASTER() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeparty_REST_itemwise() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeparty_arrangemaster_hdr() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeparty_restaurant() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeparty_grouping_details() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_PARTY_BOOKINGDETAILS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeCREDIT_MEMBER_MPOSTING() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_PARTY_BILLING() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeParty_TariffHdr() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePRATY_VIEW_PARTYHALLDETAILS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePRATY_VIEW_PARTYLIQURITEMS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePRATY_VIEW_PARTYHALLDETAILS1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_BAR_CONSUMPTION() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_TAR_VIEW1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_VIEW_HALLBOOKINGDETAILS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_RESTITEMS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeVIEW_PARTY_BOOKINGDETAILS1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepartyarrangementfinal() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_VIEW_HALLBOOKINGDETAILS_NEW() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepartyreceiptvoucher1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_VIEWHEAD() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepartyreceiptvoucher() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_MENU() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_ARRANGE() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeparty_arrangement_book() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeparty_menu_book() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_MEN() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePAR_ARRANGEMENT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePAR_HDR() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePAR_RECEIPTS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePAR_RECEIPTS_REFUND() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepartyreceiptreport() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePAR_HALLBOOKING() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepartyreceiptvoucher_CANCEL() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_ITEM_DISCOUNT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeHALLBOOKINGDISCOUNT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeBANQUETFREEZEREPORT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepartyreceiptreport_REFUND() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializetotalbanquetreport() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePAR_ADDITIONALITEMS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_BOOKDETAILS() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializefoodorder1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeparty_receiptsummary() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializeparty_book_memberwise() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_RECEIPTREPORT() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_BOOKDETAILS1() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializepartyreceipt_view() As Boolean
        Return false
    End Function
    
    Private Function ShouldSerializePARTY_BILLDETAILS() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub PARTY_VIEW_HALLSTATUSRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_VIEW_HALLSTATUSRowChangeEvent)
    
    Public Delegate Sub PARTY_VIEW_BOOKING_DETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_VIEW_BOOKING_DETAILSRowChangeEvent)
    
    Public Delegate Sub party_view_hallhistoryRowChangeEventHandler(ByVal sender As Object, ByVal e As party_view_hallhistoryRowChangeEvent)
    
    Public Delegate Sub VIEW_PARTY_CANCELLATIONHISTORYRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARTY_CANCELLATIONHISTORYRowChangeEvent)
    
    Public Delegate Sub VIEW_PARTY_CANCELLATIONHISTORY1RowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARTY_CANCELLATIONHISTORY1RowChangeEvent)
    
    Public Delegate Sub VIEW_PARTY_CATEGORYHISTORYRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARTY_CATEGORYHISTORYRowChangeEvent)
    
    Public Delegate Sub VIEW_PARTY_GROUPHISTORYRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARTY_GROUPHISTORYRowChangeEvent)
    
    Public Delegate Sub VIEW_PARTY_locationHISTORYRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARTY_locationHISTORYRowChangeEvent)
    
    Public Delegate Sub VIEW_PARTY_MENUGROUPHISTORYRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARTY_MENUGROUPHISTORYRowChangeEvent)
    
    Public Delegate Sub VIEW_PARTY_MENUHISTORYRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARTY_MENUHISTORYRowChangeEvent)
    
    Public Delegate Sub VIEW_PARTY_PURPOSEHISTORYRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARTY_PURPOSEHISTORYRowChangeEvent)
    
    Public Delegate Sub VIEW_PARTY_TARIFFHISTORYRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARTY_TARIFFHISTORYRowChangeEvent)
    
    Public Delegate Sub membermaster_viewRowChangeEventHandler(ByVal sender As Object, ByVal e As membermaster_viewRowChangeEvent)
    
    Public Delegate Sub VIEW_MEMBERMASTERRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_MEMBERMASTERRowChangeEvent)
    
    Public Delegate Sub party_REST_itemwiseRowChangeEventHandler(ByVal sender As Object, ByVal e As party_REST_itemwiseRowChangeEvent)
    
    Public Delegate Sub party_arrangemaster_hdrRowChangeEventHandler(ByVal sender As Object, ByVal e As party_arrangemaster_hdrRowChangeEvent)
    
    Public Delegate Sub party_restaurantRowChangeEventHandler(ByVal sender As Object, ByVal e As party_restaurantRowChangeEvent)
    
    Public Delegate Sub party_grouping_detailsRowChangeEventHandler(ByVal sender As Object, ByVal e As party_grouping_detailsRowChangeEvent)
    
    Public Delegate Sub VIEW_PARTY_BOOKINGDETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARTY_BOOKINGDETAILSRowChangeEvent)
    
    Public Delegate Sub CREDIT_MEMBER_MPOSTINGRowChangeEventHandler(ByVal sender As Object, ByVal e As CREDIT_MEMBER_MPOSTINGRowChangeEvent)
    
    Public Delegate Sub VIEW_PARTY_BILLINGRowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARTY_BILLINGRowChangeEvent)
    
    Public Delegate Sub Party_TariffHdrRowChangeEventHandler(ByVal sender As Object, ByVal e As Party_TariffHdrRowChangeEvent)
    
    Public Delegate Sub PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChangeEventHandler(ByVal sender As Object, ByVal e As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChangeEvent)
    
    Public Delegate Sub PRATY_VIEW_PARTYHALLDETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As PRATY_VIEW_PARTYHALLDETAILSRowChangeEvent)
    
    Public Delegate Sub PRATY_VIEW_PARTYLIQURITEMSRowChangeEventHandler(ByVal sender As Object, ByVal e As PRATY_VIEW_PARTYLIQURITEMSRowChangeEvent)
    
    Public Delegate Sub PRATY_VIEW_PARTYHALLDETAILS1RowChangeEventHandler(ByVal sender As Object, ByVal e As PRATY_VIEW_PARTYHALLDETAILS1RowChangeEvent)
    
    Public Delegate Sub PARTY_BAR_CONSUMPTIONRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_BAR_CONSUMPTIONRowChangeEvent)
    
    Public Delegate Sub PARTY_TAR_VIEW1RowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_TAR_VIEW1RowChangeEvent)
    
    Public Delegate Sub PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEvent)
    
    Public Delegate Sub PARTY_RESTITEMSRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_RESTITEMSRowChangeEvent)
    
    Public Delegate Sub VIEW_PARTY_BOOKINGDETAILS1RowChangeEventHandler(ByVal sender As Object, ByVal e As VIEW_PARTY_BOOKINGDETAILS1RowChangeEvent)
    
    Public Delegate Sub partyarrangementfinalRowChangeEventHandler(ByVal sender As Object, ByVal e As partyarrangementfinalRowChangeEvent)
    
    Public Delegate Sub PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChangeEvent)
    
    Public Delegate Sub partyreceiptvoucher1RowChangeEventHandler(ByVal sender As Object, ByVal e As partyreceiptvoucher1RowChangeEvent)
    
    Public Delegate Sub PARTY_VIEWHEADRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_VIEWHEADRowChangeEvent)
    
    Public Delegate Sub partyreceiptvoucherRowChangeEventHandler(ByVal sender As Object, ByVal e As partyreceiptvoucherRowChangeEvent)
    
    Public Delegate Sub PARTY_MENURowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_MENURowChangeEvent)
    
    Public Delegate Sub PARTY_ARRANGERowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_ARRANGERowChangeEvent)
    
    Public Delegate Sub party_arrangement_bookRowChangeEventHandler(ByVal sender As Object, ByVal e As party_arrangement_bookRowChangeEvent)
    
    Public Delegate Sub party_menu_bookRowChangeEventHandler(ByVal sender As Object, ByVal e As party_menu_bookRowChangeEvent)
    
    Public Delegate Sub PARTY_MENRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_MENRowChangeEvent)
    
    Public Delegate Sub PAR_ARRANGEMENTRowChangeEventHandler(ByVal sender As Object, ByVal e As PAR_ARRANGEMENTRowChangeEvent)
    
    Public Delegate Sub PAR_HDRRowChangeEventHandler(ByVal sender As Object, ByVal e As PAR_HDRRowChangeEvent)
    
    Public Delegate Sub PAR_RECEIPTSRowChangeEventHandler(ByVal sender As Object, ByVal e As PAR_RECEIPTSRowChangeEvent)
    
    Public Delegate Sub PAR_RECEIPTS_REFUNDRowChangeEventHandler(ByVal sender As Object, ByVal e As PAR_RECEIPTS_REFUNDRowChangeEvent)
    
    Public Delegate Sub partyreceiptreportRowChangeEventHandler(ByVal sender As Object, ByVal e As partyreceiptreportRowChangeEvent)
    
    Public Delegate Sub PAR_HALLBOOKINGRowChangeEventHandler(ByVal sender As Object, ByVal e As PAR_HALLBOOKINGRowChangeEvent)
    
    Public Delegate Sub partyreceiptvoucher_CANCELRowChangeEventHandler(ByVal sender As Object, ByVal e As partyreceiptvoucher_CANCELRowChangeEvent)
    
    Public Delegate Sub PARTY_ITEM_DISCOUNTRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_ITEM_DISCOUNTRowChangeEvent)
    
    Public Delegate Sub HALLBOOKINGDISCOUNTRowChangeEventHandler(ByVal sender As Object, ByVal e As HALLBOOKINGDISCOUNTRowChangeEvent)
    
    Public Delegate Sub BANQUETFREEZEREPORTRowChangeEventHandler(ByVal sender As Object, ByVal e As BANQUETFREEZEREPORTRowChangeEvent)
    
    Public Delegate Sub partyreceiptreport_REFUNDRowChangeEventHandler(ByVal sender As Object, ByVal e As partyreceiptreport_REFUNDRowChangeEvent)
    
    Public Delegate Sub totalbanquetreportRowChangeEventHandler(ByVal sender As Object, ByVal e As totalbanquetreportRowChangeEvent)
    
    Public Delegate Sub PAR_ADDITIONALITEMSRowChangeEventHandler(ByVal sender As Object, ByVal e As PAR_ADDITIONALITEMSRowChangeEvent)
    
    Public Delegate Sub PARTY_BOOKDETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_BOOKDETAILSRowChangeEvent)
    
    Public Delegate Sub foodorder1RowChangeEventHandler(ByVal sender As Object, ByVal e As foodorder1RowChangeEvent)
    
    Public Delegate Sub party_receiptsummaryRowChangeEventHandler(ByVal sender As Object, ByVal e As party_receiptsummaryRowChangeEvent)
    
    Public Delegate Sub party_book_memberwiseRowChangeEventHandler(ByVal sender As Object, ByVal e As party_book_memberwiseRowChangeEvent)
    
    Public Delegate Sub PARTY_RECEIPTREPORTRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_RECEIPTREPORTRowChangeEvent)
    
    Public Delegate Sub PARTY_BOOKDETAILS1RowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_BOOKDETAILS1RowChangeEvent)
    
    Public Delegate Sub partyreceipt_viewRowChangeEventHandler(ByVal sender As Object, ByVal e As partyreceipt_viewRowChangeEvent)
    
    Public Delegate Sub PARTY_BILLDETAILSRowChangeEventHandler(ByVal sender As Object, ByVal e As PARTY_BILLDETAILSRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_HALLSTATUSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnHALLCODE As DataColumn
        
        Private columnHALLDESC As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnB1 As DataColumn
        
        Private columnB2 As DataColumn
        
        Private columnB3 As DataColumn
        
        Private columnB4 As DataColumn
        
        Private columnB5 As DataColumn
        
        Private columnB6 As DataColumn
        
        Private columnB7 As DataColumn
        
        Private columnB8 As DataColumn
        
        Private columnB9 As DataColumn
        
        Private columnB10 As DataColumn
        
        Private columnB11 As DataColumn
        
        Private columnB12 As DataColumn
        
        Private columnB13 As DataColumn
        
        Private columnB14 As DataColumn
        
        Private columnB15 As DataColumn
        
        Private columnB16 As DataColumn
        
        Private columnB17 As DataColumn
        
        Private columnB18 As DataColumn
        
        Private columnB19 As DataColumn
        
        Private columnB20 As DataColumn
        
        Private columnB21 As DataColumn
        
        Private columnB22 As DataColumn
        
        Private columnB23 As DataColumn
        
        Private columnB24 As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_VIEW_HALLSTATUS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property HALLDESCColumn As DataColumn
            Get
                Return Me.columnHALLDESC
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property B1Column As DataColumn
            Get
                Return Me.columnB1
            End Get
        End Property
        
        Friend ReadOnly Property B2Column As DataColumn
            Get
                Return Me.columnB2
            End Get
        End Property
        
        Friend ReadOnly Property B3Column As DataColumn
            Get
                Return Me.columnB3
            End Get
        End Property
        
        Friend ReadOnly Property B4Column As DataColumn
            Get
                Return Me.columnB4
            End Get
        End Property
        
        Friend ReadOnly Property B5Column As DataColumn
            Get
                Return Me.columnB5
            End Get
        End Property
        
        Friend ReadOnly Property B6Column As DataColumn
            Get
                Return Me.columnB6
            End Get
        End Property
        
        Friend ReadOnly Property B7Column As DataColumn
            Get
                Return Me.columnB7
            End Get
        End Property
        
        Friend ReadOnly Property B8Column As DataColumn
            Get
                Return Me.columnB8
            End Get
        End Property
        
        Friend ReadOnly Property B9Column As DataColumn
            Get
                Return Me.columnB9
            End Get
        End Property
        
        Friend ReadOnly Property B10Column As DataColumn
            Get
                Return Me.columnB10
            End Get
        End Property
        
        Friend ReadOnly Property B11Column As DataColumn
            Get
                Return Me.columnB11
            End Get
        End Property
        
        Friend ReadOnly Property B12Column As DataColumn
            Get
                Return Me.columnB12
            End Get
        End Property
        
        Friend ReadOnly Property B13Column As DataColumn
            Get
                Return Me.columnB13
            End Get
        End Property
        
        Friend ReadOnly Property B14Column As DataColumn
            Get
                Return Me.columnB14
            End Get
        End Property
        
        Friend ReadOnly Property B15Column As DataColumn
            Get
                Return Me.columnB15
            End Get
        End Property
        
        Friend ReadOnly Property B16Column As DataColumn
            Get
                Return Me.columnB16
            End Get
        End Property
        
        Friend ReadOnly Property B17Column As DataColumn
            Get
                Return Me.columnB17
            End Get
        End Property
        
        Friend ReadOnly Property B18Column As DataColumn
            Get
                Return Me.columnB18
            End Get
        End Property
        
        Friend ReadOnly Property B19Column As DataColumn
            Get
                Return Me.columnB19
            End Get
        End Property
        
        Friend ReadOnly Property B20Column As DataColumn
            Get
                Return Me.columnB20
            End Get
        End Property
        
        Friend ReadOnly Property B21Column As DataColumn
            Get
                Return Me.columnB21
            End Get
        End Property
        
        Friend ReadOnly Property B22Column As DataColumn
            Get
                Return Me.columnB22
            End Get
        End Property
        
        Friend ReadOnly Property B23Column As DataColumn
            Get
                Return Me.columnB23
            End Get
        End Property
        
        Friend ReadOnly Property B24Column As DataColumn
            Get
                Return Me.columnB24
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_VIEW_HALLSTATUSRow
            Get
                Return CType(Me.Rows(index),PARTY_VIEW_HALLSTATUSRow)
            End Get
        End Property
        
        Public Event PARTY_VIEW_HALLSTATUSRowChanged As PARTY_VIEW_HALLSTATUSRowChangeEventHandler
        
        Public Event PARTY_VIEW_HALLSTATUSRowChanging As PARTY_VIEW_HALLSTATUSRowChangeEventHandler
        
        Public Event PARTY_VIEW_HALLSTATUSRowDeleted As PARTY_VIEW_HALLSTATUSRowChangeEventHandler
        
        Public Event PARTY_VIEW_HALLSTATUSRowDeleting As PARTY_VIEW_HALLSTATUSRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_VIEW_HALLSTATUSRow(ByVal row As PARTY_VIEW_HALLSTATUSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_VIEW_HALLSTATUSRow( _
                    ByVal HALLCODE As String,  _
                    ByVal HALLDESC As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal B1 As String,  _
                    ByVal B2 As String,  _
                    ByVal B3 As String,  _
                    ByVal B4 As String,  _
                    ByVal B5 As String,  _
                    ByVal B6 As String,  _
                    ByVal B7 As String,  _
                    ByVal B8 As String,  _
                    ByVal B9 As String,  _
                    ByVal B10 As String,  _
                    ByVal B11 As String,  _
                    ByVal B12 As String,  _
                    ByVal B13 As String,  _
                    ByVal B14 As String,  _
                    ByVal B15 As String,  _
                    ByVal B16 As String,  _
                    ByVal B17 As String,  _
                    ByVal B18 As String,  _
                    ByVal B19 As String,  _
                    ByVal B20 As String,  _
                    ByVal B21 As String,  _
                    ByVal B22 As String,  _
                    ByVal B23 As String,  _
                    ByVal B24 As String) As PARTY_VIEW_HALLSTATUSRow
            Dim rowPARTY_VIEW_HALLSTATUSRow As PARTY_VIEW_HALLSTATUSRow = CType(Me.NewRow,PARTY_VIEW_HALLSTATUSRow)
            rowPARTY_VIEW_HALLSTATUSRow.ItemArray = New Object() {HALLCODE, HALLDESC, BOOKINGDATE, B1, B2, B3, B4, B5, B6, B7, B8, B9, B10, B11, B12, B13, B14, B15, B16, B17, B18, B19, B20, B21, B22, B23, B24}
            Me.Rows.Add(rowPARTY_VIEW_HALLSTATUSRow)
            Return rowPARTY_VIEW_HALLSTATUSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_VIEW_HALLSTATUSDataTable = CType(MyBase.Clone,PARTY_VIEW_HALLSTATUSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_VIEW_HALLSTATUSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnHALLDESC = Me.Columns("HALLDESC")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnB1 = Me.Columns("B1")
            Me.columnB2 = Me.Columns("B2")
            Me.columnB3 = Me.Columns("B3")
            Me.columnB4 = Me.Columns("B4")
            Me.columnB5 = Me.Columns("B5")
            Me.columnB6 = Me.Columns("B6")
            Me.columnB7 = Me.Columns("B7")
            Me.columnB8 = Me.Columns("B8")
            Me.columnB9 = Me.Columns("B9")
            Me.columnB10 = Me.Columns("B10")
            Me.columnB11 = Me.Columns("B11")
            Me.columnB12 = Me.Columns("B12")
            Me.columnB13 = Me.Columns("B13")
            Me.columnB14 = Me.Columns("B14")
            Me.columnB15 = Me.Columns("B15")
            Me.columnB16 = Me.Columns("B16")
            Me.columnB17 = Me.Columns("B17")
            Me.columnB18 = Me.Columns("B18")
            Me.columnB19 = Me.Columns("B19")
            Me.columnB20 = Me.Columns("B20")
            Me.columnB21 = Me.Columns("B21")
            Me.columnB22 = Me.Columns("B22")
            Me.columnB23 = Me.Columns("B23")
            Me.columnB24 = Me.Columns("B24")
        End Sub
        
        Private Sub InitClass()
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnHALLDESC = New DataColumn("HALLDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLDESC)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnB1 = New DataColumn("B1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB1)
            Me.columnB2 = New DataColumn("B2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB2)
            Me.columnB3 = New DataColumn("B3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB3)
            Me.columnB4 = New DataColumn("B4", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB4)
            Me.columnB5 = New DataColumn("B5", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB5)
            Me.columnB6 = New DataColumn("B6", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB6)
            Me.columnB7 = New DataColumn("B7", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB7)
            Me.columnB8 = New DataColumn("B8", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB8)
            Me.columnB9 = New DataColumn("B9", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB9)
            Me.columnB10 = New DataColumn("B10", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB10)
            Me.columnB11 = New DataColumn("B11", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB11)
            Me.columnB12 = New DataColumn("B12", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB12)
            Me.columnB13 = New DataColumn("B13", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB13)
            Me.columnB14 = New DataColumn("B14", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB14)
            Me.columnB15 = New DataColumn("B15", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB15)
            Me.columnB16 = New DataColumn("B16", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB16)
            Me.columnB17 = New DataColumn("B17", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB17)
            Me.columnB18 = New DataColumn("B18", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB18)
            Me.columnB19 = New DataColumn("B19", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB19)
            Me.columnB20 = New DataColumn("B20", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB20)
            Me.columnB21 = New DataColumn("B21", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB21)
            Me.columnB22 = New DataColumn("B22", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB22)
            Me.columnB23 = New DataColumn("B23", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB23)
            Me.columnB24 = New DataColumn("B24", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnB24)
            Me.columnHALLCODE.ReadOnly = true
            Me.columnHALLDESC.ReadOnly = true
            Me.columnBOOKINGDATE.ReadOnly = true
            Me.columnB1.ReadOnly = true
            Me.columnB2.ReadOnly = true
            Me.columnB3.ReadOnly = true
            Me.columnB4.ReadOnly = true
            Me.columnB5.ReadOnly = true
            Me.columnB6.ReadOnly = true
            Me.columnB7.ReadOnly = true
            Me.columnB8.ReadOnly = true
            Me.columnB9.ReadOnly = true
            Me.columnB10.ReadOnly = true
            Me.columnB11.ReadOnly = true
            Me.columnB12.ReadOnly = true
            Me.columnB13.ReadOnly = true
            Me.columnB14.ReadOnly = true
            Me.columnB15.ReadOnly = true
            Me.columnB16.ReadOnly = true
            Me.columnB17.ReadOnly = true
            Me.columnB18.ReadOnly = true
            Me.columnB19.ReadOnly = true
            Me.columnB20.ReadOnly = true
            Me.columnB21.ReadOnly = true
            Me.columnB22.ReadOnly = true
            Me.columnB23.ReadOnly = true
            Me.columnB24.ReadOnly = true
        End Sub
        
        Public Function NewPARTY_VIEW_HALLSTATUSRow() As PARTY_VIEW_HALLSTATUSRow
            Return CType(Me.NewRow,PARTY_VIEW_HALLSTATUSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_VIEW_HALLSTATUSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_VIEW_HALLSTATUSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_VIEW_HALLSTATUSRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_HALLSTATUSRowChanged(Me, New PARTY_VIEW_HALLSTATUSRowChangeEvent(CType(e.Row,PARTY_VIEW_HALLSTATUSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_VIEW_HALLSTATUSRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_HALLSTATUSRowChanging(Me, New PARTY_VIEW_HALLSTATUSRowChangeEvent(CType(e.Row,PARTY_VIEW_HALLSTATUSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_VIEW_HALLSTATUSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_HALLSTATUSRowDeleted(Me, New PARTY_VIEW_HALLSTATUSRowChangeEvent(CType(e.Row,PARTY_VIEW_HALLSTATUSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_VIEW_HALLSTATUSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_HALLSTATUSRowDeleting(Me, New PARTY_VIEW_HALLSTATUSRowChangeEvent(CType(e.Row,PARTY_VIEW_HALLSTATUSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_VIEW_HALLSTATUSRow(ByVal row As PARTY_VIEW_HALLSTATUSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_HALLSTATUSRow
        Inherits DataRow
        
        Private tablePARTY_VIEW_HALLSTATUS As PARTY_VIEW_HALLSTATUSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_VIEW_HALLSTATUS = CType(Me.Table,PARTY_VIEW_HALLSTATUSDataTable)
        End Sub
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property HALLDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.HALLDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.HALLDESCColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property B1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B1Column) = value
            End Set
        End Property
        
        Public Property B2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B2Column) = value
            End Set
        End Property
        
        Public Property B3 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B3Column) = value
            End Set
        End Property
        
        Public Property B4 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B4Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B4Column) = value
            End Set
        End Property
        
        Public Property B5 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B5Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B5Column) = value
            End Set
        End Property
        
        Public Property B6 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B6Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B6Column) = value
            End Set
        End Property
        
        Public Property B7 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B7Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B7Column) = value
            End Set
        End Property
        
        Public Property B8 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B8Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B8Column) = value
            End Set
        End Property
        
        Public Property B9 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B9Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B9Column) = value
            End Set
        End Property
        
        Public Property B10 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B10Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B10Column) = value
            End Set
        End Property
        
        Public Property B11 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B11Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B11Column) = value
            End Set
        End Property
        
        Public Property B12 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B12Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B12Column) = value
            End Set
        End Property
        
        Public Property B13 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B13Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B13Column) = value
            End Set
        End Property
        
        Public Property B14 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B14Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B14Column) = value
            End Set
        End Property
        
        Public Property B15 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B15Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B15Column) = value
            End Set
        End Property
        
        Public Property B16 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B16Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B16Column) = value
            End Set
        End Property
        
        Public Property B17 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B17Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B17Column) = value
            End Set
        End Property
        
        Public Property B18 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B18Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B18Column) = value
            End Set
        End Property
        
        Public Property B19 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B19Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B19Column) = value
            End Set
        End Property
        
        Public Property B20 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B20Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B20Column) = value
            End Set
        End Property
        
        Public Property B21 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B21Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B21Column) = value
            End Set
        End Property
        
        Public Property B22 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B22Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B22Column) = value
            End Set
        End Property
        
        Public Property B23 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B23Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B23Column) = value
            End Set
        End Property
        
        Public Property B24 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLSTATUS.B24Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLSTATUS.B24Column) = value
            End Set
        End Property
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.HALLDESCColumn)
        End Function
        
        Public Sub SetHALLDESCNull()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.HALLDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsB1Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B1Column)
        End Function
        
        Public Sub SetB1Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB2Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B2Column)
        End Function
        
        Public Sub SetB2Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB3Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B3Column)
        End Function
        
        Public Sub SetB3Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB4Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B4Column)
        End Function
        
        Public Sub SetB4Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B4Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB5Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B5Column)
        End Function
        
        Public Sub SetB5Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B5Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB6Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B6Column)
        End Function
        
        Public Sub SetB6Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B6Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB7Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B7Column)
        End Function
        
        Public Sub SetB7Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B7Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB8Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B8Column)
        End Function
        
        Public Sub SetB8Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B8Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB9Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B9Column)
        End Function
        
        Public Sub SetB9Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B9Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB10Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B10Column)
        End Function
        
        Public Sub SetB10Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B10Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB11Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B11Column)
        End Function
        
        Public Sub SetB11Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B11Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB12Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B12Column)
        End Function
        
        Public Sub SetB12Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B12Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB13Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B13Column)
        End Function
        
        Public Sub SetB13Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B13Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB14Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B14Column)
        End Function
        
        Public Sub SetB14Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B14Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB15Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B15Column)
        End Function
        
        Public Sub SetB15Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B15Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB16Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B16Column)
        End Function
        
        Public Sub SetB16Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B16Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB17Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B17Column)
        End Function
        
        Public Sub SetB17Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B17Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB18Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B18Column)
        End Function
        
        Public Sub SetB18Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B18Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB19Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B19Column)
        End Function
        
        Public Sub SetB19Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B19Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB20Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B20Column)
        End Function
        
        Public Sub SetB20Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B20Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB21Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B21Column)
        End Function
        
        Public Sub SetB21Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B21Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB22Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B22Column)
        End Function
        
        Public Sub SetB22Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B22Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB23Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B23Column)
        End Function
        
        Public Sub SetB23Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B23Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsB24Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLSTATUS.B24Column)
        End Function
        
        Public Sub SetB24Null()
            Me(Me.tablePARTY_VIEW_HALLSTATUS.B24Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_HALLSTATUSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_VIEW_HALLSTATUSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_VIEW_HALLSTATUSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_VIEW_HALLSTATUSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_BOOKING_DETAILSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnHALLTAXFLAG As DataColumn
        
        Private columnADVANCE As DataColumn
        
        Private columnARRMENTAMOUNT As DataColumn
        
        Private columnRESTAMOUNT As DataColumn
        
        Private columnHALLCANCELAMOUNT As DataColumn
        
        Private columnRESCANCELAMOUNT As DataColumn
        
        Private columnARRCANCELAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnROUNDOFF As DataColumn
        
        Private columnTAXPERC As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnCANCELAMOUNT As DataColumn
        
        Private columnAITEMCODE As DataColumn
        
        Private columnARATE As DataColumn
        
        Private columnAQTY As DataColumn
        
        Private columnAROUNDOFF As DataColumn
        
        Private columnATAXPERC As DataColumn
        
        Private columnATAXAMOUNT As DataColumn
        
        Private columnAAMOUNT As DataColumn
        
        Private columnATOTALAMOUNT As DataColumn
        
        Private columnACANCELAMOUNT As DataColumn
        
        Private columnFITEMCODE As DataColumn
        
        Private columnFITEMDESC As DataColumn
        
        Private columnFUOM As DataColumn
        
        Private columnFQTY As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnHALLDESC As DataColumn
        
        Private columnPCODE As DataColumn
        
        Private columnPDESC As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnLOCDESC As DataColumn
        
        Private columnFROMTIME As DataColumn
        
        Private columnTOTIME As DataColumn
        
        Private columnHALLAMOUNT As DataColumn
        
        Private columnBOOKINGSTATUS As DataColumn
        
        Private columnBOOKINGFLAG As DataColumn
        
        Private columnBILLINGFLAG As DataColumn
        
        Private columnCANCELFLAG As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_VIEW_BOOKING_DETAILS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXFLAGColumn As DataColumn
            Get
                Return Me.columnHALLTAXFLAG
            End Get
        End Property
        
        Friend ReadOnly Property ADVANCEColumn As DataColumn
            Get
                Return Me.columnADVANCE
            End Get
        End Property
        
        Friend ReadOnly Property ARRMENTAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRMENTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLCANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESCANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ARRCANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property ROUNDOFFColumn As DataColumn
            Get
                Return Me.columnROUNDOFF
            End Get
        End Property
        
        Friend ReadOnly Property TAXPERCColumn As DataColumn
            Get
                Return Me.columnTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property CANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AITEMCODEColumn As DataColumn
            Get
                Return Me.columnAITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ARATEColumn As DataColumn
            Get
                Return Me.columnARATE
            End Get
        End Property
        
        Friend ReadOnly Property AQTYColumn As DataColumn
            Get
                Return Me.columnAQTY
            End Get
        End Property
        
        Friend ReadOnly Property AROUNDOFFColumn As DataColumn
            Get
                Return Me.columnAROUNDOFF
            End Get
        End Property
        
        Friend ReadOnly Property ATAXPERCColumn As DataColumn
            Get
                Return Me.columnATAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property ATAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnATAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AAMOUNTColumn As DataColumn
            Get
                Return Me.columnAAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ATOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnATOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ACANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnACANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FITEMCODEColumn As DataColumn
            Get
                Return Me.columnFITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property FITEMDESCColumn As DataColumn
            Get
                Return Me.columnFITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property FUOMColumn As DataColumn
            Get
                Return Me.columnFUOM
            End Get
        End Property
        
        Friend ReadOnly Property FQTYColumn As DataColumn
            Get
                Return Me.columnFQTY
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property HALLDESCColumn As DataColumn
            Get
                Return Me.columnHALLDESC
            End Get
        End Property
        
        Friend ReadOnly Property PCODEColumn As DataColumn
            Get
                Return Me.columnPCODE
            End Get
        End Property
        
        Friend ReadOnly Property PDESCColumn As DataColumn
            Get
                Return Me.columnPDESC
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property LOCDESCColumn As DataColumn
            Get
                Return Me.columnLOCDESC
            End Get
        End Property
        
        Friend ReadOnly Property FROMTIMEColumn As DataColumn
            Get
                Return Me.columnFROMTIME
            End Get
        End Property
        
        Friend ReadOnly Property TOTIMEColumn As DataColumn
            Get
                Return Me.columnTOTIME
            End Get
        End Property
        
        Friend ReadOnly Property HALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGSTATUSColumn As DataColumn
            Get
                Return Me.columnBOOKINGSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGFLAGColumn As DataColumn
            Get
                Return Me.columnBOOKINGFLAG
            End Get
        End Property
        
        Friend ReadOnly Property BILLINGFLAGColumn As DataColumn
            Get
                Return Me.columnBILLINGFLAG
            End Get
        End Property
        
        Friend ReadOnly Property CANCELFLAGColumn As DataColumn
            Get
                Return Me.columnCANCELFLAG
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_VIEW_BOOKING_DETAILSRow
            Get
                Return CType(Me.Rows(index),PARTY_VIEW_BOOKING_DETAILSRow)
            End Get
        End Property
        
        Public Event PARTY_VIEW_BOOKING_DETAILSRowChanged As PARTY_VIEW_BOOKING_DETAILSRowChangeEventHandler
        
        Public Event PARTY_VIEW_BOOKING_DETAILSRowChanging As PARTY_VIEW_BOOKING_DETAILSRowChangeEventHandler
        
        Public Event PARTY_VIEW_BOOKING_DETAILSRowDeleted As PARTY_VIEW_BOOKING_DETAILSRowChangeEventHandler
        
        Public Event PARTY_VIEW_BOOKING_DETAILSRowDeleting As PARTY_VIEW_BOOKING_DETAILSRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_VIEW_BOOKING_DETAILSRow(ByVal row As PARTY_VIEW_BOOKING_DETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_VIEW_BOOKING_DETAILSRow( _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal MCODE As String,  _
                    ByVal ASSOCIATENAME As String,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal HALLTAXFLAG As String,  _
                    ByVal ADVANCE As Decimal,  _
                    ByVal ARRMENTAMOUNT As Decimal,  _
                    ByVal RESTAMOUNT As Decimal,  _
                    ByVal HALLCANCELAMOUNT As Decimal,  _
                    ByVal RESCANCELAMOUNT As Decimal,  _
                    ByVal ARRCANCELAMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal ADDDATETIME As Date,  _
                    ByVal ADDUSERID As String,  _
                    ByVal ITEMCODE As String,  _
                    ByVal ITEMDESC As String,  _
                    ByVal RATE As Decimal,  _
                    ByVal QTY As Decimal,  _
                    ByVal ROUNDOFF As Decimal,  _
                    ByVal TAXPERC As Decimal,  _
                    ByVal TAXAMOUNT As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal CANCELAMOUNT As Decimal,  _
                    ByVal AITEMCODE As String,  _
                    ByVal ARATE As Decimal,  _
                    ByVal AQTY As Decimal,  _
                    ByVal AROUNDOFF As Decimal,  _
                    ByVal ATAXPERC As Decimal,  _
                    ByVal ATAXAMOUNT As Decimal,  _
                    ByVal AAMOUNT As Decimal,  _
                    ByVal ATOTALAMOUNT As Decimal,  _
                    ByVal ACANCELAMOUNT As Decimal,  _
                    ByVal FITEMCODE As String,  _
                    ByVal FITEMDESC As String,  _
                    ByVal FUOM As String,  _
                    ByVal FQTY As Decimal,  _
                    ByVal HALLCODE As String,  _
                    ByVal HALLDESC As String,  _
                    ByVal PCODE As String,  _
                    ByVal PDESC As String,  _
                    ByVal LOCCODE As String,  _
                    ByVal LOCDESC As String,  _
                    ByVal FROMTIME As Decimal,  _
                    ByVal TOTIME As Decimal,  _
                    ByVal HALLAMOUNT As Decimal,  _
                    ByVal BOOKINGSTATUS As String,  _
                    ByVal BOOKINGFLAG As String,  _
                    ByVal BILLINGFLAG As String,  _
                    ByVal CANCELFLAG As String) As PARTY_VIEW_BOOKING_DETAILSRow
            Dim rowPARTY_VIEW_BOOKING_DETAILSRow As PARTY_VIEW_BOOKING_DETAILSRow = CType(Me.NewRow,PARTY_VIEW_BOOKING_DETAILSRow)
            rowPARTY_VIEW_BOOKING_DETAILSRow.ItemArray = New Object() {BOOKINGTYPE, BOOKINGNO, BOOKINGDATE, PARTYDATE, MCODE, ASSOCIATENAME, OCCUPANCY, DESCRIPTION, HALLTAXFLAG, ADVANCE, ARRMENTAMOUNT, RESTAMOUNT, HALLCANCELAMOUNT, RESCANCELAMOUNT, ARRCANCELAMOUNT, FREEZE, ADDDATETIME, ADDUSERID, ITEMCODE, ITEMDESC, RATE, QTY, ROUNDOFF, TAXPERC, TAXAMOUNT, AMOUNT, TOTALAMOUNT, CANCELAMOUNT, AITEMCODE, ARATE, AQTY, AROUNDOFF, ATAXPERC, ATAXAMOUNT, AAMOUNT, ATOTALAMOUNT, ACANCELAMOUNT, FITEMCODE, FITEMDESC, FUOM, FQTY, HALLCODE, HALLDESC, PCODE, PDESC, LOCCODE, LOCDESC, FROMTIME, TOTIME, HALLAMOUNT, BOOKINGSTATUS, BOOKINGFLAG, BILLINGFLAG, CANCELFLAG}
            Me.Rows.Add(rowPARTY_VIEW_BOOKING_DETAILSRow)
            Return rowPARTY_VIEW_BOOKING_DETAILSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_VIEW_BOOKING_DETAILSDataTable = CType(MyBase.Clone,PARTY_VIEW_BOOKING_DETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_VIEW_BOOKING_DETAILSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnHALLTAXFLAG = Me.Columns("HALLTAXFLAG")
            Me.columnADVANCE = Me.Columns("ADVANCE")
            Me.columnARRMENTAMOUNT = Me.Columns("ARRMENTAMOUNT")
            Me.columnRESTAMOUNT = Me.Columns("RESTAMOUNT")
            Me.columnHALLCANCELAMOUNT = Me.Columns("HALLCANCELAMOUNT")
            Me.columnRESCANCELAMOUNT = Me.Columns("RESCANCELAMOUNT")
            Me.columnARRCANCELAMOUNT = Me.Columns("ARRCANCELAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnROUNDOFF = Me.Columns("ROUNDOFF")
            Me.columnTAXPERC = Me.Columns("TAXPERC")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnCANCELAMOUNT = Me.Columns("CANCELAMOUNT")
            Me.columnAITEMCODE = Me.Columns("AITEMCODE")
            Me.columnARATE = Me.Columns("ARATE")
            Me.columnAQTY = Me.Columns("AQTY")
            Me.columnAROUNDOFF = Me.Columns("AROUNDOFF")
            Me.columnATAXPERC = Me.Columns("ATAXPERC")
            Me.columnATAXAMOUNT = Me.Columns("ATAXAMOUNT")
            Me.columnAAMOUNT = Me.Columns("AAMOUNT")
            Me.columnATOTALAMOUNT = Me.Columns("ATOTALAMOUNT")
            Me.columnACANCELAMOUNT = Me.Columns("ACANCELAMOUNT")
            Me.columnFITEMCODE = Me.Columns("FITEMCODE")
            Me.columnFITEMDESC = Me.Columns("FITEMDESC")
            Me.columnFUOM = Me.Columns("FUOM")
            Me.columnFQTY = Me.Columns("FQTY")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnHALLDESC = Me.Columns("HALLDESC")
            Me.columnPCODE = Me.Columns("PCODE")
            Me.columnPDESC = Me.Columns("PDESC")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnLOCDESC = Me.Columns("LOCDESC")
            Me.columnFROMTIME = Me.Columns("FROMTIME")
            Me.columnTOTIME = Me.Columns("TOTIME")
            Me.columnHALLAMOUNT = Me.Columns("HALLAMOUNT")
            Me.columnBOOKINGSTATUS = Me.Columns("BOOKINGSTATUS")
            Me.columnBOOKINGFLAG = Me.Columns("BOOKINGFLAG")
            Me.columnBILLINGFLAG = Me.Columns("BILLINGFLAG")
            Me.columnCANCELFLAG = Me.Columns("CANCELFLAG")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnHALLTAXFLAG = New DataColumn("HALLTAXFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXFLAG)
            Me.columnADVANCE = New DataColumn("ADVANCE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADVANCE)
            Me.columnARRMENTAMOUNT = New DataColumn("ARRMENTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRMENTAMOUNT)
            Me.columnRESTAMOUNT = New DataColumn("RESTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTAMOUNT)
            Me.columnHALLCANCELAMOUNT = New DataColumn("HALLCANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCANCELAMOUNT)
            Me.columnRESCANCELAMOUNT = New DataColumn("RESCANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESCANCELAMOUNT)
            Me.columnARRCANCELAMOUNT = New DataColumn("ARRCANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRCANCELAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnROUNDOFF = New DataColumn("ROUNDOFF", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROUNDOFF)
            Me.columnTAXPERC = New DataColumn("TAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXPERC)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnCANCELAMOUNT = New DataColumn("CANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELAMOUNT)
            Me.columnAITEMCODE = New DataColumn("AITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAITEMCODE)
            Me.columnARATE = New DataColumn("ARATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARATE)
            Me.columnAQTY = New DataColumn("AQTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAQTY)
            Me.columnAROUNDOFF = New DataColumn("AROUNDOFF", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAROUNDOFF)
            Me.columnATAXPERC = New DataColumn("ATAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnATAXPERC)
            Me.columnATAXAMOUNT = New DataColumn("ATAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnATAXAMOUNT)
            Me.columnAAMOUNT = New DataColumn("AAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAAMOUNT)
            Me.columnATOTALAMOUNT = New DataColumn("ATOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnATOTALAMOUNT)
            Me.columnACANCELAMOUNT = New DataColumn("ACANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnACANCELAMOUNT)
            Me.columnFITEMCODE = New DataColumn("FITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFITEMCODE)
            Me.columnFITEMDESC = New DataColumn("FITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFITEMDESC)
            Me.columnFUOM = New DataColumn("FUOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFUOM)
            Me.columnFQTY = New DataColumn("FQTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFQTY)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnHALLDESC = New DataColumn("HALLDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLDESC)
            Me.columnPCODE = New DataColumn("PCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCODE)
            Me.columnPDESC = New DataColumn("PDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPDESC)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnLOCDESC = New DataColumn("LOCDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCDESC)
            Me.columnFROMTIME = New DataColumn("FROMTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMTIME)
            Me.columnTOTIME = New DataColumn("TOTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTIME)
            Me.columnHALLAMOUNT = New DataColumn("HALLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLAMOUNT)
            Me.columnBOOKINGSTATUS = New DataColumn("BOOKINGSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGSTATUS)
            Me.columnBOOKINGFLAG = New DataColumn("BOOKINGFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGFLAG)
            Me.columnBILLINGFLAG = New DataColumn("BILLINGFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLINGFLAG)
            Me.columnCANCELFLAG = New DataColumn("CANCELFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELFLAG)
            Me.columnBOOKINGTYPE.ReadOnly = true
            Me.columnBOOKINGNO.ReadOnly = true
            Me.columnBOOKINGDATE.ReadOnly = true
            Me.columnPARTYDATE.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnASSOCIATENAME.ReadOnly = true
            Me.columnOCCUPANCY.ReadOnly = true
            Me.columnDESCRIPTION.ReadOnly = true
            Me.columnHALLTAXFLAG.ReadOnly = true
            Me.columnADVANCE.ReadOnly = true
            Me.columnARRMENTAMOUNT.ReadOnly = true
            Me.columnRESTAMOUNT.ReadOnly = true
            Me.columnHALLCANCELAMOUNT.ReadOnly = true
            Me.columnRESCANCELAMOUNT.ReadOnly = true
            Me.columnARRCANCELAMOUNT.ReadOnly = true
            Me.columnFREEZE.ReadOnly = true
            Me.columnADDDATETIME.ReadOnly = true
            Me.columnADDUSERID.ReadOnly = true
            Me.columnITEMCODE.ReadOnly = true
            Me.columnITEMDESC.ReadOnly = true
            Me.columnRATE.ReadOnly = true
            Me.columnQTY.ReadOnly = true
            Me.columnROUNDOFF.ReadOnly = true
            Me.columnTAXPERC.ReadOnly = true
            Me.columnTAXAMOUNT.ReadOnly = true
            Me.columnAMOUNT.ReadOnly = true
            Me.columnTOTALAMOUNT.ReadOnly = true
            Me.columnCANCELAMOUNT.ReadOnly = true
            Me.columnAITEMCODE.ReadOnly = true
            Me.columnARATE.ReadOnly = true
            Me.columnAQTY.ReadOnly = true
            Me.columnAROUNDOFF.ReadOnly = true
            Me.columnATAXPERC.ReadOnly = true
            Me.columnATAXAMOUNT.ReadOnly = true
            Me.columnAAMOUNT.ReadOnly = true
            Me.columnATOTALAMOUNT.ReadOnly = true
            Me.columnACANCELAMOUNT.ReadOnly = true
            Me.columnFITEMCODE.ReadOnly = true
            Me.columnFITEMDESC.ReadOnly = true
            Me.columnFUOM.ReadOnly = true
            Me.columnFQTY.ReadOnly = true
            Me.columnHALLCODE.ReadOnly = true
            Me.columnHALLDESC.ReadOnly = true
            Me.columnPCODE.ReadOnly = true
            Me.columnPDESC.ReadOnly = true
            Me.columnLOCCODE.ReadOnly = true
            Me.columnLOCDESC.ReadOnly = true
            Me.columnFROMTIME.ReadOnly = true
            Me.columnTOTIME.ReadOnly = true
            Me.columnHALLAMOUNT.ReadOnly = true
            Me.columnBOOKINGSTATUS.ReadOnly = true
            Me.columnBOOKINGFLAG.ReadOnly = true
            Me.columnBILLINGFLAG.ReadOnly = true
            Me.columnCANCELFLAG.ReadOnly = true
        End Sub
        
        Public Function NewPARTY_VIEW_BOOKING_DETAILSRow() As PARTY_VIEW_BOOKING_DETAILSRow
            Return CType(Me.NewRow,PARTY_VIEW_BOOKING_DETAILSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_VIEW_BOOKING_DETAILSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_VIEW_BOOKING_DETAILSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_VIEW_BOOKING_DETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_BOOKING_DETAILSRowChanged(Me, New PARTY_VIEW_BOOKING_DETAILSRowChangeEvent(CType(e.Row,PARTY_VIEW_BOOKING_DETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_VIEW_BOOKING_DETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_BOOKING_DETAILSRowChanging(Me, New PARTY_VIEW_BOOKING_DETAILSRowChangeEvent(CType(e.Row,PARTY_VIEW_BOOKING_DETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_VIEW_BOOKING_DETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_BOOKING_DETAILSRowDeleted(Me, New PARTY_VIEW_BOOKING_DETAILSRowChangeEvent(CType(e.Row,PARTY_VIEW_BOOKING_DETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_VIEW_BOOKING_DETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_BOOKING_DETAILSRowDeleting(Me, New PARTY_VIEW_BOOKING_DETAILSRowChangeEvent(CType(e.Row,PARTY_VIEW_BOOKING_DETAILSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_VIEW_BOOKING_DETAILSRow(ByVal row As PARTY_VIEW_BOOKING_DETAILSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_BOOKING_DETAILSRow
        Inherits DataRow
        
        Private tablePARTY_VIEW_BOOKING_DETAILS As PARTY_VIEW_BOOKING_DETAILSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_VIEW_BOOKING_DETAILS = CType(Me.Table,PARTY_VIEW_BOOKING_DETAILSDataTable)
        End Sub
        
        Public Property BOOKINGTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLTAXFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLTAXFLAGColumn) = value
            End Set
        End Property
        
        Public Property ADVANCE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ADVANCEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ADVANCEColumn) = value
            End Set
        End Property
        
        Public Property ARRMENTAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ARRMENTAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ARRMENTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESTAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.RESTAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.RESTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLCANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLCANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLCANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESCANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.RESCANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.RESCANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ARRCANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ARRCANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ARRCANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.RATEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.QTYColumn) = value
            End Set
        End Property
        
        Public Property ROUNDOFF As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ROUNDOFFColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ROUNDOFFColumn) = value
            End Set
        End Property
        
        Public Property TAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.TAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.TAXPERCColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property CANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.CANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.CANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.AITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.AITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ARATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ARATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ARATEColumn) = value
            End Set
        End Property
        
        Public Property AQTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.AQTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.AQTYColumn) = value
            End Set
        End Property
        
        Public Property AROUNDOFF As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.AROUNDOFFColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.AROUNDOFFColumn) = value
            End Set
        End Property
        
        Public Property ATAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ATAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ATAXPERCColumn) = value
            End Set
        End Property
        
        Public Property ATAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ATAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ATAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.AAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.AAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ATOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ATOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ATOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ACANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ACANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ACANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property FITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property FUOM As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FUOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FUOMColumn) = value
            End Set
        End Property
        
        Public Property FQTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FQTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FQTYColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property HALLDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLDESCColumn) = value
            End Set
        End Property
        
        Public Property PCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.PCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.PCODEColumn) = value
            End Set
        End Property
        
        Public Property PDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.PDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.PDESCColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property LOCDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.LOCDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.LOCDESCColumn) = value
            End Set
        End Property
        
        Public Property FROMTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FROMTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FROMTIMEColumn) = value
            End Set
        End Property
        
        Public Property TOTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.TOTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.TOTIMEColumn) = value
            End Set
        End Property
        
        Public Property HALLAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGSTATUSColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGFLAGColumn) = value
            End Set
        End Property
        
        Public Property BILLINGFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BILLINGFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BILLINGFLAGColumn) = value
            End Set
        End Property
        
        Public Property CANCELFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.CANCELFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.CANCELFLAGColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGTYPEColumn)
        End Function
        
        Public Sub SetBOOKINGTYPENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLTAXFLAGColumn)
        End Function
        
        Public Sub SetHALLTAXFLAGNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLTAXFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADVANCENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.ADVANCEColumn)
        End Function
        
        Public Sub SetADVANCENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ADVANCEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRMENTAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.ARRMENTAMOUNTColumn)
        End Function
        
        Public Sub SetARRMENTAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ARRMENTAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.RESTAMOUNTColumn)
        End Function
        
        Public Sub SetRESTAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.RESTAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLCANCELAMOUNTColumn)
        End Function
        
        Public Sub SetHALLCANCELAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLCANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.RESCANCELAMOUNTColumn)
        End Function
        
        Public Sub SetRESCANCELAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.RESCANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.ARRCANCELAMOUNTColumn)
        End Function
        
        Public Sub SetARRCANCELAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ARRCANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsROUNDOFFNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.ROUNDOFFColumn)
        End Function
        
        Public Sub SetROUNDOFFNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ROUNDOFFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.TAXPERCColumn)
        End Function
        
        Public Sub SetTAXPERCNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.TAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.CANCELAMOUNTColumn)
        End Function
        
        Public Sub SetCANCELAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.CANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.AITEMCODEColumn)
        End Function
        
        Public Sub SetAITEMCODENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.AITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.ARATEColumn)
        End Function
        
        Public Sub SetARATENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ARATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.AQTYColumn)
        End Function
        
        Public Sub SetAQTYNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.AQTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAROUNDOFFNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.AROUNDOFFColumn)
        End Function
        
        Public Sub SetAROUNDOFFNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.AROUNDOFFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsATAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.ATAXPERCColumn)
        End Function
        
        Public Sub SetATAXPERCNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ATAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsATAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.ATAXAMOUNTColumn)
        End Function
        
        Public Sub SetATAXAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ATAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.AAMOUNTColumn)
        End Function
        
        Public Sub SetAAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.AAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsATOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.ATOTALAMOUNTColumn)
        End Function
        
        Public Sub SetATOTALAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ATOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsACANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.ACANCELAMOUNTColumn)
        End Function
        
        Public Sub SetACANCELAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.ACANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.FITEMCODEColumn)
        End Function
        
        Public Sub SetFITEMCODENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.FITEMDESCColumn)
        End Function
        
        Public Sub SetFITEMDESCNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFUOMNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.FUOMColumn)
        End Function
        
        Public Sub SetFUOMNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FUOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.FQTYColumn)
        End Function
        
        Public Sub SetFQTYNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FQTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLDESCColumn)
        End Function
        
        Public Sub SetHALLDESCNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.PCODEColumn)
        End Function
        
        Public Sub SetPCODENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.PCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.PDESCColumn)
        End Function
        
        Public Sub SetPDESCNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.PDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.LOCDESCColumn)
        End Function
        
        Public Sub SetLOCDESCNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.LOCDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.FROMTIMEColumn)
        End Function
        
        Public Sub SetFROMTIMENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.FROMTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.TOTIMEColumn)
        End Function
        
        Public Sub SetTOTIMENull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.TOTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLAMOUNTColumn)
        End Function
        
        Public Sub SetHALLAMOUNTNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.HALLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGSTATUSNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGSTATUSColumn)
        End Function
        
        Public Sub SetBOOKINGSTATUSNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGFLAGColumn)
        End Function
        
        Public Sub SetBOOKINGFLAGNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BOOKINGFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLINGFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.BILLINGFLAGColumn)
        End Function
        
        Public Sub SetBILLINGFLAGNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.BILLINGFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_BOOKING_DETAILS.CANCELFLAGColumn)
        End Function
        
        Public Sub SetCANCELFLAGNull()
            Me(Me.tablePARTY_VIEW_BOOKING_DETAILS.CANCELFLAGColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_BOOKING_DETAILSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_VIEW_BOOKING_DETAILSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_VIEW_BOOKING_DETAILSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_VIEW_BOOKING_DETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_view_hallhistoryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnhalltypecode As DataColumn
        
        Private columnhalltypedesc As DataColumn
        
        Private columnloccode As DataColumn
        
        Private columnlocdesc As DataColumn
        
        Private columnmincapacity As DataColumn
        
        Private columnmaxcapacity As DataColumn
        
        Private columnactcapacity As DataColumn
        
        Private columnrate As DataColumn
        
        Private columntaxtype As DataColumn
        
        Private columnmenurate As DataColumn
        
        Private columnmenuheadrate As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnadduser As DataColumn
        
        Private columnadddate As DataColumn
        
        Private columnpcode As DataColumn
        
        Private columnpdesc As DataColumn
        
        Private columnfromtime As DataColumn
        
        Private columntotime As DataColumn
        
        Private columnsun As DataColumn
        
        Private columnmon As DataColumn
        
        Private columntue As DataColumn
        
        Private columnwed As DataColumn
        
        Private columnthu As DataColumn
        
        Private columnfri As DataColumn
        
        Private columnsat As DataColumn
        
        Friend Sub New()
            MyBase.New("party_view_hallhistory")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property halltypecodeColumn As DataColumn
            Get
                Return Me.columnhalltypecode
            End Get
        End Property
        
        Friend ReadOnly Property halltypedescColumn As DataColumn
            Get
                Return Me.columnhalltypedesc
            End Get
        End Property
        
        Friend ReadOnly Property loccodeColumn As DataColumn
            Get
                Return Me.columnloccode
            End Get
        End Property
        
        Friend ReadOnly Property locdescColumn As DataColumn
            Get
                Return Me.columnlocdesc
            End Get
        End Property
        
        Friend ReadOnly Property mincapacityColumn As DataColumn
            Get
                Return Me.columnmincapacity
            End Get
        End Property
        
        Friend ReadOnly Property maxcapacityColumn As DataColumn
            Get
                Return Me.columnmaxcapacity
            End Get
        End Property
        
        Friend ReadOnly Property actcapacityColumn As DataColumn
            Get
                Return Me.columnactcapacity
            End Get
        End Property
        
        Friend ReadOnly Property rateColumn As DataColumn
            Get
                Return Me.columnrate
            End Get
        End Property
        
        Friend ReadOnly Property taxtypeColumn As DataColumn
            Get
                Return Me.columntaxtype
            End Get
        End Property
        
        Friend ReadOnly Property menurateColumn As DataColumn
            Get
                Return Me.columnmenurate
            End Get
        End Property
        
        Friend ReadOnly Property menuheadrateColumn As DataColumn
            Get
                Return Me.columnmenuheadrate
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property adduserColumn As DataColumn
            Get
                Return Me.columnadduser
            End Get
        End Property
        
        Friend ReadOnly Property adddateColumn As DataColumn
            Get
                Return Me.columnadddate
            End Get
        End Property
        
        Friend ReadOnly Property pcodeColumn As DataColumn
            Get
                Return Me.columnpcode
            End Get
        End Property
        
        Friend ReadOnly Property pdescColumn As DataColumn
            Get
                Return Me.columnpdesc
            End Get
        End Property
        
        Friend ReadOnly Property fromtimeColumn As DataColumn
            Get
                Return Me.columnfromtime
            End Get
        End Property
        
        Friend ReadOnly Property totimeColumn As DataColumn
            Get
                Return Me.columntotime
            End Get
        End Property
        
        Friend ReadOnly Property sunColumn As DataColumn
            Get
                Return Me.columnsun
            End Get
        End Property
        
        Friend ReadOnly Property monColumn As DataColumn
            Get
                Return Me.columnmon
            End Get
        End Property
        
        Friend ReadOnly Property tueColumn As DataColumn
            Get
                Return Me.columntue
            End Get
        End Property
        
        Friend ReadOnly Property wedColumn As DataColumn
            Get
                Return Me.columnwed
            End Get
        End Property
        
        Friend ReadOnly Property thuColumn As DataColumn
            Get
                Return Me.columnthu
            End Get
        End Property
        
        Friend ReadOnly Property friColumn As DataColumn
            Get
                Return Me.columnfri
            End Get
        End Property
        
        Friend ReadOnly Property satColumn As DataColumn
            Get
                Return Me.columnsat
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As party_view_hallhistoryRow
            Get
                Return CType(Me.Rows(index),party_view_hallhistoryRow)
            End Get
        End Property
        
        Public Event party_view_hallhistoryRowChanged As party_view_hallhistoryRowChangeEventHandler
        
        Public Event party_view_hallhistoryRowChanging As party_view_hallhistoryRowChangeEventHandler
        
        Public Event party_view_hallhistoryRowDeleted As party_view_hallhistoryRowChangeEventHandler
        
        Public Event party_view_hallhistoryRowDeleting As party_view_hallhistoryRowChangeEventHandler
        
        Public Overloads Sub Addparty_view_hallhistoryRow(ByVal row As party_view_hallhistoryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addparty_view_hallhistoryRow( _
                    ByVal halltypecode As String,  _
                    ByVal halltypedesc As String,  _
                    ByVal loccode As String,  _
                    ByVal locdesc As String,  _
                    ByVal mincapacity As Decimal,  _
                    ByVal maxcapacity As Decimal,  _
                    ByVal actcapacity As Decimal,  _
                    ByVal rate As Decimal,  _
                    ByVal taxtype As String,  _
                    ByVal menurate As Decimal,  _
                    ByVal menuheadrate As Decimal,  _
                    ByVal freeze As String,  _
                    ByVal adduser As String,  _
                    ByVal adddate As Date,  _
                    ByVal pcode As String,  _
                    ByVal pdesc As String,  _
                    ByVal fromtime As String,  _
                    ByVal totime As String,  _
                    ByVal sun As String,  _
                    ByVal mon As String,  _
                    ByVal tue As String,  _
                    ByVal wed As String,  _
                    ByVal thu As String,  _
                    ByVal fri As String,  _
                    ByVal sat As String) As party_view_hallhistoryRow
            Dim rowparty_view_hallhistoryRow As party_view_hallhistoryRow = CType(Me.NewRow,party_view_hallhistoryRow)
            rowparty_view_hallhistoryRow.ItemArray = New Object() {halltypecode, halltypedesc, loccode, locdesc, mincapacity, maxcapacity, actcapacity, rate, taxtype, menurate, menuheadrate, freeze, adduser, adddate, pcode, pdesc, fromtime, totime, sun, mon, tue, wed, thu, fri, sat}
            Me.Rows.Add(rowparty_view_hallhistoryRow)
            Return rowparty_view_hallhistoryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As party_view_hallhistoryDataTable = CType(MyBase.Clone,party_view_hallhistoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New party_view_hallhistoryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnhalltypecode = Me.Columns("halltypecode")
            Me.columnhalltypedesc = Me.Columns("halltypedesc")
            Me.columnloccode = Me.Columns("loccode")
            Me.columnlocdesc = Me.Columns("locdesc")
            Me.columnmincapacity = Me.Columns("mincapacity")
            Me.columnmaxcapacity = Me.Columns("maxcapacity")
            Me.columnactcapacity = Me.Columns("actcapacity")
            Me.columnrate = Me.Columns("rate")
            Me.columntaxtype = Me.Columns("taxtype")
            Me.columnmenurate = Me.Columns("menurate")
            Me.columnmenuheadrate = Me.Columns("menuheadrate")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnadduser = Me.Columns("adduser")
            Me.columnadddate = Me.Columns("adddate")
            Me.columnpcode = Me.Columns("pcode")
            Me.columnpdesc = Me.Columns("pdesc")
            Me.columnfromtime = Me.Columns("fromtime")
            Me.columntotime = Me.Columns("totime")
            Me.columnsun = Me.Columns("sun")
            Me.columnmon = Me.Columns("mon")
            Me.columntue = Me.Columns("tue")
            Me.columnwed = Me.Columns("wed")
            Me.columnthu = Me.Columns("thu")
            Me.columnfri = Me.Columns("fri")
            Me.columnsat = Me.Columns("sat")
        End Sub
        
        Private Sub InitClass()
            Me.columnhalltypecode = New DataColumn("halltypecode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltypecode)
            Me.columnhalltypedesc = New DataColumn("halltypedesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltypedesc)
            Me.columnloccode = New DataColumn("loccode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloccode)
            Me.columnlocdesc = New DataColumn("locdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlocdesc)
            Me.columnmincapacity = New DataColumn("mincapacity", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmincapacity)
            Me.columnmaxcapacity = New DataColumn("maxcapacity", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmaxcapacity)
            Me.columnactcapacity = New DataColumn("actcapacity", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnactcapacity)
            Me.columnrate = New DataColumn("rate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrate)
            Me.columntaxtype = New DataColumn("taxtype", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxtype)
            Me.columnmenurate = New DataColumn("menurate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmenurate)
            Me.columnmenuheadrate = New DataColumn("menuheadrate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmenuheadrate)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnadduser = New DataColumn("adduser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduser)
            Me.columnadddate = New DataColumn("adddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddate)
            Me.columnpcode = New DataColumn("pcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpcode)
            Me.columnpdesc = New DataColumn("pdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpdesc)
            Me.columnfromtime = New DataColumn("fromtime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfromtime)
            Me.columntotime = New DataColumn("totime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotime)
            Me.columnsun = New DataColumn("sun", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsun)
            Me.columnmon = New DataColumn("mon", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmon)
            Me.columntue = New DataColumn("tue", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntue)
            Me.columnwed = New DataColumn("wed", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnwed)
            Me.columnthu = New DataColumn("thu", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnthu)
            Me.columnfri = New DataColumn("fri", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfri)
            Me.columnsat = New DataColumn("sat", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsat)
            Me.columnhalltypecode.ReadOnly = true
            Me.columnhalltypedesc.ReadOnly = true
            Me.columnloccode.ReadOnly = true
            Me.columnlocdesc.ReadOnly = true
            Me.columnmincapacity.ReadOnly = true
            Me.columnmaxcapacity.ReadOnly = true
            Me.columnactcapacity.ReadOnly = true
            Me.columnrate.ReadOnly = true
            Me.columntaxtype.ReadOnly = true
            Me.columnmenurate.ReadOnly = true
            Me.columnmenuheadrate.ReadOnly = true
            Me.columnfreeze.ReadOnly = true
            Me.columnadduser.ReadOnly = true
            Me.columnadddate.ReadOnly = true
            Me.columnpcode.ReadOnly = true
            Me.columnpdesc.ReadOnly = true
            Me.columnfromtime.ReadOnly = true
            Me.columntotime.ReadOnly = true
            Me.columnsun.ReadOnly = true
            Me.columnmon.ReadOnly = true
            Me.columntue.ReadOnly = true
            Me.columnwed.ReadOnly = true
            Me.columnthu.ReadOnly = true
            Me.columnfri.ReadOnly = true
            Me.columnsat.ReadOnly = true
        End Sub
        
        Public Function Newparty_view_hallhistoryRow() As party_view_hallhistoryRow
            Return CType(Me.NewRow,party_view_hallhistoryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New party_view_hallhistoryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(party_view_hallhistoryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.party_view_hallhistoryRowChangedEvent) Is Nothing) Then
                RaiseEvent party_view_hallhistoryRowChanged(Me, New party_view_hallhistoryRowChangeEvent(CType(e.Row,party_view_hallhistoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.party_view_hallhistoryRowChangingEvent) Is Nothing) Then
                RaiseEvent party_view_hallhistoryRowChanging(Me, New party_view_hallhistoryRowChangeEvent(CType(e.Row,party_view_hallhistoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.party_view_hallhistoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent party_view_hallhistoryRowDeleted(Me, New party_view_hallhistoryRowChangeEvent(CType(e.Row,party_view_hallhistoryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.party_view_hallhistoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent party_view_hallhistoryRowDeleting(Me, New party_view_hallhistoryRowChangeEvent(CType(e.Row,party_view_hallhistoryRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeparty_view_hallhistoryRow(ByVal row As party_view_hallhistoryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_view_hallhistoryRow
        Inherits DataRow
        
        Private tableparty_view_hallhistory As party_view_hallhistoryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableparty_view_hallhistory = CType(Me.Table,party_view_hallhistoryDataTable)
        End Sub
        
        Public Property halltypecode As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.halltypecodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.halltypecodeColumn) = value
            End Set
        End Property
        
        Public Property halltypedesc As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.halltypedescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.halltypedescColumn) = value
            End Set
        End Property
        
        Public Property loccode As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.loccodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.loccodeColumn) = value
            End Set
        End Property
        
        Public Property locdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.locdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.locdescColumn) = value
            End Set
        End Property
        
        Public Property mincapacity As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.mincapacityColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.mincapacityColumn) = value
            End Set
        End Property
        
        Public Property maxcapacity As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.maxcapacityColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.maxcapacityColumn) = value
            End Set
        End Property
        
        Public Property actcapacity As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.actcapacityColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.actcapacityColumn) = value
            End Set
        End Property
        
        Public Property rate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.rateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.rateColumn) = value
            End Set
        End Property
        
        Public Property taxtype As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.taxtypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.taxtypeColumn) = value
            End Set
        End Property
        
        Public Property menurate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.menurateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.menurateColumn) = value
            End Set
        End Property
        
        Public Property menuheadrate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.menuheadrateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.menuheadrateColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.freezeColumn) = value
            End Set
        End Property
        
        Public Property adduser As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.adduserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.adduserColumn) = value
            End Set
        End Property
        
        Public Property adddate As Date
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.adddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.adddateColumn) = value
            End Set
        End Property
        
        Public Property pcode As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.pcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.pcodeColumn) = value
            End Set
        End Property
        
        Public Property pdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.pdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.pdescColumn) = value
            End Set
        End Property
        
        Public Property fromtime As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.fromtimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.fromtimeColumn) = value
            End Set
        End Property
        
        Public Property totime As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.totimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.totimeColumn) = value
            End Set
        End Property
        
        Public Property sun As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.sunColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.sunColumn) = value
            End Set
        End Property
        
        Public Property mon As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.monColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.monColumn) = value
            End Set
        End Property
        
        Public Property tue As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.tueColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.tueColumn) = value
            End Set
        End Property
        
        Public Property wed As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.wedColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.wedColumn) = value
            End Set
        End Property
        
        Public Property thu As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.thuColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.thuColumn) = value
            End Set
        End Property
        
        Public Property fri As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.friColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.friColumn) = value
            End Set
        End Property
        
        Public Property sat As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_view_hallhistory.satColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_view_hallhistory.satColumn) = value
            End Set
        End Property
        
        Public Function IshalltypecodeNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.halltypecodeColumn)
        End Function
        
        Public Sub SethalltypecodeNull()
            Me(Me.tableparty_view_hallhistory.halltypecodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalltypedescNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.halltypedescColumn)
        End Function
        
        Public Sub SethalltypedescNull()
            Me(Me.tableparty_view_hallhistory.halltypedescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsloccodeNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.loccodeColumn)
        End Function
        
        Public Sub SetloccodeNull()
            Me(Me.tableparty_view_hallhistory.loccodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslocdescNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.locdescColumn)
        End Function
        
        Public Sub SetlocdescNull()
            Me(Me.tableparty_view_hallhistory.locdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmincapacityNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.mincapacityColumn)
        End Function
        
        Public Sub SetmincapacityNull()
            Me(Me.tableparty_view_hallhistory.mincapacityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmaxcapacityNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.maxcapacityColumn)
        End Function
        
        Public Sub SetmaxcapacityNull()
            Me(Me.tableparty_view_hallhistory.maxcapacityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsactcapacityNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.actcapacityColumn)
        End Function
        
        Public Sub SetactcapacityNull()
            Me(Me.tableparty_view_hallhistory.actcapacityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrateNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.rateColumn)
        End Function
        
        Public Sub SetrateNull()
            Me(Me.tableparty_view_hallhistory.rateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxtypeNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.taxtypeColumn)
        End Function
        
        Public Sub SettaxtypeNull()
            Me(Me.tableparty_view_hallhistory.taxtypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmenurateNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.menurateColumn)
        End Function
        
        Public Sub SetmenurateNull()
            Me(Me.tableparty_view_hallhistory.menurateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmenuheadrateNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.menuheadrateColumn)
        End Function
        
        Public Sub SetmenuheadrateNull()
            Me(Me.tableparty_view_hallhistory.menuheadrateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tableparty_view_hallhistory.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduserNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.adduserColumn)
        End Function
        
        Public Sub SetadduserNull()
            Me(Me.tableparty_view_hallhistory.adduserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddateNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.adddateColumn)
        End Function
        
        Public Sub SetadddateNull()
            Me(Me.tableparty_view_hallhistory.adddateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspcodeNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.pcodeColumn)
        End Function
        
        Public Sub SetpcodeNull()
            Me(Me.tableparty_view_hallhistory.pcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspdescNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.pdescColumn)
        End Function
        
        Public Sub SetpdescNull()
            Me(Me.tableparty_view_hallhistory.pdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfromtimeNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.fromtimeColumn)
        End Function
        
        Public Sub SetfromtimeNull()
            Me(Me.tableparty_view_hallhistory.fromtimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotimeNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.totimeColumn)
        End Function
        
        Public Sub SettotimeNull()
            Me(Me.tableparty_view_hallhistory.totimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssunNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.sunColumn)
        End Function
        
        Public Sub SetsunNull()
            Me(Me.tableparty_view_hallhistory.sunColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmonNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.monColumn)
        End Function
        
        Public Sub SetmonNull()
            Me(Me.tableparty_view_hallhistory.monColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstueNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.tueColumn)
        End Function
        
        Public Sub SettueNull()
            Me(Me.tableparty_view_hallhistory.tueColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IswedNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.wedColumn)
        End Function
        
        Public Sub SetwedNull()
            Me(Me.tableparty_view_hallhistory.wedColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsthuNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.thuColumn)
        End Function
        
        Public Sub SetthuNull()
            Me(Me.tableparty_view_hallhistory.thuColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfriNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.friColumn)
        End Function
        
        Public Sub SetfriNull()
            Me(Me.tableparty_view_hallhistory.friColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssatNull() As Boolean
            Return Me.IsNull(Me.tableparty_view_hallhistory.satColumn)
        End Function
        
        Public Sub SetsatNull()
            Me(Me.tableparty_view_hallhistory.satColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_view_hallhistoryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As party_view_hallhistoryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As party_view_hallhistoryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As party_view_hallhistoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_CANCELLATIONHISTORYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCANCELFROM As DataColumn
        
        Private columnCANCELTO As DataColumn
        
        Private columnCANCELTYPE As DataColumn
        
        Private columnCANCEL_AMT_PER As DataColumn
        
        Private columnCANCEL_AMT_HEAD As DataColumn
        
        Private columnFIXEDAMOUNT As DataColumn
        
        Private columnBOOK_FROMDATE As DataColumn
        
        Private columnBOOK_TODATE As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDUSER As DataColumn
        
        Private columnADDDATE As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_PARTY_CANCELLATIONHISTORY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CANCELFROMColumn As DataColumn
            Get
                Return Me.columnCANCELFROM
            End Get
        End Property
        
        Friend ReadOnly Property CANCELTOColumn As DataColumn
            Get
                Return Me.columnCANCELTO
            End Get
        End Property
        
        Friend ReadOnly Property CANCELTYPEColumn As DataColumn
            Get
                Return Me.columnCANCELTYPE
            End Get
        End Property
        
        Friend ReadOnly Property CANCEL_AMT_PERColumn As DataColumn
            Get
                Return Me.columnCANCEL_AMT_PER
            End Get
        End Property
        
        Friend ReadOnly Property CANCEL_AMT_HEADColumn As DataColumn
            Get
                Return Me.columnCANCEL_AMT_HEAD
            End Get
        End Property
        
        Friend ReadOnly Property FIXEDAMOUNTColumn As DataColumn
            Get
                Return Me.columnFIXEDAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BOOK_FROMDATEColumn As DataColumn
            Get
                Return Me.columnBOOK_FROMDATE
            End Get
        End Property
        
        Friend ReadOnly Property BOOK_TODATEColumn As DataColumn
            Get
                Return Me.columnBOOK_TODATE
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERColumn As DataColumn
            Get
                Return Me.columnADDUSER
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATEColumn As DataColumn
            Get
                Return Me.columnADDDATE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARTY_CANCELLATIONHISTORYRow
            Get
                Return CType(Me.Rows(index),VIEW_PARTY_CANCELLATIONHISTORYRow)
            End Get
        End Property
        
        Public Event VIEW_PARTY_CANCELLATIONHISTORYRowChanged As VIEW_PARTY_CANCELLATIONHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_CANCELLATIONHISTORYRowChanging As VIEW_PARTY_CANCELLATIONHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_CANCELLATIONHISTORYRowDeleted As VIEW_PARTY_CANCELLATIONHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_CANCELLATIONHISTORYRowDeleting As VIEW_PARTY_CANCELLATIONHISTORYRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_PARTY_CANCELLATIONHISTORYRow(ByVal row As VIEW_PARTY_CANCELLATIONHISTORYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_PARTY_CANCELLATIONHISTORYRow(ByVal CANCELFROM As Decimal, ByVal CANCELTO As Decimal, ByVal CANCELTYPE As String, ByVal CANCEL_AMT_PER As Decimal, ByVal CANCEL_AMT_HEAD As Decimal, ByVal FIXEDAMOUNT As Decimal, ByVal BOOK_FROMDATE As Date, ByVal BOOK_TODATE As Date, ByVal FREEZE As String, ByVal ADDUSER As String, ByVal ADDDATE As Date) As VIEW_PARTY_CANCELLATIONHISTORYRow
            Dim rowVIEW_PARTY_CANCELLATIONHISTORYRow As VIEW_PARTY_CANCELLATIONHISTORYRow = CType(Me.NewRow,VIEW_PARTY_CANCELLATIONHISTORYRow)
            rowVIEW_PARTY_CANCELLATIONHISTORYRow.ItemArray = New Object() {CANCELFROM, CANCELTO, CANCELTYPE, CANCEL_AMT_PER, CANCEL_AMT_HEAD, FIXEDAMOUNT, BOOK_FROMDATE, BOOK_TODATE, FREEZE, ADDUSER, ADDDATE}
            Me.Rows.Add(rowVIEW_PARTY_CANCELLATIONHISTORYRow)
            Return rowVIEW_PARTY_CANCELLATIONHISTORYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_PARTY_CANCELLATIONHISTORYDataTable = CType(MyBase.Clone,VIEW_PARTY_CANCELLATIONHISTORYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_PARTY_CANCELLATIONHISTORYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCANCELFROM = Me.Columns("CANCELFROM")
            Me.columnCANCELTO = Me.Columns("CANCELTO")
            Me.columnCANCELTYPE = Me.Columns("CANCELTYPE")
            Me.columnCANCEL_AMT_PER = Me.Columns("CANCEL_AMT_PER")
            Me.columnCANCEL_AMT_HEAD = Me.Columns("CANCEL_AMT_HEAD")
            Me.columnFIXEDAMOUNT = Me.Columns("FIXEDAMOUNT")
            Me.columnBOOK_FROMDATE = Me.Columns("BOOK_FROMDATE")
            Me.columnBOOK_TODATE = Me.Columns("BOOK_TODATE")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDUSER = Me.Columns("ADDUSER")
            Me.columnADDDATE = Me.Columns("ADDDATE")
        End Sub
        
        Private Sub InitClass()
            Me.columnCANCELFROM = New DataColumn("CANCELFROM", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELFROM)
            Me.columnCANCELTO = New DataColumn("CANCELTO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELTO)
            Me.columnCANCELTYPE = New DataColumn("CANCELTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELTYPE)
            Me.columnCANCEL_AMT_PER = New DataColumn("CANCEL_AMT_PER", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCEL_AMT_PER)
            Me.columnCANCEL_AMT_HEAD = New DataColumn("CANCEL_AMT_HEAD", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCEL_AMT_HEAD)
            Me.columnFIXEDAMOUNT = New DataColumn("FIXEDAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFIXEDAMOUNT)
            Me.columnBOOK_FROMDATE = New DataColumn("BOOK_FROMDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOK_FROMDATE)
            Me.columnBOOK_TODATE = New DataColumn("BOOK_TODATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOK_TODATE)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDUSER = New DataColumn("ADDUSER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSER)
            Me.columnADDDATE = New DataColumn("ADDDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATE)
            Me.columnCANCELFROM.ReadOnly = true
            Me.columnCANCELTO.ReadOnly = true
            Me.columnCANCELTYPE.ReadOnly = true
            Me.columnCANCEL_AMT_PER.ReadOnly = true
            Me.columnCANCEL_AMT_HEAD.ReadOnly = true
            Me.columnFIXEDAMOUNT.ReadOnly = true
            Me.columnBOOK_FROMDATE.ReadOnly = true
            Me.columnBOOK_TODATE.ReadOnly = true
            Me.columnFREEZE.ReadOnly = true
            Me.columnADDUSER.ReadOnly = true
            Me.columnADDDATE.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_PARTY_CANCELLATIONHISTORYRow() As VIEW_PARTY_CANCELLATIONHISTORYRow
            Return CType(Me.NewRow,VIEW_PARTY_CANCELLATIONHISTORYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_PARTY_CANCELLATIONHISTORYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_PARTY_CANCELLATIONHISTORYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARTY_CANCELLATIONHISTORYRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_CANCELLATIONHISTORYRowChanged(Me, New VIEW_PARTY_CANCELLATIONHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_CANCELLATIONHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARTY_CANCELLATIONHISTORYRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_CANCELLATIONHISTORYRowChanging(Me, New VIEW_PARTY_CANCELLATIONHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_CANCELLATIONHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARTY_CANCELLATIONHISTORYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_CANCELLATIONHISTORYRowDeleted(Me, New VIEW_PARTY_CANCELLATIONHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_CANCELLATIONHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARTY_CANCELLATIONHISTORYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_CANCELLATIONHISTORYRowDeleting(Me, New VIEW_PARTY_CANCELLATIONHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_CANCELLATIONHISTORYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_PARTY_CANCELLATIONHISTORYRow(ByVal row As VIEW_PARTY_CANCELLATIONHISTORYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_CANCELLATIONHISTORYRow
        Inherits DataRow
        
        Private tableVIEW_PARTY_CANCELLATIONHISTORY As VIEW_PARTY_CANCELLATIONHISTORYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARTY_CANCELLATIONHISTORY = CType(Me.Table,VIEW_PARTY_CANCELLATIONHISTORYDataTable)
        End Sub
        
        Public Property CANCELFROM As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCELFROMColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCELFROMColumn) = value
            End Set
        End Property
        
        Public Property CANCELTO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCELTOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCELTOColumn) = value
            End Set
        End Property
        
        Public Property CANCELTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCELTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCELTYPEColumn) = value
            End Set
        End Property
        
        Public Property CANCEL_AMT_PER As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCEL_AMT_PERColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCEL_AMT_PERColumn) = value
            End Set
        End Property
        
        Public Property CANCEL_AMT_HEAD As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCEL_AMT_HEADColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCEL_AMT_HEADColumn) = value
            End Set
        End Property
        
        Public Property FIXEDAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.FIXEDAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.FIXEDAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BOOK_FROMDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.BOOK_FROMDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.BOOK_FROMDATEColumn) = value
            End Set
        End Property
        
        Public Property BOOK_TODATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.BOOK_TODATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.BOOK_TODATEColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSER As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.ADDUSERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.ADDUSERColumn) = value
            End Set
        End Property
        
        Public Property ADDDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.ADDDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.ADDDATEColumn) = value
            End Set
        End Property
        
        Public Function IsCANCELFROMNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCELFROMColumn)
        End Function
        
        Public Sub SetCANCELFROMNull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCELFROMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELTONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCELTOColumn)
        End Function
        
        Public Sub SetCANCELTONull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCELTOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCELTYPEColumn)
        End Function
        
        Public Sub SetCANCELTYPENull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCELTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCEL_AMT_PERNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCEL_AMT_PERColumn)
        End Function
        
        Public Sub SetCANCEL_AMT_PERNull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCEL_AMT_PERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCEL_AMT_HEADNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCEL_AMT_HEADColumn)
        End Function
        
        Public Sub SetCANCEL_AMT_HEADNull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.CANCEL_AMT_HEADColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFIXEDAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.FIXEDAMOUNTColumn)
        End Function
        
        Public Sub SetFIXEDAMOUNTNull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.FIXEDAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOK_FROMDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.BOOK_FROMDATEColumn)
        End Function
        
        Public Sub SetBOOK_FROMDATENull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.BOOK_FROMDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOK_TODATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.BOOK_TODATEColumn)
        End Function
        
        Public Sub SetBOOK_TODATENull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.BOOK_TODATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.ADDUSERColumn)
        End Function
        
        Public Sub SetADDUSERNull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.ADDUSERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.ADDDATEColumn)
        End Function
        
        Public Sub SetADDDATENull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY.ADDDATEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_CANCELLATIONHISTORYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_PARTY_CANCELLATIONHISTORYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_PARTY_CANCELLATIONHISTORYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_PARTY_CANCELLATIONHISTORYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_CANCELLATIONHISTORY1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCANCELFROM As DataColumn
        
        Private columnCANCELTO As DataColumn
        
        Private columnCANCELTYPE As DataColumn
        
        Private columnCANCEL_AMT_PER As DataColumn
        
        Private columnCANCEL_AMT_HEAD As DataColumn
        
        Private columnFIXEDAMOUNT As DataColumn
        
        Private columnBOOK_FROMDATE As DataColumn
        
        Private columnBOOK_TODATE As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDUSER As DataColumn
        
        Private columnADDDATE As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_PARTY_CANCELLATIONHISTORY1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CANCELFROMColumn As DataColumn
            Get
                Return Me.columnCANCELFROM
            End Get
        End Property
        
        Friend ReadOnly Property CANCELTOColumn As DataColumn
            Get
                Return Me.columnCANCELTO
            End Get
        End Property
        
        Friend ReadOnly Property CANCELTYPEColumn As DataColumn
            Get
                Return Me.columnCANCELTYPE
            End Get
        End Property
        
        Friend ReadOnly Property CANCEL_AMT_PERColumn As DataColumn
            Get
                Return Me.columnCANCEL_AMT_PER
            End Get
        End Property
        
        Friend ReadOnly Property CANCEL_AMT_HEADColumn As DataColumn
            Get
                Return Me.columnCANCEL_AMT_HEAD
            End Get
        End Property
        
        Friend ReadOnly Property FIXEDAMOUNTColumn As DataColumn
            Get
                Return Me.columnFIXEDAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BOOK_FROMDATEColumn As DataColumn
            Get
                Return Me.columnBOOK_FROMDATE
            End Get
        End Property
        
        Friend ReadOnly Property BOOK_TODATEColumn As DataColumn
            Get
                Return Me.columnBOOK_TODATE
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERColumn As DataColumn
            Get
                Return Me.columnADDUSER
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATEColumn As DataColumn
            Get
                Return Me.columnADDDATE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARTY_CANCELLATIONHISTORY1Row
            Get
                Return CType(Me.Rows(index),VIEW_PARTY_CANCELLATIONHISTORY1Row)
            End Get
        End Property
        
        Public Event VIEW_PARTY_CANCELLATIONHISTORY1RowChanged As VIEW_PARTY_CANCELLATIONHISTORY1RowChangeEventHandler
        
        Public Event VIEW_PARTY_CANCELLATIONHISTORY1RowChanging As VIEW_PARTY_CANCELLATIONHISTORY1RowChangeEventHandler
        
        Public Event VIEW_PARTY_CANCELLATIONHISTORY1RowDeleted As VIEW_PARTY_CANCELLATIONHISTORY1RowChangeEventHandler
        
        Public Event VIEW_PARTY_CANCELLATIONHISTORY1RowDeleting As VIEW_PARTY_CANCELLATIONHISTORY1RowChangeEventHandler
        
        Public Overloads Sub AddVIEW_PARTY_CANCELLATIONHISTORY1Row(ByVal row As VIEW_PARTY_CANCELLATIONHISTORY1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_PARTY_CANCELLATIONHISTORY1Row(ByVal CANCELFROM As Decimal, ByVal CANCELTO As Decimal, ByVal CANCELTYPE As String, ByVal CANCEL_AMT_PER As Decimal, ByVal CANCEL_AMT_HEAD As Decimal, ByVal FIXEDAMOUNT As Decimal, ByVal BOOK_FROMDATE As Date, ByVal BOOK_TODATE As Date, ByVal FREEZE As String, ByVal ADDUSER As String, ByVal ADDDATE As Date) As VIEW_PARTY_CANCELLATIONHISTORY1Row
            Dim rowVIEW_PARTY_CANCELLATIONHISTORY1Row As VIEW_PARTY_CANCELLATIONHISTORY1Row = CType(Me.NewRow,VIEW_PARTY_CANCELLATIONHISTORY1Row)
            rowVIEW_PARTY_CANCELLATIONHISTORY1Row.ItemArray = New Object() {CANCELFROM, CANCELTO, CANCELTYPE, CANCEL_AMT_PER, CANCEL_AMT_HEAD, FIXEDAMOUNT, BOOK_FROMDATE, BOOK_TODATE, FREEZE, ADDUSER, ADDDATE}
            Me.Rows.Add(rowVIEW_PARTY_CANCELLATIONHISTORY1Row)
            Return rowVIEW_PARTY_CANCELLATIONHISTORY1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_PARTY_CANCELLATIONHISTORY1DataTable = CType(MyBase.Clone,VIEW_PARTY_CANCELLATIONHISTORY1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_PARTY_CANCELLATIONHISTORY1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCANCELFROM = Me.Columns("CANCELFROM")
            Me.columnCANCELTO = Me.Columns("CANCELTO")
            Me.columnCANCELTYPE = Me.Columns("CANCELTYPE")
            Me.columnCANCEL_AMT_PER = Me.Columns("CANCEL_AMT_PER")
            Me.columnCANCEL_AMT_HEAD = Me.Columns("CANCEL_AMT_HEAD")
            Me.columnFIXEDAMOUNT = Me.Columns("FIXEDAMOUNT")
            Me.columnBOOK_FROMDATE = Me.Columns("BOOK_FROMDATE")
            Me.columnBOOK_TODATE = Me.Columns("BOOK_TODATE")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDUSER = Me.Columns("ADDUSER")
            Me.columnADDDATE = Me.Columns("ADDDATE")
        End Sub
        
        Private Sub InitClass()
            Me.columnCANCELFROM = New DataColumn("CANCELFROM", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELFROM)
            Me.columnCANCELTO = New DataColumn("CANCELTO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELTO)
            Me.columnCANCELTYPE = New DataColumn("CANCELTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELTYPE)
            Me.columnCANCEL_AMT_PER = New DataColumn("CANCEL_AMT_PER", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCEL_AMT_PER)
            Me.columnCANCEL_AMT_HEAD = New DataColumn("CANCEL_AMT_HEAD", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCEL_AMT_HEAD)
            Me.columnFIXEDAMOUNT = New DataColumn("FIXEDAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFIXEDAMOUNT)
            Me.columnBOOK_FROMDATE = New DataColumn("BOOK_FROMDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOK_FROMDATE)
            Me.columnBOOK_TODATE = New DataColumn("BOOK_TODATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOK_TODATE)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDUSER = New DataColumn("ADDUSER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSER)
            Me.columnADDDATE = New DataColumn("ADDDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATE)
            Me.columnCANCELFROM.ReadOnly = true
            Me.columnCANCELTO.ReadOnly = true
            Me.columnCANCELTYPE.ReadOnly = true
            Me.columnCANCEL_AMT_PER.ReadOnly = true
            Me.columnCANCEL_AMT_HEAD.ReadOnly = true
            Me.columnFIXEDAMOUNT.ReadOnly = true
            Me.columnBOOK_FROMDATE.ReadOnly = true
            Me.columnBOOK_TODATE.ReadOnly = true
            Me.columnFREEZE.ReadOnly = true
            Me.columnADDUSER.ReadOnly = true
            Me.columnADDDATE.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_PARTY_CANCELLATIONHISTORY1Row() As VIEW_PARTY_CANCELLATIONHISTORY1Row
            Return CType(Me.NewRow,VIEW_PARTY_CANCELLATIONHISTORY1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_PARTY_CANCELLATIONHISTORY1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_PARTY_CANCELLATIONHISTORY1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARTY_CANCELLATIONHISTORY1RowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_CANCELLATIONHISTORY1RowChanged(Me, New VIEW_PARTY_CANCELLATIONHISTORY1RowChangeEvent(CType(e.Row,VIEW_PARTY_CANCELLATIONHISTORY1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARTY_CANCELLATIONHISTORY1RowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_CANCELLATIONHISTORY1RowChanging(Me, New VIEW_PARTY_CANCELLATIONHISTORY1RowChangeEvent(CType(e.Row,VIEW_PARTY_CANCELLATIONHISTORY1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARTY_CANCELLATIONHISTORY1RowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_CANCELLATIONHISTORY1RowDeleted(Me, New VIEW_PARTY_CANCELLATIONHISTORY1RowChangeEvent(CType(e.Row,VIEW_PARTY_CANCELLATIONHISTORY1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARTY_CANCELLATIONHISTORY1RowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_CANCELLATIONHISTORY1RowDeleting(Me, New VIEW_PARTY_CANCELLATIONHISTORY1RowChangeEvent(CType(e.Row,VIEW_PARTY_CANCELLATIONHISTORY1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_PARTY_CANCELLATIONHISTORY1Row(ByVal row As VIEW_PARTY_CANCELLATIONHISTORY1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_CANCELLATIONHISTORY1Row
        Inherits DataRow
        
        Private tableVIEW_PARTY_CANCELLATIONHISTORY1 As VIEW_PARTY_CANCELLATIONHISTORY1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARTY_CANCELLATIONHISTORY1 = CType(Me.Table,VIEW_PARTY_CANCELLATIONHISTORY1DataTable)
        End Sub
        
        Public Property CANCELFROM As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCELFROMColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCELFROMColumn) = value
            End Set
        End Property
        
        Public Property CANCELTO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCELTOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCELTOColumn) = value
            End Set
        End Property
        
        Public Property CANCELTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCELTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCELTYPEColumn) = value
            End Set
        End Property
        
        Public Property CANCEL_AMT_PER As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCEL_AMT_PERColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCEL_AMT_PERColumn) = value
            End Set
        End Property
        
        Public Property CANCEL_AMT_HEAD As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCEL_AMT_HEADColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCEL_AMT_HEADColumn) = value
            End Set
        End Property
        
        Public Property FIXEDAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.FIXEDAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.FIXEDAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BOOK_FROMDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.BOOK_FROMDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.BOOK_FROMDATEColumn) = value
            End Set
        End Property
        
        Public Property BOOK_TODATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.BOOK_TODATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.BOOK_TODATEColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSER As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.ADDUSERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.ADDUSERColumn) = value
            End Set
        End Property
        
        Public Property ADDDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.ADDDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.ADDDATEColumn) = value
            End Set
        End Property
        
        Public Function IsCANCELFROMNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCELFROMColumn)
        End Function
        
        Public Sub SetCANCELFROMNull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCELFROMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELTONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCELTOColumn)
        End Function
        
        Public Sub SetCANCELTONull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCELTOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCELTYPEColumn)
        End Function
        
        Public Sub SetCANCELTYPENull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCELTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCEL_AMT_PERNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCEL_AMT_PERColumn)
        End Function
        
        Public Sub SetCANCEL_AMT_PERNull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCEL_AMT_PERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCEL_AMT_HEADNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCEL_AMT_HEADColumn)
        End Function
        
        Public Sub SetCANCEL_AMT_HEADNull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.CANCEL_AMT_HEADColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFIXEDAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.FIXEDAMOUNTColumn)
        End Function
        
        Public Sub SetFIXEDAMOUNTNull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.FIXEDAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOK_FROMDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.BOOK_FROMDATEColumn)
        End Function
        
        Public Sub SetBOOK_FROMDATENull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.BOOK_FROMDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOK_TODATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.BOOK_TODATEColumn)
        End Function
        
        Public Sub SetBOOK_TODATENull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.BOOK_TODATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.ADDUSERColumn)
        End Function
        
        Public Sub SetADDUSERNull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.ADDUSERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.ADDDATEColumn)
        End Function
        
        Public Sub SetADDDATENull()
            Me(Me.tableVIEW_PARTY_CANCELLATIONHISTORY1.ADDDATEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_CANCELLATIONHISTORY1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_PARTY_CANCELLATIONHISTORY1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_PARTY_CANCELLATIONHISTORY1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_PARTY_CANCELLATIONHISTORY1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_CATEGORYHISTORYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnccode As DataColumn
        
        Private columncdesc As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnadduser As DataColumn
        
        Private columnadddate As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_PARTY_CATEGORYHISTORY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ccodeColumn As DataColumn
            Get
                Return Me.columnccode
            End Get
        End Property
        
        Friend ReadOnly Property cdescColumn As DataColumn
            Get
                Return Me.columncdesc
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property adduserColumn As DataColumn
            Get
                Return Me.columnadduser
            End Get
        End Property
        
        Friend ReadOnly Property adddateColumn As DataColumn
            Get
                Return Me.columnadddate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARTY_CATEGORYHISTORYRow
            Get
                Return CType(Me.Rows(index),VIEW_PARTY_CATEGORYHISTORYRow)
            End Get
        End Property
        
        Public Event VIEW_PARTY_CATEGORYHISTORYRowChanged As VIEW_PARTY_CATEGORYHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_CATEGORYHISTORYRowChanging As VIEW_PARTY_CATEGORYHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_CATEGORYHISTORYRowDeleted As VIEW_PARTY_CATEGORYHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_CATEGORYHISTORYRowDeleting As VIEW_PARTY_CATEGORYHISTORYRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_PARTY_CATEGORYHISTORYRow(ByVal row As VIEW_PARTY_CATEGORYHISTORYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_PARTY_CATEGORYHISTORYRow(ByVal ccode As String, ByVal cdesc As String, ByVal freeze As String, ByVal adduser As String, ByVal adddate As Date) As VIEW_PARTY_CATEGORYHISTORYRow
            Dim rowVIEW_PARTY_CATEGORYHISTORYRow As VIEW_PARTY_CATEGORYHISTORYRow = CType(Me.NewRow,VIEW_PARTY_CATEGORYHISTORYRow)
            rowVIEW_PARTY_CATEGORYHISTORYRow.ItemArray = New Object() {ccode, cdesc, freeze, adduser, adddate}
            Me.Rows.Add(rowVIEW_PARTY_CATEGORYHISTORYRow)
            Return rowVIEW_PARTY_CATEGORYHISTORYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_PARTY_CATEGORYHISTORYDataTable = CType(MyBase.Clone,VIEW_PARTY_CATEGORYHISTORYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_PARTY_CATEGORYHISTORYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnccode = Me.Columns("ccode")
            Me.columncdesc = Me.Columns("cdesc")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnadduser = Me.Columns("adduser")
            Me.columnadddate = Me.Columns("adddate")
        End Sub
        
        Private Sub InitClass()
            Me.columnccode = New DataColumn("ccode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnccode)
            Me.columncdesc = New DataColumn("cdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncdesc)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnadduser = New DataColumn("adduser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduser)
            Me.columnadddate = New DataColumn("adddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddate)
            Me.columnccode.ReadOnly = true
            Me.columncdesc.ReadOnly = true
            Me.columnfreeze.ReadOnly = true
            Me.columnadduser.ReadOnly = true
            Me.columnadddate.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_PARTY_CATEGORYHISTORYRow() As VIEW_PARTY_CATEGORYHISTORYRow
            Return CType(Me.NewRow,VIEW_PARTY_CATEGORYHISTORYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_PARTY_CATEGORYHISTORYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_PARTY_CATEGORYHISTORYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARTY_CATEGORYHISTORYRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_CATEGORYHISTORYRowChanged(Me, New VIEW_PARTY_CATEGORYHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_CATEGORYHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARTY_CATEGORYHISTORYRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_CATEGORYHISTORYRowChanging(Me, New VIEW_PARTY_CATEGORYHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_CATEGORYHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARTY_CATEGORYHISTORYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_CATEGORYHISTORYRowDeleted(Me, New VIEW_PARTY_CATEGORYHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_CATEGORYHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARTY_CATEGORYHISTORYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_CATEGORYHISTORYRowDeleting(Me, New VIEW_PARTY_CATEGORYHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_CATEGORYHISTORYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_PARTY_CATEGORYHISTORYRow(ByVal row As VIEW_PARTY_CATEGORYHISTORYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_CATEGORYHISTORYRow
        Inherits DataRow
        
        Private tableVIEW_PARTY_CATEGORYHISTORY As VIEW_PARTY_CATEGORYHISTORYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARTY_CATEGORYHISTORY = CType(Me.Table,VIEW_PARTY_CATEGORYHISTORYDataTable)
        End Sub
        
        Public Property ccode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CATEGORYHISTORY.ccodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CATEGORYHISTORY.ccodeColumn) = value
            End Set
        End Property
        
        Public Property cdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CATEGORYHISTORY.cdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CATEGORYHISTORY.cdescColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CATEGORYHISTORY.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CATEGORYHISTORY.freezeColumn) = value
            End Set
        End Property
        
        Public Property adduser As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CATEGORYHISTORY.adduserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CATEGORYHISTORY.adduserColumn) = value
            End Set
        End Property
        
        Public Property adddate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_CATEGORYHISTORY.adddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_CATEGORYHISTORY.adddateColumn) = value
            End Set
        End Property
        
        Public Function IsccodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CATEGORYHISTORY.ccodeColumn)
        End Function
        
        Public Sub SetccodeNull()
            Me(Me.tableVIEW_PARTY_CATEGORYHISTORY.ccodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscdescNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CATEGORYHISTORY.cdescColumn)
        End Function
        
        Public Sub SetcdescNull()
            Me(Me.tableVIEW_PARTY_CATEGORYHISTORY.cdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CATEGORYHISTORY.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tableVIEW_PARTY_CATEGORYHISTORY.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduserNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CATEGORYHISTORY.adduserColumn)
        End Function
        
        Public Sub SetadduserNull()
            Me(Me.tableVIEW_PARTY_CATEGORYHISTORY.adduserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_CATEGORYHISTORY.adddateColumn)
        End Function
        
        Public Sub SetadddateNull()
            Me(Me.tableVIEW_PARTY_CATEGORYHISTORY.adddateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_CATEGORYHISTORYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_PARTY_CATEGORYHISTORYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_PARTY_CATEGORYHISTORYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_PARTY_CATEGORYHISTORYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_GROUPHISTORYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnGROUPcode As DataColumn
        
        Private columnGROUPdesc As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnadduser As DataColumn
        
        Private columnadddate As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_PARTY_GROUPHISTORY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property GROUPcodeColumn As DataColumn
            Get
                Return Me.columnGROUPcode
            End Get
        End Property
        
        Friend ReadOnly Property GROUPdescColumn As DataColumn
            Get
                Return Me.columnGROUPdesc
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property adduserColumn As DataColumn
            Get
                Return Me.columnadduser
            End Get
        End Property
        
        Friend ReadOnly Property adddateColumn As DataColumn
            Get
                Return Me.columnadddate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARTY_GROUPHISTORYRow
            Get
                Return CType(Me.Rows(index),VIEW_PARTY_GROUPHISTORYRow)
            End Get
        End Property
        
        Public Event VIEW_PARTY_GROUPHISTORYRowChanged As VIEW_PARTY_GROUPHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_GROUPHISTORYRowChanging As VIEW_PARTY_GROUPHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_GROUPHISTORYRowDeleted As VIEW_PARTY_GROUPHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_GROUPHISTORYRowDeleting As VIEW_PARTY_GROUPHISTORYRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_PARTY_GROUPHISTORYRow(ByVal row As VIEW_PARTY_GROUPHISTORYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_PARTY_GROUPHISTORYRow(ByVal GROUPcode As String, ByVal GROUPdesc As String, ByVal freeze As String, ByVal adduser As String, ByVal adddate As Date) As VIEW_PARTY_GROUPHISTORYRow
            Dim rowVIEW_PARTY_GROUPHISTORYRow As VIEW_PARTY_GROUPHISTORYRow = CType(Me.NewRow,VIEW_PARTY_GROUPHISTORYRow)
            rowVIEW_PARTY_GROUPHISTORYRow.ItemArray = New Object() {GROUPcode, GROUPdesc, freeze, adduser, adddate}
            Me.Rows.Add(rowVIEW_PARTY_GROUPHISTORYRow)
            Return rowVIEW_PARTY_GROUPHISTORYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_PARTY_GROUPHISTORYDataTable = CType(MyBase.Clone,VIEW_PARTY_GROUPHISTORYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_PARTY_GROUPHISTORYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnGROUPcode = Me.Columns("GROUPcode")
            Me.columnGROUPdesc = Me.Columns("GROUPdesc")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnadduser = Me.Columns("adduser")
            Me.columnadddate = Me.Columns("adddate")
        End Sub
        
        Private Sub InitClass()
            Me.columnGROUPcode = New DataColumn("GROUPcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPcode)
            Me.columnGROUPdesc = New DataColumn("GROUPdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPdesc)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnadduser = New DataColumn("adduser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduser)
            Me.columnadddate = New DataColumn("adddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddate)
            Me.columnGROUPcode.ReadOnly = true
            Me.columnGROUPdesc.ReadOnly = true
            Me.columnfreeze.ReadOnly = true
            Me.columnadduser.ReadOnly = true
            Me.columnadddate.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_PARTY_GROUPHISTORYRow() As VIEW_PARTY_GROUPHISTORYRow
            Return CType(Me.NewRow,VIEW_PARTY_GROUPHISTORYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_PARTY_GROUPHISTORYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_PARTY_GROUPHISTORYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARTY_GROUPHISTORYRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_GROUPHISTORYRowChanged(Me, New VIEW_PARTY_GROUPHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_GROUPHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARTY_GROUPHISTORYRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_GROUPHISTORYRowChanging(Me, New VIEW_PARTY_GROUPHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_GROUPHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARTY_GROUPHISTORYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_GROUPHISTORYRowDeleted(Me, New VIEW_PARTY_GROUPHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_GROUPHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARTY_GROUPHISTORYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_GROUPHISTORYRowDeleting(Me, New VIEW_PARTY_GROUPHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_GROUPHISTORYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_PARTY_GROUPHISTORYRow(ByVal row As VIEW_PARTY_GROUPHISTORYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_GROUPHISTORYRow
        Inherits DataRow
        
        Private tableVIEW_PARTY_GROUPHISTORY As VIEW_PARTY_GROUPHISTORYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARTY_GROUPHISTORY = CType(Me.Table,VIEW_PARTY_GROUPHISTORYDataTable)
        End Sub
        
        Public Property GROUPcode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_GROUPHISTORY.GROUPcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_GROUPHISTORY.GROUPcodeColumn) = value
            End Set
        End Property
        
        Public Property GROUPdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_GROUPHISTORY.GROUPdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_GROUPHISTORY.GROUPdescColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_GROUPHISTORY.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_GROUPHISTORY.freezeColumn) = value
            End Set
        End Property
        
        Public Property adduser As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_GROUPHISTORY.adduserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_GROUPHISTORY.adduserColumn) = value
            End Set
        End Property
        
        Public Property adddate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_GROUPHISTORY.adddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_GROUPHISTORY.adddateColumn) = value
            End Set
        End Property
        
        Public Function IsGROUPcodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_GROUPHISTORY.GROUPcodeColumn)
        End Function
        
        Public Sub SetGROUPcodeNull()
            Me(Me.tableVIEW_PARTY_GROUPHISTORY.GROUPcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPdescNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_GROUPHISTORY.GROUPdescColumn)
        End Function
        
        Public Sub SetGROUPdescNull()
            Me(Me.tableVIEW_PARTY_GROUPHISTORY.GROUPdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_GROUPHISTORY.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tableVIEW_PARTY_GROUPHISTORY.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduserNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_GROUPHISTORY.adduserColumn)
        End Function
        
        Public Sub SetadduserNull()
            Me(Me.tableVIEW_PARTY_GROUPHISTORY.adduserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_GROUPHISTORY.adddateColumn)
        End Function
        
        Public Sub SetadddateNull()
            Me(Me.tableVIEW_PARTY_GROUPHISTORY.adddateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_GROUPHISTORYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_PARTY_GROUPHISTORYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_PARTY_GROUPHISTORYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_PARTY_GROUPHISTORYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_locationHISTORYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnloccode As DataColumn
        
        Private columnlocdesc As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnadduser As DataColumn
        
        Private columnadddate As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_PARTY_locationHISTORY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property loccodeColumn As DataColumn
            Get
                Return Me.columnloccode
            End Get
        End Property
        
        Friend ReadOnly Property locdescColumn As DataColumn
            Get
                Return Me.columnlocdesc
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property adduserColumn As DataColumn
            Get
                Return Me.columnadduser
            End Get
        End Property
        
        Friend ReadOnly Property adddateColumn As DataColumn
            Get
                Return Me.columnadddate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARTY_locationHISTORYRow
            Get
                Return CType(Me.Rows(index),VIEW_PARTY_locationHISTORYRow)
            End Get
        End Property
        
        Public Event VIEW_PARTY_locationHISTORYRowChanged As VIEW_PARTY_locationHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_locationHISTORYRowChanging As VIEW_PARTY_locationHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_locationHISTORYRowDeleted As VIEW_PARTY_locationHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_locationHISTORYRowDeleting As VIEW_PARTY_locationHISTORYRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_PARTY_locationHISTORYRow(ByVal row As VIEW_PARTY_locationHISTORYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_PARTY_locationHISTORYRow(ByVal loccode As String, ByVal locdesc As String, ByVal freeze As String, ByVal adduser As String, ByVal adddate As Date) As VIEW_PARTY_locationHISTORYRow
            Dim rowVIEW_PARTY_locationHISTORYRow As VIEW_PARTY_locationHISTORYRow = CType(Me.NewRow,VIEW_PARTY_locationHISTORYRow)
            rowVIEW_PARTY_locationHISTORYRow.ItemArray = New Object() {loccode, locdesc, freeze, adduser, adddate}
            Me.Rows.Add(rowVIEW_PARTY_locationHISTORYRow)
            Return rowVIEW_PARTY_locationHISTORYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_PARTY_locationHISTORYDataTable = CType(MyBase.Clone,VIEW_PARTY_locationHISTORYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_PARTY_locationHISTORYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnloccode = Me.Columns("loccode")
            Me.columnlocdesc = Me.Columns("locdesc")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnadduser = Me.Columns("adduser")
            Me.columnadddate = Me.Columns("adddate")
        End Sub
        
        Private Sub InitClass()
            Me.columnloccode = New DataColumn("loccode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloccode)
            Me.columnlocdesc = New DataColumn("locdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnlocdesc)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnadduser = New DataColumn("adduser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduser)
            Me.columnadddate = New DataColumn("adddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddate)
            Me.columnloccode.ReadOnly = true
            Me.columnlocdesc.ReadOnly = true
            Me.columnfreeze.ReadOnly = true
            Me.columnadduser.ReadOnly = true
            Me.columnadddate.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_PARTY_locationHISTORYRow() As VIEW_PARTY_locationHISTORYRow
            Return CType(Me.NewRow,VIEW_PARTY_locationHISTORYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_PARTY_locationHISTORYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_PARTY_locationHISTORYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARTY_locationHISTORYRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_locationHISTORYRowChanged(Me, New VIEW_PARTY_locationHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_locationHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARTY_locationHISTORYRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_locationHISTORYRowChanging(Me, New VIEW_PARTY_locationHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_locationHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARTY_locationHISTORYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_locationHISTORYRowDeleted(Me, New VIEW_PARTY_locationHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_locationHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARTY_locationHISTORYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_locationHISTORYRowDeleting(Me, New VIEW_PARTY_locationHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_locationHISTORYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_PARTY_locationHISTORYRow(ByVal row As VIEW_PARTY_locationHISTORYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_locationHISTORYRow
        Inherits DataRow
        
        Private tableVIEW_PARTY_locationHISTORY As VIEW_PARTY_locationHISTORYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARTY_locationHISTORY = CType(Me.Table,VIEW_PARTY_locationHISTORYDataTable)
        End Sub
        
        Public Property loccode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_locationHISTORY.loccodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_locationHISTORY.loccodeColumn) = value
            End Set
        End Property
        
        Public Property locdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_locationHISTORY.locdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_locationHISTORY.locdescColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_locationHISTORY.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_locationHISTORY.freezeColumn) = value
            End Set
        End Property
        
        Public Property adduser As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_locationHISTORY.adduserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_locationHISTORY.adduserColumn) = value
            End Set
        End Property
        
        Public Property adddate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_locationHISTORY.adddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_locationHISTORY.adddateColumn) = value
            End Set
        End Property
        
        Public Function IsloccodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_locationHISTORY.loccodeColumn)
        End Function
        
        Public Sub SetloccodeNull()
            Me(Me.tableVIEW_PARTY_locationHISTORY.loccodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IslocdescNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_locationHISTORY.locdescColumn)
        End Function
        
        Public Sub SetlocdescNull()
            Me(Me.tableVIEW_PARTY_locationHISTORY.locdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_locationHISTORY.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tableVIEW_PARTY_locationHISTORY.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduserNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_locationHISTORY.adduserColumn)
        End Function
        
        Public Sub SetadduserNull()
            Me(Me.tableVIEW_PARTY_locationHISTORY.adduserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_locationHISTORY.adddateColumn)
        End Function
        
        Public Sub SetadddateNull()
            Me(Me.tableVIEW_PARTY_locationHISTORY.adddateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_locationHISTORYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_PARTY_locationHISTORYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_PARTY_locationHISTORYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_PARTY_locationHISTORYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_MENUGROUPHISTORYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmenucode As DataColumn
        
        Private columnmenudesc As DataColumn
        
        Private columngroupcode As DataColumn
        
        Private columngroupdesc As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnadduser As DataColumn
        
        Private columnadddate As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_PARTY_MENUGROUPHISTORY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property menucodeColumn As DataColumn
            Get
                Return Me.columnmenucode
            End Get
        End Property
        
        Friend ReadOnly Property menudescColumn As DataColumn
            Get
                Return Me.columnmenudesc
            End Get
        End Property
        
        Friend ReadOnly Property groupcodeColumn As DataColumn
            Get
                Return Me.columngroupcode
            End Get
        End Property
        
        Friend ReadOnly Property groupdescColumn As DataColumn
            Get
                Return Me.columngroupdesc
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property adduserColumn As DataColumn
            Get
                Return Me.columnadduser
            End Get
        End Property
        
        Friend ReadOnly Property adddateColumn As DataColumn
            Get
                Return Me.columnadddate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARTY_MENUGROUPHISTORYRow
            Get
                Return CType(Me.Rows(index),VIEW_PARTY_MENUGROUPHISTORYRow)
            End Get
        End Property
        
        Public Event VIEW_PARTY_MENUGROUPHISTORYRowChanged As VIEW_PARTY_MENUGROUPHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_MENUGROUPHISTORYRowChanging As VIEW_PARTY_MENUGROUPHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_MENUGROUPHISTORYRowDeleted As VIEW_PARTY_MENUGROUPHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_MENUGROUPHISTORYRowDeleting As VIEW_PARTY_MENUGROUPHISTORYRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_PARTY_MENUGROUPHISTORYRow(ByVal row As VIEW_PARTY_MENUGROUPHISTORYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_PARTY_MENUGROUPHISTORYRow(ByVal menucode As String, ByVal menudesc As String, ByVal groupcode As String, ByVal groupdesc As String, ByVal freeze As String, ByVal adduser As String, ByVal adddate As Date) As VIEW_PARTY_MENUGROUPHISTORYRow
            Dim rowVIEW_PARTY_MENUGROUPHISTORYRow As VIEW_PARTY_MENUGROUPHISTORYRow = CType(Me.NewRow,VIEW_PARTY_MENUGROUPHISTORYRow)
            rowVIEW_PARTY_MENUGROUPHISTORYRow.ItemArray = New Object() {menucode, menudesc, groupcode, groupdesc, freeze, adduser, adddate}
            Me.Rows.Add(rowVIEW_PARTY_MENUGROUPHISTORYRow)
            Return rowVIEW_PARTY_MENUGROUPHISTORYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_PARTY_MENUGROUPHISTORYDataTable = CType(MyBase.Clone,VIEW_PARTY_MENUGROUPHISTORYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_PARTY_MENUGROUPHISTORYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnmenucode = Me.Columns("menucode")
            Me.columnmenudesc = Me.Columns("menudesc")
            Me.columngroupcode = Me.Columns("groupcode")
            Me.columngroupdesc = Me.Columns("groupdesc")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnadduser = Me.Columns("adduser")
            Me.columnadddate = Me.Columns("adddate")
        End Sub
        
        Private Sub InitClass()
            Me.columnmenucode = New DataColumn("menucode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmenucode)
            Me.columnmenudesc = New DataColumn("menudesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmenudesc)
            Me.columngroupcode = New DataColumn("groupcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroupcode)
            Me.columngroupdesc = New DataColumn("groupdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroupdesc)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnadduser = New DataColumn("adduser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduser)
            Me.columnadddate = New DataColumn("adddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddate)
            Me.columnmenucode.ReadOnly = true
            Me.columnmenudesc.ReadOnly = true
            Me.columngroupcode.ReadOnly = true
            Me.columngroupdesc.ReadOnly = true
            Me.columnfreeze.ReadOnly = true
            Me.columnadduser.ReadOnly = true
            Me.columnadddate.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_PARTY_MENUGROUPHISTORYRow() As VIEW_PARTY_MENUGROUPHISTORYRow
            Return CType(Me.NewRow,VIEW_PARTY_MENUGROUPHISTORYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_PARTY_MENUGROUPHISTORYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_PARTY_MENUGROUPHISTORYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARTY_MENUGROUPHISTORYRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_MENUGROUPHISTORYRowChanged(Me, New VIEW_PARTY_MENUGROUPHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_MENUGROUPHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARTY_MENUGROUPHISTORYRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_MENUGROUPHISTORYRowChanging(Me, New VIEW_PARTY_MENUGROUPHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_MENUGROUPHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARTY_MENUGROUPHISTORYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_MENUGROUPHISTORYRowDeleted(Me, New VIEW_PARTY_MENUGROUPHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_MENUGROUPHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARTY_MENUGROUPHISTORYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_MENUGROUPHISTORYRowDeleting(Me, New VIEW_PARTY_MENUGROUPHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_MENUGROUPHISTORYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_PARTY_MENUGROUPHISTORYRow(ByVal row As VIEW_PARTY_MENUGROUPHISTORYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_MENUGROUPHISTORYRow
        Inherits DataRow
        
        Private tableVIEW_PARTY_MENUGROUPHISTORY As VIEW_PARTY_MENUGROUPHISTORYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARTY_MENUGROUPHISTORY = CType(Me.Table,VIEW_PARTY_MENUGROUPHISTORYDataTable)
        End Sub
        
        Public Property menucode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.menucodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.menucodeColumn) = value
            End Set
        End Property
        
        Public Property menudesc As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.menudescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.menudescColumn) = value
            End Set
        End Property
        
        Public Property groupcode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.groupcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.groupcodeColumn) = value
            End Set
        End Property
        
        Public Property groupdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.groupdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.groupdescColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.freezeColumn) = value
            End Set
        End Property
        
        Public Property adduser As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.adduserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.adduserColumn) = value
            End Set
        End Property
        
        Public Property adddate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.adddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.adddateColumn) = value
            End Set
        End Property
        
        Public Function IsmenucodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_MENUGROUPHISTORY.menucodeColumn)
        End Function
        
        Public Sub SetmenucodeNull()
            Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.menucodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmenudescNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_MENUGROUPHISTORY.menudescColumn)
        End Function
        
        Public Sub SetmenudescNull()
            Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.menudescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgroupcodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_MENUGROUPHISTORY.groupcodeColumn)
        End Function
        
        Public Sub SetgroupcodeNull()
            Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.groupcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgroupdescNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_MENUGROUPHISTORY.groupdescColumn)
        End Function
        
        Public Sub SetgroupdescNull()
            Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.groupdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_MENUGROUPHISTORY.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduserNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_MENUGROUPHISTORY.adduserColumn)
        End Function
        
        Public Sub SetadduserNull()
            Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.adduserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_MENUGROUPHISTORY.adddateColumn)
        End Function
        
        Public Sub SetadddateNull()
            Me(Me.tableVIEW_PARTY_MENUGROUPHISTORY.adddateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_MENUGROUPHISTORYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_PARTY_MENUGROUPHISTORYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_PARTY_MENUGROUPHISTORYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_PARTY_MENUGROUPHISTORYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_MENUHISTORYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMENUcode As DataColumn
        
        Private columnMENUdesc As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnadduser As DataColumn
        
        Private columnadddate As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_PARTY_MENUHISTORY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MENUcodeColumn As DataColumn
            Get
                Return Me.columnMENUcode
            End Get
        End Property
        
        Friend ReadOnly Property MENUdescColumn As DataColumn
            Get
                Return Me.columnMENUdesc
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property adduserColumn As DataColumn
            Get
                Return Me.columnadduser
            End Get
        End Property
        
        Friend ReadOnly Property adddateColumn As DataColumn
            Get
                Return Me.columnadddate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARTY_MENUHISTORYRow
            Get
                Return CType(Me.Rows(index),VIEW_PARTY_MENUHISTORYRow)
            End Get
        End Property
        
        Public Event VIEW_PARTY_MENUHISTORYRowChanged As VIEW_PARTY_MENUHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_MENUHISTORYRowChanging As VIEW_PARTY_MENUHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_MENUHISTORYRowDeleted As VIEW_PARTY_MENUHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_MENUHISTORYRowDeleting As VIEW_PARTY_MENUHISTORYRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_PARTY_MENUHISTORYRow(ByVal row As VIEW_PARTY_MENUHISTORYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_PARTY_MENUHISTORYRow(ByVal MENUcode As String, ByVal MENUdesc As String, ByVal freeze As String, ByVal adduser As String, ByVal adddate As Date) As VIEW_PARTY_MENUHISTORYRow
            Dim rowVIEW_PARTY_MENUHISTORYRow As VIEW_PARTY_MENUHISTORYRow = CType(Me.NewRow,VIEW_PARTY_MENUHISTORYRow)
            rowVIEW_PARTY_MENUHISTORYRow.ItemArray = New Object() {MENUcode, MENUdesc, freeze, adduser, adddate}
            Me.Rows.Add(rowVIEW_PARTY_MENUHISTORYRow)
            Return rowVIEW_PARTY_MENUHISTORYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_PARTY_MENUHISTORYDataTable = CType(MyBase.Clone,VIEW_PARTY_MENUHISTORYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_PARTY_MENUHISTORYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMENUcode = Me.Columns("MENUcode")
            Me.columnMENUdesc = Me.Columns("MENUdesc")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnadduser = Me.Columns("adduser")
            Me.columnadddate = Me.Columns("adddate")
        End Sub
        
        Private Sub InitClass()
            Me.columnMENUcode = New DataColumn("MENUcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMENUcode)
            Me.columnMENUdesc = New DataColumn("MENUdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMENUdesc)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnadduser = New DataColumn("adduser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduser)
            Me.columnadddate = New DataColumn("adddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddate)
            Me.columnMENUcode.ReadOnly = true
            Me.columnMENUdesc.ReadOnly = true
            Me.columnfreeze.ReadOnly = true
            Me.columnadduser.ReadOnly = true
            Me.columnadddate.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_PARTY_MENUHISTORYRow() As VIEW_PARTY_MENUHISTORYRow
            Return CType(Me.NewRow,VIEW_PARTY_MENUHISTORYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_PARTY_MENUHISTORYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_PARTY_MENUHISTORYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARTY_MENUHISTORYRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_MENUHISTORYRowChanged(Me, New VIEW_PARTY_MENUHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_MENUHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARTY_MENUHISTORYRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_MENUHISTORYRowChanging(Me, New VIEW_PARTY_MENUHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_MENUHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARTY_MENUHISTORYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_MENUHISTORYRowDeleted(Me, New VIEW_PARTY_MENUHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_MENUHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARTY_MENUHISTORYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_MENUHISTORYRowDeleting(Me, New VIEW_PARTY_MENUHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_MENUHISTORYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_PARTY_MENUHISTORYRow(ByVal row As VIEW_PARTY_MENUHISTORYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_MENUHISTORYRow
        Inherits DataRow
        
        Private tableVIEW_PARTY_MENUHISTORY As VIEW_PARTY_MENUHISTORYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARTY_MENUHISTORY = CType(Me.Table,VIEW_PARTY_MENUHISTORYDataTable)
        End Sub
        
        Public Property MENUcode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_MENUHISTORY.MENUcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_MENUHISTORY.MENUcodeColumn) = value
            End Set
        End Property
        
        Public Property MENUdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_MENUHISTORY.MENUdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_MENUHISTORY.MENUdescColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_MENUHISTORY.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_MENUHISTORY.freezeColumn) = value
            End Set
        End Property
        
        Public Property adduser As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_MENUHISTORY.adduserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_MENUHISTORY.adduserColumn) = value
            End Set
        End Property
        
        Public Property adddate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_MENUHISTORY.adddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_MENUHISTORY.adddateColumn) = value
            End Set
        End Property
        
        Public Function IsMENUcodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_MENUHISTORY.MENUcodeColumn)
        End Function
        
        Public Sub SetMENUcodeNull()
            Me(Me.tableVIEW_PARTY_MENUHISTORY.MENUcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMENUdescNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_MENUHISTORY.MENUdescColumn)
        End Function
        
        Public Sub SetMENUdescNull()
            Me(Me.tableVIEW_PARTY_MENUHISTORY.MENUdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_MENUHISTORY.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tableVIEW_PARTY_MENUHISTORY.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduserNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_MENUHISTORY.adduserColumn)
        End Function
        
        Public Sub SetadduserNull()
            Me(Me.tableVIEW_PARTY_MENUHISTORY.adduserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_MENUHISTORY.adddateColumn)
        End Function
        
        Public Sub SetadddateNull()
            Me(Me.tableVIEW_PARTY_MENUHISTORY.adddateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_MENUHISTORYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_PARTY_MENUHISTORYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_PARTY_MENUHISTORYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_PARTY_MENUHISTORYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_PURPOSEHISTORYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnpcode As DataColumn
        
        Private columnpdesc As DataColumn
        
        Private columnfromtime As DataColumn
        
        Private columntotime As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnadduser As DataColumn
        
        Private columnadddate As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_PARTY_PURPOSEHISTORY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property pcodeColumn As DataColumn
            Get
                Return Me.columnpcode
            End Get
        End Property
        
        Friend ReadOnly Property pdescColumn As DataColumn
            Get
                Return Me.columnpdesc
            End Get
        End Property
        
        Friend ReadOnly Property fromtimeColumn As DataColumn
            Get
                Return Me.columnfromtime
            End Get
        End Property
        
        Friend ReadOnly Property totimeColumn As DataColumn
            Get
                Return Me.columntotime
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property adduserColumn As DataColumn
            Get
                Return Me.columnadduser
            End Get
        End Property
        
        Friend ReadOnly Property adddateColumn As DataColumn
            Get
                Return Me.columnadddate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARTY_PURPOSEHISTORYRow
            Get
                Return CType(Me.Rows(index),VIEW_PARTY_PURPOSEHISTORYRow)
            End Get
        End Property
        
        Public Event VIEW_PARTY_PURPOSEHISTORYRowChanged As VIEW_PARTY_PURPOSEHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_PURPOSEHISTORYRowChanging As VIEW_PARTY_PURPOSEHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_PURPOSEHISTORYRowDeleted As VIEW_PARTY_PURPOSEHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_PURPOSEHISTORYRowDeleting As VIEW_PARTY_PURPOSEHISTORYRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_PARTY_PURPOSEHISTORYRow(ByVal row As VIEW_PARTY_PURPOSEHISTORYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_PARTY_PURPOSEHISTORYRow(ByVal pcode As String, ByVal pdesc As String, ByVal fromtime As String, ByVal totime As String, ByVal freeze As String, ByVal adduser As String, ByVal adddate As Date) As VIEW_PARTY_PURPOSEHISTORYRow
            Dim rowVIEW_PARTY_PURPOSEHISTORYRow As VIEW_PARTY_PURPOSEHISTORYRow = CType(Me.NewRow,VIEW_PARTY_PURPOSEHISTORYRow)
            rowVIEW_PARTY_PURPOSEHISTORYRow.ItemArray = New Object() {pcode, pdesc, fromtime, totime, freeze, adduser, adddate}
            Me.Rows.Add(rowVIEW_PARTY_PURPOSEHISTORYRow)
            Return rowVIEW_PARTY_PURPOSEHISTORYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_PARTY_PURPOSEHISTORYDataTable = CType(MyBase.Clone,VIEW_PARTY_PURPOSEHISTORYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_PARTY_PURPOSEHISTORYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnpcode = Me.Columns("pcode")
            Me.columnpdesc = Me.Columns("pdesc")
            Me.columnfromtime = Me.Columns("fromtime")
            Me.columntotime = Me.Columns("totime")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnadduser = Me.Columns("adduser")
            Me.columnadddate = Me.Columns("adddate")
        End Sub
        
        Private Sub InitClass()
            Me.columnpcode = New DataColumn("pcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpcode)
            Me.columnpdesc = New DataColumn("pdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpdesc)
            Me.columnfromtime = New DataColumn("fromtime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfromtime)
            Me.columntotime = New DataColumn("totime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotime)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnadduser = New DataColumn("adduser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduser)
            Me.columnadddate = New DataColumn("adddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddate)
            Me.columnpcode.ReadOnly = true
            Me.columnpdesc.ReadOnly = true
            Me.columnfromtime.ReadOnly = true
            Me.columntotime.ReadOnly = true
            Me.columnfreeze.ReadOnly = true
            Me.columnadduser.ReadOnly = true
            Me.columnadddate.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_PARTY_PURPOSEHISTORYRow() As VIEW_PARTY_PURPOSEHISTORYRow
            Return CType(Me.NewRow,VIEW_PARTY_PURPOSEHISTORYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_PARTY_PURPOSEHISTORYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_PARTY_PURPOSEHISTORYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARTY_PURPOSEHISTORYRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_PURPOSEHISTORYRowChanged(Me, New VIEW_PARTY_PURPOSEHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_PURPOSEHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARTY_PURPOSEHISTORYRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_PURPOSEHISTORYRowChanging(Me, New VIEW_PARTY_PURPOSEHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_PURPOSEHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARTY_PURPOSEHISTORYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_PURPOSEHISTORYRowDeleted(Me, New VIEW_PARTY_PURPOSEHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_PURPOSEHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARTY_PURPOSEHISTORYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_PURPOSEHISTORYRowDeleting(Me, New VIEW_PARTY_PURPOSEHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_PURPOSEHISTORYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_PARTY_PURPOSEHISTORYRow(ByVal row As VIEW_PARTY_PURPOSEHISTORYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_PURPOSEHISTORYRow
        Inherits DataRow
        
        Private tableVIEW_PARTY_PURPOSEHISTORY As VIEW_PARTY_PURPOSEHISTORYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARTY_PURPOSEHISTORY = CType(Me.Table,VIEW_PARTY_PURPOSEHISTORYDataTable)
        End Sub
        
        Public Property pcode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.pcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.pcodeColumn) = value
            End Set
        End Property
        
        Public Property pdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.pdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.pdescColumn) = value
            End Set
        End Property
        
        Public Property fromtime As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.fromtimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.fromtimeColumn) = value
            End Set
        End Property
        
        Public Property totime As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.totimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.totimeColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.freezeColumn) = value
            End Set
        End Property
        
        Public Property adduser As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.adduserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.adduserColumn) = value
            End Set
        End Property
        
        Public Property adddate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.adddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.adddateColumn) = value
            End Set
        End Property
        
        Public Function IspcodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_PURPOSEHISTORY.pcodeColumn)
        End Function
        
        Public Sub SetpcodeNull()
            Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.pcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspdescNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_PURPOSEHISTORY.pdescColumn)
        End Function
        
        Public Sub SetpdescNull()
            Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.pdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfromtimeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_PURPOSEHISTORY.fromtimeColumn)
        End Function
        
        Public Sub SetfromtimeNull()
            Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.fromtimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotimeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_PURPOSEHISTORY.totimeColumn)
        End Function
        
        Public Sub SettotimeNull()
            Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.totimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_PURPOSEHISTORY.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduserNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_PURPOSEHISTORY.adduserColumn)
        End Function
        
        Public Sub SetadduserNull()
            Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.adduserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_PURPOSEHISTORY.adddateColumn)
        End Function
        
        Public Sub SetadddateNull()
            Me(Me.tableVIEW_PARTY_PURPOSEHISTORY.adddateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_PURPOSEHISTORYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_PARTY_PURPOSEHISTORYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_PARTY_PURPOSEHISTORYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_PARTY_PURPOSEHISTORYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_TARIFFHISTORYDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columntariffcode As DataColumn
        
        Private columntariffdesc As DataColumn
        
        Private columnccode As DataColumn
        
        Private columnrate As DataColumn
        
        Private columntaxcode As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnadduser As DataColumn
        
        Private columnadddate As DataColumn
        
        Private columnmenucode As DataColumn
        
        Private columnmenudesc As DataColumn
        
        Private columnmaxitems As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_PARTY_TARIFFHISTORY")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property tariffcodeColumn As DataColumn
            Get
                Return Me.columntariffcode
            End Get
        End Property
        
        Friend ReadOnly Property tariffdescColumn As DataColumn
            Get
                Return Me.columntariffdesc
            End Get
        End Property
        
        Friend ReadOnly Property ccodeColumn As DataColumn
            Get
                Return Me.columnccode
            End Get
        End Property
        
        Friend ReadOnly Property rateColumn As DataColumn
            Get
                Return Me.columnrate
            End Get
        End Property
        
        Friend ReadOnly Property taxcodeColumn As DataColumn
            Get
                Return Me.columntaxcode
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property adduserColumn As DataColumn
            Get
                Return Me.columnadduser
            End Get
        End Property
        
        Friend ReadOnly Property adddateColumn As DataColumn
            Get
                Return Me.columnadddate
            End Get
        End Property
        
        Friend ReadOnly Property menucodeColumn As DataColumn
            Get
                Return Me.columnmenucode
            End Get
        End Property
        
        Friend ReadOnly Property menudescColumn As DataColumn
            Get
                Return Me.columnmenudesc
            End Get
        End Property
        
        Friend ReadOnly Property maxitemsColumn As DataColumn
            Get
                Return Me.columnmaxitems
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARTY_TARIFFHISTORYRow
            Get
                Return CType(Me.Rows(index),VIEW_PARTY_TARIFFHISTORYRow)
            End Get
        End Property
        
        Public Event VIEW_PARTY_TARIFFHISTORYRowChanged As VIEW_PARTY_TARIFFHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_TARIFFHISTORYRowChanging As VIEW_PARTY_TARIFFHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_TARIFFHISTORYRowDeleted As VIEW_PARTY_TARIFFHISTORYRowChangeEventHandler
        
        Public Event VIEW_PARTY_TARIFFHISTORYRowDeleting As VIEW_PARTY_TARIFFHISTORYRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_PARTY_TARIFFHISTORYRow(ByVal row As VIEW_PARTY_TARIFFHISTORYRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_PARTY_TARIFFHISTORYRow(ByVal tariffcode As String, ByVal tariffdesc As String, ByVal ccode As String, ByVal rate As Decimal, ByVal taxcode As String, ByVal freeze As String, ByVal adduser As String, ByVal adddate As Date, ByVal menucode As String, ByVal menudesc As String, ByVal maxitems As Decimal) As VIEW_PARTY_TARIFFHISTORYRow
            Dim rowVIEW_PARTY_TARIFFHISTORYRow As VIEW_PARTY_TARIFFHISTORYRow = CType(Me.NewRow,VIEW_PARTY_TARIFFHISTORYRow)
            rowVIEW_PARTY_TARIFFHISTORYRow.ItemArray = New Object() {tariffcode, tariffdesc, ccode, rate, taxcode, freeze, adduser, adddate, menucode, menudesc, maxitems}
            Me.Rows.Add(rowVIEW_PARTY_TARIFFHISTORYRow)
            Return rowVIEW_PARTY_TARIFFHISTORYRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_PARTY_TARIFFHISTORYDataTable = CType(MyBase.Clone,VIEW_PARTY_TARIFFHISTORYDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_PARTY_TARIFFHISTORYDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columntariffcode = Me.Columns("tariffcode")
            Me.columntariffdesc = Me.Columns("tariffdesc")
            Me.columnccode = Me.Columns("ccode")
            Me.columnrate = Me.Columns("rate")
            Me.columntaxcode = Me.Columns("taxcode")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnadduser = Me.Columns("adduser")
            Me.columnadddate = Me.Columns("adddate")
            Me.columnmenucode = Me.Columns("menucode")
            Me.columnmenudesc = Me.Columns("menudesc")
            Me.columnmaxitems = Me.Columns("maxitems")
        End Sub
        
        Private Sub InitClass()
            Me.columntariffcode = New DataColumn("tariffcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntariffcode)
            Me.columntariffdesc = New DataColumn("tariffdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntariffdesc)
            Me.columnccode = New DataColumn("ccode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnccode)
            Me.columnrate = New DataColumn("rate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrate)
            Me.columntaxcode = New DataColumn("taxcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxcode)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnadduser = New DataColumn("adduser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduser)
            Me.columnadddate = New DataColumn("adddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddate)
            Me.columnmenucode = New DataColumn("menucode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmenucode)
            Me.columnmenudesc = New DataColumn("menudesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmenudesc)
            Me.columnmaxitems = New DataColumn("maxitems", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmaxitems)
            Me.columntariffcode.ReadOnly = true
            Me.columntariffdesc.ReadOnly = true
            Me.columnccode.ReadOnly = true
            Me.columnrate.ReadOnly = true
            Me.columntaxcode.ReadOnly = true
            Me.columnfreeze.ReadOnly = true
            Me.columnadduser.ReadOnly = true
            Me.columnadddate.ReadOnly = true
            Me.columnmenucode.ReadOnly = true
            Me.columnmenudesc.ReadOnly = true
            Me.columnmaxitems.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_PARTY_TARIFFHISTORYRow() As VIEW_PARTY_TARIFFHISTORYRow
            Return CType(Me.NewRow,VIEW_PARTY_TARIFFHISTORYRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_PARTY_TARIFFHISTORYRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_PARTY_TARIFFHISTORYRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARTY_TARIFFHISTORYRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_TARIFFHISTORYRowChanged(Me, New VIEW_PARTY_TARIFFHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_TARIFFHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARTY_TARIFFHISTORYRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_TARIFFHISTORYRowChanging(Me, New VIEW_PARTY_TARIFFHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_TARIFFHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARTY_TARIFFHISTORYRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_TARIFFHISTORYRowDeleted(Me, New VIEW_PARTY_TARIFFHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_TARIFFHISTORYRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARTY_TARIFFHISTORYRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_TARIFFHISTORYRowDeleting(Me, New VIEW_PARTY_TARIFFHISTORYRowChangeEvent(CType(e.Row,VIEW_PARTY_TARIFFHISTORYRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_PARTY_TARIFFHISTORYRow(ByVal row As VIEW_PARTY_TARIFFHISTORYRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_TARIFFHISTORYRow
        Inherits DataRow
        
        Private tableVIEW_PARTY_TARIFFHISTORY As VIEW_PARTY_TARIFFHISTORYDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARTY_TARIFFHISTORY = CType(Me.Table,VIEW_PARTY_TARIFFHISTORYDataTable)
        End Sub
        
        Public Property tariffcode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_TARIFFHISTORY.tariffcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_TARIFFHISTORY.tariffcodeColumn) = value
            End Set
        End Property
        
        Public Property tariffdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_TARIFFHISTORY.tariffdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_TARIFFHISTORY.tariffdescColumn) = value
            End Set
        End Property
        
        Public Property ccode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_TARIFFHISTORY.ccodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_TARIFFHISTORY.ccodeColumn) = value
            End Set
        End Property
        
        Public Property rate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_TARIFFHISTORY.rateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_TARIFFHISTORY.rateColumn) = value
            End Set
        End Property
        
        Public Property taxcode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_TARIFFHISTORY.taxcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_TARIFFHISTORY.taxcodeColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_TARIFFHISTORY.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_TARIFFHISTORY.freezeColumn) = value
            End Set
        End Property
        
        Public Property adduser As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_TARIFFHISTORY.adduserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_TARIFFHISTORY.adduserColumn) = value
            End Set
        End Property
        
        Public Property adddate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_TARIFFHISTORY.adddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_TARIFFHISTORY.adddateColumn) = value
            End Set
        End Property
        
        Public Property menucode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_TARIFFHISTORY.menucodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_TARIFFHISTORY.menucodeColumn) = value
            End Set
        End Property
        
        Public Property menudesc As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_TARIFFHISTORY.menudescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_TARIFFHISTORY.menudescColumn) = value
            End Set
        End Property
        
        Public Property maxitems As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_TARIFFHISTORY.maxitemsColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_TARIFFHISTORY.maxitemsColumn) = value
            End Set
        End Property
        
        Public Function IstariffcodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_TARIFFHISTORY.tariffcodeColumn)
        End Function
        
        Public Sub SettariffcodeNull()
            Me(Me.tableVIEW_PARTY_TARIFFHISTORY.tariffcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstariffdescNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_TARIFFHISTORY.tariffdescColumn)
        End Function
        
        Public Sub SettariffdescNull()
            Me(Me.tableVIEW_PARTY_TARIFFHISTORY.tariffdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsccodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_TARIFFHISTORY.ccodeColumn)
        End Function
        
        Public Sub SetccodeNull()
            Me(Me.tableVIEW_PARTY_TARIFFHISTORY.ccodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_TARIFFHISTORY.rateColumn)
        End Function
        
        Public Sub SetrateNull()
            Me(Me.tableVIEW_PARTY_TARIFFHISTORY.rateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxcodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_TARIFFHISTORY.taxcodeColumn)
        End Function
        
        Public Sub SettaxcodeNull()
            Me(Me.tableVIEW_PARTY_TARIFFHISTORY.taxcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_TARIFFHISTORY.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tableVIEW_PARTY_TARIFFHISTORY.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduserNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_TARIFFHISTORY.adduserColumn)
        End Function
        
        Public Sub SetadduserNull()
            Me(Me.tableVIEW_PARTY_TARIFFHISTORY.adduserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_TARIFFHISTORY.adddateColumn)
        End Function
        
        Public Sub SetadddateNull()
            Me(Me.tableVIEW_PARTY_TARIFFHISTORY.adddateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmenucodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_TARIFFHISTORY.menucodeColumn)
        End Function
        
        Public Sub SetmenucodeNull()
            Me(Me.tableVIEW_PARTY_TARIFFHISTORY.menucodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmenudescNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_TARIFFHISTORY.menudescColumn)
        End Function
        
        Public Sub SetmenudescNull()
            Me(Me.tableVIEW_PARTY_TARIFFHISTORY.menudescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmaxitemsNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_TARIFFHISTORY.maxitemsColumn)
        End Function
        
        Public Sub SetmaxitemsNull()
            Me(Me.tableVIEW_PARTY_TARIFFHISTORY.maxitemsColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_TARIFFHISTORYRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_PARTY_TARIFFHISTORYRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_PARTY_TARIFFHISTORYRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_PARTY_TARIFFHISTORYRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class membermaster_viewDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnCONTADD1 As DataColumn
        
        Private columnCONTADD2 As DataColumn
        
        Private columnCONTCITY As DataColumn
        
        Private columnCONTPIN As DataColumn
        
        Private columnCONTSTATE As DataColumn
        
        Private columnTypeDesc As DataColumn
        
        Private columnCurentStatus As DataColumn
        
        Private columnRN1 As DataColumn
        
        Private columnRN2 As DataColumn
        
        Private columnRN3 As DataColumn
        
        Friend Sub New()
            MyBase.New("membermaster_view")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD1Column As DataColumn
            Get
                Return Me.columnCONTADD1
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD2Column As DataColumn
            Get
                Return Me.columnCONTADD2
            End Get
        End Property
        
        Friend ReadOnly Property CONTCITYColumn As DataColumn
            Get
                Return Me.columnCONTCITY
            End Get
        End Property
        
        Friend ReadOnly Property CONTPINColumn As DataColumn
            Get
                Return Me.columnCONTPIN
            End Get
        End Property
        
        Friend ReadOnly Property CONTSTATEColumn As DataColumn
            Get
                Return Me.columnCONTSTATE
            End Get
        End Property
        
        Friend ReadOnly Property TypeDescColumn As DataColumn
            Get
                Return Me.columnTypeDesc
            End Get
        End Property
        
        Friend ReadOnly Property CurentStatusColumn As DataColumn
            Get
                Return Me.columnCurentStatus
            End Get
        End Property
        
        Friend ReadOnly Property RN1Column As DataColumn
            Get
                Return Me.columnRN1
            End Get
        End Property
        
        Friend ReadOnly Property RN2Column As DataColumn
            Get
                Return Me.columnRN2
            End Get
        End Property
        
        Friend ReadOnly Property RN3Column As DataColumn
            Get
                Return Me.columnRN3
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As membermaster_viewRow
            Get
                Return CType(Me.Rows(index),membermaster_viewRow)
            End Get
        End Property
        
        Public Event membermaster_viewRowChanged As membermaster_viewRowChangeEventHandler
        
        Public Event membermaster_viewRowChanging As membermaster_viewRowChangeEventHandler
        
        Public Event membermaster_viewRowDeleted As membermaster_viewRowChangeEventHandler
        
        Public Event membermaster_viewRowDeleting As membermaster_viewRowChangeEventHandler
        
        Public Overloads Sub Addmembermaster_viewRow(ByVal row As membermaster_viewRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addmembermaster_viewRow(ByVal MCODE As String, ByVal MNAME As String, ByVal CONTADD1 As String, ByVal CONTADD2 As String, ByVal CONTCITY As String, ByVal CONTPIN As String, ByVal CONTSTATE As String, ByVal TypeDesc As String, ByVal CurentStatus As String, ByVal RN1 As String, ByVal RN2 As String, ByVal RN3 As String) As membermaster_viewRow
            Dim rowmembermaster_viewRow As membermaster_viewRow = CType(Me.NewRow,membermaster_viewRow)
            rowmembermaster_viewRow.ItemArray = New Object() {MCODE, MNAME, CONTADD1, CONTADD2, CONTCITY, CONTPIN, CONTSTATE, TypeDesc, CurentStatus, RN1, RN2, RN3}
            Me.Rows.Add(rowmembermaster_viewRow)
            Return rowmembermaster_viewRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As membermaster_viewDataTable = CType(MyBase.Clone,membermaster_viewDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New membermaster_viewDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnCONTADD1 = Me.Columns("CONTADD1")
            Me.columnCONTADD2 = Me.Columns("CONTADD2")
            Me.columnCONTCITY = Me.Columns("CONTCITY")
            Me.columnCONTPIN = Me.Columns("CONTPIN")
            Me.columnCONTSTATE = Me.Columns("CONTSTATE")
            Me.columnTypeDesc = Me.Columns("TypeDesc")
            Me.columnCurentStatus = Me.Columns("CurentStatus")
            Me.columnRN1 = Me.Columns("RN1")
            Me.columnRN2 = Me.Columns("RN2")
            Me.columnRN3 = Me.Columns("RN3")
        End Sub
        
        Private Sub InitClass()
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnCONTADD1 = New DataColumn("CONTADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD1)
            Me.columnCONTADD2 = New DataColumn("CONTADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD2)
            Me.columnCONTCITY = New DataColumn("CONTCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCITY)
            Me.columnCONTPIN = New DataColumn("CONTPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPIN)
            Me.columnCONTSTATE = New DataColumn("CONTSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTSTATE)
            Me.columnTypeDesc = New DataColumn("TypeDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTypeDesc)
            Me.columnCurentStatus = New DataColumn("CurentStatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCurentStatus)
            Me.columnRN1 = New DataColumn("RN1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRN1)
            Me.columnRN2 = New DataColumn("RN2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRN2)
            Me.columnRN3 = New DataColumn("RN3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRN3)
            Me.columnTypeDesc.AllowDBNull = false
            Me.columnRN1.ReadOnly = true
            Me.columnRN2.ReadOnly = true
            Me.columnRN3.ReadOnly = true
        End Sub
        
        Public Function Newmembermaster_viewRow() As membermaster_viewRow
            Return CType(Me.NewRow,membermaster_viewRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New membermaster_viewRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(membermaster_viewRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.membermaster_viewRowChangedEvent) Is Nothing) Then
                RaiseEvent membermaster_viewRowChanged(Me, New membermaster_viewRowChangeEvent(CType(e.Row,membermaster_viewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.membermaster_viewRowChangingEvent) Is Nothing) Then
                RaiseEvent membermaster_viewRowChanging(Me, New membermaster_viewRowChangeEvent(CType(e.Row,membermaster_viewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.membermaster_viewRowDeletedEvent) Is Nothing) Then
                RaiseEvent membermaster_viewRowDeleted(Me, New membermaster_viewRowChangeEvent(CType(e.Row,membermaster_viewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.membermaster_viewRowDeletingEvent) Is Nothing) Then
                RaiseEvent membermaster_viewRowDeleting(Me, New membermaster_viewRowChangeEvent(CType(e.Row,membermaster_viewRow), e.Action))
            End If
        End Sub
        
        Public Sub Removemembermaster_viewRow(ByVal row As membermaster_viewRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class membermaster_viewRow
        Inherits DataRow
        
        Private tablemembermaster_view As membermaster_viewDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablemembermaster_view = CType(Me.Table,membermaster_viewDataTable)
        End Sub
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster_view.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster_view.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster_view.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster_view.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property CONTADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster_view.CONTADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster_view.CONTADD1Column) = value
            End Set
        End Property
        
        Public Property CONTADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster_view.CONTADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster_view.CONTADD2Column) = value
            End Set
        End Property
        
        Public Property CONTCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster_view.CONTCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster_view.CONTCITYColumn) = value
            End Set
        End Property
        
        Public Property CONTPIN As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster_view.CONTPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster_view.CONTPINColumn) = value
            End Set
        End Property
        
        Public Property CONTSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster_view.CONTSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster_view.CONTSTATEColumn) = value
            End Set
        End Property
        
        Public Property TypeDesc As String
            Get
                Return CType(Me(Me.tablemembermaster_view.TypeDescColumn),String)
            End Get
            Set
                Me(Me.tablemembermaster_view.TypeDescColumn) = value
            End Set
        End Property
        
        Public Property CurentStatus As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster_view.CurentStatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster_view.CurentStatusColumn) = value
            End Set
        End Property
        
        Public Property RN1 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster_view.RN1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster_view.RN1Column) = value
            End Set
        End Property
        
        Public Property RN2 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster_view.RN2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster_view.RN2Column) = value
            End Set
        End Property
        
        Public Property RN3 As String
            Get
                Try 
                    Return CType(Me(Me.tablemembermaster_view.RN3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablemembermaster_view.RN3Column) = value
            End Set
        End Property
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster_view.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablemembermaster_view.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster_view.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablemembermaster_view.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster_view.CONTADD1Column)
        End Function
        
        Public Sub SetCONTADD1Null()
            Me(Me.tablemembermaster_view.CONTADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster_view.CONTADD2Column)
        End Function
        
        Public Sub SetCONTADD2Null()
            Me(Me.tablemembermaster_view.CONTADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCITYNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster_view.CONTCITYColumn)
        End Function
        
        Public Sub SetCONTCITYNull()
            Me(Me.tablemembermaster_view.CONTCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPINNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster_view.CONTPINColumn)
        End Function
        
        Public Sub SetCONTPINNull()
            Me(Me.tablemembermaster_view.CONTPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTSTATENull() As Boolean
            Return Me.IsNull(Me.tablemembermaster_view.CONTSTATEColumn)
        End Function
        
        Public Sub SetCONTSTATENull()
            Me(Me.tablemembermaster_view.CONTSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCurentStatusNull() As Boolean
            Return Me.IsNull(Me.tablemembermaster_view.CurentStatusColumn)
        End Function
        
        Public Sub SetCurentStatusNull()
            Me(Me.tablemembermaster_view.CurentStatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRN1Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster_view.RN1Column)
        End Function
        
        Public Sub SetRN1Null()
            Me(Me.tablemembermaster_view.RN1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRN2Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster_view.RN2Column)
        End Function
        
        Public Sub SetRN2Null()
            Me(Me.tablemembermaster_view.RN2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsRN3Null() As Boolean
            Return Me.IsNull(Me.tablemembermaster_view.RN3Column)
        End Function
        
        Public Sub SetRN3Null()
            Me(Me.tablemembermaster_view.RN3Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class membermaster_viewRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As membermaster_viewRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As membermaster_viewRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As membermaster_viewRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEMBERMASTERDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMEMBERTYPECODE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnMID As DataColumn
        
        Private columnDOB As DataColumn
        
        Private columnDOJ As DataColumn
        
        Private columnPADD1 As DataColumn
        
        Private columnPADD2 As DataColumn
        
        Private columnPADD3 As DataColumn
        
        Private columnPCITY As DataColumn
        
        Private columnPSTATE As DataColumn
        
        Private columnPCOUNTRY As DataColumn
        
        Private columnPPIN As DataColumn
        
        Private columnPPHONE1 As DataColumn
        
        Private columnPPHONE2 As DataColumn
        
        Private columnPCELL As DataColumn
        
        Private columnPEMAIL As DataColumn
        
        Private columnCADD1 As DataColumn
        
        Private columnCADD2 As DataColumn
        
        Private columnCADD3 As DataColumn
        
        Private columnCCITY As DataColumn
        
        Private columnCSTATE As DataColumn
        
        Private columnCCOUNTRY As DataColumn
        
        Private columnCPIN As DataColumn
        
        Private columnCPHONE1 As DataColumn
        
        Private columnCPHONE2 As DataColumn
        
        Private columnCCELL As DataColumn
        
        Private columnCEMAIL As DataColumn
        
        Private columnCONTADD1 As DataColumn
        
        Private columnCONTADD2 As DataColumn
        
        Private columnCONTADD3 As DataColumn
        
        Private columnCONTCITY As DataColumn
        
        Private columnCONTSTATE As DataColumn
        
        Private columnCONTCOUNTRY As DataColumn
        
        Private columnCONTPIN As DataColumn
        
        Private columnCONTPHONE1 As DataColumn
        
        Private columnCONTPHONE2 As DataColumn
        
        Private columnCONTCELL As DataColumn
        
        Private columnCONTEMAIL As DataColumn
        
        Private columnCurentStatus As DataColumn
        
        Private columnFirstName As DataColumn
        
        Private columnMiddleName As DataColumn
        
        Private columnSurname As DataColumn
        
        Private columnBillbasis As DataColumn
        
        Private columnMSORDERNO As DataColumn
        
        Private columnICNO As DataColumn
        
        Private columnUnitNo As DataColumn
        
        Private columnRankNo As DataColumn
        
        Private columnDateOfCommission As DataColumn
        
        Private columnDateOfRelease As DataColumn
        
        Private columnDateOfCreation As DataColumn
        
        Private columnBTGroup As DataColumn
        
        Private columnRIDCardNo As DataColumn
        
        Private columnArmService As DataColumn
        
        Private columnWO As DataColumn
        
        Private columnNoOfDependencies As DataColumn
        
        Private columnAnniversaryDate As DataColumn
        
        Private columnRByMemberNo As DataColumn
        
        Private columnRByName As DataColumn
        
        Private columnArmyNo As DataColumn
        
        Private columnRankName As DataColumn
        
        Private columnBarcodeNo As DataColumn
        
        Private columnDependentID As DataColumn
        
        Private columnMemberType As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_MEMBERMASTER")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERTYPECODEColumn As DataColumn
            Get
                Return Me.columnMEMBERTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property MIDColumn As DataColumn
            Get
                Return Me.columnMID
            End Get
        End Property
        
        Friend ReadOnly Property DOBColumn As DataColumn
            Get
                Return Me.columnDOB
            End Get
        End Property
        
        Friend ReadOnly Property DOJColumn As DataColumn
            Get
                Return Me.columnDOJ
            End Get
        End Property
        
        Friend ReadOnly Property PADD1Column As DataColumn
            Get
                Return Me.columnPADD1
            End Get
        End Property
        
        Friend ReadOnly Property PADD2Column As DataColumn
            Get
                Return Me.columnPADD2
            End Get
        End Property
        
        Friend ReadOnly Property PADD3Column As DataColumn
            Get
                Return Me.columnPADD3
            End Get
        End Property
        
        Friend ReadOnly Property PCITYColumn As DataColumn
            Get
                Return Me.columnPCITY
            End Get
        End Property
        
        Friend ReadOnly Property PSTATEColumn As DataColumn
            Get
                Return Me.columnPSTATE
            End Get
        End Property
        
        Friend ReadOnly Property PCOUNTRYColumn As DataColumn
            Get
                Return Me.columnPCOUNTRY
            End Get
        End Property
        
        Friend ReadOnly Property PPINColumn As DataColumn
            Get
                Return Me.columnPPIN
            End Get
        End Property
        
        Friend ReadOnly Property PPHONE1Column As DataColumn
            Get
                Return Me.columnPPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property PPHONE2Column As DataColumn
            Get
                Return Me.columnPPHONE2
            End Get
        End Property
        
        Friend ReadOnly Property PCELLColumn As DataColumn
            Get
                Return Me.columnPCELL
            End Get
        End Property
        
        Friend ReadOnly Property PEMAILColumn As DataColumn
            Get
                Return Me.columnPEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property CADD1Column As DataColumn
            Get
                Return Me.columnCADD1
            End Get
        End Property
        
        Friend ReadOnly Property CADD2Column As DataColumn
            Get
                Return Me.columnCADD2
            End Get
        End Property
        
        Friend ReadOnly Property CADD3Column As DataColumn
            Get
                Return Me.columnCADD3
            End Get
        End Property
        
        Friend ReadOnly Property CCITYColumn As DataColumn
            Get
                Return Me.columnCCITY
            End Get
        End Property
        
        Friend ReadOnly Property CSTATEColumn As DataColumn
            Get
                Return Me.columnCSTATE
            End Get
        End Property
        
        Friend ReadOnly Property CCOUNTRYColumn As DataColumn
            Get
                Return Me.columnCCOUNTRY
            End Get
        End Property
        
        Friend ReadOnly Property CPINColumn As DataColumn
            Get
                Return Me.columnCPIN
            End Get
        End Property
        
        Friend ReadOnly Property CPHONE1Column As DataColumn
            Get
                Return Me.columnCPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property CPHONE2Column As DataColumn
            Get
                Return Me.columnCPHONE2
            End Get
        End Property
        
        Friend ReadOnly Property CCELLColumn As DataColumn
            Get
                Return Me.columnCCELL
            End Get
        End Property
        
        Friend ReadOnly Property CEMAILColumn As DataColumn
            Get
                Return Me.columnCEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD1Column As DataColumn
            Get
                Return Me.columnCONTADD1
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD2Column As DataColumn
            Get
                Return Me.columnCONTADD2
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD3Column As DataColumn
            Get
                Return Me.columnCONTADD3
            End Get
        End Property
        
        Friend ReadOnly Property CONTCITYColumn As DataColumn
            Get
                Return Me.columnCONTCITY
            End Get
        End Property
        
        Friend ReadOnly Property CONTSTATEColumn As DataColumn
            Get
                Return Me.columnCONTSTATE
            End Get
        End Property
        
        Friend ReadOnly Property CONTCOUNTRYColumn As DataColumn
            Get
                Return Me.columnCONTCOUNTRY
            End Get
        End Property
        
        Friend ReadOnly Property CONTPINColumn As DataColumn
            Get
                Return Me.columnCONTPIN
            End Get
        End Property
        
        Friend ReadOnly Property CONTPHONE1Column As DataColumn
            Get
                Return Me.columnCONTPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property CONTPHONE2Column As DataColumn
            Get
                Return Me.columnCONTPHONE2
            End Get
        End Property
        
        Friend ReadOnly Property CONTCELLColumn As DataColumn
            Get
                Return Me.columnCONTCELL
            End Get
        End Property
        
        Friend ReadOnly Property CONTEMAILColumn As DataColumn
            Get
                Return Me.columnCONTEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property CurentStatusColumn As DataColumn
            Get
                Return Me.columnCurentStatus
            End Get
        End Property
        
        Friend ReadOnly Property FirstNameColumn As DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        Friend ReadOnly Property MiddleNameColumn As DataColumn
            Get
                Return Me.columnMiddleName
            End Get
        End Property
        
        Friend ReadOnly Property SurnameColumn As DataColumn
            Get
                Return Me.columnSurname
            End Get
        End Property
        
        Friend ReadOnly Property BillbasisColumn As DataColumn
            Get
                Return Me.columnBillbasis
            End Get
        End Property
        
        Friend ReadOnly Property MSORDERNOColumn As DataColumn
            Get
                Return Me.columnMSORDERNO
            End Get
        End Property
        
        Friend ReadOnly Property ICNOColumn As DataColumn
            Get
                Return Me.columnICNO
            End Get
        End Property
        
        Friend ReadOnly Property UnitNoColumn As DataColumn
            Get
                Return Me.columnUnitNo
            End Get
        End Property
        
        Friend ReadOnly Property RankNoColumn As DataColumn
            Get
                Return Me.columnRankNo
            End Get
        End Property
        
        Friend ReadOnly Property DateOfCommissionColumn As DataColumn
            Get
                Return Me.columnDateOfCommission
            End Get
        End Property
        
        Friend ReadOnly Property DateOfReleaseColumn As DataColumn
            Get
                Return Me.columnDateOfRelease
            End Get
        End Property
        
        Friend ReadOnly Property DateOfCreationColumn As DataColumn
            Get
                Return Me.columnDateOfCreation
            End Get
        End Property
        
        Friend ReadOnly Property BTGroupColumn As DataColumn
            Get
                Return Me.columnBTGroup
            End Get
        End Property
        
        Friend ReadOnly Property RIDCardNoColumn As DataColumn
            Get
                Return Me.columnRIDCardNo
            End Get
        End Property
        
        Friend ReadOnly Property ArmServiceColumn As DataColumn
            Get
                Return Me.columnArmService
            End Get
        End Property
        
        Friend ReadOnly Property WOColumn As DataColumn
            Get
                Return Me.columnWO
            End Get
        End Property
        
        Friend ReadOnly Property NoOfDependenciesColumn As DataColumn
            Get
                Return Me.columnNoOfDependencies
            End Get
        End Property
        
        Friend ReadOnly Property AnniversaryDateColumn As DataColumn
            Get
                Return Me.columnAnniversaryDate
            End Get
        End Property
        
        Friend ReadOnly Property RByMemberNoColumn As DataColumn
            Get
                Return Me.columnRByMemberNo
            End Get
        End Property
        
        Friend ReadOnly Property RByNameColumn As DataColumn
            Get
                Return Me.columnRByName
            End Get
        End Property
        
        Friend ReadOnly Property ArmyNoColumn As DataColumn
            Get
                Return Me.columnArmyNo
            End Get
        End Property
        
        Friend ReadOnly Property RankNameColumn As DataColumn
            Get
                Return Me.columnRankName
            End Get
        End Property
        
        Friend ReadOnly Property BarcodeNoColumn As DataColumn
            Get
                Return Me.columnBarcodeNo
            End Get
        End Property
        
        Friend ReadOnly Property DependentIDColumn As DataColumn
            Get
                Return Me.columnDependentID
            End Get
        End Property
        
        Friend ReadOnly Property MemberTypeColumn As DataColumn
            Get
                Return Me.columnMemberType
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_MEMBERMASTERRow
            Get
                Return CType(Me.Rows(index),VIEW_MEMBERMASTERRow)
            End Get
        End Property
        
        Public Event VIEW_MEMBERMASTERRowChanged As VIEW_MEMBERMASTERRowChangeEventHandler
        
        Public Event VIEW_MEMBERMASTERRowChanging As VIEW_MEMBERMASTERRowChangeEventHandler
        
        Public Event VIEW_MEMBERMASTERRowDeleted As VIEW_MEMBERMASTERRowChangeEventHandler
        
        Public Event VIEW_MEMBERMASTERRowDeleting As VIEW_MEMBERMASTERRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_MEMBERMASTERRow(ByVal row As VIEW_MEMBERMASTERRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_MEMBERMASTERRow( _
                    ByVal MEMBERTYPECODE As String,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal MID As String,  _
                    ByVal DOB As Date,  _
                    ByVal DOJ As Date,  _
                    ByVal PADD1 As String,  _
                    ByVal PADD2 As String,  _
                    ByVal PADD3 As String,  _
                    ByVal PCITY As String,  _
                    ByVal PSTATE As String,  _
                    ByVal PCOUNTRY As String,  _
                    ByVal PPIN As String,  _
                    ByVal PPHONE1 As String,  _
                    ByVal PPHONE2 As String,  _
                    ByVal PCELL As String,  _
                    ByVal PEMAIL As String,  _
                    ByVal CADD1 As String,  _
                    ByVal CADD2 As String,  _
                    ByVal CADD3 As String,  _
                    ByVal CCITY As String,  _
                    ByVal CSTATE As String,  _
                    ByVal CCOUNTRY As String,  _
                    ByVal CPIN As String,  _
                    ByVal CPHONE1 As String,  _
                    ByVal CPHONE2 As String,  _
                    ByVal CCELL As String,  _
                    ByVal CEMAIL As String,  _
                    ByVal CONTADD1 As String,  _
                    ByVal CONTADD2 As String,  _
                    ByVal CONTADD3 As String,  _
                    ByVal CONTCITY As String,  _
                    ByVal CONTSTATE As String,  _
                    ByVal CONTCOUNTRY As String,  _
                    ByVal CONTPIN As String,  _
                    ByVal CONTPHONE1 As String,  _
                    ByVal CONTPHONE2 As String,  _
                    ByVal CONTCELL As String,  _
                    ByVal CONTEMAIL As String,  _
                    ByVal CurentStatus As String,  _
                    ByVal FirstName As String,  _
                    ByVal MiddleName As String,  _
                    ByVal Surname As String,  _
                    ByVal Billbasis As String,  _
                    ByVal MSORDERNO As Decimal,  _
                    ByVal ICNO As String,  _
                    ByVal UnitNo As String,  _
                    ByVal RankNo As String,  _
                    ByVal DateOfCommission As Date,  _
                    ByVal DateOfRelease As Date,  _
                    ByVal DateOfCreation As Date,  _
                    ByVal BTGroup As String,  _
                    ByVal RIDCardNo As String,  _
                    ByVal ArmService As String,  _
                    ByVal WO As String,  _
                    ByVal NoOfDependencies As String,  _
                    ByVal AnniversaryDate As Date,  _
                    ByVal RByMemberNo As String,  _
                    ByVal RByName As String,  _
                    ByVal ArmyNo As String,  _
                    ByVal RankName As String,  _
                    ByVal BarcodeNo As String,  _
                    ByVal DependentID As Decimal,  _
                    ByVal MemberType As String) As VIEW_MEMBERMASTERRow
            Dim rowVIEW_MEMBERMASTERRow As VIEW_MEMBERMASTERRow = CType(Me.NewRow,VIEW_MEMBERMASTERRow)
            rowVIEW_MEMBERMASTERRow.ItemArray = New Object() {MEMBERTYPECODE, MCODE, MNAME, MID, DOB, DOJ, PADD1, PADD2, PADD3, PCITY, PSTATE, PCOUNTRY, PPIN, PPHONE1, PPHONE2, PCELL, PEMAIL, CADD1, CADD2, CADD3, CCITY, CSTATE, CCOUNTRY, CPIN, CPHONE1, CPHONE2, CCELL, CEMAIL, CONTADD1, CONTADD2, CONTADD3, CONTCITY, CONTSTATE, CONTCOUNTRY, CONTPIN, CONTPHONE1, CONTPHONE2, CONTCELL, CONTEMAIL, CurentStatus, FirstName, MiddleName, Surname, Billbasis, MSORDERNO, ICNO, UnitNo, RankNo, DateOfCommission, DateOfRelease, DateOfCreation, BTGroup, RIDCardNo, ArmService, WO, NoOfDependencies, AnniversaryDate, RByMemberNo, RByName, ArmyNo, RankName, BarcodeNo, DependentID, MemberType}
            Me.Rows.Add(rowVIEW_MEMBERMASTERRow)
            Return rowVIEW_MEMBERMASTERRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_MEMBERMASTERDataTable = CType(MyBase.Clone,VIEW_MEMBERMASTERDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_MEMBERMASTERDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnMEMBERTYPECODE = Me.Columns("MEMBERTYPECODE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnMID = Me.Columns("MID")
            Me.columnDOB = Me.Columns("DOB")
            Me.columnDOJ = Me.Columns("DOJ")
            Me.columnPADD1 = Me.Columns("PADD1")
            Me.columnPADD2 = Me.Columns("PADD2")
            Me.columnPADD3 = Me.Columns("PADD3")
            Me.columnPCITY = Me.Columns("PCITY")
            Me.columnPSTATE = Me.Columns("PSTATE")
            Me.columnPCOUNTRY = Me.Columns("PCOUNTRY")
            Me.columnPPIN = Me.Columns("PPIN")
            Me.columnPPHONE1 = Me.Columns("PPHONE1")
            Me.columnPPHONE2 = Me.Columns("PPHONE2")
            Me.columnPCELL = Me.Columns("PCELL")
            Me.columnPEMAIL = Me.Columns("PEMAIL")
            Me.columnCADD1 = Me.Columns("CADD1")
            Me.columnCADD2 = Me.Columns("CADD2")
            Me.columnCADD3 = Me.Columns("CADD3")
            Me.columnCCITY = Me.Columns("CCITY")
            Me.columnCSTATE = Me.Columns("CSTATE")
            Me.columnCCOUNTRY = Me.Columns("CCOUNTRY")
            Me.columnCPIN = Me.Columns("CPIN")
            Me.columnCPHONE1 = Me.Columns("CPHONE1")
            Me.columnCPHONE2 = Me.Columns("CPHONE2")
            Me.columnCCELL = Me.Columns("CCELL")
            Me.columnCEMAIL = Me.Columns("CEMAIL")
            Me.columnCONTADD1 = Me.Columns("CONTADD1")
            Me.columnCONTADD2 = Me.Columns("CONTADD2")
            Me.columnCONTADD3 = Me.Columns("CONTADD3")
            Me.columnCONTCITY = Me.Columns("CONTCITY")
            Me.columnCONTSTATE = Me.Columns("CONTSTATE")
            Me.columnCONTCOUNTRY = Me.Columns("CONTCOUNTRY")
            Me.columnCONTPIN = Me.Columns("CONTPIN")
            Me.columnCONTPHONE1 = Me.Columns("CONTPHONE1")
            Me.columnCONTPHONE2 = Me.Columns("CONTPHONE2")
            Me.columnCONTCELL = Me.Columns("CONTCELL")
            Me.columnCONTEMAIL = Me.Columns("CONTEMAIL")
            Me.columnCurentStatus = Me.Columns("CurentStatus")
            Me.columnFirstName = Me.Columns("FirstName")
            Me.columnMiddleName = Me.Columns("MiddleName")
            Me.columnSurname = Me.Columns("Surname")
            Me.columnBillbasis = Me.Columns("Billbasis")
            Me.columnMSORDERNO = Me.Columns("MSORDERNO")
            Me.columnICNO = Me.Columns("ICNO")
            Me.columnUnitNo = Me.Columns("UnitNo")
            Me.columnRankNo = Me.Columns("RankNo")
            Me.columnDateOfCommission = Me.Columns("DateOfCommission")
            Me.columnDateOfRelease = Me.Columns("DateOfRelease")
            Me.columnDateOfCreation = Me.Columns("DateOfCreation")
            Me.columnBTGroup = Me.Columns("BTGroup")
            Me.columnRIDCardNo = Me.Columns("RIDCardNo")
            Me.columnArmService = Me.Columns("ArmService")
            Me.columnWO = Me.Columns("WO")
            Me.columnNoOfDependencies = Me.Columns("NoOfDependencies")
            Me.columnAnniversaryDate = Me.Columns("AnniversaryDate")
            Me.columnRByMemberNo = Me.Columns("RByMemberNo")
            Me.columnRByName = Me.Columns("RByName")
            Me.columnArmyNo = Me.Columns("ArmyNo")
            Me.columnRankName = Me.Columns("RankName")
            Me.columnBarcodeNo = Me.Columns("BarcodeNo")
            Me.columnDependentID = Me.Columns("DependentID")
            Me.columnMemberType = Me.Columns("MemberType")
        End Sub
        
        Private Sub InitClass()
            Me.columnMEMBERTYPECODE = New DataColumn("MEMBERTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERTYPECODE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnMID = New DataColumn("MID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMID)
            Me.columnDOB = New DataColumn("DOB", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOB)
            Me.columnDOJ = New DataColumn("DOJ", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDOJ)
            Me.columnPADD1 = New DataColumn("PADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD1)
            Me.columnPADD2 = New DataColumn("PADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD2)
            Me.columnPADD3 = New DataColumn("PADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD3)
            Me.columnPCITY = New DataColumn("PCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCITY)
            Me.columnPSTATE = New DataColumn("PSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPSTATE)
            Me.columnPCOUNTRY = New DataColumn("PCOUNTRY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCOUNTRY)
            Me.columnPPIN = New DataColumn("PPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPIN)
            Me.columnPPHONE1 = New DataColumn("PPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPHONE1)
            Me.columnPPHONE2 = New DataColumn("PPHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPHONE2)
            Me.columnPCELL = New DataColumn("PCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCELL)
            Me.columnPEMAIL = New DataColumn("PEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPEMAIL)
            Me.columnCADD1 = New DataColumn("CADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD1)
            Me.columnCADD2 = New DataColumn("CADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD2)
            Me.columnCADD3 = New DataColumn("CADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD3)
            Me.columnCCITY = New DataColumn("CCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCITY)
            Me.columnCSTATE = New DataColumn("CSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCSTATE)
            Me.columnCCOUNTRY = New DataColumn("CCOUNTRY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCOUNTRY)
            Me.columnCPIN = New DataColumn("CPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCPIN)
            Me.columnCPHONE1 = New DataColumn("CPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCPHONE1)
            Me.columnCPHONE2 = New DataColumn("CPHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCPHONE2)
            Me.columnCCELL = New DataColumn("CCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCELL)
            Me.columnCEMAIL = New DataColumn("CEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCEMAIL)
            Me.columnCONTADD1 = New DataColumn("CONTADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD1)
            Me.columnCONTADD2 = New DataColumn("CONTADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD2)
            Me.columnCONTADD3 = New DataColumn("CONTADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD3)
            Me.columnCONTCITY = New DataColumn("CONTCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCITY)
            Me.columnCONTSTATE = New DataColumn("CONTSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTSTATE)
            Me.columnCONTCOUNTRY = New DataColumn("CONTCOUNTRY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCOUNTRY)
            Me.columnCONTPIN = New DataColumn("CONTPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPIN)
            Me.columnCONTPHONE1 = New DataColumn("CONTPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPHONE1)
            Me.columnCONTPHONE2 = New DataColumn("CONTPHONE2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPHONE2)
            Me.columnCONTCELL = New DataColumn("CONTCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCELL)
            Me.columnCONTEMAIL = New DataColumn("CONTEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTEMAIL)
            Me.columnCurentStatus = New DataColumn("CurentStatus", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCurentStatus)
            Me.columnFirstName = New DataColumn("FirstName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirstName)
            Me.columnMiddleName = New DataColumn("MiddleName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMiddleName)
            Me.columnSurname = New DataColumn("Surname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSurname)
            Me.columnBillbasis = New DataColumn("Billbasis", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBillbasis)
            Me.columnMSORDERNO = New DataColumn("MSORDERNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMSORDERNO)
            Me.columnICNO = New DataColumn("ICNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnICNO)
            Me.columnUnitNo = New DataColumn("UnitNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUnitNo)
            Me.columnRankNo = New DataColumn("RankNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRankNo)
            Me.columnDateOfCommission = New DataColumn("DateOfCommission", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateOfCommission)
            Me.columnDateOfRelease = New DataColumn("DateOfRelease", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateOfRelease)
            Me.columnDateOfCreation = New DataColumn("DateOfCreation", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateOfCreation)
            Me.columnBTGroup = New DataColumn("BTGroup", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBTGroup)
            Me.columnRIDCardNo = New DataColumn("RIDCardNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRIDCardNo)
            Me.columnArmService = New DataColumn("ArmService", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArmService)
            Me.columnWO = New DataColumn("WO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnWO)
            Me.columnNoOfDependencies = New DataColumn("NoOfDependencies", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNoOfDependencies)
            Me.columnAnniversaryDate = New DataColumn("AnniversaryDate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAnniversaryDate)
            Me.columnRByMemberNo = New DataColumn("RByMemberNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRByMemberNo)
            Me.columnRByName = New DataColumn("RByName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRByName)
            Me.columnArmyNo = New DataColumn("ArmyNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnArmyNo)
            Me.columnRankName = New DataColumn("RankName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRankName)
            Me.columnBarcodeNo = New DataColumn("BarcodeNo", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBarcodeNo)
            Me.columnDependentID = New DataColumn("DependentID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDependentID)
            Me.columnMemberType = New DataColumn("MemberType", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMemberType)
        End Sub
        
        Public Function NewVIEW_MEMBERMASTERRow() As VIEW_MEMBERMASTERRow
            Return CType(Me.NewRow,VIEW_MEMBERMASTERRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_MEMBERMASTERRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_MEMBERMASTERRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_MEMBERMASTERRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEMBERMASTERRowChanged(Me, New VIEW_MEMBERMASTERRowChangeEvent(CType(e.Row,VIEW_MEMBERMASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_MEMBERMASTERRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEMBERMASTERRowChanging(Me, New VIEW_MEMBERMASTERRowChangeEvent(CType(e.Row,VIEW_MEMBERMASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_MEMBERMASTERRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_MEMBERMASTERRowDeleted(Me, New VIEW_MEMBERMASTERRowChangeEvent(CType(e.Row,VIEW_MEMBERMASTERRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_MEMBERMASTERRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_MEMBERMASTERRowDeleting(Me, New VIEW_MEMBERMASTERRowChangeEvent(CType(e.Row,VIEW_MEMBERMASTERRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_MEMBERMASTERRow(ByVal row As VIEW_MEMBERMASTERRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEMBERMASTERRow
        Inherits DataRow
        
        Private tableVIEW_MEMBERMASTER As VIEW_MEMBERMASTERDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_MEMBERMASTER = CType(Me.Table,VIEW_MEMBERMASTERDataTable)
        End Sub
        
        Public Property MEMBERTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.MEMBERTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.MEMBERTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property MID As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.MIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.MIDColumn) = value
            End Set
        End Property
        
        Public Property DOB As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.DOBColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.DOBColumn) = value
            End Set
        End Property
        
        Public Property DOJ As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.DOJColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.DOJColumn) = value
            End Set
        End Property
        
        Public Property PADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.PADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.PADD1Column) = value
            End Set
        End Property
        
        Public Property PADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.PADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.PADD2Column) = value
            End Set
        End Property
        
        Public Property PADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.PADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.PADD3Column) = value
            End Set
        End Property
        
        Public Property PCITY As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.PCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.PCITYColumn) = value
            End Set
        End Property
        
        Public Property PSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.PSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.PSTATEColumn) = value
            End Set
        End Property
        
        Public Property PCOUNTRY As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.PCOUNTRYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.PCOUNTRYColumn) = value
            End Set
        End Property
        
        Public Property PPIN As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.PPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.PPINColumn) = value
            End Set
        End Property
        
        Public Property PPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.PPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.PPHONE1Column) = value
            End Set
        End Property
        
        Public Property PPHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.PPHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.PPHONE2Column) = value
            End Set
        End Property
        
        Public Property PCELL As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.PCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.PCELLColumn) = value
            End Set
        End Property
        
        Public Property PEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.PEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.PEMAILColumn) = value
            End Set
        End Property
        
        Public Property CADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CADD1Column) = value
            End Set
        End Property
        
        Public Property CADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CADD2Column) = value
            End Set
        End Property
        
        Public Property CADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CADD3Column) = value
            End Set
        End Property
        
        Public Property CCITY As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CCITYColumn) = value
            End Set
        End Property
        
        Public Property CSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CSTATEColumn) = value
            End Set
        End Property
        
        Public Property CCOUNTRY As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CCOUNTRYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CCOUNTRYColumn) = value
            End Set
        End Property
        
        Public Property CPIN As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CPINColumn) = value
            End Set
        End Property
        
        Public Property CPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CPHONE1Column) = value
            End Set
        End Property
        
        Public Property CPHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CPHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CPHONE2Column) = value
            End Set
        End Property
        
        Public Property CCELL As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CCELLColumn) = value
            End Set
        End Property
        
        Public Property CEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CEMAILColumn) = value
            End Set
        End Property
        
        Public Property CONTADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CONTADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CONTADD1Column) = value
            End Set
        End Property
        
        Public Property CONTADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CONTADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CONTADD2Column) = value
            End Set
        End Property
        
        Public Property CONTADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CONTADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CONTADD3Column) = value
            End Set
        End Property
        
        Public Property CONTCITY As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CONTCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CONTCITYColumn) = value
            End Set
        End Property
        
        Public Property CONTSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CONTSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CONTSTATEColumn) = value
            End Set
        End Property
        
        Public Property CONTCOUNTRY As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CONTCOUNTRYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CONTCOUNTRYColumn) = value
            End Set
        End Property
        
        Public Property CONTPIN As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CONTPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CONTPINColumn) = value
            End Set
        End Property
        
        Public Property CONTPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CONTPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CONTPHONE1Column) = value
            End Set
        End Property
        
        Public Property CONTPHONE2 As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CONTPHONE2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CONTPHONE2Column) = value
            End Set
        End Property
        
        Public Property CONTCELL As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CONTCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CONTCELLColumn) = value
            End Set
        End Property
        
        Public Property CONTEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CONTEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CONTEMAILColumn) = value
            End Set
        End Property
        
        Public Property CurentStatus As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.CurentStatusColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.CurentStatusColumn) = value
            End Set
        End Property
        
        Public Property FirstName As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.FirstNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.FirstNameColumn) = value
            End Set
        End Property
        
        Public Property MiddleName As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.MiddleNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.MiddleNameColumn) = value
            End Set
        End Property
        
        Public Property Surname As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.SurnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.SurnameColumn) = value
            End Set
        End Property
        
        Public Property Billbasis As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.BillbasisColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.BillbasisColumn) = value
            End Set
        End Property
        
        Public Property MSORDERNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.MSORDERNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.MSORDERNOColumn) = value
            End Set
        End Property
        
        Public Property ICNO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.ICNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.ICNOColumn) = value
            End Set
        End Property
        
        Public Property UnitNo As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.UnitNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.UnitNoColumn) = value
            End Set
        End Property
        
        Public Property RankNo As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.RankNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.RankNoColumn) = value
            End Set
        End Property
        
        Public Property DateOfCommission As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.DateOfCommissionColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.DateOfCommissionColumn) = value
            End Set
        End Property
        
        Public Property DateOfRelease As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.DateOfReleaseColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.DateOfReleaseColumn) = value
            End Set
        End Property
        
        Public Property DateOfCreation As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.DateOfCreationColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.DateOfCreationColumn) = value
            End Set
        End Property
        
        Public Property BTGroup As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.BTGroupColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.BTGroupColumn) = value
            End Set
        End Property
        
        Public Property RIDCardNo As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.RIDCardNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.RIDCardNoColumn) = value
            End Set
        End Property
        
        Public Property ArmService As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.ArmServiceColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.ArmServiceColumn) = value
            End Set
        End Property
        
        Public Property WO As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.WOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.WOColumn) = value
            End Set
        End Property
        
        Public Property NoOfDependencies As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.NoOfDependenciesColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.NoOfDependenciesColumn) = value
            End Set
        End Property
        
        Public Property AnniversaryDate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.AnniversaryDateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.AnniversaryDateColumn) = value
            End Set
        End Property
        
        Public Property RByMemberNo As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.RByMemberNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.RByMemberNoColumn) = value
            End Set
        End Property
        
        Public Property RByName As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.RByNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.RByNameColumn) = value
            End Set
        End Property
        
        Public Property ArmyNo As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.ArmyNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.ArmyNoColumn) = value
            End Set
        End Property
        
        Public Property RankName As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.RankNameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.RankNameColumn) = value
            End Set
        End Property
        
        Public Property BarcodeNo As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.BarcodeNoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.BarcodeNoColumn) = value
            End Set
        End Property
        
        Public Property DependentID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.DependentIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.DependentIDColumn) = value
            End Set
        End Property
        
        Public Property MemberType As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_MEMBERMASTER.MemberTypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_MEMBERMASTER.MemberTypeColumn) = value
            End Set
        End Property
        
        Public Function IsMEMBERTYPECODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.MEMBERTYPECODEColumn)
        End Function
        
        Public Sub SetMEMBERTYPECODENull()
            Me(Me.tableVIEW_MEMBERMASTER.MEMBERTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableVIEW_MEMBERMASTER.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableVIEW_MEMBERMASTER.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMIDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.MIDColumn)
        End Function
        
        Public Sub SetMIDNull()
            Me(Me.tableVIEW_MEMBERMASTER.MIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOBNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.DOBColumn)
        End Function
        
        Public Sub SetDOBNull()
            Me(Me.tableVIEW_MEMBERMASTER.DOBColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDOJNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.DOJColumn)
        End Function
        
        Public Sub SetDOJNull()
            Me(Me.tableVIEW_MEMBERMASTER.DOJColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.PADD1Column)
        End Function
        
        Public Sub SetPADD1Null()
            Me(Me.tableVIEW_MEMBERMASTER.PADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.PADD2Column)
        End Function
        
        Public Sub SetPADD2Null()
            Me(Me.tableVIEW_MEMBERMASTER.PADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD3Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.PADD3Column)
        End Function
        
        Public Sub SetPADD3Null()
            Me(Me.tableVIEW_MEMBERMASTER.PADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCITYNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.PCITYColumn)
        End Function
        
        Public Sub SetPCITYNull()
            Me(Me.tableVIEW_MEMBERMASTER.PCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPSTATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.PSTATEColumn)
        End Function
        
        Public Sub SetPSTATENull()
            Me(Me.tableVIEW_MEMBERMASTER.PSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.PCOUNTRYColumn)
        End Function
        
        Public Sub SetPCOUNTRYNull()
            Me(Me.tableVIEW_MEMBERMASTER.PCOUNTRYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPINNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.PPINColumn)
        End Function
        
        Public Sub SetPPINNull()
            Me(Me.tableVIEW_MEMBERMASTER.PPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPHONE1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.PPHONE1Column)
        End Function
        
        Public Sub SetPPHONE1Null()
            Me(Me.tableVIEW_MEMBERMASTER.PPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPHONE2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.PPHONE2Column)
        End Function
        
        Public Sub SetPPHONE2Null()
            Me(Me.tableVIEW_MEMBERMASTER.PPHONE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCELLNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.PCELLColumn)
        End Function
        
        Public Sub SetPCELLNull()
            Me(Me.tableVIEW_MEMBERMASTER.PCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPEMAILNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.PEMAILColumn)
        End Function
        
        Public Sub SetPEMAILNull()
            Me(Me.tableVIEW_MEMBERMASTER.PEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CADD1Column)
        End Function
        
        Public Sub SetCADD1Null()
            Me(Me.tableVIEW_MEMBERMASTER.CADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CADD2Column)
        End Function
        
        Public Sub SetCADD2Null()
            Me(Me.tableVIEW_MEMBERMASTER.CADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD3Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CADD3Column)
        End Function
        
        Public Sub SetCADD3Null()
            Me(Me.tableVIEW_MEMBERMASTER.CADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCITYNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CCITYColumn)
        End Function
        
        Public Sub SetCCITYNull()
            Me(Me.tableVIEW_MEMBERMASTER.CCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCSTATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CSTATEColumn)
        End Function
        
        Public Sub SetCSTATENull()
            Me(Me.tableVIEW_MEMBERMASTER.CSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CCOUNTRYColumn)
        End Function
        
        Public Sub SetCCOUNTRYNull()
            Me(Me.tableVIEW_MEMBERMASTER.CCOUNTRYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCPINNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CPINColumn)
        End Function
        
        Public Sub SetCPINNull()
            Me(Me.tableVIEW_MEMBERMASTER.CPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCPHONE1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CPHONE1Column)
        End Function
        
        Public Sub SetCPHONE1Null()
            Me(Me.tableVIEW_MEMBERMASTER.CPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCPHONE2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CPHONE2Column)
        End Function
        
        Public Sub SetCPHONE2Null()
            Me(Me.tableVIEW_MEMBERMASTER.CPHONE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCELLNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CCELLColumn)
        End Function
        
        Public Sub SetCCELLNull()
            Me(Me.tableVIEW_MEMBERMASTER.CCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCEMAILNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CEMAILColumn)
        End Function
        
        Public Sub SetCEMAILNull()
            Me(Me.tableVIEW_MEMBERMASTER.CEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CONTADD1Column)
        End Function
        
        Public Sub SetCONTADD1Null()
            Me(Me.tableVIEW_MEMBERMASTER.CONTADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CONTADD2Column)
        End Function
        
        Public Sub SetCONTADD2Null()
            Me(Me.tableVIEW_MEMBERMASTER.CONTADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD3Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CONTADD3Column)
        End Function
        
        Public Sub SetCONTADD3Null()
            Me(Me.tableVIEW_MEMBERMASTER.CONTADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCITYNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CONTCITYColumn)
        End Function
        
        Public Sub SetCONTCITYNull()
            Me(Me.tableVIEW_MEMBERMASTER.CONTCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTSTATENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CONTSTATEColumn)
        End Function
        
        Public Sub SetCONTSTATENull()
            Me(Me.tableVIEW_MEMBERMASTER.CONTSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCOUNTRYNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CONTCOUNTRYColumn)
        End Function
        
        Public Sub SetCONTCOUNTRYNull()
            Me(Me.tableVIEW_MEMBERMASTER.CONTCOUNTRYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPINNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CONTPINColumn)
        End Function
        
        Public Sub SetCONTPINNull()
            Me(Me.tableVIEW_MEMBERMASTER.CONTPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPHONE1Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CONTPHONE1Column)
        End Function
        
        Public Sub SetCONTPHONE1Null()
            Me(Me.tableVIEW_MEMBERMASTER.CONTPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPHONE2Null() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CONTPHONE2Column)
        End Function
        
        Public Sub SetCONTPHONE2Null()
            Me(Me.tableVIEW_MEMBERMASTER.CONTPHONE2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCELLNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CONTCELLColumn)
        End Function
        
        Public Sub SetCONTCELLNull()
            Me(Me.tableVIEW_MEMBERMASTER.CONTCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTEMAILNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CONTEMAILColumn)
        End Function
        
        Public Sub SetCONTEMAILNull()
            Me(Me.tableVIEW_MEMBERMASTER.CONTEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCurentStatusNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.CurentStatusColumn)
        End Function
        
        Public Sub SetCurentStatusNull()
            Me(Me.tableVIEW_MEMBERMASTER.CurentStatusColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.FirstNameColumn)
        End Function
        
        Public Sub SetFirstNameNull()
            Me(Me.tableVIEW_MEMBERMASTER.FirstNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMiddleNameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.MiddleNameColumn)
        End Function
        
        Public Sub SetMiddleNameNull()
            Me(Me.tableVIEW_MEMBERMASTER.MiddleNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSurnameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.SurnameColumn)
        End Function
        
        Public Sub SetSurnameNull()
            Me(Me.tableVIEW_MEMBERMASTER.SurnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBillbasisNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.BillbasisColumn)
        End Function
        
        Public Sub SetBillbasisNull()
            Me(Me.tableVIEW_MEMBERMASTER.BillbasisColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMSORDERNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.MSORDERNOColumn)
        End Function
        
        Public Sub SetMSORDERNONull()
            Me(Me.tableVIEW_MEMBERMASTER.MSORDERNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsICNONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.ICNOColumn)
        End Function
        
        Public Sub SetICNONull()
            Me(Me.tableVIEW_MEMBERMASTER.ICNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUnitNoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.UnitNoColumn)
        End Function
        
        Public Sub SetUnitNoNull()
            Me(Me.tableVIEW_MEMBERMASTER.UnitNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRankNoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.RankNoColumn)
        End Function
        
        Public Sub SetRankNoNull()
            Me(Me.tableVIEW_MEMBERMASTER.RankNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateOfCommissionNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.DateOfCommissionColumn)
        End Function
        
        Public Sub SetDateOfCommissionNull()
            Me(Me.tableVIEW_MEMBERMASTER.DateOfCommissionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateOfReleaseNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.DateOfReleaseColumn)
        End Function
        
        Public Sub SetDateOfReleaseNull()
            Me(Me.tableVIEW_MEMBERMASTER.DateOfReleaseColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDateOfCreationNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.DateOfCreationColumn)
        End Function
        
        Public Sub SetDateOfCreationNull()
            Me(Me.tableVIEW_MEMBERMASTER.DateOfCreationColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBTGroupNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.BTGroupColumn)
        End Function
        
        Public Sub SetBTGroupNull()
            Me(Me.tableVIEW_MEMBERMASTER.BTGroupColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRIDCardNoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.RIDCardNoColumn)
        End Function
        
        Public Sub SetRIDCardNoNull()
            Me(Me.tableVIEW_MEMBERMASTER.RIDCardNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArmServiceNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.ArmServiceColumn)
        End Function
        
        Public Sub SetArmServiceNull()
            Me(Me.tableVIEW_MEMBERMASTER.ArmServiceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsWONull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.WOColumn)
        End Function
        
        Public Sub SetWONull()
            Me(Me.tableVIEW_MEMBERMASTER.WOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNoOfDependenciesNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.NoOfDependenciesColumn)
        End Function
        
        Public Sub SetNoOfDependenciesNull()
            Me(Me.tableVIEW_MEMBERMASTER.NoOfDependenciesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAnniversaryDateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.AnniversaryDateColumn)
        End Function
        
        Public Sub SetAnniversaryDateNull()
            Me(Me.tableVIEW_MEMBERMASTER.AnniversaryDateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRByMemberNoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.RByMemberNoColumn)
        End Function
        
        Public Sub SetRByMemberNoNull()
            Me(Me.tableVIEW_MEMBERMASTER.RByMemberNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRByNameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.RByNameColumn)
        End Function
        
        Public Sub SetRByNameNull()
            Me(Me.tableVIEW_MEMBERMASTER.RByNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsArmyNoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.ArmyNoColumn)
        End Function
        
        Public Sub SetArmyNoNull()
            Me(Me.tableVIEW_MEMBERMASTER.ArmyNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRankNameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.RankNameColumn)
        End Function
        
        Public Sub SetRankNameNull()
            Me(Me.tableVIEW_MEMBERMASTER.RankNameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBarcodeNoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.BarcodeNoColumn)
        End Function
        
        Public Sub SetBarcodeNoNull()
            Me(Me.tableVIEW_MEMBERMASTER.BarcodeNoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDependentIDNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.DependentIDColumn)
        End Function
        
        Public Sub SetDependentIDNull()
            Me(Me.tableVIEW_MEMBERMASTER.DependentIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMemberTypeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_MEMBERMASTER.MemberTypeColumn)
        End Function
        
        Public Sub SetMemberTypeNull()
            Me(Me.tableVIEW_MEMBERMASTER.MemberTypeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_MEMBERMASTERRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_MEMBERMASTERRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_MEMBERMASTERRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_MEMBERMASTERRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_REST_itemwiseDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnmcode As DataColumn
        
        Private columnrowid As DataColumn
        
        Private columnloccode As DataColumn
        
        Private columnbookingno As DataColumn
        
        Private columnpartydate As DataColumn
        
        Private columnchitno As DataColumn
        
        Private columnitemcode As DataColumn
        
        Private columnitemdesc As DataColumn
        
        Private columnrate As DataColumn
        
        Private columnqty As DataColumn
        
        Private columntaxamount As DataColumn
        
        Private columnamount As DataColumn
        
        Private columntotalamount As DataColumn
        
        Friend Sub New()
            MyBase.New("party_REST_itemwise")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property rowidColumn As DataColumn
            Get
                Return Me.columnrowid
            End Get
        End Property
        
        Friend ReadOnly Property loccodeColumn As DataColumn
            Get
                Return Me.columnloccode
            End Get
        End Property
        
        Friend ReadOnly Property bookingnoColumn As DataColumn
            Get
                Return Me.columnbookingno
            End Get
        End Property
        
        Friend ReadOnly Property partydateColumn As DataColumn
            Get
                Return Me.columnpartydate
            End Get
        End Property
        
        Friend ReadOnly Property chitnoColumn As DataColumn
            Get
                Return Me.columnchitno
            End Get
        End Property
        
        Friend ReadOnly Property itemcodeColumn As DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        Friend ReadOnly Property itemdescColumn As DataColumn
            Get
                Return Me.columnitemdesc
            End Get
        End Property
        
        Friend ReadOnly Property rateColumn As DataColumn
            Get
                Return Me.columnrate
            End Get
        End Property
        
        Friend ReadOnly Property qtyColumn As DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        Friend ReadOnly Property taxamountColumn As DataColumn
            Get
                Return Me.columntaxamount
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property totalamountColumn As DataColumn
            Get
                Return Me.columntotalamount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As party_REST_itemwiseRow
            Get
                Return CType(Me.Rows(index),party_REST_itemwiseRow)
            End Get
        End Property
        
        Public Event party_REST_itemwiseRowChanged As party_REST_itemwiseRowChangeEventHandler
        
        Public Event party_REST_itemwiseRowChanging As party_REST_itemwiseRowChangeEventHandler
        
        Public Event party_REST_itemwiseRowDeleted As party_REST_itemwiseRowChangeEventHandler
        
        Public Event party_REST_itemwiseRowDeleting As party_REST_itemwiseRowChangeEventHandler
        
        Public Overloads Sub Addparty_REST_itemwiseRow(ByVal row As party_REST_itemwiseRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addparty_REST_itemwiseRow(ByVal mcode As String, ByVal rowid As Decimal, ByVal loccode As String, ByVal bookingno As Decimal, ByVal partydate As Date, ByVal chitno As String, ByVal itemcode As String, ByVal itemdesc As String, ByVal rate As Decimal, ByVal qty As Decimal, ByVal taxamount As Decimal, ByVal amount As Decimal, ByVal totalamount As Decimal) As party_REST_itemwiseRow
            Dim rowparty_REST_itemwiseRow As party_REST_itemwiseRow = CType(Me.NewRow,party_REST_itemwiseRow)
            rowparty_REST_itemwiseRow.ItemArray = New Object() {mcode, rowid, loccode, bookingno, partydate, chitno, itemcode, itemdesc, rate, qty, taxamount, amount, totalamount}
            Me.Rows.Add(rowparty_REST_itemwiseRow)
            Return rowparty_REST_itemwiseRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As party_REST_itemwiseDataTable = CType(MyBase.Clone,party_REST_itemwiseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New party_REST_itemwiseDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnmcode = Me.Columns("mcode")
            Me.columnrowid = Me.Columns("rowid")
            Me.columnloccode = Me.Columns("loccode")
            Me.columnbookingno = Me.Columns("bookingno")
            Me.columnpartydate = Me.Columns("partydate")
            Me.columnchitno = Me.Columns("chitno")
            Me.columnitemcode = Me.Columns("itemcode")
            Me.columnitemdesc = Me.Columns("itemdesc")
            Me.columnrate = Me.Columns("rate")
            Me.columnqty = Me.Columns("qty")
            Me.columntaxamount = Me.Columns("taxamount")
            Me.columnamount = Me.Columns("amount")
            Me.columntotalamount = Me.Columns("totalamount")
        End Sub
        
        Private Sub InitClass()
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnrowid = New DataColumn("rowid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrowid)
            Me.columnloccode = New DataColumn("loccode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloccode)
            Me.columnbookingno = New DataColumn("bookingno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookingno)
            Me.columnpartydate = New DataColumn("partydate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpartydate)
            Me.columnchitno = New DataColumn("chitno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnchitno)
            Me.columnitemcode = New DataColumn("itemcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemcode)
            Me.columnitemdesc = New DataColumn("itemdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemdesc)
            Me.columnrate = New DataColumn("rate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrate)
            Me.columnqty = New DataColumn("qty", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnqty)
            Me.columntaxamount = New DataColumn("taxamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxamount)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columntotalamount = New DataColumn("totalamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotalamount)
            Me.columnrowid.AllowDBNull = false
            Me.columnbookingno.AllowDBNull = false
            Me.columnitemcode.AllowDBNull = false
        End Sub
        
        Public Function Newparty_REST_itemwiseRow() As party_REST_itemwiseRow
            Return CType(Me.NewRow,party_REST_itemwiseRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New party_REST_itemwiseRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(party_REST_itemwiseRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.party_REST_itemwiseRowChangedEvent) Is Nothing) Then
                RaiseEvent party_REST_itemwiseRowChanged(Me, New party_REST_itemwiseRowChangeEvent(CType(e.Row,party_REST_itemwiseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.party_REST_itemwiseRowChangingEvent) Is Nothing) Then
                RaiseEvent party_REST_itemwiseRowChanging(Me, New party_REST_itemwiseRowChangeEvent(CType(e.Row,party_REST_itemwiseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.party_REST_itemwiseRowDeletedEvent) Is Nothing) Then
                RaiseEvent party_REST_itemwiseRowDeleted(Me, New party_REST_itemwiseRowChangeEvent(CType(e.Row,party_REST_itemwiseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.party_REST_itemwiseRowDeletingEvent) Is Nothing) Then
                RaiseEvent party_REST_itemwiseRowDeleting(Me, New party_REST_itemwiseRowChangeEvent(CType(e.Row,party_REST_itemwiseRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeparty_REST_itemwiseRow(ByVal row As party_REST_itemwiseRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_REST_itemwiseRow
        Inherits DataRow
        
        Private tableparty_REST_itemwise As party_REST_itemwiseDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableparty_REST_itemwise = CType(Me.Table,party_REST_itemwiseDataTable)
        End Sub
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_REST_itemwise.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_REST_itemwise.mcodeColumn) = value
            End Set
        End Property
        
        Public Property rowid As Decimal
            Get
                Return CType(Me(Me.tableparty_REST_itemwise.rowidColumn),Decimal)
            End Get
            Set
                Me(Me.tableparty_REST_itemwise.rowidColumn) = value
            End Set
        End Property
        
        Public Property loccode As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_REST_itemwise.loccodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_REST_itemwise.loccodeColumn) = value
            End Set
        End Property
        
        Public Property bookingno As Decimal
            Get
                Return CType(Me(Me.tableparty_REST_itemwise.bookingnoColumn),Decimal)
            End Get
            Set
                Me(Me.tableparty_REST_itemwise.bookingnoColumn) = value
            End Set
        End Property
        
        Public Property partydate As Date
            Get
                Try 
                    Return CType(Me(Me.tableparty_REST_itemwise.partydateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_REST_itemwise.partydateColumn) = value
            End Set
        End Property
        
        Public Property chitno As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_REST_itemwise.chitnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_REST_itemwise.chitnoColumn) = value
            End Set
        End Property
        
        Public Property itemcode As String
            Get
                Return CType(Me(Me.tableparty_REST_itemwise.itemcodeColumn),String)
            End Get
            Set
                Me(Me.tableparty_REST_itemwise.itemcodeColumn) = value
            End Set
        End Property
        
        Public Property itemdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_REST_itemwise.itemdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_REST_itemwise.itemdescColumn) = value
            End Set
        End Property
        
        Public Property rate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_REST_itemwise.rateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_REST_itemwise.rateColumn) = value
            End Set
        End Property
        
        Public Property qty As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_REST_itemwise.qtyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_REST_itemwise.qtyColumn) = value
            End Set
        End Property
        
        Public Property taxamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_REST_itemwise.taxamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_REST_itemwise.taxamountColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_REST_itemwise.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_REST_itemwise.amountColumn) = value
            End Set
        End Property
        
        Public Property totalamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_REST_itemwise.totalamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_REST_itemwise.totalamountColumn) = value
            End Set
        End Property
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tableparty_REST_itemwise.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tableparty_REST_itemwise.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsloccodeNull() As Boolean
            Return Me.IsNull(Me.tableparty_REST_itemwise.loccodeColumn)
        End Function
        
        Public Sub SetloccodeNull()
            Me(Me.tableparty_REST_itemwise.loccodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspartydateNull() As Boolean
            Return Me.IsNull(Me.tableparty_REST_itemwise.partydateColumn)
        End Function
        
        Public Sub SetpartydateNull()
            Me(Me.tableparty_REST_itemwise.partydateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IschitnoNull() As Boolean
            Return Me.IsNull(Me.tableparty_REST_itemwise.chitnoColumn)
        End Function
        
        Public Sub SetchitnoNull()
            Me(Me.tableparty_REST_itemwise.chitnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsitemdescNull() As Boolean
            Return Me.IsNull(Me.tableparty_REST_itemwise.itemdescColumn)
        End Function
        
        Public Sub SetitemdescNull()
            Me(Me.tableparty_REST_itemwise.itemdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrateNull() As Boolean
            Return Me.IsNull(Me.tableparty_REST_itemwise.rateColumn)
        End Function
        
        Public Sub SetrateNull()
            Me(Me.tableparty_REST_itemwise.rateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsqtyNull() As Boolean
            Return Me.IsNull(Me.tableparty_REST_itemwise.qtyColumn)
        End Function
        
        Public Sub SetqtyNull()
            Me(Me.tableparty_REST_itemwise.qtyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxamountNull() As Boolean
            Return Me.IsNull(Me.tableparty_REST_itemwise.taxamountColumn)
        End Function
        
        Public Sub SettaxamountNull()
            Me(Me.tableparty_REST_itemwise.taxamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tableparty_REST_itemwise.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tableparty_REST_itemwise.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotalamountNull() As Boolean
            Return Me.IsNull(Me.tableparty_REST_itemwise.totalamountColumn)
        End Function
        
        Public Sub SettotalamountNull()
            Me(Me.tableparty_REST_itemwise.totalamountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_REST_itemwiseRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As party_REST_itemwiseRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As party_REST_itemwiseRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As party_REST_itemwiseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_arrangemaster_hdrDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnROWID As DataColumn
        
        Private columnARRCODE As DataColumn
        
        Private columnARRDESCRIPTION As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columncategory As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnAddDateTime As DataColumn
        
        Private columnadduserid As DataColumn
        
        Private columnItemtypecode As DataColumn
        
        Private columnCGROUPCODE As DataColumn
        
        Private columnglaccode As DataColumn
        
        Private columnSBFCHARGE As DataColumn
        
        Private columnGLCCODE As DataColumn
        
        Private columnGLACCODE1 As DataColumn
        
        Private columnGLCCODE1 As DataColumn
        
        Friend Sub New()
            MyBase.New("party_arrangemaster_hdr")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ROWIDColumn As DataColumn
            Get
                Return Me.columnROWID
            End Get
        End Property
        
        Friend ReadOnly Property ARRCODEColumn As DataColumn
            Get
                Return Me.columnARRCODE
            End Get
        End Property
        
        Friend ReadOnly Property ARRDESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnARRDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property categoryColumn As DataColumn
            Get
                Return Me.columncategory
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property AddDateTimeColumn As DataColumn
            Get
                Return Me.columnAddDateTime
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Friend ReadOnly Property ItemtypecodeColumn As DataColumn
            Get
                Return Me.columnItemtypecode
            End Get
        End Property
        
        Friend ReadOnly Property CGROUPCODEColumn As DataColumn
            Get
                Return Me.columnCGROUPCODE
            End Get
        End Property
        
        Friend ReadOnly Property glaccodeColumn As DataColumn
            Get
                Return Me.columnglaccode
            End Get
        End Property
        
        Friend ReadOnly Property SBFCHARGEColumn As DataColumn
            Get
                Return Me.columnSBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property GLCCODEColumn As DataColumn
            Get
                Return Me.columnGLCCODE
            End Get
        End Property
        
        Friend ReadOnly Property GLACCODE1Column As DataColumn
            Get
                Return Me.columnGLACCODE1
            End Get
        End Property
        
        Friend ReadOnly Property GLCCODE1Column As DataColumn
            Get
                Return Me.columnGLCCODE1
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As party_arrangemaster_hdrRow
            Get
                Return CType(Me.Rows(index),party_arrangemaster_hdrRow)
            End Get
        End Property
        
        Public Event party_arrangemaster_hdrRowChanged As party_arrangemaster_hdrRowChangeEventHandler
        
        Public Event party_arrangemaster_hdrRowChanging As party_arrangemaster_hdrRowChangeEventHandler
        
        Public Event party_arrangemaster_hdrRowDeleted As party_arrangemaster_hdrRowChangeEventHandler
        
        Public Event party_arrangemaster_hdrRowDeleting As party_arrangemaster_hdrRowChangeEventHandler
        
        Public Overloads Sub Addparty_arrangemaster_hdrRow(ByVal row As party_arrangemaster_hdrRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addparty_arrangemaster_hdrRow(ByVal ARRCODE As String, ByVal ARRDESCRIPTION As String, ByVal RATE As Decimal, ByVal category As String, ByVal UOM As String, ByVal FREEZE As String, ByVal AddDateTime As Date, ByVal adduserid As String, ByVal Itemtypecode As String, ByVal CGROUPCODE As String, ByVal glaccode As String, ByVal SBFCHARGE As String, ByVal GLCCODE As String, ByVal GLACCODE1 As String, ByVal GLCCODE1 As String) As party_arrangemaster_hdrRow
            Dim rowparty_arrangemaster_hdrRow As party_arrangemaster_hdrRow = CType(Me.NewRow,party_arrangemaster_hdrRow)
            rowparty_arrangemaster_hdrRow.ItemArray = New Object() {Nothing, ARRCODE, ARRDESCRIPTION, RATE, category, UOM, FREEZE, AddDateTime, adduserid, Itemtypecode, CGROUPCODE, glaccode, SBFCHARGE, GLCCODE, GLACCODE1, GLCCODE1}
            Me.Rows.Add(rowparty_arrangemaster_hdrRow)
            Return rowparty_arrangemaster_hdrRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As party_arrangemaster_hdrDataTable = CType(MyBase.Clone,party_arrangemaster_hdrDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New party_arrangemaster_hdrDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnROWID = Me.Columns("ROWID")
            Me.columnARRCODE = Me.Columns("ARRCODE")
            Me.columnARRDESCRIPTION = Me.Columns("ARRDESCRIPTION")
            Me.columnRATE = Me.Columns("RATE")
            Me.columncategory = Me.Columns("category")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnAddDateTime = Me.Columns("AddDateTime")
            Me.columnadduserid = Me.Columns("adduserid")
            Me.columnItemtypecode = Me.Columns("Itemtypecode")
            Me.columnCGROUPCODE = Me.Columns("CGROUPCODE")
            Me.columnglaccode = Me.Columns("glaccode")
            Me.columnSBFCHARGE = Me.Columns("SBFCHARGE")
            Me.columnGLCCODE = Me.Columns("GLCCODE")
            Me.columnGLACCODE1 = Me.Columns("GLACCODE1")
            Me.columnGLCCODE1 = Me.Columns("GLCCODE1")
        End Sub
        
        Private Sub InitClass()
            Me.columnROWID = New DataColumn("ROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROWID)
            Me.columnARRCODE = New DataColumn("ARRCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRCODE)
            Me.columnARRDESCRIPTION = New DataColumn("ARRDESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRDESCRIPTION)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columncategory = New DataColumn("category", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columncategory)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnAddDateTime = New DataColumn("AddDateTime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddDateTime)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
            Me.columnItemtypecode = New DataColumn("Itemtypecode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnItemtypecode)
            Me.columnCGROUPCODE = New DataColumn("CGROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCGROUPCODE)
            Me.columnglaccode = New DataColumn("glaccode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnglaccode)
            Me.columnSBFCHARGE = New DataColumn("SBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBFCHARGE)
            Me.columnGLCCODE = New DataColumn("GLCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLCCODE)
            Me.columnGLACCODE1 = New DataColumn("GLACCODE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCODE1)
            Me.columnGLCCODE1 = New DataColumn("GLCCODE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLCCODE1)
            Me.columnROWID.AutoIncrement = true
            Me.columnROWID.AllowDBNull = false
            Me.columnROWID.ReadOnly = true
            Me.columnARRCODE.AllowDBNull = false
        End Sub
        
        Public Function Newparty_arrangemaster_hdrRow() As party_arrangemaster_hdrRow
            Return CType(Me.NewRow,party_arrangemaster_hdrRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New party_arrangemaster_hdrRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(party_arrangemaster_hdrRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.party_arrangemaster_hdrRowChangedEvent) Is Nothing) Then
                RaiseEvent party_arrangemaster_hdrRowChanged(Me, New party_arrangemaster_hdrRowChangeEvent(CType(e.Row,party_arrangemaster_hdrRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.party_arrangemaster_hdrRowChangingEvent) Is Nothing) Then
                RaiseEvent party_arrangemaster_hdrRowChanging(Me, New party_arrangemaster_hdrRowChangeEvent(CType(e.Row,party_arrangemaster_hdrRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.party_arrangemaster_hdrRowDeletedEvent) Is Nothing) Then
                RaiseEvent party_arrangemaster_hdrRowDeleted(Me, New party_arrangemaster_hdrRowChangeEvent(CType(e.Row,party_arrangemaster_hdrRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.party_arrangemaster_hdrRowDeletingEvent) Is Nothing) Then
                RaiseEvent party_arrangemaster_hdrRowDeleting(Me, New party_arrangemaster_hdrRowChangeEvent(CType(e.Row,party_arrangemaster_hdrRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeparty_arrangemaster_hdrRow(ByVal row As party_arrangemaster_hdrRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_arrangemaster_hdrRow
        Inherits DataRow
        
        Private tableparty_arrangemaster_hdr As party_arrangemaster_hdrDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableparty_arrangemaster_hdr = CType(Me.Table,party_arrangemaster_hdrDataTable)
        End Sub
        
        Public Property ROWID As Decimal
            Get
                Return CType(Me(Me.tableparty_arrangemaster_hdr.ROWIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableparty_arrangemaster_hdr.ROWIDColumn) = value
            End Set
        End Property
        
        Public Property ARRCODE As String
            Get
                Return CType(Me(Me.tableparty_arrangemaster_hdr.ARRCODEColumn),String)
            End Get
            Set
                Me(Me.tableparty_arrangemaster_hdr.ARRCODEColumn) = value
            End Set
        End Property
        
        Public Property ARRDESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangemaster_hdr.ARRDESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangemaster_hdr.ARRDESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangemaster_hdr.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangemaster_hdr.RATEColumn) = value
            End Set
        End Property
        
        Public Property category As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangemaster_hdr.categoryColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangemaster_hdr.categoryColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangemaster_hdr.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangemaster_hdr.UOMColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangemaster_hdr.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangemaster_hdr.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property AddDateTime As Date
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangemaster_hdr.AddDateTimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangemaster_hdr.AddDateTimeColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangemaster_hdr.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangemaster_hdr.adduseridColumn) = value
            End Set
        End Property
        
        Public Property Itemtypecode As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangemaster_hdr.ItemtypecodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangemaster_hdr.ItemtypecodeColumn) = value
            End Set
        End Property
        
        Public Property CGROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangemaster_hdr.CGROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangemaster_hdr.CGROUPCODEColumn) = value
            End Set
        End Property
        
        Public Property glaccode As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangemaster_hdr.glaccodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangemaster_hdr.glaccodeColumn) = value
            End Set
        End Property
        
        Public Property SBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangemaster_hdr.SBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangemaster_hdr.SBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property GLCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangemaster_hdr.GLCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangemaster_hdr.GLCCODEColumn) = value
            End Set
        End Property
        
        Public Property GLACCODE1 As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangemaster_hdr.GLACCODE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangemaster_hdr.GLACCODE1Column) = value
            End Set
        End Property
        
        Public Property GLCCODE1 As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangemaster_hdr.GLCCODE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangemaster_hdr.GLCCODE1Column) = value
            End Set
        End Property
        
        Public Function IsARRDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangemaster_hdr.ARRDESCRIPTIONColumn)
        End Function
        
        Public Sub SetARRDESCRIPTIONNull()
            Me(Me.tableparty_arrangemaster_hdr.ARRDESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangemaster_hdr.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tableparty_arrangemaster_hdr.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IscategoryNull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangemaster_hdr.categoryColumn)
        End Function
        
        Public Sub SetcategoryNull()
            Me(Me.tableparty_arrangemaster_hdr.categoryColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangemaster_hdr.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tableparty_arrangemaster_hdr.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangemaster_hdr.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tableparty_arrangemaster_hdr.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangemaster_hdr.AddDateTimeColumn)
        End Function
        
        Public Sub SetAddDateTimeNull()
            Me(Me.tableparty_arrangemaster_hdr.AddDateTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangemaster_hdr.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tableparty_arrangemaster_hdr.adduseridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsItemtypecodeNull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangemaster_hdr.ItemtypecodeColumn)
        End Function
        
        Public Sub SetItemtypecodeNull()
            Me(Me.tableparty_arrangemaster_hdr.ItemtypecodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangemaster_hdr.CGROUPCODEColumn)
        End Function
        
        Public Sub SetCGROUPCODENull()
            Me(Me.tableparty_arrangemaster_hdr.CGROUPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsglaccodeNull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangemaster_hdr.glaccodeColumn)
        End Function
        
        Public Sub SetglaccodeNull()
            Me(Me.tableparty_arrangemaster_hdr.glaccodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangemaster_hdr.SBFCHARGEColumn)
        End Function
        
        Public Sub SetSBFCHARGENull()
            Me(Me.tableparty_arrangemaster_hdr.SBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLCCODENull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangemaster_hdr.GLCCODEColumn)
        End Function
        
        Public Sub SetGLCCODENull()
            Me(Me.tableparty_arrangemaster_hdr.GLCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCODE1Null() As Boolean
            Return Me.IsNull(Me.tableparty_arrangemaster_hdr.GLACCODE1Column)
        End Function
        
        Public Sub SetGLACCODE1Null()
            Me(Me.tableparty_arrangemaster_hdr.GLACCODE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLCCODE1Null() As Boolean
            Return Me.IsNull(Me.tableparty_arrangemaster_hdr.GLCCODE1Column)
        End Function
        
        Public Sub SetGLCCODE1Null()
            Me(Me.tableparty_arrangemaster_hdr.GLCCODE1Column) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_arrangemaster_hdrRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As party_arrangemaster_hdrRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As party_arrangemaster_hdrRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As party_arrangemaster_hdrRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_restaurantDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnROWID As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnTTYPE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnROUNDOFF As DataColumn
        
        Private columnTAXPERC As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnCANCELAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Private columnGROUPCODE As DataColumn
        
        Private columnMENUCODE As DataColumn
        
        Private columnTARIFFCODE As DataColumn
        
        Private columnMAXITEMS As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnCHITNO As DataColumn
        
        Friend Sub New()
            MyBase.New("party_restaurant")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ROWIDColumn As DataColumn
            Get
                Return Me.columnROWID
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property TTYPEColumn As DataColumn
            Get
                Return Me.columnTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property ROUNDOFFColumn As DataColumn
            Get
                Return Me.columnROUNDOFF
            End Get
        End Property
        
        Friend ReadOnly Property TAXPERCColumn As DataColumn
            Get
                Return Me.columnTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property CANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property GROUPCODEColumn As DataColumn
            Get
                Return Me.columnGROUPCODE
            End Get
        End Property
        
        Friend ReadOnly Property MENUCODEColumn As DataColumn
            Get
                Return Me.columnMENUCODE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFCODEColumn As DataColumn
            Get
                Return Me.columnTARIFFCODE
            End Get
        End Property
        
        Friend ReadOnly Property MAXITEMSColumn As DataColumn
            Get
                Return Me.columnMAXITEMS
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property CHITNOColumn As DataColumn
            Get
                Return Me.columnCHITNO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As party_restaurantRow
            Get
                Return CType(Me.Rows(index),party_restaurantRow)
            End Get
        End Property
        
        Public Event party_restaurantRowChanged As party_restaurantRowChangeEventHandler
        
        Public Event party_restaurantRowChanging As party_restaurantRowChangeEventHandler
        
        Public Event party_restaurantRowDeleted As party_restaurantRowChangeEventHandler
        
        Public Event party_restaurantRowDeleting As party_restaurantRowChangeEventHandler
        
        Public Overloads Sub Addparty_restaurantRow(ByVal row As party_restaurantRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addparty_restaurantRow( _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal TTYPE As String,  _
                    ByVal ITEMCODE As String,  _
                    ByVal RATE As Decimal,  _
                    ByVal QTY As Decimal,  _
                    ByVal ROUNDOFF As Decimal,  _
                    ByVal TAXPERC As Decimal,  _
                    ByVal TAXAMOUNT As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal CANCELAMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal ADDUSERID As String,  _
                    ByVal ADDDATETIME As Date,  _
                    ByVal GROUPCODE As String,  _
                    ByVal MENUCODE As String,  _
                    ByVal TARIFFCODE As String,  _
                    ByVal MAXITEMS As Decimal,  _
                    ByVal LOCCODE As String,  _
                    ByVal CHITNO As String) As party_restaurantRow
            Dim rowparty_restaurantRow As party_restaurantRow = CType(Me.NewRow,party_restaurantRow)
            rowparty_restaurantRow.ItemArray = New Object() {Nothing, BOOKINGNO, BOOKINGTYPE, BOOKINGDATE, TTYPE, ITEMCODE, RATE, QTY, ROUNDOFF, TAXPERC, TAXAMOUNT, AMOUNT, TOTALAMOUNT, CANCELAMOUNT, FREEZE, ADDUSERID, ADDDATETIME, GROUPCODE, MENUCODE, TARIFFCODE, MAXITEMS, LOCCODE, CHITNO}
            Me.Rows.Add(rowparty_restaurantRow)
            Return rowparty_restaurantRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As party_restaurantDataTable = CType(MyBase.Clone,party_restaurantDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New party_restaurantDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnROWID = Me.Columns("ROWID")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnTTYPE = Me.Columns("TTYPE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnROUNDOFF = Me.Columns("ROUNDOFF")
            Me.columnTAXPERC = Me.Columns("TAXPERC")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnCANCELAMOUNT = Me.Columns("CANCELAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
            Me.columnGROUPCODE = Me.Columns("GROUPCODE")
            Me.columnMENUCODE = Me.Columns("MENUCODE")
            Me.columnTARIFFCODE = Me.Columns("TARIFFCODE")
            Me.columnMAXITEMS = Me.Columns("MAXITEMS")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnCHITNO = Me.Columns("CHITNO")
        End Sub
        
        Private Sub InitClass()
            Me.columnROWID = New DataColumn("ROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROWID)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnTTYPE = New DataColumn("TTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTYPE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnROUNDOFF = New DataColumn("ROUNDOFF", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROUNDOFF)
            Me.columnTAXPERC = New DataColumn("TAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXPERC)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnCANCELAMOUNT = New DataColumn("CANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnGROUPCODE = New DataColumn("GROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPCODE)
            Me.columnMENUCODE = New DataColumn("MENUCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMENUCODE)
            Me.columnTARIFFCODE = New DataColumn("TARIFFCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFCODE)
            Me.columnMAXITEMS = New DataColumn("MAXITEMS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMAXITEMS)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnCHITNO = New DataColumn("CHITNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHITNO)
            Me.columnROWID.AutoIncrement = true
            Me.columnROWID.AllowDBNull = false
            Me.columnROWID.ReadOnly = true
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnBOOKINGTYPE.AllowDBNull = false
            Me.columnITEMCODE.AllowDBNull = false
        End Sub
        
        Public Function Newparty_restaurantRow() As party_restaurantRow
            Return CType(Me.NewRow,party_restaurantRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New party_restaurantRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(party_restaurantRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.party_restaurantRowChangedEvent) Is Nothing) Then
                RaiseEvent party_restaurantRowChanged(Me, New party_restaurantRowChangeEvent(CType(e.Row,party_restaurantRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.party_restaurantRowChangingEvent) Is Nothing) Then
                RaiseEvent party_restaurantRowChanging(Me, New party_restaurantRowChangeEvent(CType(e.Row,party_restaurantRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.party_restaurantRowDeletedEvent) Is Nothing) Then
                RaiseEvent party_restaurantRowDeleted(Me, New party_restaurantRowChangeEvent(CType(e.Row,party_restaurantRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.party_restaurantRowDeletingEvent) Is Nothing) Then
                RaiseEvent party_restaurantRowDeleting(Me, New party_restaurantRowChangeEvent(CType(e.Row,party_restaurantRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeparty_restaurantRow(ByVal row As party_restaurantRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_restaurantRow
        Inherits DataRow
        
        Private tableparty_restaurant As party_restaurantDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableparty_restaurant = CType(Me.Table,party_restaurantDataTable)
        End Sub
        
        Public Property ROWID As Decimal
            Get
                Return CType(Me(Me.tableparty_restaurant.ROWIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableparty_restaurant.ROWIDColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tableparty_restaurant.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tableparty_restaurant.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Return CType(Me(Me.tableparty_restaurant.BOOKINGTYPEColumn),String)
            End Get
            Set
                Me(Me.tableparty_restaurant.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property TTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.TTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.TTYPEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tableparty_restaurant.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tableparty_restaurant.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.RATEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.QTYColumn) = value
            End Set
        End Property
        
        Public Property ROUNDOFF As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.ROUNDOFFColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.ROUNDOFFColumn) = value
            End Set
        End Property
        
        Public Property TAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.TAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.TAXPERCColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property CANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.CANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.CANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property GROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.GROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.GROUPCODEColumn) = value
            End Set
        End Property
        
        Public Property MENUCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.MENUCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.MENUCODEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.TARIFFCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.TARIFFCODEColumn) = value
            End Set
        End Property
        
        Public Property MAXITEMS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.MAXITEMSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.MAXITEMSColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property CHITNO As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_restaurant.CHITNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_restaurant.CHITNOColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tableparty_restaurant.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTYPENull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.TTYPEColumn)
        End Function
        
        Public Sub SetTTYPENull()
            Me(Me.tableparty_restaurant.TTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tableparty_restaurant.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tableparty_restaurant.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsROUNDOFFNull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.ROUNDOFFColumn)
        End Function
        
        Public Sub SetROUNDOFFNull()
            Me(Me.tableparty_restaurant.ROUNDOFFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.TAXPERCColumn)
        End Function
        
        Public Sub SetTAXPERCNull()
            Me(Me.tableparty_restaurant.TAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tableparty_restaurant.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableparty_restaurant.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tableparty_restaurant.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.CANCELAMOUNTColumn)
        End Function
        
        Public Sub SetCANCELAMOUNTNull()
            Me(Me.tableparty_restaurant.CANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tableparty_restaurant.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tableparty_restaurant.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tableparty_restaurant.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.GROUPCODEColumn)
        End Function
        
        Public Sub SetGROUPCODENull()
            Me(Me.tableparty_restaurant.GROUPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMENUCODENull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.MENUCODEColumn)
        End Function
        
        Public Sub SetMENUCODENull()
            Me(Me.tableparty_restaurant.MENUCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFCODENull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.TARIFFCODEColumn)
        End Function
        
        Public Sub SetTARIFFCODENull()
            Me(Me.tableparty_restaurant.TARIFFCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMAXITEMSNull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.MAXITEMSColumn)
        End Function
        
        Public Sub SetMAXITEMSNull()
            Me(Me.tableparty_restaurant.MAXITEMSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tableparty_restaurant.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHITNONull() As Boolean
            Return Me.IsNull(Me.tableparty_restaurant.CHITNOColumn)
        End Function
        
        Public Sub SetCHITNONull()
            Me(Me.tableparty_restaurant.CHITNOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_restaurantRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As party_restaurantRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As party_restaurantRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As party_restaurantRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_grouping_detailsDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnROWID As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnTTYPE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnROUNDOFF As DataColumn
        
        Private columnTAXPERC As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnCANCELAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Private columnGROUPCODE As DataColumn
        
        Private columnMENUCODE As DataColumn
        
        Private columnTARIFFCODE As DataColumn
        
        Private columnMAXITEMS As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnCHITNO As DataColumn
        
        Private columnGROUPDESC As DataColumn
        
        Friend Sub New()
            MyBase.New("party_grouping_details")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ROWIDColumn As DataColumn
            Get
                Return Me.columnROWID
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property TTYPEColumn As DataColumn
            Get
                Return Me.columnTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property ROUNDOFFColumn As DataColumn
            Get
                Return Me.columnROUNDOFF
            End Get
        End Property
        
        Friend ReadOnly Property TAXPERCColumn As DataColumn
            Get
                Return Me.columnTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property CANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property GROUPCODEColumn As DataColumn
            Get
                Return Me.columnGROUPCODE
            End Get
        End Property
        
        Friend ReadOnly Property MENUCODEColumn As DataColumn
            Get
                Return Me.columnMENUCODE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFCODEColumn As DataColumn
            Get
                Return Me.columnTARIFFCODE
            End Get
        End Property
        
        Friend ReadOnly Property MAXITEMSColumn As DataColumn
            Get
                Return Me.columnMAXITEMS
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property CHITNOColumn As DataColumn
            Get
                Return Me.columnCHITNO
            End Get
        End Property
        
        Friend ReadOnly Property GROUPDESCColumn As DataColumn
            Get
                Return Me.columnGROUPDESC
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As party_grouping_detailsRow
            Get
                Return CType(Me.Rows(index),party_grouping_detailsRow)
            End Get
        End Property
        
        Public Event party_grouping_detailsRowChanged As party_grouping_detailsRowChangeEventHandler
        
        Public Event party_grouping_detailsRowChanging As party_grouping_detailsRowChangeEventHandler
        
        Public Event party_grouping_detailsRowDeleted As party_grouping_detailsRowChangeEventHandler
        
        Public Event party_grouping_detailsRowDeleting As party_grouping_detailsRowChangeEventHandler
        
        Public Overloads Sub Addparty_grouping_detailsRow(ByVal row As party_grouping_detailsRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addparty_grouping_detailsRow( _
                    ByVal ROWID As Decimal,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal TTYPE As String,  _
                    ByVal ITEMCODE As String,  _
                    ByVal RATE As Decimal,  _
                    ByVal QTY As Decimal,  _
                    ByVal ROUNDOFF As Decimal,  _
                    ByVal TAXPERC As Decimal,  _
                    ByVal TAXAMOUNT As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal CANCELAMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal ADDUSERID As String,  _
                    ByVal ADDDATETIME As Date,  _
                    ByVal GROUPCODE As String,  _
                    ByVal MENUCODE As String,  _
                    ByVal TARIFFCODE As String,  _
                    ByVal MAXITEMS As Decimal,  _
                    ByVal LOCCODE As String,  _
                    ByVal CHITNO As String,  _
                    ByVal GROUPDESC As String) As party_grouping_detailsRow
            Dim rowparty_grouping_detailsRow As party_grouping_detailsRow = CType(Me.NewRow,party_grouping_detailsRow)
            rowparty_grouping_detailsRow.ItemArray = New Object() {ROWID, BOOKINGNO, BOOKINGTYPE, BOOKINGDATE, TTYPE, ITEMCODE, RATE, QTY, ROUNDOFF, TAXPERC, TAXAMOUNT, AMOUNT, TOTALAMOUNT, CANCELAMOUNT, FREEZE, ADDUSERID, ADDDATETIME, GROUPCODE, MENUCODE, TARIFFCODE, MAXITEMS, LOCCODE, CHITNO, GROUPDESC}
            Me.Rows.Add(rowparty_grouping_detailsRow)
            Return rowparty_grouping_detailsRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As party_grouping_detailsDataTable = CType(MyBase.Clone,party_grouping_detailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New party_grouping_detailsDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnROWID = Me.Columns("ROWID")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnTTYPE = Me.Columns("TTYPE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnROUNDOFF = Me.Columns("ROUNDOFF")
            Me.columnTAXPERC = Me.Columns("TAXPERC")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnCANCELAMOUNT = Me.Columns("CANCELAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
            Me.columnGROUPCODE = Me.Columns("GROUPCODE")
            Me.columnMENUCODE = Me.Columns("MENUCODE")
            Me.columnTARIFFCODE = Me.Columns("TARIFFCODE")
            Me.columnMAXITEMS = Me.Columns("MAXITEMS")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnCHITNO = Me.Columns("CHITNO")
            Me.columnGROUPDESC = Me.Columns("GROUPDESC")
        End Sub
        
        Private Sub InitClass()
            Me.columnROWID = New DataColumn("ROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROWID)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnTTYPE = New DataColumn("TTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTYPE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnROUNDOFF = New DataColumn("ROUNDOFF", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROUNDOFF)
            Me.columnTAXPERC = New DataColumn("TAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXPERC)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnCANCELAMOUNT = New DataColumn("CANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnGROUPCODE = New DataColumn("GROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPCODE)
            Me.columnMENUCODE = New DataColumn("MENUCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMENUCODE)
            Me.columnTARIFFCODE = New DataColumn("TARIFFCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFCODE)
            Me.columnMAXITEMS = New DataColumn("MAXITEMS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMAXITEMS)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnCHITNO = New DataColumn("CHITNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHITNO)
            Me.columnGROUPDESC = New DataColumn("GROUPDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPDESC)
            Me.columnROWID.AllowDBNull = false
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnBOOKINGTYPE.AllowDBNull = false
            Me.columnITEMCODE.AllowDBNull = false
        End Sub
        
        Public Function Newparty_grouping_detailsRow() As party_grouping_detailsRow
            Return CType(Me.NewRow,party_grouping_detailsRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New party_grouping_detailsRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(party_grouping_detailsRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.party_grouping_detailsRowChangedEvent) Is Nothing) Then
                RaiseEvent party_grouping_detailsRowChanged(Me, New party_grouping_detailsRowChangeEvent(CType(e.Row,party_grouping_detailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.party_grouping_detailsRowChangingEvent) Is Nothing) Then
                RaiseEvent party_grouping_detailsRowChanging(Me, New party_grouping_detailsRowChangeEvent(CType(e.Row,party_grouping_detailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.party_grouping_detailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent party_grouping_detailsRowDeleted(Me, New party_grouping_detailsRowChangeEvent(CType(e.Row,party_grouping_detailsRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.party_grouping_detailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent party_grouping_detailsRowDeleting(Me, New party_grouping_detailsRowChangeEvent(CType(e.Row,party_grouping_detailsRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeparty_grouping_detailsRow(ByVal row As party_grouping_detailsRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_grouping_detailsRow
        Inherits DataRow
        
        Private tableparty_grouping_details As party_grouping_detailsDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableparty_grouping_details = CType(Me.Table,party_grouping_detailsDataTable)
        End Sub
        
        Public Property ROWID As Decimal
            Get
                Return CType(Me(Me.tableparty_grouping_details.ROWIDColumn),Decimal)
            End Get
            Set
                Me(Me.tableparty_grouping_details.ROWIDColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tableparty_grouping_details.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tableparty_grouping_details.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Return CType(Me(Me.tableparty_grouping_details.BOOKINGTYPEColumn),String)
            End Get
            Set
                Me(Me.tableparty_grouping_details.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property TTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.TTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.TTYPEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tableparty_grouping_details.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tableparty_grouping_details.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.RATEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.QTYColumn) = value
            End Set
        End Property
        
        Public Property ROUNDOFF As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.ROUNDOFFColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.ROUNDOFFColumn) = value
            End Set
        End Property
        
        Public Property TAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.TAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.TAXPERCColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property CANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.CANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.CANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property GROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.GROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.GROUPCODEColumn) = value
            End Set
        End Property
        
        Public Property MENUCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.MENUCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.MENUCODEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.TARIFFCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.TARIFFCODEColumn) = value
            End Set
        End Property
        
        Public Property MAXITEMS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.MAXITEMSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.MAXITEMSColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property CHITNO As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.CHITNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.CHITNOColumn) = value
            End Set
        End Property
        
        Public Property GROUPDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_grouping_details.GROUPDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_grouping_details.GROUPDESCColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tableparty_grouping_details.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTYPENull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.TTYPEColumn)
        End Function
        
        Public Sub SetTTYPENull()
            Me(Me.tableparty_grouping_details.TTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tableparty_grouping_details.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tableparty_grouping_details.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsROUNDOFFNull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.ROUNDOFFColumn)
        End Function
        
        Public Sub SetROUNDOFFNull()
            Me(Me.tableparty_grouping_details.ROUNDOFFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.TAXPERCColumn)
        End Function
        
        Public Sub SetTAXPERCNull()
            Me(Me.tableparty_grouping_details.TAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tableparty_grouping_details.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableparty_grouping_details.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tableparty_grouping_details.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.CANCELAMOUNTColumn)
        End Function
        
        Public Sub SetCANCELAMOUNTNull()
            Me(Me.tableparty_grouping_details.CANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tableparty_grouping_details.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tableparty_grouping_details.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tableparty_grouping_details.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.GROUPCODEColumn)
        End Function
        
        Public Sub SetGROUPCODENull()
            Me(Me.tableparty_grouping_details.GROUPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMENUCODENull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.MENUCODEColumn)
        End Function
        
        Public Sub SetMENUCODENull()
            Me(Me.tableparty_grouping_details.MENUCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFCODENull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.TARIFFCODEColumn)
        End Function
        
        Public Sub SetTARIFFCODENull()
            Me(Me.tableparty_grouping_details.TARIFFCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMAXITEMSNull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.MAXITEMSColumn)
        End Function
        
        Public Sub SetMAXITEMSNull()
            Me(Me.tableparty_grouping_details.MAXITEMSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tableparty_grouping_details.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHITNONull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.CHITNOColumn)
        End Function
        
        Public Sub SetCHITNONull()
            Me(Me.tableparty_grouping_details.CHITNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPDESCNull() As Boolean
            Return Me.IsNull(Me.tableparty_grouping_details.GROUPDESCColumn)
        End Function
        
        Public Sub SetGROUPDESCNull()
            Me(Me.tableparty_grouping_details.GROUPDESCColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_grouping_detailsRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As party_grouping_detailsRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As party_grouping_detailsRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As party_grouping_detailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_BOOKINGDETAILSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnloccode As DataColumn
        
        Private columnbookingno As DataColumn
        
        Private columnpartydate As DataColumn
        
        Private columnhallcode As DataColumn
        
        Private columnhalldescription As DataColumn
        
        Private columnmcode As DataColumn
        
        Private columnmname As DataColumn
        
        Private columnfromtime As DataColumn
        
        Private columntotime As DataColumn
        
        Private columnbookingdate As DataColumn
        
        Private columnassociatename As DataColumn
        
        Private columndescription As DataColumn
        
        Private columnAdvance As DataColumn
        
        Private columnhalltaxflag As DataColumn
        
        Private columnmembertype As DataColumn
        
        Private columnreceiptno As DataColumn
        
        Private columnreceiptdate As DataColumn
        
        Private columnhallamount As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnadduserid As DataColumn
        
        Private columnadddatetime As DataColumn
        
        Private columnhalltype As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnhallTaxpercentage As DataColumn
        
        Private columnhallTaxAMOUNT As DataColumn
        
        Private columnNETHALLAMOUNT As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnVEG As DataColumn
        
        Private columnnonveg As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_PARTY_BOOKINGDETAILS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property loccodeColumn As DataColumn
            Get
                Return Me.columnloccode
            End Get
        End Property
        
        Friend ReadOnly Property bookingnoColumn As DataColumn
            Get
                Return Me.columnbookingno
            End Get
        End Property
        
        Friend ReadOnly Property partydateColumn As DataColumn
            Get
                Return Me.columnpartydate
            End Get
        End Property
        
        Friend ReadOnly Property hallcodeColumn As DataColumn
            Get
                Return Me.columnhallcode
            End Get
        End Property
        
        Friend ReadOnly Property halldescriptionColumn As DataColumn
            Get
                Return Me.columnhalldescription
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property mnameColumn As DataColumn
            Get
                Return Me.columnmname
            End Get
        End Property
        
        Friend ReadOnly Property fromtimeColumn As DataColumn
            Get
                Return Me.columnfromtime
            End Get
        End Property
        
        Friend ReadOnly Property totimeColumn As DataColumn
            Get
                Return Me.columntotime
            End Get
        End Property
        
        Friend ReadOnly Property bookingdateColumn As DataColumn
            Get
                Return Me.columnbookingdate
            End Get
        End Property
        
        Friend ReadOnly Property associatenameColumn As DataColumn
            Get
                Return Me.columnassociatename
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Friend ReadOnly Property AdvanceColumn As DataColumn
            Get
                Return Me.columnAdvance
            End Get
        End Property
        
        Friend ReadOnly Property halltaxflagColumn As DataColumn
            Get
                Return Me.columnhalltaxflag
            End Get
        End Property
        
        Friend ReadOnly Property membertypeColumn As DataColumn
            Get
                Return Me.columnmembertype
            End Get
        End Property
        
        Friend ReadOnly Property receiptnoColumn As DataColumn
            Get
                Return Me.columnreceiptno
            End Get
        End Property
        
        Friend ReadOnly Property receiptdateColumn As DataColumn
            Get
                Return Me.columnreceiptdate
            End Get
        End Property
        
        Friend ReadOnly Property hallamountColumn As DataColumn
            Get
                Return Me.columnhallamount
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Friend ReadOnly Property adddatetimeColumn As DataColumn
            Get
                Return Me.columnadddatetime
            End Get
        End Property
        
        Friend ReadOnly Property halltypeColumn As DataColumn
            Get
                Return Me.columnhalltype
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property hallTaxpercentageColumn As DataColumn
            Get
                Return Me.columnhallTaxpercentage
            End Get
        End Property
        
        Friend ReadOnly Property hallTaxAMOUNTColumn As DataColumn
            Get
                Return Me.columnhallTaxAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property NETHALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnNETHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property VEGColumn As DataColumn
            Get
                Return Me.columnVEG
            End Get
        End Property
        
        Friend ReadOnly Property nonvegColumn As DataColumn
            Get
                Return Me.columnnonveg
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARTY_BOOKINGDETAILSRow
            Get
                Return CType(Me.Rows(index),VIEW_PARTY_BOOKINGDETAILSRow)
            End Get
        End Property
        
        Public Event VIEW_PARTY_BOOKINGDETAILSRowChanged As VIEW_PARTY_BOOKINGDETAILSRowChangeEventHandler
        
        Public Event VIEW_PARTY_BOOKINGDETAILSRowChanging As VIEW_PARTY_BOOKINGDETAILSRowChangeEventHandler
        
        Public Event VIEW_PARTY_BOOKINGDETAILSRowDeleted As VIEW_PARTY_BOOKINGDETAILSRowChangeEventHandler
        
        Public Event VIEW_PARTY_BOOKINGDETAILSRowDeleting As VIEW_PARTY_BOOKINGDETAILSRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_PARTY_BOOKINGDETAILSRow(ByVal row As VIEW_PARTY_BOOKINGDETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_PARTY_BOOKINGDETAILSRow( _
                    ByVal loccode As String,  _
                    ByVal bookingno As Decimal,  _
                    ByVal partydate As Date,  _
                    ByVal hallcode As String,  _
                    ByVal halldescription As String,  _
                    ByVal mcode As String,  _
                    ByVal mname As String,  _
                    ByVal fromtime As Decimal,  _
                    ByVal totime As Decimal,  _
                    ByVal bookingdate As Date,  _
                    ByVal associatename As String,  _
                    ByVal description As String,  _
                    ByVal Advance As Decimal,  _
                    ByVal halltaxflag As String,  _
                    ByVal membertype As String,  _
                    ByVal receiptno As String,  _
                    ByVal receiptdate As Date,  _
                    ByVal hallamount As Decimal,  _
                    ByVal freeze As String,  _
                    ByVal adduserid As String,  _
                    ByVal adddatetime As Date,  _
                    ByVal halltype As String,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal hallTaxpercentage As Double,  _
                    ByVal hallTaxAMOUNT As Double,  _
                    ByVal NETHALLAMOUNT As Double,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal VEG As String,  _
                    ByVal nonveg As String) As VIEW_PARTY_BOOKINGDETAILSRow
            Dim rowVIEW_PARTY_BOOKINGDETAILSRow As VIEW_PARTY_BOOKINGDETAILSRow = CType(Me.NewRow,VIEW_PARTY_BOOKINGDETAILSRow)
            rowVIEW_PARTY_BOOKINGDETAILSRow.ItemArray = New Object() {loccode, bookingno, partydate, hallcode, halldescription, mcode, mname, fromtime, totime, bookingdate, associatename, description, Advance, halltaxflag, membertype, receiptno, receiptdate, hallamount, freeze, adduserid, adddatetime, halltype, BOOKINGTYPE, hallTaxpercentage, hallTaxAMOUNT, NETHALLAMOUNT, OCCUPANCY, VEG, nonveg}
            Me.Rows.Add(rowVIEW_PARTY_BOOKINGDETAILSRow)
            Return rowVIEW_PARTY_BOOKINGDETAILSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_PARTY_BOOKINGDETAILSDataTable = CType(MyBase.Clone,VIEW_PARTY_BOOKINGDETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_PARTY_BOOKINGDETAILSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnloccode = Me.Columns("loccode")
            Me.columnbookingno = Me.Columns("bookingno")
            Me.columnpartydate = Me.Columns("partydate")
            Me.columnhallcode = Me.Columns("hallcode")
            Me.columnhalldescription = Me.Columns("halldescription")
            Me.columnmcode = Me.Columns("mcode")
            Me.columnmname = Me.Columns("mname")
            Me.columnfromtime = Me.Columns("fromtime")
            Me.columntotime = Me.Columns("totime")
            Me.columnbookingdate = Me.Columns("bookingdate")
            Me.columnassociatename = Me.Columns("associatename")
            Me.columndescription = Me.Columns("description")
            Me.columnAdvance = Me.Columns("Advance")
            Me.columnhalltaxflag = Me.Columns("halltaxflag")
            Me.columnmembertype = Me.Columns("membertype")
            Me.columnreceiptno = Me.Columns("receiptno")
            Me.columnreceiptdate = Me.Columns("receiptdate")
            Me.columnhallamount = Me.Columns("hallamount")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnadduserid = Me.Columns("adduserid")
            Me.columnadddatetime = Me.Columns("adddatetime")
            Me.columnhalltype = Me.Columns("halltype")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnhallTaxpercentage = Me.Columns("hallTaxpercentage")
            Me.columnhallTaxAMOUNT = Me.Columns("hallTaxAMOUNT")
            Me.columnNETHALLAMOUNT = Me.Columns("NETHALLAMOUNT")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnVEG = Me.Columns("VEG")
            Me.columnnonveg = Me.Columns("nonveg")
        End Sub
        
        Private Sub InitClass()
            Me.columnloccode = New DataColumn("loccode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloccode)
            Me.columnbookingno = New DataColumn("bookingno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookingno)
            Me.columnpartydate = New DataColumn("partydate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpartydate)
            Me.columnhallcode = New DataColumn("hallcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallcode)
            Me.columnhalldescription = New DataColumn("halldescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalldescription)
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnmname = New DataColumn("mname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmname)
            Me.columnfromtime = New DataColumn("fromtime", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfromtime)
            Me.columntotime = New DataColumn("totime", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotime)
            Me.columnbookingdate = New DataColumn("bookingdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookingdate)
            Me.columnassociatename = New DataColumn("associatename", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnassociatename)
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.columnAdvance = New DataColumn("Advance", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAdvance)
            Me.columnhalltaxflag = New DataColumn("halltaxflag", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltaxflag)
            Me.columnmembertype = New DataColumn("membertype", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmembertype)
            Me.columnreceiptno = New DataColumn("receiptno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreceiptno)
            Me.columnreceiptdate = New DataColumn("receiptdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnreceiptdate)
            Me.columnhallamount = New DataColumn("hallamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallamount)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
            Me.columnadddatetime = New DataColumn("adddatetime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddatetime)
            Me.columnhalltype = New DataColumn("halltype", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltype)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnhallTaxpercentage = New DataColumn("hallTaxpercentage", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallTaxpercentage)
            Me.columnhallTaxAMOUNT = New DataColumn("hallTaxAMOUNT", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallTaxAMOUNT)
            Me.columnNETHALLAMOUNT = New DataColumn("NETHALLAMOUNT", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETHALLAMOUNT)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnVEG = New DataColumn("VEG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEG)
            Me.columnnonveg = New DataColumn("nonveg", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnonveg)
            Me.columnloccode.ReadOnly = true
            Me.columnbookingno.ReadOnly = true
            Me.columnpartydate.ReadOnly = true
            Me.columnhallcode.ReadOnly = true
            Me.columnhalldescription.ReadOnly = true
            Me.columnmcode.ReadOnly = true
            Me.columnmname.ReadOnly = true
            Me.columnfromtime.ReadOnly = true
            Me.columntotime.ReadOnly = true
            Me.columnbookingdate.ReadOnly = true
            Me.columnassociatename.ReadOnly = true
            Me.columndescription.ReadOnly = true
            Me.columnAdvance.ReadOnly = true
            Me.columnhalltaxflag.ReadOnly = true
            Me.columnmembertype.ReadOnly = true
            Me.columnreceiptno.ReadOnly = true
            Me.columnreceiptdate.ReadOnly = true
            Me.columnhallamount.ReadOnly = true
            Me.columnfreeze.ReadOnly = true
            Me.columnadduserid.ReadOnly = true
            Me.columnadddatetime.ReadOnly = true
            Me.columnhalltype.ReadOnly = true
            Me.columnBOOKINGTYPE.ReadOnly = true
            Me.columnhallTaxpercentage.ReadOnly = true
            Me.columnhallTaxAMOUNT.ReadOnly = true
            Me.columnNETHALLAMOUNT.ReadOnly = true
            Me.columnOCCUPANCY.ReadOnly = true
            Me.columnVEG.ReadOnly = true
            Me.columnnonveg.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_PARTY_BOOKINGDETAILSRow() As VIEW_PARTY_BOOKINGDETAILSRow
            Return CType(Me.NewRow,VIEW_PARTY_BOOKINGDETAILSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_PARTY_BOOKINGDETAILSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_PARTY_BOOKINGDETAILSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARTY_BOOKINGDETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BOOKINGDETAILSRowChanged(Me, New VIEW_PARTY_BOOKINGDETAILSRowChangeEvent(CType(e.Row,VIEW_PARTY_BOOKINGDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARTY_BOOKINGDETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BOOKINGDETAILSRowChanging(Me, New VIEW_PARTY_BOOKINGDETAILSRowChangeEvent(CType(e.Row,VIEW_PARTY_BOOKINGDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARTY_BOOKINGDETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BOOKINGDETAILSRowDeleted(Me, New VIEW_PARTY_BOOKINGDETAILSRowChangeEvent(CType(e.Row,VIEW_PARTY_BOOKINGDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARTY_BOOKINGDETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BOOKINGDETAILSRowDeleting(Me, New VIEW_PARTY_BOOKINGDETAILSRowChangeEvent(CType(e.Row,VIEW_PARTY_BOOKINGDETAILSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_PARTY_BOOKINGDETAILSRow(ByVal row As VIEW_PARTY_BOOKINGDETAILSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_BOOKINGDETAILSRow
        Inherits DataRow
        
        Private tableVIEW_PARTY_BOOKINGDETAILS As VIEW_PARTY_BOOKINGDETAILSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARTY_BOOKINGDETAILS = CType(Me.Table,VIEW_PARTY_BOOKINGDETAILSDataTable)
        End Sub
        
        Public Property loccode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.loccodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.loccodeColumn) = value
            End Set
        End Property
        
        Public Property bookingno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.bookingnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.bookingnoColumn) = value
            End Set
        End Property
        
        Public Property partydate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.partydateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.partydateColumn) = value
            End Set
        End Property
        
        Public Property hallcode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.hallcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.hallcodeColumn) = value
            End Set
        End Property
        
        Public Property halldescription As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.halldescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.halldescriptionColumn) = value
            End Set
        End Property
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.mcodeColumn) = value
            End Set
        End Property
        
        Public Property mname As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.mnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.mnameColumn) = value
            End Set
        End Property
        
        Public Property fromtime As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.fromtimeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.fromtimeColumn) = value
            End Set
        End Property
        
        Public Property totime As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.totimeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.totimeColumn) = value
            End Set
        End Property
        
        Public Property bookingdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.bookingdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.bookingdateColumn) = value
            End Set
        End Property
        
        Public Property associatename As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.associatenameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.associatenameColumn) = value
            End Set
        End Property
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.descriptionColumn) = value
            End Set
        End Property
        
        Public Property Advance As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.AdvanceColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.AdvanceColumn) = value
            End Set
        End Property
        
        Public Property halltaxflag As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.halltaxflagColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.halltaxflagColumn) = value
            End Set
        End Property
        
        Public Property membertype As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.membertypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.membertypeColumn) = value
            End Set
        End Property
        
        Public Property receiptno As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.receiptnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.receiptnoColumn) = value
            End Set
        End Property
        
        Public Property receiptdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.receiptdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.receiptdateColumn) = value
            End Set
        End Property
        
        Public Property hallamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.hallamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.hallamountColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.freezeColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.adduseridColumn) = value
            End Set
        End Property
        
        Public Property adddatetime As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.adddatetimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.adddatetimeColumn) = value
            End Set
        End Property
        
        Public Property halltype As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.halltypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.halltypeColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.BOOKINGTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property hallTaxpercentage As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.hallTaxpercentageColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.hallTaxpercentageColumn) = value
            End Set
        End Property
        
        Public Property hallTaxAMOUNT As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.hallTaxAMOUNTColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.hallTaxAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property NETHALLAMOUNT As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.NETHALLAMOUNTColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.NETHALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property VEG As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.VEGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.VEGColumn) = value
            End Set
        End Property
        
        Public Property nonveg As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.nonvegColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.nonvegColumn) = value
            End Set
        End Property
        
        Public Function IsloccodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.loccodeColumn)
        End Function
        
        Public Sub SetloccodeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.loccodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbookingnoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.bookingnoColumn)
        End Function
        
        Public Sub SetbookingnoNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.bookingnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspartydateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.partydateColumn)
        End Function
        
        Public Sub SetpartydateNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.partydateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallcodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.hallcodeColumn)
        End Function
        
        Public Sub SethallcodeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.hallcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalldescriptionNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.halldescriptionColumn)
        End Function
        
        Public Sub SethalldescriptionNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.halldescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmnameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.mnameColumn)
        End Function
        
        Public Sub SetmnameNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.mnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfromtimeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.fromtimeColumn)
        End Function
        
        Public Sub SetfromtimeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.fromtimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotimeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.totimeColumn)
        End Function
        
        Public Sub SettotimeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.totimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbookingdateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.bookingdateColumn)
        End Function
        
        Public Sub SetbookingdateNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.bookingdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsassociatenameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.associatenameColumn)
        End Function
        
        Public Sub SetassociatenameNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.associatenameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAdvanceNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.AdvanceColumn)
        End Function
        
        Public Sub SetAdvanceNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.AdvanceColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalltaxflagNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.halltaxflagColumn)
        End Function
        
        Public Sub SethalltaxflagNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.halltaxflagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmembertypeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.membertypeColumn)
        End Function
        
        Public Sub SetmembertypeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.membertypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsreceiptnoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.receiptnoColumn)
        End Function
        
        Public Sub SetreceiptnoNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.receiptnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsreceiptdateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.receiptdateColumn)
        End Function
        
        Public Sub SetreceiptdateNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.receiptdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallamountNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.hallamountColumn)
        End Function
        
        Public Sub SethallamountNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.hallamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.adduseridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddatetimeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.adddatetimeColumn)
        End Function
        
        Public Sub SetadddatetimeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.adddatetimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalltypeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.halltypeColumn)
        End Function
        
        Public Sub SethalltypeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.halltypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.BOOKINGTYPEColumn)
        End Function
        
        Public Sub SetBOOKINGTYPENull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.BOOKINGTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallTaxpercentageNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.hallTaxpercentageColumn)
        End Function
        
        Public Sub SethallTaxpercentageNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.hallTaxpercentageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallTaxAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.hallTaxAMOUNTColumn)
        End Function
        
        Public Sub SethallTaxAMOUNTNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.hallTaxAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNETHALLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.NETHALLAMOUNTColumn)
        End Function
        
        Public Sub SetNETHALLAMOUNTNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.NETHALLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.VEGColumn)
        End Function
        
        Public Sub SetVEGNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.VEGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnonvegNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS.nonvegColumn)
        End Function
        
        Public Sub SetnonvegNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS.nonvegColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_BOOKINGDETAILSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_PARTY_BOOKINGDETAILSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_PARTY_BOOKINGDETAILSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_PARTY_BOOKINGDETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CREDIT_MEMBER_MPOSTINGDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBilldetails As DataColumn
        
        Private columnbilldate As DataColumn
        
        Private columnAmount As DataColumn
        
        Private columnAcdesc As DataColumn
        
        Private columnmcode As DataColumn
        
        Private columnAcctcode As DataColumn
        
        Private columnCREDITDEBIT As DataColumn
        
        Friend Sub New()
            MyBase.New("CREDIT_MEMBER_MPOSTING")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BilldetailsColumn As DataColumn
            Get
                Return Me.columnBilldetails
            End Get
        End Property
        
        Friend ReadOnly Property billdateColumn As DataColumn
            Get
                Return Me.columnbilldate
            End Get
        End Property
        
        Friend ReadOnly Property AmountColumn As DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property
        
        Friend ReadOnly Property AcdescColumn As DataColumn
            Get
                Return Me.columnAcdesc
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property AcctcodeColumn As DataColumn
            Get
                Return Me.columnAcctcode
            End Get
        End Property
        
        Friend ReadOnly Property CREDITDEBITColumn As DataColumn
            Get
                Return Me.columnCREDITDEBIT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As CREDIT_MEMBER_MPOSTINGRow
            Get
                Return CType(Me.Rows(index),CREDIT_MEMBER_MPOSTINGRow)
            End Get
        End Property
        
        Public Event CREDIT_MEMBER_MPOSTINGRowChanged As CREDIT_MEMBER_MPOSTINGRowChangeEventHandler
        
        Public Event CREDIT_MEMBER_MPOSTINGRowChanging As CREDIT_MEMBER_MPOSTINGRowChangeEventHandler
        
        Public Event CREDIT_MEMBER_MPOSTINGRowDeleted As CREDIT_MEMBER_MPOSTINGRowChangeEventHandler
        
        Public Event CREDIT_MEMBER_MPOSTINGRowDeleting As CREDIT_MEMBER_MPOSTINGRowChangeEventHandler
        
        Public Overloads Sub AddCREDIT_MEMBER_MPOSTINGRow(ByVal row As CREDIT_MEMBER_MPOSTINGRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddCREDIT_MEMBER_MPOSTINGRow(ByVal Billdetails As String, ByVal billdate As Date, ByVal Amount As Decimal, ByVal Acdesc As String, ByVal mcode As String, ByVal Acctcode As String, ByVal CREDITDEBIT As String) As CREDIT_MEMBER_MPOSTINGRow
            Dim rowCREDIT_MEMBER_MPOSTINGRow As CREDIT_MEMBER_MPOSTINGRow = CType(Me.NewRow,CREDIT_MEMBER_MPOSTINGRow)
            rowCREDIT_MEMBER_MPOSTINGRow.ItemArray = New Object() {Billdetails, billdate, Amount, Acdesc, mcode, Acctcode, CREDITDEBIT}
            Me.Rows.Add(rowCREDIT_MEMBER_MPOSTINGRow)
            Return rowCREDIT_MEMBER_MPOSTINGRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As CREDIT_MEMBER_MPOSTINGDataTable = CType(MyBase.Clone,CREDIT_MEMBER_MPOSTINGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New CREDIT_MEMBER_MPOSTINGDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBilldetails = Me.Columns("Billdetails")
            Me.columnbilldate = Me.Columns("billdate")
            Me.columnAmount = Me.Columns("Amount")
            Me.columnAcdesc = Me.Columns("Acdesc")
            Me.columnmcode = Me.Columns("mcode")
            Me.columnAcctcode = Me.Columns("Acctcode")
            Me.columnCREDITDEBIT = Me.Columns("CREDITDEBIT")
        End Sub
        
        Private Sub InitClass()
            Me.columnBilldetails = New DataColumn("Billdetails", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBilldetails)
            Me.columnbilldate = New DataColumn("billdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbilldate)
            Me.columnAmount = New DataColumn("Amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAmount)
            Me.columnAcdesc = New DataColumn("Acdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcdesc)
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnAcctcode = New DataColumn("Acctcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAcctcode)
            Me.columnCREDITDEBIT = New DataColumn("CREDITDEBIT", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCREDITDEBIT)
            Me.columnBilldetails.AllowDBNull = false
            Me.columnAcdesc.AllowDBNull = false
            Me.columnAcctcode.AllowDBNull = false
            Me.columnCREDITDEBIT.AllowDBNull = false
        End Sub
        
        Public Function NewCREDIT_MEMBER_MPOSTINGRow() As CREDIT_MEMBER_MPOSTINGRow
            Return CType(Me.NewRow,CREDIT_MEMBER_MPOSTINGRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New CREDIT_MEMBER_MPOSTINGRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CREDIT_MEMBER_MPOSTINGRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CREDIT_MEMBER_MPOSTINGRowChangedEvent) Is Nothing) Then
                RaiseEvent CREDIT_MEMBER_MPOSTINGRowChanged(Me, New CREDIT_MEMBER_MPOSTINGRowChangeEvent(CType(e.Row,CREDIT_MEMBER_MPOSTINGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CREDIT_MEMBER_MPOSTINGRowChangingEvent) Is Nothing) Then
                RaiseEvent CREDIT_MEMBER_MPOSTINGRowChanging(Me, New CREDIT_MEMBER_MPOSTINGRowChangeEvent(CType(e.Row,CREDIT_MEMBER_MPOSTINGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CREDIT_MEMBER_MPOSTINGRowDeletedEvent) Is Nothing) Then
                RaiseEvent CREDIT_MEMBER_MPOSTINGRowDeleted(Me, New CREDIT_MEMBER_MPOSTINGRowChangeEvent(CType(e.Row,CREDIT_MEMBER_MPOSTINGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CREDIT_MEMBER_MPOSTINGRowDeletingEvent) Is Nothing) Then
                RaiseEvent CREDIT_MEMBER_MPOSTINGRowDeleting(Me, New CREDIT_MEMBER_MPOSTINGRowChangeEvent(CType(e.Row,CREDIT_MEMBER_MPOSTINGRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveCREDIT_MEMBER_MPOSTINGRow(ByVal row As CREDIT_MEMBER_MPOSTINGRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CREDIT_MEMBER_MPOSTINGRow
        Inherits DataRow
        
        Private tableCREDIT_MEMBER_MPOSTING As CREDIT_MEMBER_MPOSTINGDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableCREDIT_MEMBER_MPOSTING = CType(Me.Table,CREDIT_MEMBER_MPOSTINGDataTable)
        End Sub
        
        Public Property Billdetails As String
            Get
                Return CType(Me(Me.tableCREDIT_MEMBER_MPOSTING.BilldetailsColumn),String)
            End Get
            Set
                Me(Me.tableCREDIT_MEMBER_MPOSTING.BilldetailsColumn) = value
            End Set
        End Property
        
        Public Property billdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableCREDIT_MEMBER_MPOSTING.billdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCREDIT_MEMBER_MPOSTING.billdateColumn) = value
            End Set
        End Property
        
        Public Property Amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableCREDIT_MEMBER_MPOSTING.AmountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCREDIT_MEMBER_MPOSTING.AmountColumn) = value
            End Set
        End Property
        
        Public Property Acdesc As String
            Get
                Return CType(Me(Me.tableCREDIT_MEMBER_MPOSTING.AcdescColumn),String)
            End Get
            Set
                Me(Me.tableCREDIT_MEMBER_MPOSTING.AcdescColumn) = value
            End Set
        End Property
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tableCREDIT_MEMBER_MPOSTING.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCREDIT_MEMBER_MPOSTING.mcodeColumn) = value
            End Set
        End Property
        
        Public Property Acctcode As String
            Get
                Return CType(Me(Me.tableCREDIT_MEMBER_MPOSTING.AcctcodeColumn),String)
            End Get
            Set
                Me(Me.tableCREDIT_MEMBER_MPOSTING.AcctcodeColumn) = value
            End Set
        End Property
        
        Public Property CREDITDEBIT As String
            Get
                Return CType(Me(Me.tableCREDIT_MEMBER_MPOSTING.CREDITDEBITColumn),String)
            End Get
            Set
                Me(Me.tableCREDIT_MEMBER_MPOSTING.CREDITDEBITColumn) = value
            End Set
        End Property
        
        Public Function IsbilldateNull() As Boolean
            Return Me.IsNull(Me.tableCREDIT_MEMBER_MPOSTING.billdateColumn)
        End Function
        
        Public Sub SetbilldateNull()
            Me(Me.tableCREDIT_MEMBER_MPOSTING.billdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAmountNull() As Boolean
            Return Me.IsNull(Me.tableCREDIT_MEMBER_MPOSTING.AmountColumn)
        End Function
        
        Public Sub SetAmountNull()
            Me(Me.tableCREDIT_MEMBER_MPOSTING.AmountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tableCREDIT_MEMBER_MPOSTING.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tableCREDIT_MEMBER_MPOSTING.mcodeColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class CREDIT_MEMBER_MPOSTINGRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As CREDIT_MEMBER_MPOSTINGRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As CREDIT_MEMBER_MPOSTINGRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As CREDIT_MEMBER_MPOSTINGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_BILLINGDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnloccode As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnHALLTYPE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnADVANCE As DataColumn
        
        Private columnHALLAMOUNT As DataColumn
        
        Private columnHALLTAXAMOUNT As DataColumn
        
        Private columnHALL As DataColumn
        
        Private columnBOOKINGTARIFFAMOUNT As DataColumn
        
        Private columnEXCESSTARIFFAMOUNT As DataColumn
        
        Private columnTARIFFTAXAMOUNT As DataColumn
        
        Private columnTARIFFAMOUNT As DataColumn
        
        Private columnRESTAMOUNT As DataColumn
        
        Private columnRESTTAXAMOUNT As DataColumn
        
        Private columnREST As DataColumn
        
        Private columnoccupancy As DataColumn
        
        Private columnVEG As DataColumn
        
        Private columnNONVEG As DataColumn
        
        Private columnARRMENTAMOUNT As DataColumn
        
        Private columnARRMENTTAXAMOUNT As DataColumn
        
        Private columnARRMENT As DataColumn
        
        Private columnCAMOUNT As DataColumn
        
        Private columnSBFCHARGE As DataColumn
        
        Private columnNETPAYABLE As DataColumn
        
        Private columnNETAMOUNT As DataColumn
        
        Private columnNETTAX As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_PARTY_BILLING")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property loccodeColumn As DataColumn
            Get
                Return Me.columnloccode
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property HALLTYPEColumn As DataColumn
            Get
                Return Me.columnHALLTYPE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property ADVANCEColumn As DataColumn
            Get
                Return Me.columnADVANCE
            End Get
        End Property
        
        Friend ReadOnly Property HALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLColumn As DataColumn
            Get
                Return Me.columnHALL
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnBOOKINGTARIFFAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property EXCESSTARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnEXCESSTARIFFAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTARIFFTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnTARIFFAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESTTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTColumn As DataColumn
            Get
                Return Me.columnREST
            End Get
        End Property
        
        Friend ReadOnly Property occupancyColumn As DataColumn
            Get
                Return Me.columnoccupancy
            End Get
        End Property
        
        Friend ReadOnly Property VEGColumn As DataColumn
            Get
                Return Me.columnVEG
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGColumn As DataColumn
            Get
                Return Me.columnNONVEG
            End Get
        End Property
        
        Friend ReadOnly Property ARRMENTAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRMENTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ARRMENTTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRMENTTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ARRMENTColumn As DataColumn
            Get
                Return Me.columnARRMENT
            End Get
        End Property
        
        Friend ReadOnly Property CAMOUNTColumn As DataColumn
            Get
                Return Me.columnCAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property SBFCHARGEColumn As DataColumn
            Get
                Return Me.columnSBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property NETPAYABLEColumn As DataColumn
            Get
                Return Me.columnNETPAYABLE
            End Get
        End Property
        
        Friend ReadOnly Property NETAMOUNTColumn As DataColumn
            Get
                Return Me.columnNETAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property NETTAXColumn As DataColumn
            Get
                Return Me.columnNETTAX
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARTY_BILLINGRow
            Get
                Return CType(Me.Rows(index),VIEW_PARTY_BILLINGRow)
            End Get
        End Property
        
        Public Event VIEW_PARTY_BILLINGRowChanged As VIEW_PARTY_BILLINGRowChangeEventHandler
        
        Public Event VIEW_PARTY_BILLINGRowChanging As VIEW_PARTY_BILLINGRowChangeEventHandler
        
        Public Event VIEW_PARTY_BILLINGRowDeleted As VIEW_PARTY_BILLINGRowChangeEventHandler
        
        Public Event VIEW_PARTY_BILLINGRowDeleting As VIEW_PARTY_BILLINGRowChangeEventHandler
        
        Public Overloads Sub AddVIEW_PARTY_BILLINGRow(ByVal row As VIEW_PARTY_BILLINGRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_PARTY_BILLINGRow( _
                    ByVal loccode As String,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal HALLTYPE As String,  _
                    ByVal MCODE As String,  _
                    ByVal ASSOCIATENAME As String,  _
                    ByVal MNAME As String,  _
                    ByVal HALLCODE As String,  _
                    ByVal ADVANCE As Decimal,  _
                    ByVal HALLAMOUNT As Decimal,  _
                    ByVal HALLTAXAMOUNT As Decimal,  _
                    ByVal HALL As Decimal,  _
                    ByVal BOOKINGTARIFFAMOUNT As Decimal,  _
                    ByVal EXCESSTARIFFAMOUNT As Decimal,  _
                    ByVal TARIFFTAXAMOUNT As Decimal,  _
                    ByVal TARIFFAMOUNT As Decimal,  _
                    ByVal RESTAMOUNT As Decimal,  _
                    ByVal RESTTAXAMOUNT As Decimal,  _
                    ByVal REST As Decimal,  _
                    ByVal occupancy As Decimal,  _
                    ByVal VEG As Decimal,  _
                    ByVal NONVEG As Decimal,  _
                    ByVal ARRMENTAMOUNT As Decimal,  _
                    ByVal ARRMENTTAXAMOUNT As Decimal,  _
                    ByVal ARRMENT As Decimal,  _
                    ByVal CAMOUNT As Decimal,  _
                    ByVal SBFCHARGE As Decimal,  _
                    ByVal NETPAYABLE As Decimal,  _
                    ByVal NETAMOUNT As Decimal,  _
                    ByVal NETTAX As Decimal) As VIEW_PARTY_BILLINGRow
            Dim rowVIEW_PARTY_BILLINGRow As VIEW_PARTY_BILLINGRow = CType(Me.NewRow,VIEW_PARTY_BILLINGRow)
            rowVIEW_PARTY_BILLINGRow.ItemArray = New Object() {loccode, BOOKINGTYPE, BOOKINGNO, FREEZE, BOOKINGDATE, PARTYDATE, HALLTYPE, MCODE, ASSOCIATENAME, MNAME, HALLCODE, ADVANCE, HALLAMOUNT, HALLTAXAMOUNT, HALL, BOOKINGTARIFFAMOUNT, EXCESSTARIFFAMOUNT, TARIFFTAXAMOUNT, TARIFFAMOUNT, RESTAMOUNT, RESTTAXAMOUNT, REST, occupancy, VEG, NONVEG, ARRMENTAMOUNT, ARRMENTTAXAMOUNT, ARRMENT, CAMOUNT, SBFCHARGE, NETPAYABLE, NETAMOUNT, NETTAX}
            Me.Rows.Add(rowVIEW_PARTY_BILLINGRow)
            Return rowVIEW_PARTY_BILLINGRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_PARTY_BILLINGDataTable = CType(MyBase.Clone,VIEW_PARTY_BILLINGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_PARTY_BILLINGDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnloccode = Me.Columns("loccode")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnHALLTYPE = Me.Columns("HALLTYPE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnADVANCE = Me.Columns("ADVANCE")
            Me.columnHALLAMOUNT = Me.Columns("HALLAMOUNT")
            Me.columnHALLTAXAMOUNT = Me.Columns("HALLTAXAMOUNT")
            Me.columnHALL = Me.Columns("HALL")
            Me.columnBOOKINGTARIFFAMOUNT = Me.Columns("BOOKINGTARIFFAMOUNT")
            Me.columnEXCESSTARIFFAMOUNT = Me.Columns("EXCESSTARIFFAMOUNT")
            Me.columnTARIFFTAXAMOUNT = Me.Columns("TARIFFTAXAMOUNT")
            Me.columnTARIFFAMOUNT = Me.Columns("TARIFFAMOUNT")
            Me.columnRESTAMOUNT = Me.Columns("RESTAMOUNT")
            Me.columnRESTTAXAMOUNT = Me.Columns("RESTTAXAMOUNT")
            Me.columnREST = Me.Columns("REST")
            Me.columnoccupancy = Me.Columns("occupancy")
            Me.columnVEG = Me.Columns("VEG")
            Me.columnNONVEG = Me.Columns("NONVEG")
            Me.columnARRMENTAMOUNT = Me.Columns("ARRMENTAMOUNT")
            Me.columnARRMENTTAXAMOUNT = Me.Columns("ARRMENTTAXAMOUNT")
            Me.columnARRMENT = Me.Columns("ARRMENT")
            Me.columnCAMOUNT = Me.Columns("CAMOUNT")
            Me.columnSBFCHARGE = Me.Columns("SBFCHARGE")
            Me.columnNETPAYABLE = Me.Columns("NETPAYABLE")
            Me.columnNETAMOUNT = Me.Columns("NETAMOUNT")
            Me.columnNETTAX = Me.Columns("NETTAX")
        End Sub
        
        Private Sub InitClass()
            Me.columnloccode = New DataColumn("loccode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloccode)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnHALLTYPE = New DataColumn("HALLTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTYPE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnADVANCE = New DataColumn("ADVANCE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADVANCE)
            Me.columnHALLAMOUNT = New DataColumn("HALLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLAMOUNT)
            Me.columnHALLTAXAMOUNT = New DataColumn("HALLTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXAMOUNT)
            Me.columnHALL = New DataColumn("HALL", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALL)
            Me.columnBOOKINGTARIFFAMOUNT = New DataColumn("BOOKINGTARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTARIFFAMOUNT)
            Me.columnEXCESSTARIFFAMOUNT = New DataColumn("EXCESSTARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEXCESSTARIFFAMOUNT)
            Me.columnTARIFFTAXAMOUNT = New DataColumn("TARIFFTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFTAXAMOUNT)
            Me.columnTARIFFAMOUNT = New DataColumn("TARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFAMOUNT)
            Me.columnRESTAMOUNT = New DataColumn("RESTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTAMOUNT)
            Me.columnRESTTAXAMOUNT = New DataColumn("RESTTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTTAXAMOUNT)
            Me.columnREST = New DataColumn("REST", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREST)
            Me.columnoccupancy = New DataColumn("occupancy", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoccupancy)
            Me.columnVEG = New DataColumn("VEG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEG)
            Me.columnNONVEG = New DataColumn("NONVEG", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEG)
            Me.columnARRMENTAMOUNT = New DataColumn("ARRMENTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRMENTAMOUNT)
            Me.columnARRMENTTAXAMOUNT = New DataColumn("ARRMENTTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRMENTTAXAMOUNT)
            Me.columnARRMENT = New DataColumn("ARRMENT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRMENT)
            Me.columnCAMOUNT = New DataColumn("CAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCAMOUNT)
            Me.columnSBFCHARGE = New DataColumn("SBFCHARGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBFCHARGE)
            Me.columnNETPAYABLE = New DataColumn("NETPAYABLE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETPAYABLE)
            Me.columnNETAMOUNT = New DataColumn("NETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETAMOUNT)
            Me.columnNETTAX = New DataColumn("NETTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETTAX)
            Me.columnloccode.AllowDBNull = false
            Me.columnBOOKINGTYPE.AllowDBNull = false
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnFREEZE.AllowDBNull = false
            Me.columnBOOKINGDATE.AllowDBNull = false
            Me.columnPARTYDATE.AllowDBNull = false
            Me.columnHALLTYPE.AllowDBNull = false
            Me.columnMCODE.AllowDBNull = false
            Me.columnASSOCIATENAME.AllowDBNull = false
            Me.columnMNAME.AllowDBNull = false
            Me.columnHALLCODE.AllowDBNull = false
            Me.columnADVANCE.AllowDBNull = false
            Me.columnHALLAMOUNT.AllowDBNull = false
            Me.columnHALLTAXAMOUNT.AllowDBNull = false
            Me.columnBOOKINGTARIFFAMOUNT.AllowDBNull = false
            Me.columnEXCESSTARIFFAMOUNT.AllowDBNull = false
            Me.columnTARIFFTAXAMOUNT.AllowDBNull = false
            Me.columnRESTAMOUNT.AllowDBNull = false
            Me.columnRESTTAXAMOUNT.AllowDBNull = false
            Me.columnoccupancy.AllowDBNull = false
            Me.columnVEG.AllowDBNull = false
            Me.columnNONVEG.AllowDBNull = false
            Me.columnARRMENTAMOUNT.AllowDBNull = false
            Me.columnARRMENTTAXAMOUNT.AllowDBNull = false
            Me.columnCAMOUNT.AllowDBNull = false
            Me.columnSBFCHARGE.AllowDBNull = false
            Me.columnNETPAYABLE.AllowDBNull = false
        End Sub
        
        Public Function NewVIEW_PARTY_BILLINGRow() As VIEW_PARTY_BILLINGRow
            Return CType(Me.NewRow,VIEW_PARTY_BILLINGRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_PARTY_BILLINGRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_PARTY_BILLINGRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARTY_BILLINGRowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BILLINGRowChanged(Me, New VIEW_PARTY_BILLINGRowChangeEvent(CType(e.Row,VIEW_PARTY_BILLINGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARTY_BILLINGRowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BILLINGRowChanging(Me, New VIEW_PARTY_BILLINGRowChangeEvent(CType(e.Row,VIEW_PARTY_BILLINGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARTY_BILLINGRowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BILLINGRowDeleted(Me, New VIEW_PARTY_BILLINGRowChangeEvent(CType(e.Row,VIEW_PARTY_BILLINGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARTY_BILLINGRowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BILLINGRowDeleting(Me, New VIEW_PARTY_BILLINGRowChangeEvent(CType(e.Row,VIEW_PARTY_BILLINGRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_PARTY_BILLINGRow(ByVal row As VIEW_PARTY_BILLINGRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_BILLINGRow
        Inherits DataRow
        
        Private tableVIEW_PARTY_BILLING As VIEW_PARTY_BILLINGDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARTY_BILLING = CType(Me.Table,VIEW_PARTY_BILLINGDataTable)
        End Sub
        
        Public Property loccode As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.loccodeColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.loccodeColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.BOOKINGTYPEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.FREEZEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.BOOKINGDATEColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.PARTYDATEColumn),Date)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property HALLTYPE As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.HALLTYPEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.HALLTYPEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.MCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.ASSOCIATENAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.MNAMEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.HALLCODEColumn),String)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property ADVANCE As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.ADVANCEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.ADVANCEColumn) = value
            End Set
        End Property
        
        Public Property HALLAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.HALLAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.HALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.HALLTAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.HALLTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALL As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING.HALLColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.HALLColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTARIFFAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.BOOKINGTARIFFAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.BOOKINGTARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property EXCESSTARIFFAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.EXCESSTARIFFAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.EXCESSTARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TARIFFTAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.TARIFFTAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.TARIFFTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TARIFFAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING.TARIFFAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.TARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESTAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.RESTAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.RESTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESTTAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.RESTTAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.RESTTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property REST As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING.RESTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.RESTColumn) = value
            End Set
        End Property
        
        Public Property occupancy As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.occupancyColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.occupancyColumn) = value
            End Set
        End Property
        
        Public Property VEG As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.VEGColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.VEGColumn) = value
            End Set
        End Property
        
        Public Property NONVEG As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.NONVEGColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.NONVEGColumn) = value
            End Set
        End Property
        
        Public Property ARRMENTAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.ARRMENTAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.ARRMENTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ARRMENTTAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.ARRMENTTAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.ARRMENTTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ARRMENT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING.ARRMENTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.ARRMENTColumn) = value
            End Set
        End Property
        
        Public Property CAMOUNT As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.CAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.CAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property SBFCHARGE As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.SBFCHARGEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.SBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property NETPAYABLE As Decimal
            Get
                Return CType(Me(Me.tableVIEW_PARTY_BILLING.NETPAYABLEColumn),Decimal)
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.NETPAYABLEColumn) = value
            End Set
        End Property
        
        Public Property NETAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING.NETAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.NETAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property NETTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BILLING.NETTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BILLING.NETTAXColumn) = value
            End Set
        End Property
        
        Public Function IsHALLNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING.HALLColumn)
        End Function
        
        Public Sub SetHALLNull()
            Me(Me.tableVIEW_PARTY_BILLING.HALLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING.TARIFFAMOUNTColumn)
        End Function
        
        Public Sub SetTARIFFAMOUNTNull()
            Me(Me.tableVIEW_PARTY_BILLING.TARIFFAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING.RESTColumn)
        End Function
        
        Public Sub SetRESTNull()
            Me(Me.tableVIEW_PARTY_BILLING.RESTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRMENTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING.ARRMENTColumn)
        End Function
        
        Public Sub SetARRMENTNull()
            Me(Me.tableVIEW_PARTY_BILLING.ARRMENTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNETAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING.NETAMOUNTColumn)
        End Function
        
        Public Sub SetNETAMOUNTNull()
            Me(Me.tableVIEW_PARTY_BILLING.NETAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNETTAXNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BILLING.NETTAXColumn)
        End Function
        
        Public Sub SetNETTAXNull()
            Me(Me.tableVIEW_PARTY_BILLING.NETTAXColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_BILLINGRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_PARTY_BILLINGRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_PARTY_BILLINGRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_PARTY_BILLINGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Party_TariffHdrDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnautoid As DataColumn
        
        Private columnccode As DataColumn
        
        Private columntariffcode As DataColumn
        
        Private columntariffdesc As DataColumn
        
        Private columnrate As DataColumn
        
        Private columntaxcode As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnadduser As DataColumn
        
        Private columnadddate As DataColumn
        
        Private columnSBFCHARGE As DataColumn
        
        Friend Sub New()
            MyBase.New("Party_TariffHdr")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property autoidColumn As DataColumn
            Get
                Return Me.columnautoid
            End Get
        End Property
        
        Friend ReadOnly Property ccodeColumn As DataColumn
            Get
                Return Me.columnccode
            End Get
        End Property
        
        Friend ReadOnly Property tariffcodeColumn As DataColumn
            Get
                Return Me.columntariffcode
            End Get
        End Property
        
        Friend ReadOnly Property tariffdescColumn As DataColumn
            Get
                Return Me.columntariffdesc
            End Get
        End Property
        
        Friend ReadOnly Property rateColumn As DataColumn
            Get
                Return Me.columnrate
            End Get
        End Property
        
        Friend ReadOnly Property taxcodeColumn As DataColumn
            Get
                Return Me.columntaxcode
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property adduserColumn As DataColumn
            Get
                Return Me.columnadduser
            End Get
        End Property
        
        Friend ReadOnly Property adddateColumn As DataColumn
            Get
                Return Me.columnadddate
            End Get
        End Property
        
        Friend ReadOnly Property SBFCHARGEColumn As DataColumn
            Get
                Return Me.columnSBFCHARGE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As Party_TariffHdrRow
            Get
                Return CType(Me.Rows(index),Party_TariffHdrRow)
            End Get
        End Property
        
        Public Event Party_TariffHdrRowChanged As Party_TariffHdrRowChangeEventHandler
        
        Public Event Party_TariffHdrRowChanging As Party_TariffHdrRowChangeEventHandler
        
        Public Event Party_TariffHdrRowDeleted As Party_TariffHdrRowChangeEventHandler
        
        Public Event Party_TariffHdrRowDeleting As Party_TariffHdrRowChangeEventHandler
        
        Public Overloads Sub AddParty_TariffHdrRow(ByVal row As Party_TariffHdrRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddParty_TariffHdrRow(ByVal ccode As String, ByVal tariffcode As String, ByVal tariffdesc As String, ByVal rate As Decimal, ByVal taxcode As String, ByVal freeze As String, ByVal adduser As String, ByVal adddate As Date, ByVal SBFCHARGE As String) As Party_TariffHdrRow
            Dim rowParty_TariffHdrRow As Party_TariffHdrRow = CType(Me.NewRow,Party_TariffHdrRow)
            rowParty_TariffHdrRow.ItemArray = New Object() {Nothing, ccode, tariffcode, tariffdesc, rate, taxcode, freeze, adduser, adddate, SBFCHARGE}
            Me.Rows.Add(rowParty_TariffHdrRow)
            Return rowParty_TariffHdrRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As Party_TariffHdrDataTable = CType(MyBase.Clone,Party_TariffHdrDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New Party_TariffHdrDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnautoid = Me.Columns("autoid")
            Me.columnccode = Me.Columns("ccode")
            Me.columntariffcode = Me.Columns("tariffcode")
            Me.columntariffdesc = Me.Columns("tariffdesc")
            Me.columnrate = Me.Columns("rate")
            Me.columntaxcode = Me.Columns("taxcode")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnadduser = Me.Columns("adduser")
            Me.columnadddate = Me.Columns("adddate")
            Me.columnSBFCHARGE = Me.Columns("SBFCHARGE")
        End Sub
        
        Private Sub InitClass()
            Me.columnautoid = New DataColumn("autoid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnautoid)
            Me.columnccode = New DataColumn("ccode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnccode)
            Me.columntariffcode = New DataColumn("tariffcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntariffcode)
            Me.columntariffdesc = New DataColumn("tariffdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntariffdesc)
            Me.columnrate = New DataColumn("rate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrate)
            Me.columntaxcode = New DataColumn("taxcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntaxcode)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnadduser = New DataColumn("adduser", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduser)
            Me.columnadddate = New DataColumn("adddate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddate)
            Me.columnSBFCHARGE = New DataColumn("SBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBFCHARGE)
            Me.columnautoid.AutoIncrement = true
            Me.columnautoid.AllowDBNull = false
            Me.columnautoid.ReadOnly = true
        End Sub
        
        Public Function NewParty_TariffHdrRow() As Party_TariffHdrRow
            Return CType(Me.NewRow,Party_TariffHdrRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New Party_TariffHdrRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(Party_TariffHdrRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.Party_TariffHdrRowChangedEvent) Is Nothing) Then
                RaiseEvent Party_TariffHdrRowChanged(Me, New Party_TariffHdrRowChangeEvent(CType(e.Row,Party_TariffHdrRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.Party_TariffHdrRowChangingEvent) Is Nothing) Then
                RaiseEvent Party_TariffHdrRowChanging(Me, New Party_TariffHdrRowChangeEvent(CType(e.Row,Party_TariffHdrRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.Party_TariffHdrRowDeletedEvent) Is Nothing) Then
                RaiseEvent Party_TariffHdrRowDeleted(Me, New Party_TariffHdrRowChangeEvent(CType(e.Row,Party_TariffHdrRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.Party_TariffHdrRowDeletingEvent) Is Nothing) Then
                RaiseEvent Party_TariffHdrRowDeleting(Me, New Party_TariffHdrRowChangeEvent(CType(e.Row,Party_TariffHdrRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveParty_TariffHdrRow(ByVal row As Party_TariffHdrRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Party_TariffHdrRow
        Inherits DataRow
        
        Private tableParty_TariffHdr As Party_TariffHdrDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableParty_TariffHdr = CType(Me.Table,Party_TariffHdrDataTable)
        End Sub
        
        Public Property autoid As Decimal
            Get
                Return CType(Me(Me.tableParty_TariffHdr.autoidColumn),Decimal)
            End Get
            Set
                Me(Me.tableParty_TariffHdr.autoidColumn) = value
            End Set
        End Property
        
        Public Property ccode As String
            Get
                Try 
                    Return CType(Me(Me.tableParty_TariffHdr.ccodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParty_TariffHdr.ccodeColumn) = value
            End Set
        End Property
        
        Public Property tariffcode As String
            Get
                Try 
                    Return CType(Me(Me.tableParty_TariffHdr.tariffcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParty_TariffHdr.tariffcodeColumn) = value
            End Set
        End Property
        
        Public Property tariffdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableParty_TariffHdr.tariffdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParty_TariffHdr.tariffdescColumn) = value
            End Set
        End Property
        
        Public Property rate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableParty_TariffHdr.rateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParty_TariffHdr.rateColumn) = value
            End Set
        End Property
        
        Public Property taxcode As String
            Get
                Try 
                    Return CType(Me(Me.tableParty_TariffHdr.taxcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParty_TariffHdr.taxcodeColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tableParty_TariffHdr.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParty_TariffHdr.freezeColumn) = value
            End Set
        End Property
        
        Public Property adduser As String
            Get
                Try 
                    Return CType(Me(Me.tableParty_TariffHdr.adduserColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParty_TariffHdr.adduserColumn) = value
            End Set
        End Property
        
        Public Property adddate As Date
            Get
                Try 
                    Return CType(Me(Me.tableParty_TariffHdr.adddateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParty_TariffHdr.adddateColumn) = value
            End Set
        End Property
        
        Public Property SBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tableParty_TariffHdr.SBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParty_TariffHdr.SBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Function IsccodeNull() As Boolean
            Return Me.IsNull(Me.tableParty_TariffHdr.ccodeColumn)
        End Function
        
        Public Sub SetccodeNull()
            Me(Me.tableParty_TariffHdr.ccodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstariffcodeNull() As Boolean
            Return Me.IsNull(Me.tableParty_TariffHdr.tariffcodeColumn)
        End Function
        
        Public Sub SettariffcodeNull()
            Me(Me.tableParty_TariffHdr.tariffcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstariffdescNull() As Boolean
            Return Me.IsNull(Me.tableParty_TariffHdr.tariffdescColumn)
        End Function
        
        Public Sub SettariffdescNull()
            Me(Me.tableParty_TariffHdr.tariffdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrateNull() As Boolean
            Return Me.IsNull(Me.tableParty_TariffHdr.rateColumn)
        End Function
        
        Public Sub SetrateNull()
            Me(Me.tableParty_TariffHdr.rateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxcodeNull() As Boolean
            Return Me.IsNull(Me.tableParty_TariffHdr.taxcodeColumn)
        End Function
        
        Public Sub SettaxcodeNull()
            Me(Me.tableParty_TariffHdr.taxcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tableParty_TariffHdr.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tableParty_TariffHdr.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduserNull() As Boolean
            Return Me.IsNull(Me.tableParty_TariffHdr.adduserColumn)
        End Function
        
        Public Sub SetadduserNull()
            Me(Me.tableParty_TariffHdr.adduserColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddateNull() As Boolean
            Return Me.IsNull(Me.tableParty_TariffHdr.adddateColumn)
        End Function
        
        Public Sub SetadddateNull()
            Me(Me.tableParty_TariffHdr.adddateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tableParty_TariffHdr.SBFCHARGEColumn)
        End Function
        
        Public Sub SetSBFCHARGENull()
            Me(Me.tableParty_TariffHdr.SBFCHARGEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class Party_TariffHdrRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As Party_TariffHdrRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As Party_TariffHdrRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As Party_TariffHdrRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTTYPE As DataColumn
        
        Private columnRITEMCODE As DataColumn
        
        Private columnRITEMDESC As DataColumn
        
        Private columnRQTY As DataColumn
        
        Private columnRRATE As DataColumn
        
        Private columnPRAMOUNT As DataColumn
        
        Private columnPRTAXPERC As DataColumn
        
        Private columnPRTAXAMOUNT As DataColumn
        
        Private columnPRTOTALAMOUNT As DataColumn
        
        Private columnISBFCHARGE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Friend Sub New()
            MyBase.New("PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TTYPEColumn As DataColumn
            Get
                Return Me.columnTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property RITEMCODEColumn As DataColumn
            Get
                Return Me.columnRITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property RITEMDESCColumn As DataColumn
            Get
                Return Me.columnRITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property RQTYColumn As DataColumn
            Get
                Return Me.columnRQTY
            End Get
        End Property
        
        Friend ReadOnly Property RRATEColumn As DataColumn
            Get
                Return Me.columnRRATE
            End Get
        End Property
        
        Friend ReadOnly Property PRAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property PRTAXPERCColumn As DataColumn
            Get
                Return Me.columnPRTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property PRTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property PRTOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ISBFCHARGEColumn As DataColumn
            Get
                Return Me.columnISBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow
            Get
                Return CType(Me.Rows(index),PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow)
            End Get
        End Property
        
        Public Event PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChanged As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChangeEventHandler
        
        Public Event PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChanging As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChangeEventHandler
        
        Public Event PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowDeleted As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChangeEventHandler
        
        Public Event PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowDeleting As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChangeEventHandler
        
        Public Overloads Sub AddPRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow(ByVal row As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow(ByVal TTYPE As String, ByVal RITEMCODE As String, ByVal RITEMDESC As String, ByVal RQTY As Decimal, ByVal RRATE As Decimal, ByVal PRAMOUNT As Decimal, ByVal PRTAXPERC As Decimal, ByVal PRTAXAMOUNT As Decimal, ByVal PRTOTALAMOUNT As Decimal, ByVal ISBFCHARGE As String, ByVal BOOKINGNO As Decimal) As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow
            Dim rowPRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow = CType(Me.NewRow,PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow)
            rowPRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow.ItemArray = New Object() {TTYPE, RITEMCODE, RITEMDESC, RQTY, RRATE, PRAMOUNT, PRTAXPERC, PRTAXAMOUNT, PRTOTALAMOUNT, ISBFCHARGE, BOOKINGNO}
            Me.Rows.Add(rowPRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow)
            Return rowPRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSDataTable = CType(MyBase.Clone,PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTTYPE = Me.Columns("TTYPE")
            Me.columnRITEMCODE = Me.Columns("RITEMCODE")
            Me.columnRITEMDESC = Me.Columns("RITEMDESC")
            Me.columnRQTY = Me.Columns("RQTY")
            Me.columnRRATE = Me.Columns("RRATE")
            Me.columnPRAMOUNT = Me.Columns("PRAMOUNT")
            Me.columnPRTAXPERC = Me.Columns("PRTAXPERC")
            Me.columnPRTAXAMOUNT = Me.Columns("PRTAXAMOUNT")
            Me.columnPRTOTALAMOUNT = Me.Columns("PRTOTALAMOUNT")
            Me.columnISBFCHARGE = Me.Columns("ISBFCHARGE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
        End Sub
        
        Private Sub InitClass()
            Me.columnTTYPE = New DataColumn("TTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTYPE)
            Me.columnRITEMCODE = New DataColumn("RITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRITEMCODE)
            Me.columnRITEMDESC = New DataColumn("RITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRITEMDESC)
            Me.columnRQTY = New DataColumn("RQTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRQTY)
            Me.columnRRATE = New DataColumn("RRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRRATE)
            Me.columnPRAMOUNT = New DataColumn("PRAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRAMOUNT)
            Me.columnPRTAXPERC = New DataColumn("PRTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTAXPERC)
            Me.columnPRTAXAMOUNT = New DataColumn("PRTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTAXAMOUNT)
            Me.columnPRTOTALAMOUNT = New DataColumn("PRTOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTOTALAMOUNT)
            Me.columnISBFCHARGE = New DataColumn("ISBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISBFCHARGE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnTTYPE.AllowDBNull = false
            Me.columnRITEMCODE.AllowDBNull = false
            Me.columnRITEMDESC.AllowDBNull = false
            Me.columnRQTY.AllowDBNull = false
            Me.columnRRATE.AllowDBNull = false
            Me.columnPRAMOUNT.AllowDBNull = false
            Me.columnPRTAXPERC.AllowDBNull = false
            Me.columnPRTAXAMOUNT.AllowDBNull = false
            Me.columnPRTOTALAMOUNT.AllowDBNull = false
            Me.columnISBFCHARGE.AllowDBNull = false
            Me.columnBOOKINGNO.AllowDBNull = false
        End Sub
        
        Public Function NewPRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow() As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow
            Return CType(Me.NewRow,PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChangedEvent) Is Nothing) Then
                RaiseEvent PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChanged(Me, New PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChangeEvent(CType(e.Row,PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChangingEvent) Is Nothing) Then
                RaiseEvent PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChanging(Me, New PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChangeEvent(CType(e.Row,PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowDeleted(Me, New PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChangeEvent(CType(e.Row,PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowDeleting(Me, New PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChangeEvent(CType(e.Row,PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow(ByVal row As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow
        Inherits DataRow
        
        Private tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS = CType(Me.Table,PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSDataTable)
        End Sub
        
        Public Property TTYPE As String
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.TTYPEColumn),String)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.TTYPEColumn) = value
            End Set
        End Property
        
        Public Property RITEMCODE As String
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.RITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.RITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property RITEMDESC As String
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.RITEMDESCColumn),String)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.RITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property RQTY As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.RQTYColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.RQTYColumn) = value
            End Set
        End Property
        
        Public Property RRATE As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.RRATEColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.RRATEColumn) = value
            End Set
        End Property
        
        Public Property PRAMOUNT As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.PRAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.PRAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property PRTAXPERC As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.PRTAXPERCColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.PRTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property PRTAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.PRTAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.PRTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property PRTOTALAMOUNT As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.PRTOTALAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.PRTOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ISBFCHARGE As String
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.ISBFCHARGEColumn),String)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.ISBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMS.BOOKINGNOColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PRATY_VIEW_PARTYADDTIONALCHARGEABLEITEMSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRATY_VIEW_PARTYHALLDETAILSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnHallcode As DataColumn
        
        Private columnHallDesc As DataColumn
        
        Private columnPDesc As DataColumn
        
        Private columnfromtime As DataColumn
        
        Private columntotime As DataColumn
        
        Private columnHallamount As DataColumn
        
        Private columnHALLTAXAMOUNT As DataColumn
        
        Private columnHALLTAXPERC As DataColumn
        
        Private columnHALLNETAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("PRATY_VIEW_PARTYHALLDETAILS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property HallcodeColumn As DataColumn
            Get
                Return Me.columnHallcode
            End Get
        End Property
        
        Friend ReadOnly Property HallDescColumn As DataColumn
            Get
                Return Me.columnHallDesc
            End Get
        End Property
        
        Friend ReadOnly Property PDescColumn As DataColumn
            Get
                Return Me.columnPDesc
            End Get
        End Property
        
        Friend ReadOnly Property fromtimeColumn As DataColumn
            Get
                Return Me.columnfromtime
            End Get
        End Property
        
        Friend ReadOnly Property totimeColumn As DataColumn
            Get
                Return Me.columntotime
            End Get
        End Property
        
        Friend ReadOnly Property HallamountColumn As DataColumn
            Get
                Return Me.columnHallamount
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXPERCColumn As DataColumn
            Get
                Return Me.columnHALLTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property HALLNETAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLNETAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRATY_VIEW_PARTYHALLDETAILSRow
            Get
                Return CType(Me.Rows(index),PRATY_VIEW_PARTYHALLDETAILSRow)
            End Get
        End Property
        
        Public Event PRATY_VIEW_PARTYHALLDETAILSRowChanged As PRATY_VIEW_PARTYHALLDETAILSRowChangeEventHandler
        
        Public Event PRATY_VIEW_PARTYHALLDETAILSRowChanging As PRATY_VIEW_PARTYHALLDETAILSRowChangeEventHandler
        
        Public Event PRATY_VIEW_PARTYHALLDETAILSRowDeleted As PRATY_VIEW_PARTYHALLDETAILSRowChangeEventHandler
        
        Public Event PRATY_VIEW_PARTYHALLDETAILSRowDeleting As PRATY_VIEW_PARTYHALLDETAILSRowChangeEventHandler
        
        Public Overloads Sub AddPRATY_VIEW_PARTYHALLDETAILSRow(ByVal row As PRATY_VIEW_PARTYHALLDETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPRATY_VIEW_PARTYHALLDETAILSRow(ByVal Hallcode As String, ByVal HallDesc As String, ByVal PDesc As String, ByVal fromtime As Decimal, ByVal totime As Decimal, ByVal Hallamount As Decimal, ByVal HALLTAXAMOUNT As Decimal, ByVal HALLTAXPERC As Decimal, ByVal HALLNETAMOUNT As Decimal) As PRATY_VIEW_PARTYHALLDETAILSRow
            Dim rowPRATY_VIEW_PARTYHALLDETAILSRow As PRATY_VIEW_PARTYHALLDETAILSRow = CType(Me.NewRow,PRATY_VIEW_PARTYHALLDETAILSRow)
            rowPRATY_VIEW_PARTYHALLDETAILSRow.ItemArray = New Object() {Hallcode, HallDesc, PDesc, fromtime, totime, Hallamount, HALLTAXAMOUNT, HALLTAXPERC, HALLNETAMOUNT}
            Me.Rows.Add(rowPRATY_VIEW_PARTYHALLDETAILSRow)
            Return rowPRATY_VIEW_PARTYHALLDETAILSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PRATY_VIEW_PARTYHALLDETAILSDataTable = CType(MyBase.Clone,PRATY_VIEW_PARTYHALLDETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PRATY_VIEW_PARTYHALLDETAILSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnHallcode = Me.Columns("Hallcode")
            Me.columnHallDesc = Me.Columns("HallDesc")
            Me.columnPDesc = Me.Columns("PDesc")
            Me.columnfromtime = Me.Columns("fromtime")
            Me.columntotime = Me.Columns("totime")
            Me.columnHallamount = Me.Columns("Hallamount")
            Me.columnHALLTAXAMOUNT = Me.Columns("HALLTAXAMOUNT")
            Me.columnHALLTAXPERC = Me.Columns("HALLTAXPERC")
            Me.columnHALLNETAMOUNT = Me.Columns("HALLNETAMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnHallcode = New DataColumn("Hallcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHallcode)
            Me.columnHallDesc = New DataColumn("HallDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHallDesc)
            Me.columnPDesc = New DataColumn("PDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPDesc)
            Me.columnfromtime = New DataColumn("fromtime", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfromtime)
            Me.columntotime = New DataColumn("totime", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotime)
            Me.columnHallamount = New DataColumn("Hallamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHallamount)
            Me.columnHALLTAXAMOUNT = New DataColumn("HALLTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXAMOUNT)
            Me.columnHALLTAXPERC = New DataColumn("HALLTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXPERC)
            Me.columnHALLNETAMOUNT = New DataColumn("HALLNETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLNETAMOUNT)
            Me.columnHallcode.AllowDBNull = false
            Me.columnHallDesc.AllowDBNull = false
            Me.columnPDesc.AllowDBNull = false
            Me.columnfromtime.AllowDBNull = false
            Me.columntotime.AllowDBNull = false
            Me.columnHallamount.AllowDBNull = false
            Me.columnHALLTAXAMOUNT.AllowDBNull = false
            Me.columnHALLTAXPERC.AllowDBNull = false
            Me.columnHALLNETAMOUNT.AllowDBNull = false
        End Sub
        
        Public Function NewPRATY_VIEW_PARTYHALLDETAILSRow() As PRATY_VIEW_PARTYHALLDETAILSRow
            Return CType(Me.NewRow,PRATY_VIEW_PARTYHALLDETAILSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PRATY_VIEW_PARTYHALLDETAILSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PRATY_VIEW_PARTYHALLDETAILSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRATY_VIEW_PARTYHALLDETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent PRATY_VIEW_PARTYHALLDETAILSRowChanged(Me, New PRATY_VIEW_PARTYHALLDETAILSRowChangeEvent(CType(e.Row,PRATY_VIEW_PARTYHALLDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRATY_VIEW_PARTYHALLDETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent PRATY_VIEW_PARTYHALLDETAILSRowChanging(Me, New PRATY_VIEW_PARTYHALLDETAILSRowChangeEvent(CType(e.Row,PRATY_VIEW_PARTYHALLDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRATY_VIEW_PARTYHALLDETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRATY_VIEW_PARTYHALLDETAILSRowDeleted(Me, New PRATY_VIEW_PARTYHALLDETAILSRowChangeEvent(CType(e.Row,PRATY_VIEW_PARTYHALLDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRATY_VIEW_PARTYHALLDETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRATY_VIEW_PARTYHALLDETAILSRowDeleting(Me, New PRATY_VIEW_PARTYHALLDETAILSRowChangeEvent(CType(e.Row,PRATY_VIEW_PARTYHALLDETAILSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePRATY_VIEW_PARTYHALLDETAILSRow(ByVal row As PRATY_VIEW_PARTYHALLDETAILSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRATY_VIEW_PARTYHALLDETAILSRow
        Inherits DataRow
        
        Private tablePRATY_VIEW_PARTYHALLDETAILS As PRATY_VIEW_PARTYHALLDETAILSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRATY_VIEW_PARTYHALLDETAILS = CType(Me.Table,PRATY_VIEW_PARTYHALLDETAILSDataTable)
        End Sub
        
        Public Property Hallcode As String
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.HallcodeColumn),String)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.HallcodeColumn) = value
            End Set
        End Property
        
        Public Property HallDesc As String
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.HallDescColumn),String)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.HallDescColumn) = value
            End Set
        End Property
        
        Public Property PDesc As String
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.PDescColumn),String)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.PDescColumn) = value
            End Set
        End Property
        
        Public Property fromtime As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.fromtimeColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.fromtimeColumn) = value
            End Set
        End Property
        
        Public Property totime As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.totimeColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.totimeColumn) = value
            End Set
        End Property
        
        Public Property Hallamount As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.HallamountColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.HallamountColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.HALLTAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.HALLTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXPERC As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.HALLTAXPERCColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.HALLTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property HALLNETAMOUNT As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.HALLNETAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS.HALLNETAMOUNTColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRATY_VIEW_PARTYHALLDETAILSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PRATY_VIEW_PARTYHALLDETAILSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PRATY_VIEW_PARTYHALLDETAILSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PRATY_VIEW_PARTYHALLDETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRATY_VIEW_PARTYLIQURITEMSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTTYPE As DataColumn
        
        Private columnRITEMCODE As DataColumn
        
        Private columnRITEMDESC As DataColumn
        
        Private columnRQTY As DataColumn
        
        Private columnRRATE As DataColumn
        
        Private columnPRAMOUNT As DataColumn
        
        Private columnPRTAXPERC As DataColumn
        
        Private columnPRTAXAMOUNT As DataColumn
        
        Private columnPRTOTALAMOUNT As DataColumn
        
        Private columnISBFCHARGE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Friend Sub New()
            MyBase.New("PRATY_VIEW_PARTYLIQURITEMS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property TTYPEColumn As DataColumn
            Get
                Return Me.columnTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property RITEMCODEColumn As DataColumn
            Get
                Return Me.columnRITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property RITEMDESCColumn As DataColumn
            Get
                Return Me.columnRITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property RQTYColumn As DataColumn
            Get
                Return Me.columnRQTY
            End Get
        End Property
        
        Friend ReadOnly Property RRATEColumn As DataColumn
            Get
                Return Me.columnRRATE
            End Get
        End Property
        
        Friend ReadOnly Property PRAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property PRTAXPERCColumn As DataColumn
            Get
                Return Me.columnPRTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property PRTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property PRTOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ISBFCHARGEColumn As DataColumn
            Get
                Return Me.columnISBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRATY_VIEW_PARTYLIQURITEMSRow
            Get
                Return CType(Me.Rows(index),PRATY_VIEW_PARTYLIQURITEMSRow)
            End Get
        End Property
        
        Public Event PRATY_VIEW_PARTYLIQURITEMSRowChanged As PRATY_VIEW_PARTYLIQURITEMSRowChangeEventHandler
        
        Public Event PRATY_VIEW_PARTYLIQURITEMSRowChanging As PRATY_VIEW_PARTYLIQURITEMSRowChangeEventHandler
        
        Public Event PRATY_VIEW_PARTYLIQURITEMSRowDeleted As PRATY_VIEW_PARTYLIQURITEMSRowChangeEventHandler
        
        Public Event PRATY_VIEW_PARTYLIQURITEMSRowDeleting As PRATY_VIEW_PARTYLIQURITEMSRowChangeEventHandler
        
        Public Overloads Sub AddPRATY_VIEW_PARTYLIQURITEMSRow(ByVal row As PRATY_VIEW_PARTYLIQURITEMSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPRATY_VIEW_PARTYLIQURITEMSRow(ByVal TTYPE As String, ByVal RITEMCODE As String, ByVal RITEMDESC As String, ByVal RQTY As Decimal, ByVal RRATE As Decimal, ByVal PRAMOUNT As Decimal, ByVal PRTAXPERC As Decimal, ByVal PRTAXAMOUNT As Decimal, ByVal PRTOTALAMOUNT As Decimal, ByVal ISBFCHARGE As String, ByVal BOOKINGNO As Decimal) As PRATY_VIEW_PARTYLIQURITEMSRow
            Dim rowPRATY_VIEW_PARTYLIQURITEMSRow As PRATY_VIEW_PARTYLIQURITEMSRow = CType(Me.NewRow,PRATY_VIEW_PARTYLIQURITEMSRow)
            rowPRATY_VIEW_PARTYLIQURITEMSRow.ItemArray = New Object() {TTYPE, RITEMCODE, RITEMDESC, RQTY, RRATE, PRAMOUNT, PRTAXPERC, PRTAXAMOUNT, PRTOTALAMOUNT, ISBFCHARGE, BOOKINGNO}
            Me.Rows.Add(rowPRATY_VIEW_PARTYLIQURITEMSRow)
            Return rowPRATY_VIEW_PARTYLIQURITEMSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PRATY_VIEW_PARTYLIQURITEMSDataTable = CType(MyBase.Clone,PRATY_VIEW_PARTYLIQURITEMSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PRATY_VIEW_PARTYLIQURITEMSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnTTYPE = Me.Columns("TTYPE")
            Me.columnRITEMCODE = Me.Columns("RITEMCODE")
            Me.columnRITEMDESC = Me.Columns("RITEMDESC")
            Me.columnRQTY = Me.Columns("RQTY")
            Me.columnRRATE = Me.Columns("RRATE")
            Me.columnPRAMOUNT = Me.Columns("PRAMOUNT")
            Me.columnPRTAXPERC = Me.Columns("PRTAXPERC")
            Me.columnPRTAXAMOUNT = Me.Columns("PRTAXAMOUNT")
            Me.columnPRTOTALAMOUNT = Me.Columns("PRTOTALAMOUNT")
            Me.columnISBFCHARGE = Me.Columns("ISBFCHARGE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
        End Sub
        
        Private Sub InitClass()
            Me.columnTTYPE = New DataColumn("TTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTYPE)
            Me.columnRITEMCODE = New DataColumn("RITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRITEMCODE)
            Me.columnRITEMDESC = New DataColumn("RITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRITEMDESC)
            Me.columnRQTY = New DataColumn("RQTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRQTY)
            Me.columnRRATE = New DataColumn("RRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRRATE)
            Me.columnPRAMOUNT = New DataColumn("PRAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRAMOUNT)
            Me.columnPRTAXPERC = New DataColumn("PRTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTAXPERC)
            Me.columnPRTAXAMOUNT = New DataColumn("PRTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTAXAMOUNT)
            Me.columnPRTOTALAMOUNT = New DataColumn("PRTOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTOTALAMOUNT)
            Me.columnISBFCHARGE = New DataColumn("ISBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISBFCHARGE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnTTYPE.AllowDBNull = false
            Me.columnRITEMCODE.AllowDBNull = false
            Me.columnRITEMDESC.AllowDBNull = false
            Me.columnRQTY.AllowDBNull = false
            Me.columnRRATE.AllowDBNull = false
            Me.columnPRAMOUNT.AllowDBNull = false
            Me.columnPRTAXPERC.AllowDBNull = false
            Me.columnPRTAXAMOUNT.AllowDBNull = false
            Me.columnPRTOTALAMOUNT.AllowDBNull = false
            Me.columnISBFCHARGE.AllowDBNull = false
            Me.columnBOOKINGNO.AllowDBNull = false
        End Sub
        
        Public Function NewPRATY_VIEW_PARTYLIQURITEMSRow() As PRATY_VIEW_PARTYLIQURITEMSRow
            Return CType(Me.NewRow,PRATY_VIEW_PARTYLIQURITEMSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PRATY_VIEW_PARTYLIQURITEMSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PRATY_VIEW_PARTYLIQURITEMSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRATY_VIEW_PARTYLIQURITEMSRowChangedEvent) Is Nothing) Then
                RaiseEvent PRATY_VIEW_PARTYLIQURITEMSRowChanged(Me, New PRATY_VIEW_PARTYLIQURITEMSRowChangeEvent(CType(e.Row,PRATY_VIEW_PARTYLIQURITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRATY_VIEW_PARTYLIQURITEMSRowChangingEvent) Is Nothing) Then
                RaiseEvent PRATY_VIEW_PARTYLIQURITEMSRowChanging(Me, New PRATY_VIEW_PARTYLIQURITEMSRowChangeEvent(CType(e.Row,PRATY_VIEW_PARTYLIQURITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRATY_VIEW_PARTYLIQURITEMSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRATY_VIEW_PARTYLIQURITEMSRowDeleted(Me, New PRATY_VIEW_PARTYLIQURITEMSRowChangeEvent(CType(e.Row,PRATY_VIEW_PARTYLIQURITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRATY_VIEW_PARTYLIQURITEMSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRATY_VIEW_PARTYLIQURITEMSRowDeleting(Me, New PRATY_VIEW_PARTYLIQURITEMSRowChangeEvent(CType(e.Row,PRATY_VIEW_PARTYLIQURITEMSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePRATY_VIEW_PARTYLIQURITEMSRow(ByVal row As PRATY_VIEW_PARTYLIQURITEMSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRATY_VIEW_PARTYLIQURITEMSRow
        Inherits DataRow
        
        Private tablePRATY_VIEW_PARTYLIQURITEMS As PRATY_VIEW_PARTYLIQURITEMSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRATY_VIEW_PARTYLIQURITEMS = CType(Me.Table,PRATY_VIEW_PARTYLIQURITEMSDataTable)
        End Sub
        
        Public Property TTYPE As String
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.TTYPEColumn),String)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.TTYPEColumn) = value
            End Set
        End Property
        
        Public Property RITEMCODE As String
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.RITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.RITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property RITEMDESC As String
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.RITEMDESCColumn),String)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.RITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property RQTY As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.RQTYColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.RQTYColumn) = value
            End Set
        End Property
        
        Public Property RRATE As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.RRATEColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.RRATEColumn) = value
            End Set
        End Property
        
        Public Property PRAMOUNT As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.PRAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.PRAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property PRTAXPERC As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.PRTAXPERCColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.PRTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property PRTAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.PRTAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.PRTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property PRTOTALAMOUNT As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.PRTOTALAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.PRTOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ISBFCHARGE As String
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.ISBFCHARGEColumn),String)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.ISBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYLIQURITEMS.BOOKINGNOColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRATY_VIEW_PARTYLIQURITEMSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PRATY_VIEW_PARTYLIQURITEMSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PRATY_VIEW_PARTYLIQURITEMSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PRATY_VIEW_PARTYLIQURITEMSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRATY_VIEW_PARTYHALLDETAILS1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnHallcode As DataColumn
        
        Private columnHallDesc As DataColumn
        
        Private columnPDesc As DataColumn
        
        Private columnfromtime As DataColumn
        
        Private columntotime As DataColumn
        
        Private columnHallamount As DataColumn
        
        Private columnHALLTAXAMOUNT As DataColumn
        
        Private columnHALLTAXPERC As DataColumn
        
        Private columnHALLNETAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("PRATY_VIEW_PARTYHALLDETAILS1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property HallcodeColumn As DataColumn
            Get
                Return Me.columnHallcode
            End Get
        End Property
        
        Friend ReadOnly Property HallDescColumn As DataColumn
            Get
                Return Me.columnHallDesc
            End Get
        End Property
        
        Friend ReadOnly Property PDescColumn As DataColumn
            Get
                Return Me.columnPDesc
            End Get
        End Property
        
        Friend ReadOnly Property fromtimeColumn As DataColumn
            Get
                Return Me.columnfromtime
            End Get
        End Property
        
        Friend ReadOnly Property totimeColumn As DataColumn
            Get
                Return Me.columntotime
            End Get
        End Property
        
        Friend ReadOnly Property HallamountColumn As DataColumn
            Get
                Return Me.columnHallamount
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXPERCColumn As DataColumn
            Get
                Return Me.columnHALLTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property HALLNETAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLNETAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PRATY_VIEW_PARTYHALLDETAILS1Row
            Get
                Return CType(Me.Rows(index),PRATY_VIEW_PARTYHALLDETAILS1Row)
            End Get
        End Property
        
        Public Event PRATY_VIEW_PARTYHALLDETAILS1RowChanged As PRATY_VIEW_PARTYHALLDETAILS1RowChangeEventHandler
        
        Public Event PRATY_VIEW_PARTYHALLDETAILS1RowChanging As PRATY_VIEW_PARTYHALLDETAILS1RowChangeEventHandler
        
        Public Event PRATY_VIEW_PARTYHALLDETAILS1RowDeleted As PRATY_VIEW_PARTYHALLDETAILS1RowChangeEventHandler
        
        Public Event PRATY_VIEW_PARTYHALLDETAILS1RowDeleting As PRATY_VIEW_PARTYHALLDETAILS1RowChangeEventHandler
        
        Public Overloads Sub AddPRATY_VIEW_PARTYHALLDETAILS1Row(ByVal row As PRATY_VIEW_PARTYHALLDETAILS1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPRATY_VIEW_PARTYHALLDETAILS1Row(ByVal Hallcode As String, ByVal HallDesc As String, ByVal PDesc As String, ByVal fromtime As Decimal, ByVal totime As Decimal, ByVal Hallamount As Decimal, ByVal HALLTAXAMOUNT As Decimal, ByVal HALLTAXPERC As Decimal, ByVal HALLNETAMOUNT As Decimal) As PRATY_VIEW_PARTYHALLDETAILS1Row
            Dim rowPRATY_VIEW_PARTYHALLDETAILS1Row As PRATY_VIEW_PARTYHALLDETAILS1Row = CType(Me.NewRow,PRATY_VIEW_PARTYHALLDETAILS1Row)
            rowPRATY_VIEW_PARTYHALLDETAILS1Row.ItemArray = New Object() {Hallcode, HallDesc, PDesc, fromtime, totime, Hallamount, HALLTAXAMOUNT, HALLTAXPERC, HALLNETAMOUNT}
            Me.Rows.Add(rowPRATY_VIEW_PARTYHALLDETAILS1Row)
            Return rowPRATY_VIEW_PARTYHALLDETAILS1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PRATY_VIEW_PARTYHALLDETAILS1DataTable = CType(MyBase.Clone,PRATY_VIEW_PARTYHALLDETAILS1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PRATY_VIEW_PARTYHALLDETAILS1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnHallcode = Me.Columns("Hallcode")
            Me.columnHallDesc = Me.Columns("HallDesc")
            Me.columnPDesc = Me.Columns("PDesc")
            Me.columnfromtime = Me.Columns("fromtime")
            Me.columntotime = Me.Columns("totime")
            Me.columnHallamount = Me.Columns("Hallamount")
            Me.columnHALLTAXAMOUNT = Me.Columns("HALLTAXAMOUNT")
            Me.columnHALLTAXPERC = Me.Columns("HALLTAXPERC")
            Me.columnHALLNETAMOUNT = Me.Columns("HALLNETAMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnHallcode = New DataColumn("Hallcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHallcode)
            Me.columnHallDesc = New DataColumn("HallDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHallDesc)
            Me.columnPDesc = New DataColumn("PDesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPDesc)
            Me.columnfromtime = New DataColumn("fromtime", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfromtime)
            Me.columntotime = New DataColumn("totime", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotime)
            Me.columnHallamount = New DataColumn("Hallamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHallamount)
            Me.columnHALLTAXAMOUNT = New DataColumn("HALLTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXAMOUNT)
            Me.columnHALLTAXPERC = New DataColumn("HALLTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXPERC)
            Me.columnHALLNETAMOUNT = New DataColumn("HALLNETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLNETAMOUNT)
            Me.columnHallcode.AllowDBNull = false
            Me.columnHallDesc.AllowDBNull = false
            Me.columnPDesc.AllowDBNull = false
            Me.columnfromtime.AllowDBNull = false
            Me.columntotime.AllowDBNull = false
            Me.columnHallamount.AllowDBNull = false
            Me.columnHALLTAXAMOUNT.AllowDBNull = false
            Me.columnHALLTAXPERC.AllowDBNull = false
            Me.columnHALLNETAMOUNT.AllowDBNull = false
        End Sub
        
        Public Function NewPRATY_VIEW_PARTYHALLDETAILS1Row() As PRATY_VIEW_PARTYHALLDETAILS1Row
            Return CType(Me.NewRow,PRATY_VIEW_PARTYHALLDETAILS1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PRATY_VIEW_PARTYHALLDETAILS1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PRATY_VIEW_PARTYHALLDETAILS1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRATY_VIEW_PARTYHALLDETAILS1RowChangedEvent) Is Nothing) Then
                RaiseEvent PRATY_VIEW_PARTYHALLDETAILS1RowChanged(Me, New PRATY_VIEW_PARTYHALLDETAILS1RowChangeEvent(CType(e.Row,PRATY_VIEW_PARTYHALLDETAILS1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRATY_VIEW_PARTYHALLDETAILS1RowChangingEvent) Is Nothing) Then
                RaiseEvent PRATY_VIEW_PARTYHALLDETAILS1RowChanging(Me, New PRATY_VIEW_PARTYHALLDETAILS1RowChangeEvent(CType(e.Row,PRATY_VIEW_PARTYHALLDETAILS1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRATY_VIEW_PARTYHALLDETAILS1RowDeletedEvent) Is Nothing) Then
                RaiseEvent PRATY_VIEW_PARTYHALLDETAILS1RowDeleted(Me, New PRATY_VIEW_PARTYHALLDETAILS1RowChangeEvent(CType(e.Row,PRATY_VIEW_PARTYHALLDETAILS1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRATY_VIEW_PARTYHALLDETAILS1RowDeletingEvent) Is Nothing) Then
                RaiseEvent PRATY_VIEW_PARTYHALLDETAILS1RowDeleting(Me, New PRATY_VIEW_PARTYHALLDETAILS1RowChangeEvent(CType(e.Row,PRATY_VIEW_PARTYHALLDETAILS1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePRATY_VIEW_PARTYHALLDETAILS1Row(ByVal row As PRATY_VIEW_PARTYHALLDETAILS1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRATY_VIEW_PARTYHALLDETAILS1Row
        Inherits DataRow
        
        Private tablePRATY_VIEW_PARTYHALLDETAILS1 As PRATY_VIEW_PARTYHALLDETAILS1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePRATY_VIEW_PARTYHALLDETAILS1 = CType(Me.Table,PRATY_VIEW_PARTYHALLDETAILS1DataTable)
        End Sub
        
        Public Property Hallcode As String
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.HallcodeColumn),String)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.HallcodeColumn) = value
            End Set
        End Property
        
        Public Property HallDesc As String
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.HallDescColumn),String)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.HallDescColumn) = value
            End Set
        End Property
        
        Public Property PDesc As String
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.PDescColumn),String)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.PDescColumn) = value
            End Set
        End Property
        
        Public Property fromtime As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.fromtimeColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.fromtimeColumn) = value
            End Set
        End Property
        
        Public Property totime As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.totimeColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.totimeColumn) = value
            End Set
        End Property
        
        Public Property Hallamount As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.HallamountColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.HallamountColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXAMOUNT As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.HALLTAXAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.HALLTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXPERC As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.HALLTAXPERCColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.HALLTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property HALLNETAMOUNT As Decimal
            Get
                Return CType(Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.HALLNETAMOUNTColumn),Decimal)
            End Get
            Set
                Me(Me.tablePRATY_VIEW_PARTYHALLDETAILS1.HALLNETAMOUNTColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PRATY_VIEW_PARTYHALLDETAILS1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PRATY_VIEW_PARTYHALLDETAILS1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PRATY_VIEW_PARTYHALLDETAILS1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PRATY_VIEW_PARTYHALLDETAILS1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BAR_CONSUMPTIONDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLOCCODE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnREMARKS As DataColumn
        
        Private columnPOSCODE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_BAR_CONSUMPTION")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property REMARKSColumn As DataColumn
            Get
                Return Me.columnREMARKS
            End Get
        End Property
        
        Friend ReadOnly Property POSCODEColumn As DataColumn
            Get
                Return Me.columnPOSCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_BAR_CONSUMPTIONRow
            Get
                Return CType(Me.Rows(index),PARTY_BAR_CONSUMPTIONRow)
            End Get
        End Property
        
        Public Event PARTY_BAR_CONSUMPTIONRowChanged As PARTY_BAR_CONSUMPTIONRowChangeEventHandler
        
        Public Event PARTY_BAR_CONSUMPTIONRowChanging As PARTY_BAR_CONSUMPTIONRowChangeEventHandler
        
        Public Event PARTY_BAR_CONSUMPTIONRowDeleted As PARTY_BAR_CONSUMPTIONRowChangeEventHandler
        
        Public Event PARTY_BAR_CONSUMPTIONRowDeleting As PARTY_BAR_CONSUMPTIONRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_BAR_CONSUMPTIONRow(ByVal row As PARTY_BAR_CONSUMPTIONRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_BAR_CONSUMPTIONRow( _
                    ByVal LOCCODE As String,  _
                    ByVal BOOKINGNO As String,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal REMARKS As String,  _
                    ByVal POSCODE As String,  _
                    ByVal ITEMCODE As String,  _
                    ByVal ITEMDESC As String,  _
                    ByVal UOM As String,  _
                    ByVal RATE As Decimal,  _
                    ByVal QTY As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal ADDUSERID As String,  _
                    ByVal ADDDATETIME As Date) As PARTY_BAR_CONSUMPTIONRow
            Dim rowPARTY_BAR_CONSUMPTIONRow As PARTY_BAR_CONSUMPTIONRow = CType(Me.NewRow,PARTY_BAR_CONSUMPTIONRow)
            rowPARTY_BAR_CONSUMPTIONRow.ItemArray = New Object() {LOCCODE, BOOKINGNO, PARTYDATE, MCODE, MNAME, REMARKS, POSCODE, ITEMCODE, ITEMDESC, UOM, RATE, QTY, AMOUNT, TOTALAMOUNT, FREEZE, ADDUSERID, ADDDATETIME}
            Me.Rows.Add(rowPARTY_BAR_CONSUMPTIONRow)
            Return rowPARTY_BAR_CONSUMPTIONRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_BAR_CONSUMPTIONDataTable = CType(MyBase.Clone,PARTY_BAR_CONSUMPTIONDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_BAR_CONSUMPTIONDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnREMARKS = Me.Columns("REMARKS")
            Me.columnPOSCODE = Me.Columns("POSCODE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
        End Sub
        
        Private Sub InitClass()
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnREMARKS = New DataColumn("REMARKS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnREMARKS)
            Me.columnPOSCODE = New DataColumn("POSCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPOSCODE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
        End Sub
        
        Public Function NewPARTY_BAR_CONSUMPTIONRow() As PARTY_BAR_CONSUMPTIONRow
            Return CType(Me.NewRow,PARTY_BAR_CONSUMPTIONRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_BAR_CONSUMPTIONRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_BAR_CONSUMPTIONRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_BAR_CONSUMPTIONRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_BAR_CONSUMPTIONRowChanged(Me, New PARTY_BAR_CONSUMPTIONRowChangeEvent(CType(e.Row,PARTY_BAR_CONSUMPTIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_BAR_CONSUMPTIONRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_BAR_CONSUMPTIONRowChanging(Me, New PARTY_BAR_CONSUMPTIONRowChangeEvent(CType(e.Row,PARTY_BAR_CONSUMPTIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_BAR_CONSUMPTIONRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_BAR_CONSUMPTIONRowDeleted(Me, New PARTY_BAR_CONSUMPTIONRowChangeEvent(CType(e.Row,PARTY_BAR_CONSUMPTIONRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_BAR_CONSUMPTIONRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_BAR_CONSUMPTIONRowDeleting(Me, New PARTY_BAR_CONSUMPTIONRowChangeEvent(CType(e.Row,PARTY_BAR_CONSUMPTIONRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_BAR_CONSUMPTIONRow(ByVal row As PARTY_BAR_CONSUMPTIONRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BAR_CONSUMPTIONRow
        Inherits DataRow
        
        Private tablePARTY_BAR_CONSUMPTION As PARTY_BAR_CONSUMPTIONDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_BAR_CONSUMPTION = CType(Me.Table,PARTY_BAR_CONSUMPTIONDataTable)
        End Sub
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.BOOKINGNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property REMARKS As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.REMARKSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.REMARKSColumn) = value
            End Set
        End Property
        
        Public Property POSCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.POSCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.POSCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.UOMColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.RATEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.QTYColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BAR_CONSUMPTION.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BAR_CONSUMPTION.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsREMARKSNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.REMARKSColumn)
        End Function
        
        Public Sub SetREMARKSNull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.REMARKSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPOSCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.POSCODEColumn)
        End Function
        
        Public Sub SetPOSCODENull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.POSCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BAR_CONSUMPTION.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablePARTY_BAR_CONSUMPTION.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BAR_CONSUMPTIONRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_BAR_CONSUMPTIONRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_BAR_CONSUMPTIONRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_BAR_CONSUMPTIONRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_TAR_VIEW1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnVEGRATE As DataColumn
        
        Private columnNONVEGRATE As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_TAR_VIEW1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property VEGRATEColumn As DataColumn
            Get
                Return Me.columnVEGRATE
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGRATEColumn As DataColumn
            Get
                Return Me.columnNONVEGRATE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_TAR_VIEW1Row
            Get
                Return CType(Me.Rows(index),PARTY_TAR_VIEW1Row)
            End Get
        End Property
        
        Public Event PARTY_TAR_VIEW1RowChanged As PARTY_TAR_VIEW1RowChangeEventHandler
        
        Public Event PARTY_TAR_VIEW1RowChanging As PARTY_TAR_VIEW1RowChangeEventHandler
        
        Public Event PARTY_TAR_VIEW1RowDeleted As PARTY_TAR_VIEW1RowChangeEventHandler
        
        Public Event PARTY_TAR_VIEW1RowDeleting As PARTY_TAR_VIEW1RowChangeEventHandler
        
        Public Overloads Sub AddPARTY_TAR_VIEW1Row(ByVal row As PARTY_TAR_VIEW1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_TAR_VIEW1Row(ByVal BOOKINGNO As Decimal, ByVal BOOKINGTYPE As String, ByVal VEGRATE As Decimal, ByVal NONVEGRATE As Decimal) As PARTY_TAR_VIEW1Row
            Dim rowPARTY_TAR_VIEW1Row As PARTY_TAR_VIEW1Row = CType(Me.NewRow,PARTY_TAR_VIEW1Row)
            rowPARTY_TAR_VIEW1Row.ItemArray = New Object() {BOOKINGNO, BOOKINGTYPE, VEGRATE, NONVEGRATE}
            Me.Rows.Add(rowPARTY_TAR_VIEW1Row)
            Return rowPARTY_TAR_VIEW1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_TAR_VIEW1DataTable = CType(MyBase.Clone,PARTY_TAR_VIEW1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_TAR_VIEW1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnVEGRATE = Me.Columns("VEGRATE")
            Me.columnNONVEGRATE = Me.Columns("NONVEGRATE")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnVEGRATE = New DataColumn("VEGRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEGRATE)
            Me.columnNONVEGRATE = New DataColumn("NONVEGRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEGRATE)
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnBOOKINGTYPE.AllowDBNull = false
            Me.columnVEGRATE.AllowDBNull = false
            Me.columnNONVEGRATE.AllowDBNull = false
        End Sub
        
        Public Function NewPARTY_TAR_VIEW1Row() As PARTY_TAR_VIEW1Row
            Return CType(Me.NewRow,PARTY_TAR_VIEW1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_TAR_VIEW1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_TAR_VIEW1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_TAR_VIEW1RowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_TAR_VIEW1RowChanged(Me, New PARTY_TAR_VIEW1RowChangeEvent(CType(e.Row,PARTY_TAR_VIEW1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_TAR_VIEW1RowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_TAR_VIEW1RowChanging(Me, New PARTY_TAR_VIEW1RowChangeEvent(CType(e.Row,PARTY_TAR_VIEW1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_TAR_VIEW1RowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_TAR_VIEW1RowDeleted(Me, New PARTY_TAR_VIEW1RowChangeEvent(CType(e.Row,PARTY_TAR_VIEW1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_TAR_VIEW1RowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_TAR_VIEW1RowDeleting(Me, New PARTY_TAR_VIEW1RowChangeEvent(CType(e.Row,PARTY_TAR_VIEW1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_TAR_VIEW1Row(ByVal row As PARTY_TAR_VIEW1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_TAR_VIEW1Row
        Inherits DataRow
        
        Private tablePARTY_TAR_VIEW1 As PARTY_TAR_VIEW1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_TAR_VIEW1 = CType(Me.Table,PARTY_TAR_VIEW1DataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePARTY_TAR_VIEW1.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_TAR_VIEW1.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Return CType(Me(Me.tablePARTY_TAR_VIEW1.BOOKINGTYPEColumn),String)
            End Get
            Set
                Me(Me.tablePARTY_TAR_VIEW1.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property VEGRATE As Decimal
            Get
                Return CType(Me(Me.tablePARTY_TAR_VIEW1.VEGRATEColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_TAR_VIEW1.VEGRATEColumn) = value
            End Set
        End Property
        
        Public Property NONVEGRATE As Decimal
            Get
                Return CType(Me(Me.tablePARTY_TAR_VIEW1.NONVEGRATEColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_TAR_VIEW1.NONVEGRATEColumn) = value
            End Set
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_TAR_VIEW1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_TAR_VIEW1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_TAR_VIEW1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_TAR_VIEW1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_HALLBOOKINGDETAILSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLOCCODE As DataColumn
        
        Private columnCATEGORY As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnHALLDESC As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnveg As DataColumn
        
        Private columnnonveg As DataColumn
        
        Private columnPCODE As DataColumn
        
        Private columnHMLOCCODE As DataColumn
        
        Private columnLOCDESC As DataColumn
        
        Private columnPDESC As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columngroupcode As DataColumn
        
        Private columnPADD1 As DataColumn
        
        Private columnPADD2 As DataColumn
        
        Private columnPCITY As DataColumn
        
        Private columnPPHONE1 As DataColumn
        
        Private columnCEMAIL As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnFROMTIME As DataColumn
        
        Private columnTOTIME As DataColumn
        
        Private columnHALLAMOUNT As DataColumn
        
        Private columnBOOKINGSTATUS As DataColumn
        
        Private columnBOOKINGFLAG As DataColumn
        
        Private columnBILLINGFLAG As DataColumn
        
        Private columnCANCELFLAG As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnRECEIPTNO As DataColumn
        
        Private columnRECEIPTDATE As DataColumn
        
        Private columnRAMOUNT As DataColumn
        
        Private columnAMOUNTTYPE As DataColumn
        
        Private columnTTYPE As DataColumn
        
        Private columnPRROWID As DataColumn
        
        Private columnRITEMCODE As DataColumn
        
        Private columnRITEMDESC As DataColumn
        
        Private columnRQTY As DataColumn
        
        Private columnRRATE As DataColumn
        
        Private columnPRAMOUNT As DataColumn
        
        Private columnPRTAXPERC As DataColumn
        
        Private columnPRTAXAMOUNT As DataColumn
        
        Private columnPRTOTALAMOUNT As DataColumn
        
        Private columnTARIFFCODE As DataColumn
        
        Private columnTARIFFDESC As DataColumn
        
        Private columnTRATE As DataColumn
        
        Private columnAROWID As DataColumn
        
        Private columnAITEMCODE As DataColumn
        
        Private columnAITEMDESC As DataColumn
        
        Private columnAQTY As DataColumn
        
        Private columnARATE As DataColumn
        
        Private columnAAMOUNT As DataColumn
        
        Private columnATAXAMOUNT As DataColumn
        
        Private columnATOTALAMOUNT As DataColumn
        
        Private columnHALLTAXAMOUNT As DataColumn
        
        Private columnHALLTAXPERC As DataColumn
        
        Private columnHALLNETAMOUNT As DataColumn
        
        Private columnHOCCUPANCY As DataColumn
        
        Private columnISBFCHARGE As DataColumn
        
        Private columnASBFCHARGE As DataColumn
        
        Private columnTSBFCHARGE As DataColumn
        
        Private columnPRIORITY As DataColumn
        
        Private columnvegrate As DataColumn
        
        Private columnnonvegrate As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_VIEW_HALLBOOKINGDETAILS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property CATEGORYColumn As DataColumn
            Get
                Return Me.columnCATEGORY
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property HALLDESCColumn As DataColumn
            Get
                Return Me.columnHALLDESC
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property vegColumn As DataColumn
            Get
                Return Me.columnveg
            End Get
        End Property
        
        Friend ReadOnly Property nonvegColumn As DataColumn
            Get
                Return Me.columnnonveg
            End Get
        End Property
        
        Friend ReadOnly Property PCODEColumn As DataColumn
            Get
                Return Me.columnPCODE
            End Get
        End Property
        
        Friend ReadOnly Property HMLOCCODEColumn As DataColumn
            Get
                Return Me.columnHMLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property LOCDESCColumn As DataColumn
            Get
                Return Me.columnLOCDESC
            End Get
        End Property
        
        Friend ReadOnly Property PDESCColumn As DataColumn
            Get
                Return Me.columnPDESC
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property groupcodeColumn As DataColumn
            Get
                Return Me.columngroupcode
            End Get
        End Property
        
        Friend ReadOnly Property PADD1Column As DataColumn
            Get
                Return Me.columnPADD1
            End Get
        End Property
        
        Friend ReadOnly Property PADD2Column As DataColumn
            Get
                Return Me.columnPADD2
            End Get
        End Property
        
        Friend ReadOnly Property PCITYColumn As DataColumn
            Get
                Return Me.columnPCITY
            End Get
        End Property
        
        Friend ReadOnly Property PPHONE1Column As DataColumn
            Get
                Return Me.columnPPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property CEMAILColumn As DataColumn
            Get
                Return Me.columnCEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property FROMTIMEColumn As DataColumn
            Get
                Return Me.columnFROMTIME
            End Get
        End Property
        
        Friend ReadOnly Property TOTIMEColumn As DataColumn
            Get
                Return Me.columnTOTIME
            End Get
        End Property
        
        Friend ReadOnly Property HALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGSTATUSColumn As DataColumn
            Get
                Return Me.columnBOOKINGSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGFLAGColumn As DataColumn
            Get
                Return Me.columnBOOKINGFLAG
            End Get
        End Property
        
        Friend ReadOnly Property BILLINGFLAGColumn As DataColumn
            Get
                Return Me.columnBILLINGFLAG
            End Get
        End Property
        
        Friend ReadOnly Property CANCELFLAGColumn As DataColumn
            Get
                Return Me.columnCANCELFLAG
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTNOColumn As DataColumn
            Get
                Return Me.columnRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property RAMOUNTColumn As DataColumn
            Get
                Return Me.columnRAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTTYPEColumn As DataColumn
            Get
                Return Me.columnAMOUNTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property TTYPEColumn As DataColumn
            Get
                Return Me.columnTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property PRROWIDColumn As DataColumn
            Get
                Return Me.columnPRROWID
            End Get
        End Property
        
        Friend ReadOnly Property RITEMCODEColumn As DataColumn
            Get
                Return Me.columnRITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property RITEMDESCColumn As DataColumn
            Get
                Return Me.columnRITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property RQTYColumn As DataColumn
            Get
                Return Me.columnRQTY
            End Get
        End Property
        
        Friend ReadOnly Property RRATEColumn As DataColumn
            Get
                Return Me.columnRRATE
            End Get
        End Property
        
        Friend ReadOnly Property PRAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property PRTAXPERCColumn As DataColumn
            Get
                Return Me.columnPRTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property PRTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property PRTOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFCODEColumn As DataColumn
            Get
                Return Me.columnTARIFFCODE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFDESCColumn As DataColumn
            Get
                Return Me.columnTARIFFDESC
            End Get
        End Property
        
        Friend ReadOnly Property TRATEColumn As DataColumn
            Get
                Return Me.columnTRATE
            End Get
        End Property
        
        Friend ReadOnly Property AROWIDColumn As DataColumn
            Get
                Return Me.columnAROWID
            End Get
        End Property
        
        Friend ReadOnly Property AITEMCODEColumn As DataColumn
            Get
                Return Me.columnAITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property AITEMDESCColumn As DataColumn
            Get
                Return Me.columnAITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property AQTYColumn As DataColumn
            Get
                Return Me.columnAQTY
            End Get
        End Property
        
        Friend ReadOnly Property ARATEColumn As DataColumn
            Get
                Return Me.columnARATE
            End Get
        End Property
        
        Friend ReadOnly Property AAMOUNTColumn As DataColumn
            Get
                Return Me.columnAAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ATAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnATAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ATOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnATOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXPERCColumn As DataColumn
            Get
                Return Me.columnHALLTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property HALLNETAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLNETAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnHOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property ISBFCHARGEColumn As DataColumn
            Get
                Return Me.columnISBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property ASBFCHARGEColumn As DataColumn
            Get
                Return Me.columnASBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property TSBFCHARGEColumn As DataColumn
            Get
                Return Me.columnTSBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property PRIORITYColumn As DataColumn
            Get
                Return Me.columnPRIORITY
            End Get
        End Property
        
        Friend ReadOnly Property vegrateColumn As DataColumn
            Get
                Return Me.columnvegrate
            End Get
        End Property
        
        Friend ReadOnly Property nonvegrateColumn As DataColumn
            Get
                Return Me.columnnonvegrate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_VIEW_HALLBOOKINGDETAILSRow
            Get
                Return CType(Me.Rows(index),PARTY_VIEW_HALLBOOKINGDETAILSRow)
            End Get
        End Property
        
        Public Event PARTY_VIEW_HALLBOOKINGDETAILSRowChanged As PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEventHandler
        
        Public Event PARTY_VIEW_HALLBOOKINGDETAILSRowChanging As PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEventHandler
        
        Public Event PARTY_VIEW_HALLBOOKINGDETAILSRowDeleted As PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEventHandler
        
        Public Event PARTY_VIEW_HALLBOOKINGDETAILSRowDeleting As PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_VIEW_HALLBOOKINGDETAILSRow(ByVal row As PARTY_VIEW_HALLBOOKINGDETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_VIEW_HALLBOOKINGDETAILSRow( _
                    ByVal LOCCODE As String,  _
                    ByVal CATEGORY As String,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal HALLCODE As String,  _
                    ByVal HALLDESC As String,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal veg As String,  _
                    ByVal nonveg As String,  _
                    ByVal PCODE As String,  _
                    ByVal HMLOCCODE As String,  _
                    ByVal LOCDESC As String,  _
                    ByVal PDESC As String,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal groupcode As String,  _
                    ByVal PADD1 As String,  _
                    ByVal PADD2 As String,  _
                    ByVal PCITY As String,  _
                    ByVal PPHONE1 As String,  _
                    ByVal CEMAIL As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal FROMTIME As Decimal,  _
                    ByVal TOTIME As Decimal,  _
                    ByVal HALLAMOUNT As Decimal,  _
                    ByVal BOOKINGSTATUS As String,  _
                    ByVal BOOKINGFLAG As String,  _
                    ByVal BILLINGFLAG As String,  _
                    ByVal CANCELFLAG As String,  _
                    ByVal FREEZE As String,  _
                    ByVal RECEIPTNO As String,  _
                    ByVal RECEIPTDATE As Date,  _
                    ByVal RAMOUNT As Decimal,  _
                    ByVal AMOUNTTYPE As String,  _
                    ByVal TTYPE As String,  _
                    ByVal PRROWID As Decimal,  _
                    ByVal RITEMCODE As String,  _
                    ByVal RITEMDESC As String,  _
                    ByVal RQTY As Decimal,  _
                    ByVal RRATE As Decimal,  _
                    ByVal PRAMOUNT As Decimal,  _
                    ByVal PRTAXPERC As Decimal,  _
                    ByVal PRTAXAMOUNT As Decimal,  _
                    ByVal PRTOTALAMOUNT As Decimal,  _
                    ByVal TARIFFCODE As String,  _
                    ByVal TARIFFDESC As String,  _
                    ByVal TRATE As Decimal,  _
                    ByVal AROWID As Decimal,  _
                    ByVal AITEMCODE As String,  _
                    ByVal AITEMDESC As String,  _
                    ByVal AQTY As Decimal,  _
                    ByVal ARATE As Decimal,  _
                    ByVal AAMOUNT As Decimal,  _
                    ByVal ATAXAMOUNT As Decimal,  _
                    ByVal ATOTALAMOUNT As Decimal,  _
                    ByVal HALLTAXAMOUNT As Decimal,  _
                    ByVal HALLTAXPERC As Decimal,  _
                    ByVal HALLNETAMOUNT As Decimal,  _
                    ByVal HOCCUPANCY As Decimal,  _
                    ByVal ISBFCHARGE As String,  _
                    ByVal ASBFCHARGE As String,  _
                    ByVal TSBFCHARGE As String,  _
                    ByVal PRIORITY As Decimal,  _
                    ByVal vegrate As Decimal,  _
                    ByVal nonvegrate As Decimal) As PARTY_VIEW_HALLBOOKINGDETAILSRow
            Dim rowPARTY_VIEW_HALLBOOKINGDETAILSRow As PARTY_VIEW_HALLBOOKINGDETAILSRow = CType(Me.NewRow,PARTY_VIEW_HALLBOOKINGDETAILSRow)
            rowPARTY_VIEW_HALLBOOKINGDETAILSRow.ItemArray = New Object() {LOCCODE, CATEGORY, BOOKINGTYPE, HALLCODE, HALLDESC, OCCUPANCY, veg, nonveg, PCODE, HMLOCCODE, LOCDESC, PDESC, BOOKINGNO, PARTYDATE, MCODE, MNAME, groupcode, PADD1, PADD2, PCITY, PPHONE1, CEMAIL, BOOKINGDATE, FROMTIME, TOTIME, HALLAMOUNT, BOOKINGSTATUS, BOOKINGFLAG, BILLINGFLAG, CANCELFLAG, FREEZE, RECEIPTNO, RECEIPTDATE, RAMOUNT, AMOUNTTYPE, TTYPE, PRROWID, RITEMCODE, RITEMDESC, RQTY, RRATE, PRAMOUNT, PRTAXPERC, PRTAXAMOUNT, PRTOTALAMOUNT, TARIFFCODE, TARIFFDESC, TRATE, AROWID, AITEMCODE, AITEMDESC, AQTY, ARATE, AAMOUNT, ATAXAMOUNT, ATOTALAMOUNT, HALLTAXAMOUNT, HALLTAXPERC, HALLNETAMOUNT, HOCCUPANCY, ISBFCHARGE, ASBFCHARGE, TSBFCHARGE, PRIORITY, vegrate, nonvegrate}
            Me.Rows.Add(rowPARTY_VIEW_HALLBOOKINGDETAILSRow)
            Return rowPARTY_VIEW_HALLBOOKINGDETAILSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_VIEW_HALLBOOKINGDETAILSDataTable = CType(MyBase.Clone,PARTY_VIEW_HALLBOOKINGDETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_VIEW_HALLBOOKINGDETAILSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnCATEGORY = Me.Columns("CATEGORY")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnHALLDESC = Me.Columns("HALLDESC")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnveg = Me.Columns("veg")
            Me.columnnonveg = Me.Columns("nonveg")
            Me.columnPCODE = Me.Columns("PCODE")
            Me.columnHMLOCCODE = Me.Columns("HMLOCCODE")
            Me.columnLOCDESC = Me.Columns("LOCDESC")
            Me.columnPDESC = Me.Columns("PDESC")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columngroupcode = Me.Columns("groupcode")
            Me.columnPADD1 = Me.Columns("PADD1")
            Me.columnPADD2 = Me.Columns("PADD2")
            Me.columnPCITY = Me.Columns("PCITY")
            Me.columnPPHONE1 = Me.Columns("PPHONE1")
            Me.columnCEMAIL = Me.Columns("CEMAIL")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnFROMTIME = Me.Columns("FROMTIME")
            Me.columnTOTIME = Me.Columns("TOTIME")
            Me.columnHALLAMOUNT = Me.Columns("HALLAMOUNT")
            Me.columnBOOKINGSTATUS = Me.Columns("BOOKINGSTATUS")
            Me.columnBOOKINGFLAG = Me.Columns("BOOKINGFLAG")
            Me.columnBILLINGFLAG = Me.Columns("BILLINGFLAG")
            Me.columnCANCELFLAG = Me.Columns("CANCELFLAG")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnRECEIPTNO = Me.Columns("RECEIPTNO")
            Me.columnRECEIPTDATE = Me.Columns("RECEIPTDATE")
            Me.columnRAMOUNT = Me.Columns("RAMOUNT")
            Me.columnAMOUNTTYPE = Me.Columns("AMOUNTTYPE")
            Me.columnTTYPE = Me.Columns("TTYPE")
            Me.columnPRROWID = Me.Columns("PRROWID")
            Me.columnRITEMCODE = Me.Columns("RITEMCODE")
            Me.columnRITEMDESC = Me.Columns("RITEMDESC")
            Me.columnRQTY = Me.Columns("RQTY")
            Me.columnRRATE = Me.Columns("RRATE")
            Me.columnPRAMOUNT = Me.Columns("PRAMOUNT")
            Me.columnPRTAXPERC = Me.Columns("PRTAXPERC")
            Me.columnPRTAXAMOUNT = Me.Columns("PRTAXAMOUNT")
            Me.columnPRTOTALAMOUNT = Me.Columns("PRTOTALAMOUNT")
            Me.columnTARIFFCODE = Me.Columns("TARIFFCODE")
            Me.columnTARIFFDESC = Me.Columns("TARIFFDESC")
            Me.columnTRATE = Me.Columns("TRATE")
            Me.columnAROWID = Me.Columns("AROWID")
            Me.columnAITEMCODE = Me.Columns("AITEMCODE")
            Me.columnAITEMDESC = Me.Columns("AITEMDESC")
            Me.columnAQTY = Me.Columns("AQTY")
            Me.columnARATE = Me.Columns("ARATE")
            Me.columnAAMOUNT = Me.Columns("AAMOUNT")
            Me.columnATAXAMOUNT = Me.Columns("ATAXAMOUNT")
            Me.columnATOTALAMOUNT = Me.Columns("ATOTALAMOUNT")
            Me.columnHALLTAXAMOUNT = Me.Columns("HALLTAXAMOUNT")
            Me.columnHALLTAXPERC = Me.Columns("HALLTAXPERC")
            Me.columnHALLNETAMOUNT = Me.Columns("HALLNETAMOUNT")
            Me.columnHOCCUPANCY = Me.Columns("HOCCUPANCY")
            Me.columnISBFCHARGE = Me.Columns("ISBFCHARGE")
            Me.columnASBFCHARGE = Me.Columns("ASBFCHARGE")
            Me.columnTSBFCHARGE = Me.Columns("TSBFCHARGE")
            Me.columnPRIORITY = Me.Columns("PRIORITY")
            Me.columnvegrate = Me.Columns("vegrate")
            Me.columnnonvegrate = Me.Columns("nonvegrate")
        End Sub
        
        Private Sub InitClass()
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnCATEGORY = New DataColumn("CATEGORY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATEGORY)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnHALLDESC = New DataColumn("HALLDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLDESC)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnveg = New DataColumn("veg", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnveg)
            Me.columnnonveg = New DataColumn("nonveg", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnonveg)
            Me.columnPCODE = New DataColumn("PCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCODE)
            Me.columnHMLOCCODE = New DataColumn("HMLOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHMLOCCODE)
            Me.columnLOCDESC = New DataColumn("LOCDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCDESC)
            Me.columnPDESC = New DataColumn("PDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPDESC)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columngroupcode = New DataColumn("groupcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroupcode)
            Me.columnPADD1 = New DataColumn("PADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD1)
            Me.columnPADD2 = New DataColumn("PADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD2)
            Me.columnPCITY = New DataColumn("PCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCITY)
            Me.columnPPHONE1 = New DataColumn("PPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPHONE1)
            Me.columnCEMAIL = New DataColumn("CEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCEMAIL)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnFROMTIME = New DataColumn("FROMTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMTIME)
            Me.columnTOTIME = New DataColumn("TOTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTIME)
            Me.columnHALLAMOUNT = New DataColumn("HALLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLAMOUNT)
            Me.columnBOOKINGSTATUS = New DataColumn("BOOKINGSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGSTATUS)
            Me.columnBOOKINGFLAG = New DataColumn("BOOKINGFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGFLAG)
            Me.columnBILLINGFLAG = New DataColumn("BILLINGFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLINGFLAG)
            Me.columnCANCELFLAG = New DataColumn("CANCELFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELFLAG)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnRECEIPTNO = New DataColumn("RECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTNO)
            Me.columnRECEIPTDATE = New DataColumn("RECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTDATE)
            Me.columnRAMOUNT = New DataColumn("RAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRAMOUNT)
            Me.columnAMOUNTTYPE = New DataColumn("AMOUNTTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNTTYPE)
            Me.columnTTYPE = New DataColumn("TTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTYPE)
            Me.columnPRROWID = New DataColumn("PRROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRROWID)
            Me.columnRITEMCODE = New DataColumn("RITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRITEMCODE)
            Me.columnRITEMDESC = New DataColumn("RITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRITEMDESC)
            Me.columnRQTY = New DataColumn("RQTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRQTY)
            Me.columnRRATE = New DataColumn("RRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRRATE)
            Me.columnPRAMOUNT = New DataColumn("PRAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRAMOUNT)
            Me.columnPRTAXPERC = New DataColumn("PRTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTAXPERC)
            Me.columnPRTAXAMOUNT = New DataColumn("PRTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTAXAMOUNT)
            Me.columnPRTOTALAMOUNT = New DataColumn("PRTOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTOTALAMOUNT)
            Me.columnTARIFFCODE = New DataColumn("TARIFFCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFCODE)
            Me.columnTARIFFDESC = New DataColumn("TARIFFDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFDESC)
            Me.columnTRATE = New DataColumn("TRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTRATE)
            Me.columnAROWID = New DataColumn("AROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAROWID)
            Me.columnAITEMCODE = New DataColumn("AITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAITEMCODE)
            Me.columnAITEMDESC = New DataColumn("AITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAITEMDESC)
            Me.columnAQTY = New DataColumn("AQTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAQTY)
            Me.columnARATE = New DataColumn("ARATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARATE)
            Me.columnAAMOUNT = New DataColumn("AAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAAMOUNT)
            Me.columnATAXAMOUNT = New DataColumn("ATAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnATAXAMOUNT)
            Me.columnATOTALAMOUNT = New DataColumn("ATOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnATOTALAMOUNT)
            Me.columnHALLTAXAMOUNT = New DataColumn("HALLTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXAMOUNT)
            Me.columnHALLTAXPERC = New DataColumn("HALLTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXPERC)
            Me.columnHALLNETAMOUNT = New DataColumn("HALLNETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLNETAMOUNT)
            Me.columnHOCCUPANCY = New DataColumn("HOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHOCCUPANCY)
            Me.columnISBFCHARGE = New DataColumn("ISBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISBFCHARGE)
            Me.columnASBFCHARGE = New DataColumn("ASBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASBFCHARGE)
            Me.columnTSBFCHARGE = New DataColumn("TSBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTSBFCHARGE)
            Me.columnPRIORITY = New DataColumn("PRIORITY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRIORITY)
            Me.columnvegrate = New DataColumn("vegrate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvegrate)
            Me.columnnonvegrate = New DataColumn("nonvegrate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnonvegrate)
            Me.columnLOCCODE.ReadOnly = true
            Me.columnCATEGORY.ReadOnly = true
            Me.columnBOOKINGTYPE.ReadOnly = true
            Me.columnHALLCODE.ReadOnly = true
            Me.columnHALLDESC.ReadOnly = true
            Me.columnOCCUPANCY.ReadOnly = true
            Me.columnveg.ReadOnly = true
            Me.columnnonveg.ReadOnly = true
            Me.columnPCODE.ReadOnly = true
            Me.columnHMLOCCODE.ReadOnly = true
            Me.columnLOCDESC.ReadOnly = true
            Me.columnPDESC.ReadOnly = true
            Me.columnBOOKINGNO.ReadOnly = true
            Me.columnPARTYDATE.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columngroupcode.ReadOnly = true
            Me.columnPADD1.ReadOnly = true
            Me.columnPADD2.ReadOnly = true
            Me.columnPCITY.ReadOnly = true
            Me.columnPPHONE1.ReadOnly = true
            Me.columnCEMAIL.ReadOnly = true
            Me.columnBOOKINGDATE.ReadOnly = true
            Me.columnFROMTIME.ReadOnly = true
            Me.columnTOTIME.ReadOnly = true
            Me.columnHALLAMOUNT.ReadOnly = true
            Me.columnBOOKINGSTATUS.ReadOnly = true
            Me.columnBOOKINGFLAG.ReadOnly = true
            Me.columnBILLINGFLAG.ReadOnly = true
            Me.columnCANCELFLAG.ReadOnly = true
            Me.columnFREEZE.ReadOnly = true
            Me.columnRECEIPTNO.ReadOnly = true
            Me.columnRECEIPTDATE.ReadOnly = true
            Me.columnRAMOUNT.ReadOnly = true
            Me.columnAMOUNTTYPE.ReadOnly = true
            Me.columnTTYPE.ReadOnly = true
            Me.columnPRROWID.ReadOnly = true
            Me.columnRITEMCODE.ReadOnly = true
            Me.columnRITEMDESC.ReadOnly = true
            Me.columnRQTY.ReadOnly = true
            Me.columnRRATE.ReadOnly = true
            Me.columnPRAMOUNT.ReadOnly = true
            Me.columnPRTAXPERC.ReadOnly = true
            Me.columnPRTAXAMOUNT.ReadOnly = true
            Me.columnPRTOTALAMOUNT.ReadOnly = true
            Me.columnTARIFFCODE.ReadOnly = true
            Me.columnTARIFFDESC.ReadOnly = true
            Me.columnTRATE.ReadOnly = true
            Me.columnAROWID.ReadOnly = true
            Me.columnAITEMCODE.ReadOnly = true
            Me.columnAITEMDESC.ReadOnly = true
            Me.columnAQTY.ReadOnly = true
            Me.columnARATE.ReadOnly = true
            Me.columnAAMOUNT.ReadOnly = true
            Me.columnATAXAMOUNT.ReadOnly = true
            Me.columnATOTALAMOUNT.ReadOnly = true
            Me.columnHALLTAXAMOUNT.ReadOnly = true
            Me.columnHALLTAXPERC.ReadOnly = true
            Me.columnHALLNETAMOUNT.ReadOnly = true
            Me.columnHOCCUPANCY.ReadOnly = true
            Me.columnISBFCHARGE.ReadOnly = true
            Me.columnASBFCHARGE.ReadOnly = true
            Me.columnTSBFCHARGE.ReadOnly = true
        End Sub
        
        Public Function NewPARTY_VIEW_HALLBOOKINGDETAILSRow() As PARTY_VIEW_HALLBOOKINGDETAILSRow
            Return CType(Me.NewRow,PARTY_VIEW_HALLBOOKINGDETAILSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_VIEW_HALLBOOKINGDETAILSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_VIEW_HALLBOOKINGDETAILSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_VIEW_HALLBOOKINGDETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_HALLBOOKINGDETAILSRowChanged(Me, New PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEvent(CType(e.Row,PARTY_VIEW_HALLBOOKINGDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_VIEW_HALLBOOKINGDETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_HALLBOOKINGDETAILSRowChanging(Me, New PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEvent(CType(e.Row,PARTY_VIEW_HALLBOOKINGDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_VIEW_HALLBOOKINGDETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_HALLBOOKINGDETAILSRowDeleted(Me, New PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEvent(CType(e.Row,PARTY_VIEW_HALLBOOKINGDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_VIEW_HALLBOOKINGDETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_HALLBOOKINGDETAILSRowDeleting(Me, New PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEvent(CType(e.Row,PARTY_VIEW_HALLBOOKINGDETAILSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_VIEW_HALLBOOKINGDETAILSRow(ByVal row As PARTY_VIEW_HALLBOOKINGDETAILSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_HALLBOOKINGDETAILSRow
        Inherits DataRow
        
        Private tablePARTY_VIEW_HALLBOOKINGDETAILS As PARTY_VIEW_HALLBOOKINGDETAILSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_VIEW_HALLBOOKINGDETAILS = CType(Me.Table,PARTY_VIEW_HALLBOOKINGDETAILSDataTable)
        End Sub
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property CATEGORY As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CATEGORYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CATEGORYColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property HALLDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLDESCColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property veg As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.vegColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.vegColumn) = value
            End Set
        End Property
        
        Public Property nonveg As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.nonvegColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.nonvegColumn) = value
            End Set
        End Property
        
        Public Property PCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PCODEColumn) = value
            End Set
        End Property
        
        Public Property HMLOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HMLOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HMLOCCODEColumn) = value
            End Set
        End Property
        
        Public Property LOCDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.LOCDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.LOCDESCColumn) = value
            End Set
        End Property
        
        Public Property PDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PDESCColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property groupcode As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.groupcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.groupcodeColumn) = value
            End Set
        End Property
        
        Public Property PADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PADD1Column) = value
            End Set
        End Property
        
        Public Property PADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PADD2Column) = value
            End Set
        End Property
        
        Public Property PCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PCITYColumn) = value
            End Set
        End Property
        
        Public Property PPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PPHONE1Column) = value
            End Set
        End Property
        
        Public Property CEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CEMAILColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property FROMTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.FROMTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.FROMTIMEColumn) = value
            End Set
        End Property
        
        Public Property TOTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TOTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TOTIMEColumn) = value
            End Set
        End Property
        
        Public Property HALLAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGSTATUSColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGFLAGColumn) = value
            End Set
        End Property
        
        Public Property BILLINGFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BILLINGFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BILLINGFLAGColumn) = value
            End Set
        End Property
        
        Public Property CANCELFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CANCELFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CANCELFLAGColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property RAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNTTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AMOUNTTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AMOUNTTYPEColumn) = value
            End Set
        End Property
        
        Public Property TTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TTYPEColumn) = value
            End Set
        End Property
        
        Public Property PRROWID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRROWIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRROWIDColumn) = value
            End Set
        End Property
        
        Public Property RITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property RITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property RQTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RQTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RQTYColumn) = value
            End Set
        End Property
        
        Public Property RRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RRATEColumn) = value
            End Set
        End Property
        
        Public Property PRAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property PRTAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property PRTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property PRTOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TARIFFCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TARIFFCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TARIFFCODEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TARIFFDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TARIFFDESCColumn) = value
            End Set
        End Property
        
        Public Property TRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TRATEColumn) = value
            End Set
        End Property
        
        Public Property AROWID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AROWIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AROWIDColumn) = value
            End Set
        End Property
        
        Public Property AITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property AITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property AQTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AQTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AQTYColumn) = value
            End Set
        End Property
        
        Public Property ARATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ARATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ARATEColumn) = value
            End Set
        End Property
        
        Public Property AAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ATAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ATAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ATAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ATOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ATOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ATOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLTAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property HALLNETAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLNETAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLNETAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property ISBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ISBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ISBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property ASBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ASBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ASBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property TSBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TSBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TSBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property PRIORITY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRIORITYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRIORITYColumn) = value
            End Set
        End Property
        
        Public Property vegrate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.vegrateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.vegrateColumn) = value
            End Set
        End Property
        
        Public Property nonvegrate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.nonvegrateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.nonvegrateColumn) = value
            End Set
        End Property
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATEGORYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CATEGORYColumn)
        End Function
        
        Public Sub SetCATEGORYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CATEGORYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGTYPEColumn)
        End Function
        
        Public Sub SetBOOKINGTYPENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLDESCColumn)
        End Function
        
        Public Sub SetHALLDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvegNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.vegColumn)
        End Function
        
        Public Sub SetvegNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.vegColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnonvegNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.nonvegColumn)
        End Function
        
        Public Sub SetnonvegNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.nonvegColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PCODEColumn)
        End Function
        
        Public Sub SetPCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHMLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HMLOCCODEColumn)
        End Function
        
        Public Sub SetHMLOCCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HMLOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.LOCDESCColumn)
        End Function
        
        Public Sub SetLOCDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.LOCDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PDESCColumn)
        End Function
        
        Public Sub SetPDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgroupcodeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.groupcodeColumn)
        End Function
        
        Public Sub SetgroupcodeNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.groupcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD1Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PADD1Column)
        End Function
        
        Public Sub SetPADD1Null()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD2Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PADD2Column)
        End Function
        
        Public Sub SetPADD2Null()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCITYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PCITYColumn)
        End Function
        
        Public Sub SetPCITYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PPHONE1Column)
        End Function
        
        Public Sub SetPPHONE1Null()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCEMAILNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CEMAILColumn)
        End Function
        
        Public Sub SetCEMAILNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.FROMTIMEColumn)
        End Function
        
        Public Sub SetFROMTIMENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.FROMTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TOTIMEColumn)
        End Function
        
        Public Sub SetTOTIMENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TOTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLAMOUNTColumn)
        End Function
        
        Public Sub SetHALLAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGSTATUSNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGSTATUSColumn)
        End Function
        
        Public Sub SetBOOKINGSTATUSNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGFLAGColumn)
        End Function
        
        Public Sub SetBOOKINGFLAGNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BOOKINGFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLINGFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BILLINGFLAGColumn)
        End Function
        
        Public Sub SetBILLINGFLAGNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.BILLINGFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CANCELFLAGColumn)
        End Function
        
        Public Sub SetCANCELFLAGNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.CANCELFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RECEIPTNOColumn)
        End Function
        
        Public Sub SetRECEIPTNONull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RECEIPTDATEColumn)
        End Function
        
        Public Sub SetRECEIPTDATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RAMOUNTColumn)
        End Function
        
        Public Sub SetRAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AMOUNTTYPEColumn)
        End Function
        
        Public Sub SetAMOUNTTYPENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AMOUNTTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TTYPEColumn)
        End Function
        
        Public Sub SetTTYPENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRROWIDNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRROWIDColumn)
        End Function
        
        Public Sub SetPRROWIDNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRROWIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RITEMCODEColumn)
        End Function
        
        Public Sub SetRITEMCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RITEMDESCColumn)
        End Function
        
        Public Sub SetRITEMDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RQTYColumn)
        End Function
        
        Public Sub SetRQTYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RQTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RRATEColumn)
        End Function
        
        Public Sub SetRRATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.RRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRAMOUNTColumn)
        End Function
        
        Public Sub SetPRAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTAXPERCColumn)
        End Function
        
        Public Sub SetPRTAXPERCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTAXAMOUNTColumn)
        End Function
        
        Public Sub SetPRTAXAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTOTALAMOUNTColumn)
        End Function
        
        Public Sub SetPRTOTALAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRTOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TARIFFCODEColumn)
        End Function
        
        Public Sub SetTARIFFCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TARIFFCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TARIFFDESCColumn)
        End Function
        
        Public Sub SetTARIFFDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TARIFFDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TRATEColumn)
        End Function
        
        Public Sub SetTRATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAROWIDNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AROWIDColumn)
        End Function
        
        Public Sub SetAROWIDNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AROWIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AITEMCODEColumn)
        End Function
        
        Public Sub SetAITEMCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AITEMDESCColumn)
        End Function
        
        Public Sub SetAITEMDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AQTYColumn)
        End Function
        
        Public Sub SetAQTYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AQTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ARATEColumn)
        End Function
        
        Public Sub SetARATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ARATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AAMOUNTColumn)
        End Function
        
        Public Sub SetAAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.AAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsATAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ATAXAMOUNTColumn)
        End Function
        
        Public Sub SetATAXAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ATAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsATOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ATOTALAMOUNTColumn)
        End Function
        
        Public Sub SetATOTALAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ATOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLTAXAMOUNTColumn)
        End Function
        
        Public Sub SetHALLTAXAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLTAXPERCColumn)
        End Function
        
        Public Sub SetHALLTAXPERCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLTAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLNETAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLNETAMOUNTColumn)
        End Function
        
        Public Sub SetHALLNETAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HALLNETAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HOCCUPANCYColumn)
        End Function
        
        Public Sub SetHOCCUPANCYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.HOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsISBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ISBFCHARGEColumn)
        End Function
        
        Public Sub SetISBFCHARGENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ISBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ASBFCHARGEColumn)
        End Function
        
        Public Sub SetASBFCHARGENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.ASBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTSBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TSBFCHARGEColumn)
        End Function
        
        Public Sub SetTSBFCHARGENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.TSBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRIORITYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRIORITYColumn)
        End Function
        
        Public Sub SetPRIORITYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.PRIORITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvegrateNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.vegrateColumn)
        End Function
        
        Public Sub SetvegrateNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.vegrateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnonvegrateNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.nonvegrateColumn)
        End Function
        
        Public Sub SetnonvegrateNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS.nonvegrateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_HALLBOOKINGDETAILSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_VIEW_HALLBOOKINGDETAILSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_VIEW_HALLBOOKINGDETAILSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_VIEW_HALLBOOKINGDETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RESTITEMSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCHITNO As DataColumn
        
        Private columnpriority As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnCATEGORY As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnHALLDESC As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnveg As DataColumn
        
        Private columnnonveg As DataColumn
        
        Private columnPCODE As DataColumn
        
        Private columnHMLOCCODE As DataColumn
        
        Private columnLOCDESC As DataColumn
        
        Private columnPDESC As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columngroupcode As DataColumn
        
        Private columnPADD1 As DataColumn
        
        Private columnPADD2 As DataColumn
        
        Private columnPCITY As DataColumn
        
        Private columnPPHONE1 As DataColumn
        
        Private columnCEMAIL As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnFROMTIME As DataColumn
        
        Private columnTOTIME As DataColumn
        
        Private columnHALLAMOUNT As DataColumn
        
        Private columnBOOKINGSTATUS As DataColumn
        
        Private columnBOOKINGFLAG As DataColumn
        
        Private columnBILLINGFLAG As DataColumn
        
        Private columnCANCELFLAG As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnRECEIPTNO As DataColumn
        
        Private columnRECEIPTDATE As DataColumn
        
        Private columnRAMOUNT As DataColumn
        
        Private columnAMOUNTTYPE As DataColumn
        
        Private columnTTYPE As DataColumn
        
        Private columnPRROWID As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnRITEMDESC As DataColumn
        
        Private columnRQTY As DataColumn
        
        Private columnRRATE As DataColumn
        
        Private columnPRAMOUNT As DataColumn
        
        Private columnVEGRATE As DataColumn
        
        Private columnNONVEGRATE As DataColumn
        
        Private columnPRTAXPERC As DataColumn
        
        Private columnPRTAXAMOUNT As DataColumn
        
        Private columnPRTOTALAMOUNT As DataColumn
        
        Private columnTARIFFCODE As DataColumn
        
        Private columnTARIFFDESC As DataColumn
        
        Private columnTRATE As DataColumn
        
        Private columnAROWID As DataColumn
        
        Private columnAITEMCODE As DataColumn
        
        Private columnAITEMDESC As DataColumn
        
        Private columnAQTY As DataColumn
        
        Private columnARATE As DataColumn
        
        Private columnAAMOUNT As DataColumn
        
        Private columnATAXAMOUNT As DataColumn
        
        Private columnATOTALAMOUNT As DataColumn
        
        Private columnHALLTAXAMOUNT As DataColumn
        
        Private columnHALLTAXPERC As DataColumn
        
        Private columnHALLNETAMOUNT As DataColumn
        
        Private columnHOCCUPANCY As DataColumn
        
        Private columnISBFCHARGE As DataColumn
        
        Private columnASBFCHARGE As DataColumn
        
        Private columnTSBFCHARGE As DataColumn
        
        Private columnVITEMCODE As DataColumn
        
        Private columnVITEMDESC As DataColumn
        
        Private columnUOM As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_RESTITEMS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CHITNOColumn As DataColumn
            Get
                Return Me.columnCHITNO
            End Get
        End Property
        
        Friend ReadOnly Property priorityColumn As DataColumn
            Get
                Return Me.columnpriority
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property CATEGORYColumn As DataColumn
            Get
                Return Me.columnCATEGORY
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property HALLDESCColumn As DataColumn
            Get
                Return Me.columnHALLDESC
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property vegColumn As DataColumn
            Get
                Return Me.columnveg
            End Get
        End Property
        
        Friend ReadOnly Property nonvegColumn As DataColumn
            Get
                Return Me.columnnonveg
            End Get
        End Property
        
        Friend ReadOnly Property PCODEColumn As DataColumn
            Get
                Return Me.columnPCODE
            End Get
        End Property
        
        Friend ReadOnly Property HMLOCCODEColumn As DataColumn
            Get
                Return Me.columnHMLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property LOCDESCColumn As DataColumn
            Get
                Return Me.columnLOCDESC
            End Get
        End Property
        
        Friend ReadOnly Property PDESCColumn As DataColumn
            Get
                Return Me.columnPDESC
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property groupcodeColumn As DataColumn
            Get
                Return Me.columngroupcode
            End Get
        End Property
        
        Friend ReadOnly Property PADD1Column As DataColumn
            Get
                Return Me.columnPADD1
            End Get
        End Property
        
        Friend ReadOnly Property PADD2Column As DataColumn
            Get
                Return Me.columnPADD2
            End Get
        End Property
        
        Friend ReadOnly Property PCITYColumn As DataColumn
            Get
                Return Me.columnPCITY
            End Get
        End Property
        
        Friend ReadOnly Property PPHONE1Column As DataColumn
            Get
                Return Me.columnPPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property CEMAILColumn As DataColumn
            Get
                Return Me.columnCEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property FROMTIMEColumn As DataColumn
            Get
                Return Me.columnFROMTIME
            End Get
        End Property
        
        Friend ReadOnly Property TOTIMEColumn As DataColumn
            Get
                Return Me.columnTOTIME
            End Get
        End Property
        
        Friend ReadOnly Property HALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGSTATUSColumn As DataColumn
            Get
                Return Me.columnBOOKINGSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGFLAGColumn As DataColumn
            Get
                Return Me.columnBOOKINGFLAG
            End Get
        End Property
        
        Friend ReadOnly Property BILLINGFLAGColumn As DataColumn
            Get
                Return Me.columnBILLINGFLAG
            End Get
        End Property
        
        Friend ReadOnly Property CANCELFLAGColumn As DataColumn
            Get
                Return Me.columnCANCELFLAG
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTNOColumn As DataColumn
            Get
                Return Me.columnRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property RAMOUNTColumn As DataColumn
            Get
                Return Me.columnRAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTTYPEColumn As DataColumn
            Get
                Return Me.columnAMOUNTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property TTYPEColumn As DataColumn
            Get
                Return Me.columnTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property PRROWIDColumn As DataColumn
            Get
                Return Me.columnPRROWID
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property RITEMDESCColumn As DataColumn
            Get
                Return Me.columnRITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property RQTYColumn As DataColumn
            Get
                Return Me.columnRQTY
            End Get
        End Property
        
        Friend ReadOnly Property RRATEColumn As DataColumn
            Get
                Return Me.columnRRATE
            End Get
        End Property
        
        Friend ReadOnly Property PRAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property VEGRATEColumn As DataColumn
            Get
                Return Me.columnVEGRATE
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGRATEColumn As DataColumn
            Get
                Return Me.columnNONVEGRATE
            End Get
        End Property
        
        Friend ReadOnly Property PRTAXPERCColumn As DataColumn
            Get
                Return Me.columnPRTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property PRTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property PRTOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFCODEColumn As DataColumn
            Get
                Return Me.columnTARIFFCODE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFDESCColumn As DataColumn
            Get
                Return Me.columnTARIFFDESC
            End Get
        End Property
        
        Friend ReadOnly Property TRATEColumn As DataColumn
            Get
                Return Me.columnTRATE
            End Get
        End Property
        
        Friend ReadOnly Property AROWIDColumn As DataColumn
            Get
                Return Me.columnAROWID
            End Get
        End Property
        
        Friend ReadOnly Property AITEMCODEColumn As DataColumn
            Get
                Return Me.columnAITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property AITEMDESCColumn As DataColumn
            Get
                Return Me.columnAITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property AQTYColumn As DataColumn
            Get
                Return Me.columnAQTY
            End Get
        End Property
        
        Friend ReadOnly Property ARATEColumn As DataColumn
            Get
                Return Me.columnARATE
            End Get
        End Property
        
        Friend ReadOnly Property AAMOUNTColumn As DataColumn
            Get
                Return Me.columnAAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ATAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnATAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ATOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnATOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXPERCColumn As DataColumn
            Get
                Return Me.columnHALLTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property HALLNETAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLNETAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnHOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property ISBFCHARGEColumn As DataColumn
            Get
                Return Me.columnISBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property ASBFCHARGEColumn As DataColumn
            Get
                Return Me.columnASBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property TSBFCHARGEColumn As DataColumn
            Get
                Return Me.columnTSBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property VITEMCODEColumn As DataColumn
            Get
                Return Me.columnVITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property VITEMDESCColumn As DataColumn
            Get
                Return Me.columnVITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_RESTITEMSRow
            Get
                Return CType(Me.Rows(index),PARTY_RESTITEMSRow)
            End Get
        End Property
        
        Public Event PARTY_RESTITEMSRowChanged As PARTY_RESTITEMSRowChangeEventHandler
        
        Public Event PARTY_RESTITEMSRowChanging As PARTY_RESTITEMSRowChangeEventHandler
        
        Public Event PARTY_RESTITEMSRowDeleted As PARTY_RESTITEMSRowChangeEventHandler
        
        Public Event PARTY_RESTITEMSRowDeleting As PARTY_RESTITEMSRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_RESTITEMSRow(ByVal row As PARTY_RESTITEMSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_RESTITEMSRow( _
                    ByVal CHITNO As String,  _
                    ByVal priority As Integer,  _
                    ByVal LOCCODE As String,  _
                    ByVal CATEGORY As String,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal HALLCODE As String,  _
                    ByVal HALLDESC As String,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal veg As String,  _
                    ByVal nonveg As String,  _
                    ByVal PCODE As String,  _
                    ByVal HMLOCCODE As String,  _
                    ByVal LOCDESC As String,  _
                    ByVal PDESC As String,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal groupcode As String,  _
                    ByVal PADD1 As String,  _
                    ByVal PADD2 As String,  _
                    ByVal PCITY As String,  _
                    ByVal PPHONE1 As String,  _
                    ByVal CEMAIL As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal FROMTIME As Decimal,  _
                    ByVal TOTIME As Decimal,  _
                    ByVal HALLAMOUNT As Decimal,  _
                    ByVal BOOKINGSTATUS As String,  _
                    ByVal BOOKINGFLAG As String,  _
                    ByVal BILLINGFLAG As String,  _
                    ByVal CANCELFLAG As String,  _
                    ByVal FREEZE As String,  _
                    ByVal RECEIPTNO As String,  _
                    ByVal RECEIPTDATE As Date,  _
                    ByVal RAMOUNT As Decimal,  _
                    ByVal AMOUNTTYPE As String,  _
                    ByVal TTYPE As String,  _
                    ByVal PRROWID As Decimal,  _
                    ByVal ITEMCODE As String,  _
                    ByVal RITEMDESC As String,  _
                    ByVal RQTY As Decimal,  _
                    ByVal RRATE As Decimal,  _
                    ByVal PRAMOUNT As Decimal,  _
                    ByVal VEGRATE As Decimal,  _
                    ByVal NONVEGRATE As Decimal,  _
                    ByVal PRTAXPERC As Decimal,  _
                    ByVal PRTAXAMOUNT As Decimal,  _
                    ByVal PRTOTALAMOUNT As Decimal,  _
                    ByVal TARIFFCODE As String,  _
                    ByVal TARIFFDESC As String,  _
                    ByVal TRATE As Decimal,  _
                    ByVal AROWID As Decimal,  _
                    ByVal AITEMCODE As String,  _
                    ByVal AITEMDESC As String,  _
                    ByVal AQTY As Decimal,  _
                    ByVal ARATE As Decimal,  _
                    ByVal AAMOUNT As Decimal,  _
                    ByVal ATAXAMOUNT As Decimal,  _
                    ByVal ATOTALAMOUNT As Decimal,  _
                    ByVal HALLTAXAMOUNT As Decimal,  _
                    ByVal HALLTAXPERC As Decimal,  _
                    ByVal HALLNETAMOUNT As Decimal,  _
                    ByVal HOCCUPANCY As Decimal,  _
                    ByVal ISBFCHARGE As String,  _
                    ByVal ASBFCHARGE As String,  _
                    ByVal TSBFCHARGE As String,  _
                    ByVal VITEMCODE As String,  _
                    ByVal VITEMDESC As String,  _
                    ByVal UOM As String) As PARTY_RESTITEMSRow
            Dim rowPARTY_RESTITEMSRow As PARTY_RESTITEMSRow = CType(Me.NewRow,PARTY_RESTITEMSRow)
            rowPARTY_RESTITEMSRow.ItemArray = New Object() {CHITNO, priority, LOCCODE, CATEGORY, BOOKINGTYPE, HALLCODE, HALLDESC, OCCUPANCY, veg, nonveg, PCODE, HMLOCCODE, LOCDESC, PDESC, BOOKINGNO, PARTYDATE, MCODE, MNAME, groupcode, PADD1, PADD2, PCITY, PPHONE1, CEMAIL, BOOKINGDATE, FROMTIME, TOTIME, HALLAMOUNT, BOOKINGSTATUS, BOOKINGFLAG, BILLINGFLAG, CANCELFLAG, FREEZE, RECEIPTNO, RECEIPTDATE, RAMOUNT, AMOUNTTYPE, TTYPE, PRROWID, ITEMCODE, RITEMDESC, RQTY, RRATE, PRAMOUNT, VEGRATE, NONVEGRATE, PRTAXPERC, PRTAXAMOUNT, PRTOTALAMOUNT, TARIFFCODE, TARIFFDESC, TRATE, AROWID, AITEMCODE, AITEMDESC, AQTY, ARATE, AAMOUNT, ATAXAMOUNT, ATOTALAMOUNT, HALLTAXAMOUNT, HALLTAXPERC, HALLNETAMOUNT, HOCCUPANCY, ISBFCHARGE, ASBFCHARGE, TSBFCHARGE, VITEMCODE, VITEMDESC, UOM}
            Me.Rows.Add(rowPARTY_RESTITEMSRow)
            Return rowPARTY_RESTITEMSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_RESTITEMSDataTable = CType(MyBase.Clone,PARTY_RESTITEMSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_RESTITEMSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCHITNO = Me.Columns("CHITNO")
            Me.columnpriority = Me.Columns("priority")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnCATEGORY = Me.Columns("CATEGORY")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnHALLDESC = Me.Columns("HALLDESC")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnveg = Me.Columns("veg")
            Me.columnnonveg = Me.Columns("nonveg")
            Me.columnPCODE = Me.Columns("PCODE")
            Me.columnHMLOCCODE = Me.Columns("HMLOCCODE")
            Me.columnLOCDESC = Me.Columns("LOCDESC")
            Me.columnPDESC = Me.Columns("PDESC")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columngroupcode = Me.Columns("groupcode")
            Me.columnPADD1 = Me.Columns("PADD1")
            Me.columnPADD2 = Me.Columns("PADD2")
            Me.columnPCITY = Me.Columns("PCITY")
            Me.columnPPHONE1 = Me.Columns("PPHONE1")
            Me.columnCEMAIL = Me.Columns("CEMAIL")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnFROMTIME = Me.Columns("FROMTIME")
            Me.columnTOTIME = Me.Columns("TOTIME")
            Me.columnHALLAMOUNT = Me.Columns("HALLAMOUNT")
            Me.columnBOOKINGSTATUS = Me.Columns("BOOKINGSTATUS")
            Me.columnBOOKINGFLAG = Me.Columns("BOOKINGFLAG")
            Me.columnBILLINGFLAG = Me.Columns("BILLINGFLAG")
            Me.columnCANCELFLAG = Me.Columns("CANCELFLAG")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnRECEIPTNO = Me.Columns("RECEIPTNO")
            Me.columnRECEIPTDATE = Me.Columns("RECEIPTDATE")
            Me.columnRAMOUNT = Me.Columns("RAMOUNT")
            Me.columnAMOUNTTYPE = Me.Columns("AMOUNTTYPE")
            Me.columnTTYPE = Me.Columns("TTYPE")
            Me.columnPRROWID = Me.Columns("PRROWID")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnRITEMDESC = Me.Columns("RITEMDESC")
            Me.columnRQTY = Me.Columns("RQTY")
            Me.columnRRATE = Me.Columns("RRATE")
            Me.columnPRAMOUNT = Me.Columns("PRAMOUNT")
            Me.columnVEGRATE = Me.Columns("VEGRATE")
            Me.columnNONVEGRATE = Me.Columns("NONVEGRATE")
            Me.columnPRTAXPERC = Me.Columns("PRTAXPERC")
            Me.columnPRTAXAMOUNT = Me.Columns("PRTAXAMOUNT")
            Me.columnPRTOTALAMOUNT = Me.Columns("PRTOTALAMOUNT")
            Me.columnTARIFFCODE = Me.Columns("TARIFFCODE")
            Me.columnTARIFFDESC = Me.Columns("TARIFFDESC")
            Me.columnTRATE = Me.Columns("TRATE")
            Me.columnAROWID = Me.Columns("AROWID")
            Me.columnAITEMCODE = Me.Columns("AITEMCODE")
            Me.columnAITEMDESC = Me.Columns("AITEMDESC")
            Me.columnAQTY = Me.Columns("AQTY")
            Me.columnARATE = Me.Columns("ARATE")
            Me.columnAAMOUNT = Me.Columns("AAMOUNT")
            Me.columnATAXAMOUNT = Me.Columns("ATAXAMOUNT")
            Me.columnATOTALAMOUNT = Me.Columns("ATOTALAMOUNT")
            Me.columnHALLTAXAMOUNT = Me.Columns("HALLTAXAMOUNT")
            Me.columnHALLTAXPERC = Me.Columns("HALLTAXPERC")
            Me.columnHALLNETAMOUNT = Me.Columns("HALLNETAMOUNT")
            Me.columnHOCCUPANCY = Me.Columns("HOCCUPANCY")
            Me.columnISBFCHARGE = Me.Columns("ISBFCHARGE")
            Me.columnASBFCHARGE = Me.Columns("ASBFCHARGE")
            Me.columnTSBFCHARGE = Me.Columns("TSBFCHARGE")
            Me.columnVITEMCODE = Me.Columns("VITEMCODE")
            Me.columnVITEMDESC = Me.Columns("VITEMDESC")
            Me.columnUOM = Me.Columns("UOM")
        End Sub
        
        Private Sub InitClass()
            Me.columnCHITNO = New DataColumn("CHITNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHITNO)
            Me.columnpriority = New DataColumn("priority", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpriority)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnCATEGORY = New DataColumn("CATEGORY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATEGORY)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnHALLDESC = New DataColumn("HALLDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLDESC)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnveg = New DataColumn("veg", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnveg)
            Me.columnnonveg = New DataColumn("nonveg", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnonveg)
            Me.columnPCODE = New DataColumn("PCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCODE)
            Me.columnHMLOCCODE = New DataColumn("HMLOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHMLOCCODE)
            Me.columnLOCDESC = New DataColumn("LOCDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCDESC)
            Me.columnPDESC = New DataColumn("PDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPDESC)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columngroupcode = New DataColumn("groupcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroupcode)
            Me.columnPADD1 = New DataColumn("PADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD1)
            Me.columnPADD2 = New DataColumn("PADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD2)
            Me.columnPCITY = New DataColumn("PCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCITY)
            Me.columnPPHONE1 = New DataColumn("PPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPHONE1)
            Me.columnCEMAIL = New DataColumn("CEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCEMAIL)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnFROMTIME = New DataColumn("FROMTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMTIME)
            Me.columnTOTIME = New DataColumn("TOTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTIME)
            Me.columnHALLAMOUNT = New DataColumn("HALLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLAMOUNT)
            Me.columnBOOKINGSTATUS = New DataColumn("BOOKINGSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGSTATUS)
            Me.columnBOOKINGFLAG = New DataColumn("BOOKINGFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGFLAG)
            Me.columnBILLINGFLAG = New DataColumn("BILLINGFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLINGFLAG)
            Me.columnCANCELFLAG = New DataColumn("CANCELFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELFLAG)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnRECEIPTNO = New DataColumn("RECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTNO)
            Me.columnRECEIPTDATE = New DataColumn("RECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTDATE)
            Me.columnRAMOUNT = New DataColumn("RAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRAMOUNT)
            Me.columnAMOUNTTYPE = New DataColumn("AMOUNTTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNTTYPE)
            Me.columnTTYPE = New DataColumn("TTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTYPE)
            Me.columnPRROWID = New DataColumn("PRROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRROWID)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnRITEMDESC = New DataColumn("RITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRITEMDESC)
            Me.columnRQTY = New DataColumn("RQTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRQTY)
            Me.columnRRATE = New DataColumn("RRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRRATE)
            Me.columnPRAMOUNT = New DataColumn("PRAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRAMOUNT)
            Me.columnVEGRATE = New DataColumn("VEGRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEGRATE)
            Me.columnNONVEGRATE = New DataColumn("NONVEGRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEGRATE)
            Me.columnPRTAXPERC = New DataColumn("PRTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTAXPERC)
            Me.columnPRTAXAMOUNT = New DataColumn("PRTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTAXAMOUNT)
            Me.columnPRTOTALAMOUNT = New DataColumn("PRTOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTOTALAMOUNT)
            Me.columnTARIFFCODE = New DataColumn("TARIFFCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFCODE)
            Me.columnTARIFFDESC = New DataColumn("TARIFFDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFDESC)
            Me.columnTRATE = New DataColumn("TRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTRATE)
            Me.columnAROWID = New DataColumn("AROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAROWID)
            Me.columnAITEMCODE = New DataColumn("AITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAITEMCODE)
            Me.columnAITEMDESC = New DataColumn("AITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAITEMDESC)
            Me.columnAQTY = New DataColumn("AQTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAQTY)
            Me.columnARATE = New DataColumn("ARATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARATE)
            Me.columnAAMOUNT = New DataColumn("AAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAAMOUNT)
            Me.columnATAXAMOUNT = New DataColumn("ATAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnATAXAMOUNT)
            Me.columnATOTALAMOUNT = New DataColumn("ATOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnATOTALAMOUNT)
            Me.columnHALLTAXAMOUNT = New DataColumn("HALLTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXAMOUNT)
            Me.columnHALLTAXPERC = New DataColumn("HALLTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXPERC)
            Me.columnHALLNETAMOUNT = New DataColumn("HALLNETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLNETAMOUNT)
            Me.columnHOCCUPANCY = New DataColumn("HOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHOCCUPANCY)
            Me.columnISBFCHARGE = New DataColumn("ISBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISBFCHARGE)
            Me.columnASBFCHARGE = New DataColumn("ASBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASBFCHARGE)
            Me.columnTSBFCHARGE = New DataColumn("TSBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTSBFCHARGE)
            Me.columnVITEMCODE = New DataColumn("VITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVITEMCODE)
            Me.columnVITEMDESC = New DataColumn("VITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVITEMDESC)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnpriority.ReadOnly = true
            Me.columnLOCCODE.ReadOnly = true
            Me.columnCATEGORY.ReadOnly = true
            Me.columnBOOKINGTYPE.ReadOnly = true
            Me.columnHALLCODE.ReadOnly = true
            Me.columnHALLDESC.ReadOnly = true
            Me.columnOCCUPANCY.ReadOnly = true
            Me.columnveg.ReadOnly = true
            Me.columnnonveg.ReadOnly = true
            Me.columnPCODE.ReadOnly = true
            Me.columnHMLOCCODE.ReadOnly = true
            Me.columnLOCDESC.ReadOnly = true
            Me.columnPDESC.ReadOnly = true
            Me.columnBOOKINGNO.ReadOnly = true
            Me.columnPARTYDATE.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columngroupcode.ReadOnly = true
            Me.columnPADD1.ReadOnly = true
            Me.columnPADD2.ReadOnly = true
            Me.columnPCITY.ReadOnly = true
            Me.columnPPHONE1.ReadOnly = true
            Me.columnCEMAIL.ReadOnly = true
            Me.columnBOOKINGDATE.ReadOnly = true
            Me.columnFROMTIME.ReadOnly = true
            Me.columnTOTIME.ReadOnly = true
            Me.columnHALLAMOUNT.ReadOnly = true
            Me.columnBOOKINGSTATUS.ReadOnly = true
            Me.columnBOOKINGFLAG.ReadOnly = true
            Me.columnBILLINGFLAG.ReadOnly = true
            Me.columnCANCELFLAG.ReadOnly = true
            Me.columnFREEZE.ReadOnly = true
            Me.columnRECEIPTNO.ReadOnly = true
            Me.columnRECEIPTDATE.ReadOnly = true
            Me.columnRAMOUNT.ReadOnly = true
            Me.columnAMOUNTTYPE.ReadOnly = true
            Me.columnTTYPE.ReadOnly = true
            Me.columnPRROWID.ReadOnly = true
            Me.columnITEMCODE.ReadOnly = true
            Me.columnRITEMDESC.ReadOnly = true
            Me.columnRQTY.ReadOnly = true
            Me.columnRRATE.ReadOnly = true
            Me.columnPRAMOUNT.ReadOnly = true
            Me.columnPRTAXPERC.ReadOnly = true
            Me.columnPRTAXAMOUNT.ReadOnly = true
            Me.columnPRTOTALAMOUNT.ReadOnly = true
            Me.columnTARIFFCODE.ReadOnly = true
            Me.columnTARIFFDESC.ReadOnly = true
            Me.columnTRATE.ReadOnly = true
            Me.columnAROWID.ReadOnly = true
            Me.columnAITEMCODE.ReadOnly = true
            Me.columnAITEMDESC.ReadOnly = true
            Me.columnAQTY.ReadOnly = true
            Me.columnARATE.ReadOnly = true
            Me.columnAAMOUNT.ReadOnly = true
            Me.columnATAXAMOUNT.ReadOnly = true
            Me.columnATOTALAMOUNT.ReadOnly = true
            Me.columnHALLTAXAMOUNT.ReadOnly = true
            Me.columnHALLTAXPERC.ReadOnly = true
            Me.columnHALLNETAMOUNT.ReadOnly = true
            Me.columnHOCCUPANCY.ReadOnly = true
            Me.columnISBFCHARGE.ReadOnly = true
            Me.columnASBFCHARGE.ReadOnly = true
            Me.columnTSBFCHARGE.ReadOnly = true
            Me.columnVITEMCODE.AllowDBNull = false
        End Sub
        
        Public Function NewPARTY_RESTITEMSRow() As PARTY_RESTITEMSRow
            Return CType(Me.NewRow,PARTY_RESTITEMSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_RESTITEMSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_RESTITEMSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_RESTITEMSRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_RESTITEMSRowChanged(Me, New PARTY_RESTITEMSRowChangeEvent(CType(e.Row,PARTY_RESTITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_RESTITEMSRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_RESTITEMSRowChanging(Me, New PARTY_RESTITEMSRowChangeEvent(CType(e.Row,PARTY_RESTITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_RESTITEMSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_RESTITEMSRowDeleted(Me, New PARTY_RESTITEMSRowChangeEvent(CType(e.Row,PARTY_RESTITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_RESTITEMSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_RESTITEMSRowDeleting(Me, New PARTY_RESTITEMSRowChangeEvent(CType(e.Row,PARTY_RESTITEMSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_RESTITEMSRow(ByVal row As PARTY_RESTITEMSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RESTITEMSRow
        Inherits DataRow
        
        Private tablePARTY_RESTITEMS As PARTY_RESTITEMSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_RESTITEMS = CType(Me.Table,PARTY_RESTITEMSDataTable)
        End Sub
        
        Public Property CHITNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.CHITNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.CHITNOColumn) = value
            End Set
        End Property
        
        Public Property priority As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.priorityColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.priorityColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property CATEGORY As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.CATEGORYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.CATEGORYColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.BOOKINGTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property HALLDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.HALLDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.HALLDESCColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property veg As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.vegColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.vegColumn) = value
            End Set
        End Property
        
        Public Property nonveg As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.nonvegColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.nonvegColumn) = value
            End Set
        End Property
        
        Public Property PCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.PCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.PCODEColumn) = value
            End Set
        End Property
        
        Public Property HMLOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.HMLOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.HMLOCCODEColumn) = value
            End Set
        End Property
        
        Public Property LOCDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.LOCDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.LOCDESCColumn) = value
            End Set
        End Property
        
        Public Property PDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.PDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.PDESCColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property groupcode As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.groupcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.groupcodeColumn) = value
            End Set
        End Property
        
        Public Property PADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.PADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.PADD1Column) = value
            End Set
        End Property
        
        Public Property PADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.PADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.PADD2Column) = value
            End Set
        End Property
        
        Public Property PCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.PCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.PCITYColumn) = value
            End Set
        End Property
        
        Public Property PPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.PPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.PPHONE1Column) = value
            End Set
        End Property
        
        Public Property CEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.CEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.CEMAILColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property FROMTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.FROMTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.FROMTIMEColumn) = value
            End Set
        End Property
        
        Public Property TOTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.TOTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.TOTIMEColumn) = value
            End Set
        End Property
        
        Public Property HALLAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.HALLAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.HALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.BOOKINGSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.BOOKINGSTATUSColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.BOOKINGFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.BOOKINGFLAGColumn) = value
            End Set
        End Property
        
        Public Property BILLINGFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.BILLINGFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.BILLINGFLAGColumn) = value
            End Set
        End Property
        
        Public Property CANCELFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.CANCELFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.CANCELFLAGColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.RECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.RECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.RECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.RECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property RAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.RAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.RAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNTTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.AMOUNTTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.AMOUNTTYPEColumn) = value
            End Set
        End Property
        
        Public Property TTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.TTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.TTYPEColumn) = value
            End Set
        End Property
        
        Public Property PRROWID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.PRROWIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.PRROWIDColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property RITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.RITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.RITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property RQTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.RQTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.RQTYColumn) = value
            End Set
        End Property
        
        Public Property RRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.RRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.RRATEColumn) = value
            End Set
        End Property
        
        Public Property PRAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.PRAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.PRAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property VEGRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.VEGRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.VEGRATEColumn) = value
            End Set
        End Property
        
        Public Property NONVEGRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.NONVEGRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.NONVEGRATEColumn) = value
            End Set
        End Property
        
        Public Property PRTAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.PRTAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.PRTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property PRTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.PRTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.PRTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property PRTOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.PRTOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.PRTOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TARIFFCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.TARIFFCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.TARIFFCODEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.TARIFFDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.TARIFFDESCColumn) = value
            End Set
        End Property
        
        Public Property TRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.TRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.TRATEColumn) = value
            End Set
        End Property
        
        Public Property AROWID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.AROWIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.AROWIDColumn) = value
            End Set
        End Property
        
        Public Property AITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.AITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.AITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property AITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.AITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.AITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property AQTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.AQTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.AQTYColumn) = value
            End Set
        End Property
        
        Public Property ARATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.ARATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.ARATEColumn) = value
            End Set
        End Property
        
        Public Property AAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.AAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.AAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ATAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.ATAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.ATAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ATOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.ATOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.ATOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.HALLTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.HALLTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.HALLTAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.HALLTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property HALLNETAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.HALLNETAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.HALLNETAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.HOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.HOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property ISBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.ISBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.ISBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property ASBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.ASBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.ASBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property TSBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.TSBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.TSBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property VITEMCODE As String
            Get
                Return CType(Me(Me.tablePARTY_RESTITEMS.VITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.VITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property VITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.VITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.VITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RESTITEMS.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RESTITEMS.UOMColumn) = value
            End Set
        End Property
        
        Public Function IsCHITNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.CHITNOColumn)
        End Function
        
        Public Sub SetCHITNONull()
            Me(Me.tablePARTY_RESTITEMS.CHITNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspriorityNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.priorityColumn)
        End Function
        
        Public Sub SetpriorityNull()
            Me(Me.tablePARTY_RESTITEMS.priorityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePARTY_RESTITEMS.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATEGORYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.CATEGORYColumn)
        End Function
        
        Public Sub SetCATEGORYNull()
            Me(Me.tablePARTY_RESTITEMS.CATEGORYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.BOOKINGTYPEColumn)
        End Function
        
        Public Sub SetBOOKINGTYPENull()
            Me(Me.tablePARTY_RESTITEMS.BOOKINGTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablePARTY_RESTITEMS.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.HALLDESCColumn)
        End Function
        
        Public Sub SetHALLDESCNull()
            Me(Me.tablePARTY_RESTITEMS.HALLDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablePARTY_RESTITEMS.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvegNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.vegColumn)
        End Function
        
        Public Sub SetvegNull()
            Me(Me.tablePARTY_RESTITEMS.vegColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnonvegNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.nonvegColumn)
        End Function
        
        Public Sub SetnonvegNull()
            Me(Me.tablePARTY_RESTITEMS.nonvegColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.PCODEColumn)
        End Function
        
        Public Sub SetPCODENull()
            Me(Me.tablePARTY_RESTITEMS.PCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHMLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.HMLOCCODEColumn)
        End Function
        
        Public Sub SetHMLOCCODENull()
            Me(Me.tablePARTY_RESTITEMS.HMLOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.LOCDESCColumn)
        End Function
        
        Public Sub SetLOCDESCNull()
            Me(Me.tablePARTY_RESTITEMS.LOCDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.PDESCColumn)
        End Function
        
        Public Sub SetPDESCNull()
            Me(Me.tablePARTY_RESTITEMS.PDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_RESTITEMS.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_RESTITEMS.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_RESTITEMS.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablePARTY_RESTITEMS.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgroupcodeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.groupcodeColumn)
        End Function
        
        Public Sub SetgroupcodeNull()
            Me(Me.tablePARTY_RESTITEMS.groupcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD1Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.PADD1Column)
        End Function
        
        Public Sub SetPADD1Null()
            Me(Me.tablePARTY_RESTITEMS.PADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD2Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.PADD2Column)
        End Function
        
        Public Sub SetPADD2Null()
            Me(Me.tablePARTY_RESTITEMS.PADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCITYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.PCITYColumn)
        End Function
        
        Public Sub SetPCITYNull()
            Me(Me.tablePARTY_RESTITEMS.PCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.PPHONE1Column)
        End Function
        
        Public Sub SetPPHONE1Null()
            Me(Me.tablePARTY_RESTITEMS.PPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCEMAILNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.CEMAILColumn)
        End Function
        
        Public Sub SetCEMAILNull()
            Me(Me.tablePARTY_RESTITEMS.CEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_RESTITEMS.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.FROMTIMEColumn)
        End Function
        
        Public Sub SetFROMTIMENull()
            Me(Me.tablePARTY_RESTITEMS.FROMTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.TOTIMEColumn)
        End Function
        
        Public Sub SetTOTIMENull()
            Me(Me.tablePARTY_RESTITEMS.TOTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.HALLAMOUNTColumn)
        End Function
        
        Public Sub SetHALLAMOUNTNull()
            Me(Me.tablePARTY_RESTITEMS.HALLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGSTATUSNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.BOOKINGSTATUSColumn)
        End Function
        
        Public Sub SetBOOKINGSTATUSNull()
            Me(Me.tablePARTY_RESTITEMS.BOOKINGSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.BOOKINGFLAGColumn)
        End Function
        
        Public Sub SetBOOKINGFLAGNull()
            Me(Me.tablePARTY_RESTITEMS.BOOKINGFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLINGFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.BILLINGFLAGColumn)
        End Function
        
        Public Sub SetBILLINGFLAGNull()
            Me(Me.tablePARTY_RESTITEMS.BILLINGFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.CANCELFLAGColumn)
        End Function
        
        Public Sub SetCANCELFLAGNull()
            Me(Me.tablePARTY_RESTITEMS.CANCELFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePARTY_RESTITEMS.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.RECEIPTNOColumn)
        End Function
        
        Public Sub SetRECEIPTNONull()
            Me(Me.tablePARTY_RESTITEMS.RECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.RECEIPTDATEColumn)
        End Function
        
        Public Sub SetRECEIPTDATENull()
            Me(Me.tablePARTY_RESTITEMS.RECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.RAMOUNTColumn)
        End Function
        
        Public Sub SetRAMOUNTNull()
            Me(Me.tablePARTY_RESTITEMS.RAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.AMOUNTTYPEColumn)
        End Function
        
        Public Sub SetAMOUNTTYPENull()
            Me(Me.tablePARTY_RESTITEMS.AMOUNTTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.TTYPEColumn)
        End Function
        
        Public Sub SetTTYPENull()
            Me(Me.tablePARTY_RESTITEMS.TTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRROWIDNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.PRROWIDColumn)
        End Function
        
        Public Sub SetPRROWIDNull()
            Me(Me.tablePARTY_RESTITEMS.PRROWIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tablePARTY_RESTITEMS.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.RITEMDESCColumn)
        End Function
        
        Public Sub SetRITEMDESCNull()
            Me(Me.tablePARTY_RESTITEMS.RITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.RQTYColumn)
        End Function
        
        Public Sub SetRQTYNull()
            Me(Me.tablePARTY_RESTITEMS.RQTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.RRATEColumn)
        End Function
        
        Public Sub SetRRATENull()
            Me(Me.tablePARTY_RESTITEMS.RRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.PRAMOUNTColumn)
        End Function
        
        Public Sub SetPRAMOUNTNull()
            Me(Me.tablePARTY_RESTITEMS.PRAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.VEGRATEColumn)
        End Function
        
        Public Sub SetVEGRATENull()
            Me(Me.tablePARTY_RESTITEMS.VEGRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNONVEGRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.NONVEGRATEColumn)
        End Function
        
        Public Sub SetNONVEGRATENull()
            Me(Me.tablePARTY_RESTITEMS.NONVEGRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.PRTAXPERCColumn)
        End Function
        
        Public Sub SetPRTAXPERCNull()
            Me(Me.tablePARTY_RESTITEMS.PRTAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.PRTAXAMOUNTColumn)
        End Function
        
        Public Sub SetPRTAXAMOUNTNull()
            Me(Me.tablePARTY_RESTITEMS.PRTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.PRTOTALAMOUNTColumn)
        End Function
        
        Public Sub SetPRTOTALAMOUNTNull()
            Me(Me.tablePARTY_RESTITEMS.PRTOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.TARIFFCODEColumn)
        End Function
        
        Public Sub SetTARIFFCODENull()
            Me(Me.tablePARTY_RESTITEMS.TARIFFCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.TARIFFDESCColumn)
        End Function
        
        Public Sub SetTARIFFDESCNull()
            Me(Me.tablePARTY_RESTITEMS.TARIFFDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.TRATEColumn)
        End Function
        
        Public Sub SetTRATENull()
            Me(Me.tablePARTY_RESTITEMS.TRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAROWIDNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.AROWIDColumn)
        End Function
        
        Public Sub SetAROWIDNull()
            Me(Me.tablePARTY_RESTITEMS.AROWIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.AITEMCODEColumn)
        End Function
        
        Public Sub SetAITEMCODENull()
            Me(Me.tablePARTY_RESTITEMS.AITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.AITEMDESCColumn)
        End Function
        
        Public Sub SetAITEMDESCNull()
            Me(Me.tablePARTY_RESTITEMS.AITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.AQTYColumn)
        End Function
        
        Public Sub SetAQTYNull()
            Me(Me.tablePARTY_RESTITEMS.AQTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.ARATEColumn)
        End Function
        
        Public Sub SetARATENull()
            Me(Me.tablePARTY_RESTITEMS.ARATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.AAMOUNTColumn)
        End Function
        
        Public Sub SetAAMOUNTNull()
            Me(Me.tablePARTY_RESTITEMS.AAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsATAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.ATAXAMOUNTColumn)
        End Function
        
        Public Sub SetATAXAMOUNTNull()
            Me(Me.tablePARTY_RESTITEMS.ATAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsATOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.ATOTALAMOUNTColumn)
        End Function
        
        Public Sub SetATOTALAMOUNTNull()
            Me(Me.tablePARTY_RESTITEMS.ATOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.HALLTAXAMOUNTColumn)
        End Function
        
        Public Sub SetHALLTAXAMOUNTNull()
            Me(Me.tablePARTY_RESTITEMS.HALLTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.HALLTAXPERCColumn)
        End Function
        
        Public Sub SetHALLTAXPERCNull()
            Me(Me.tablePARTY_RESTITEMS.HALLTAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLNETAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.HALLNETAMOUNTColumn)
        End Function
        
        Public Sub SetHALLNETAMOUNTNull()
            Me(Me.tablePARTY_RESTITEMS.HALLNETAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.HOCCUPANCYColumn)
        End Function
        
        Public Sub SetHOCCUPANCYNull()
            Me(Me.tablePARTY_RESTITEMS.HOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsISBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.ISBFCHARGEColumn)
        End Function
        
        Public Sub SetISBFCHARGENull()
            Me(Me.tablePARTY_RESTITEMS.ISBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.ASBFCHARGEColumn)
        End Function
        
        Public Sub SetASBFCHARGENull()
            Me(Me.tablePARTY_RESTITEMS.ASBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTSBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.TSBFCHARGEColumn)
        End Function
        
        Public Sub SetTSBFCHARGENull()
            Me(Me.tablePARTY_RESTITEMS.TSBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.VITEMDESCColumn)
        End Function
        
        Public Sub SetVITEMDESCNull()
            Me(Me.tablePARTY_RESTITEMS.VITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RESTITEMS.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tablePARTY_RESTITEMS.UOMColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RESTITEMSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_RESTITEMSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_RESTITEMSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_RESTITEMSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_BOOKINGDETAILS1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnloccode As DataColumn
        
        Private columnbookingno As DataColumn
        
        Private columnpartydate As DataColumn
        
        Private columnhallcode As DataColumn
        
        Private columnhalldescription As DataColumn
        
        Private columnmcode As DataColumn
        
        Private columnmname As DataColumn
        
        Private columnfromtime As DataColumn
        
        Private columntotime As DataColumn
        
        Private columnbookingdate As DataColumn
        
        Private columnassociatename As DataColumn
        
        Private columndescription As DataColumn
        
        Private columnhalltaxflag As DataColumn
        
        Private columnmembertype As DataColumn
        
        Private columnhallamount As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnvoid As DataColumn
        
        Private columnadduserid As DataColumn
        
        Private columnadddatetime As DataColumn
        
        Private columnhalltype As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnhallTaxpercentage As DataColumn
        
        Private columnhallTaxAMOUNT As DataColumn
        
        Private columnNETHALLAMOUNT As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnVEG As DataColumn
        
        Private columnnonveg As DataColumn
        
        Friend Sub New()
            MyBase.New("VIEW_PARTY_BOOKINGDETAILS1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property loccodeColumn As DataColumn
            Get
                Return Me.columnloccode
            End Get
        End Property
        
        Friend ReadOnly Property bookingnoColumn As DataColumn
            Get
                Return Me.columnbookingno
            End Get
        End Property
        
        Friend ReadOnly Property partydateColumn As DataColumn
            Get
                Return Me.columnpartydate
            End Get
        End Property
        
        Friend ReadOnly Property hallcodeColumn As DataColumn
            Get
                Return Me.columnhallcode
            End Get
        End Property
        
        Friend ReadOnly Property halldescriptionColumn As DataColumn
            Get
                Return Me.columnhalldescription
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property mnameColumn As DataColumn
            Get
                Return Me.columnmname
            End Get
        End Property
        
        Friend ReadOnly Property fromtimeColumn As DataColumn
            Get
                Return Me.columnfromtime
            End Get
        End Property
        
        Friend ReadOnly Property totimeColumn As DataColumn
            Get
                Return Me.columntotime
            End Get
        End Property
        
        Friend ReadOnly Property bookingdateColumn As DataColumn
            Get
                Return Me.columnbookingdate
            End Get
        End Property
        
        Friend ReadOnly Property associatenameColumn As DataColumn
            Get
                Return Me.columnassociatename
            End Get
        End Property
        
        Friend ReadOnly Property descriptionColumn As DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        Friend ReadOnly Property halltaxflagColumn As DataColumn
            Get
                Return Me.columnhalltaxflag
            End Get
        End Property
        
        Friend ReadOnly Property membertypeColumn As DataColumn
            Get
                Return Me.columnmembertype
            End Get
        End Property
        
        Friend ReadOnly Property hallamountColumn As DataColumn
            Get
                Return Me.columnhallamount
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property voidColumn As DataColumn
            Get
                Return Me.columnvoid
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Friend ReadOnly Property adddatetimeColumn As DataColumn
            Get
                Return Me.columnadddatetime
            End Get
        End Property
        
        Friend ReadOnly Property halltypeColumn As DataColumn
            Get
                Return Me.columnhalltype
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property hallTaxpercentageColumn As DataColumn
            Get
                Return Me.columnhallTaxpercentage
            End Get
        End Property
        
        Friend ReadOnly Property hallTaxAMOUNTColumn As DataColumn
            Get
                Return Me.columnhallTaxAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property NETHALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnNETHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property VEGColumn As DataColumn
            Get
                Return Me.columnVEG
            End Get
        End Property
        
        Friend ReadOnly Property nonvegColumn As DataColumn
            Get
                Return Me.columnnonveg
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As VIEW_PARTY_BOOKINGDETAILS1Row
            Get
                Return CType(Me.Rows(index),VIEW_PARTY_BOOKINGDETAILS1Row)
            End Get
        End Property
        
        Public Event VIEW_PARTY_BOOKINGDETAILS1RowChanged As VIEW_PARTY_BOOKINGDETAILS1RowChangeEventHandler
        
        Public Event VIEW_PARTY_BOOKINGDETAILS1RowChanging As VIEW_PARTY_BOOKINGDETAILS1RowChangeEventHandler
        
        Public Event VIEW_PARTY_BOOKINGDETAILS1RowDeleted As VIEW_PARTY_BOOKINGDETAILS1RowChangeEventHandler
        
        Public Event VIEW_PARTY_BOOKINGDETAILS1RowDeleting As VIEW_PARTY_BOOKINGDETAILS1RowChangeEventHandler
        
        Public Overloads Sub AddVIEW_PARTY_BOOKINGDETAILS1Row(ByVal row As VIEW_PARTY_BOOKINGDETAILS1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddVIEW_PARTY_BOOKINGDETAILS1Row( _
                    ByVal loccode As String,  _
                    ByVal bookingno As Decimal,  _
                    ByVal partydate As Date,  _
                    ByVal hallcode As String,  _
                    ByVal halldescription As String,  _
                    ByVal mcode As String,  _
                    ByVal mname As String,  _
                    ByVal fromtime As Decimal,  _
                    ByVal totime As Decimal,  _
                    ByVal bookingdate As Date,  _
                    ByVal associatename As String,  _
                    ByVal description As String,  _
                    ByVal halltaxflag As String,  _
                    ByVal membertype As String,  _
                    ByVal hallamount As Decimal,  _
                    ByVal freeze As String,  _
                    ByVal void As String,  _
                    ByVal adduserid As String,  _
                    ByVal adddatetime As Date,  _
                    ByVal halltype As String,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal hallTaxpercentage As Double,  _
                    ByVal hallTaxAMOUNT As Double,  _
                    ByVal NETHALLAMOUNT As Double,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal VEG As String,  _
                    ByVal nonveg As String) As VIEW_PARTY_BOOKINGDETAILS1Row
            Dim rowVIEW_PARTY_BOOKINGDETAILS1Row As VIEW_PARTY_BOOKINGDETAILS1Row = CType(Me.NewRow,VIEW_PARTY_BOOKINGDETAILS1Row)
            rowVIEW_PARTY_BOOKINGDETAILS1Row.ItemArray = New Object() {loccode, bookingno, partydate, hallcode, halldescription, mcode, mname, fromtime, totime, bookingdate, associatename, description, halltaxflag, membertype, hallamount, freeze, void, adduserid, adddatetime, halltype, BOOKINGTYPE, hallTaxpercentage, hallTaxAMOUNT, NETHALLAMOUNT, OCCUPANCY, VEG, nonveg}
            Me.Rows.Add(rowVIEW_PARTY_BOOKINGDETAILS1Row)
            Return rowVIEW_PARTY_BOOKINGDETAILS1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As VIEW_PARTY_BOOKINGDETAILS1DataTable = CType(MyBase.Clone,VIEW_PARTY_BOOKINGDETAILS1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New VIEW_PARTY_BOOKINGDETAILS1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnloccode = Me.Columns("loccode")
            Me.columnbookingno = Me.Columns("bookingno")
            Me.columnpartydate = Me.Columns("partydate")
            Me.columnhallcode = Me.Columns("hallcode")
            Me.columnhalldescription = Me.Columns("halldescription")
            Me.columnmcode = Me.Columns("mcode")
            Me.columnmname = Me.Columns("mname")
            Me.columnfromtime = Me.Columns("fromtime")
            Me.columntotime = Me.Columns("totime")
            Me.columnbookingdate = Me.Columns("bookingdate")
            Me.columnassociatename = Me.Columns("associatename")
            Me.columndescription = Me.Columns("description")
            Me.columnhalltaxflag = Me.Columns("halltaxflag")
            Me.columnmembertype = Me.Columns("membertype")
            Me.columnhallamount = Me.Columns("hallamount")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnvoid = Me.Columns("void")
            Me.columnadduserid = Me.Columns("adduserid")
            Me.columnadddatetime = Me.Columns("adddatetime")
            Me.columnhalltype = Me.Columns("halltype")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnhallTaxpercentage = Me.Columns("hallTaxpercentage")
            Me.columnhallTaxAMOUNT = Me.Columns("hallTaxAMOUNT")
            Me.columnNETHALLAMOUNT = Me.Columns("NETHALLAMOUNT")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnVEG = Me.Columns("VEG")
            Me.columnnonveg = Me.Columns("nonveg")
        End Sub
        
        Private Sub InitClass()
            Me.columnloccode = New DataColumn("loccode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnloccode)
            Me.columnbookingno = New DataColumn("bookingno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookingno)
            Me.columnpartydate = New DataColumn("partydate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpartydate)
            Me.columnhallcode = New DataColumn("hallcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallcode)
            Me.columnhalldescription = New DataColumn("halldescription", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalldescription)
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnmname = New DataColumn("mname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmname)
            Me.columnfromtime = New DataColumn("fromtime", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfromtime)
            Me.columntotime = New DataColumn("totime", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotime)
            Me.columnbookingdate = New DataColumn("bookingdate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookingdate)
            Me.columnassociatename = New DataColumn("associatename", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnassociatename)
            Me.columndescription = New DataColumn("description", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndescription)
            Me.columnhalltaxflag = New DataColumn("halltaxflag", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltaxflag)
            Me.columnmembertype = New DataColumn("membertype", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmembertype)
            Me.columnhallamount = New DataColumn("hallamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallamount)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnvoid = New DataColumn("void", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvoid)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
            Me.columnadddatetime = New DataColumn("adddatetime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddatetime)
            Me.columnhalltype = New DataColumn("halltype", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltype)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnhallTaxpercentage = New DataColumn("hallTaxpercentage", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallTaxpercentage)
            Me.columnhallTaxAMOUNT = New DataColumn("hallTaxAMOUNT", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallTaxAMOUNT)
            Me.columnNETHALLAMOUNT = New DataColumn("NETHALLAMOUNT", GetType(System.Double), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETHALLAMOUNT)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnVEG = New DataColumn("VEG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEG)
            Me.columnnonveg = New DataColumn("nonveg", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnonveg)
            Me.columnloccode.ReadOnly = true
            Me.columnbookingno.ReadOnly = true
            Me.columnpartydate.ReadOnly = true
            Me.columnhallcode.ReadOnly = true
            Me.columnhalldescription.ReadOnly = true
            Me.columnmcode.ReadOnly = true
            Me.columnmname.ReadOnly = true
            Me.columnfromtime.ReadOnly = true
            Me.columntotime.ReadOnly = true
            Me.columnbookingdate.ReadOnly = true
            Me.columnassociatename.ReadOnly = true
            Me.columndescription.ReadOnly = true
            Me.columnhalltaxflag.ReadOnly = true
            Me.columnmembertype.ReadOnly = true
            Me.columnhallamount.ReadOnly = true
            Me.columnfreeze.ReadOnly = true
            Me.columnvoid.ReadOnly = true
            Me.columnadduserid.ReadOnly = true
            Me.columnadddatetime.ReadOnly = true
            Me.columnhalltype.ReadOnly = true
            Me.columnBOOKINGTYPE.ReadOnly = true
            Me.columnhallTaxpercentage.ReadOnly = true
            Me.columnhallTaxAMOUNT.ReadOnly = true
            Me.columnNETHALLAMOUNT.ReadOnly = true
            Me.columnOCCUPANCY.ReadOnly = true
            Me.columnVEG.ReadOnly = true
            Me.columnnonveg.ReadOnly = true
        End Sub
        
        Public Function NewVIEW_PARTY_BOOKINGDETAILS1Row() As VIEW_PARTY_BOOKINGDETAILS1Row
            Return CType(Me.NewRow,VIEW_PARTY_BOOKINGDETAILS1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New VIEW_PARTY_BOOKINGDETAILS1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VIEW_PARTY_BOOKINGDETAILS1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VIEW_PARTY_BOOKINGDETAILS1RowChangedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BOOKINGDETAILS1RowChanged(Me, New VIEW_PARTY_BOOKINGDETAILS1RowChangeEvent(CType(e.Row,VIEW_PARTY_BOOKINGDETAILS1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VIEW_PARTY_BOOKINGDETAILS1RowChangingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BOOKINGDETAILS1RowChanging(Me, New VIEW_PARTY_BOOKINGDETAILS1RowChangeEvent(CType(e.Row,VIEW_PARTY_BOOKINGDETAILS1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VIEW_PARTY_BOOKINGDETAILS1RowDeletedEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BOOKINGDETAILS1RowDeleted(Me, New VIEW_PARTY_BOOKINGDETAILS1RowChangeEvent(CType(e.Row,VIEW_PARTY_BOOKINGDETAILS1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VIEW_PARTY_BOOKINGDETAILS1RowDeletingEvent) Is Nothing) Then
                RaiseEvent VIEW_PARTY_BOOKINGDETAILS1RowDeleting(Me, New VIEW_PARTY_BOOKINGDETAILS1RowChangeEvent(CType(e.Row,VIEW_PARTY_BOOKINGDETAILS1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemoveVIEW_PARTY_BOOKINGDETAILS1Row(ByVal row As VIEW_PARTY_BOOKINGDETAILS1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_BOOKINGDETAILS1Row
        Inherits DataRow
        
        Private tableVIEW_PARTY_BOOKINGDETAILS1 As VIEW_PARTY_BOOKINGDETAILS1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableVIEW_PARTY_BOOKINGDETAILS1 = CType(Me.Table,VIEW_PARTY_BOOKINGDETAILS1DataTable)
        End Sub
        
        Public Property loccode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.loccodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.loccodeColumn) = value
            End Set
        End Property
        
        Public Property bookingno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.bookingnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.bookingnoColumn) = value
            End Set
        End Property
        
        Public Property partydate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.partydateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.partydateColumn) = value
            End Set
        End Property
        
        Public Property hallcode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.hallcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.hallcodeColumn) = value
            End Set
        End Property
        
        Public Property halldescription As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.halldescriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.halldescriptionColumn) = value
            End Set
        End Property
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.mcodeColumn) = value
            End Set
        End Property
        
        Public Property mname As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.mnameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.mnameColumn) = value
            End Set
        End Property
        
        Public Property fromtime As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.fromtimeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.fromtimeColumn) = value
            End Set
        End Property
        
        Public Property totime As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.totimeColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.totimeColumn) = value
            End Set
        End Property
        
        Public Property bookingdate As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.bookingdateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.bookingdateColumn) = value
            End Set
        End Property
        
        Public Property associatename As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.associatenameColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.associatenameColumn) = value
            End Set
        End Property
        
        Public Property description As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.descriptionColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.descriptionColumn) = value
            End Set
        End Property
        
        Public Property halltaxflag As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.halltaxflagColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.halltaxflagColumn) = value
            End Set
        End Property
        
        Public Property membertype As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.membertypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.membertypeColumn) = value
            End Set
        End Property
        
        Public Property hallamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.hallamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.hallamountColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.freezeColumn) = value
            End Set
        End Property
        
        Public Property void As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.voidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.voidColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.adduseridColumn) = value
            End Set
        End Property
        
        Public Property adddatetime As Date
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.adddatetimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.adddatetimeColumn) = value
            End Set
        End Property
        
        Public Property halltype As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.halltypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.halltypeColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.BOOKINGTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property hallTaxpercentage As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.hallTaxpercentageColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.hallTaxpercentageColumn) = value
            End Set
        End Property
        
        Public Property hallTaxAMOUNT As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.hallTaxAMOUNTColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.hallTaxAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property NETHALLAMOUNT As Double
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.NETHALLAMOUNTColumn),Double)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.NETHALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property VEG As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.VEGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.VEGColumn) = value
            End Set
        End Property
        
        Public Property nonveg As String
            Get
                Try 
                    Return CType(Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.nonvegColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.nonvegColumn) = value
            End Set
        End Property
        
        Public Function IsloccodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.loccodeColumn)
        End Function
        
        Public Sub SetloccodeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.loccodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbookingnoNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.bookingnoColumn)
        End Function
        
        Public Sub SetbookingnoNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.bookingnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspartydateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.partydateColumn)
        End Function
        
        Public Sub SetpartydateNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.partydateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallcodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.hallcodeColumn)
        End Function
        
        Public Sub SethallcodeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.hallcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalldescriptionNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.halldescriptionColumn)
        End Function
        
        Public Sub SethalldescriptionNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.halldescriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmnameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.mnameColumn)
        End Function
        
        Public Sub SetmnameNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.mnameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfromtimeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.fromtimeColumn)
        End Function
        
        Public Sub SetfromtimeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.fromtimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotimeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.totimeColumn)
        End Function
        
        Public Sub SettotimeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.totimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbookingdateNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.bookingdateColumn)
        End Function
        
        Public Sub SetbookingdateNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.bookingdateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsassociatenameNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.associatenameColumn)
        End Function
        
        Public Sub SetassociatenameNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.associatenameColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.descriptionColumn)
        End Function
        
        Public Sub SetdescriptionNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.descriptionColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalltaxflagNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.halltaxflagColumn)
        End Function
        
        Public Sub SethalltaxflagNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.halltaxflagColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmembertypeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.membertypeColumn)
        End Function
        
        Public Sub SetmembertypeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.membertypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallamountNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.hallamountColumn)
        End Function
        
        Public Sub SethallamountNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.hallamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvoidNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.voidColumn)
        End Function
        
        Public Sub SetvoidNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.voidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.adduseridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddatetimeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.adddatetimeColumn)
        End Function
        
        Public Sub SetadddatetimeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.adddatetimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalltypeNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.halltypeColumn)
        End Function
        
        Public Sub SethalltypeNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.halltypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGTYPENull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.BOOKINGTYPEColumn)
        End Function
        
        Public Sub SetBOOKINGTYPENull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.BOOKINGTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallTaxpercentageNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.hallTaxpercentageColumn)
        End Function
        
        Public Sub SethallTaxpercentageNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.hallTaxpercentageColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallTaxAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.hallTaxAMOUNTColumn)
        End Function
        
        Public Sub SethallTaxAMOUNTNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.hallTaxAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNETHALLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.NETHALLAMOUNTColumn)
        End Function
        
        Public Sub SetNETHALLAMOUNTNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.NETHALLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.VEGColumn)
        End Function
        
        Public Sub SetVEGNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.VEGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnonvegNull() As Boolean
            Return Me.IsNull(Me.tableVIEW_PARTY_BOOKINGDETAILS1.nonvegColumn)
        End Function
        
        Public Sub SetnonvegNull()
            Me(Me.tableVIEW_PARTY_BOOKINGDETAILS1.nonvegColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class VIEW_PARTY_BOOKINGDETAILS1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As VIEW_PARTY_BOOKINGDETAILS1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As VIEW_PARTY_BOOKINGDETAILS1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As VIEW_PARTY_BOOKINGDETAILS1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyarrangementfinalDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnbookingtype As DataColumn
        
        Private columnbookingno As DataColumn
        
        Private columnmcode As DataColumn
        
        Private columnmname As DataColumn
        
        Private columnhalldesc As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columntotalamount As DataColumn
        
        Friend Sub New()
            MyBase.New("partyarrangementfinal")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property bookingtypeColumn As DataColumn
            Get
                Return Me.columnbookingtype
            End Get
        End Property
        
        Friend ReadOnly Property bookingnoColumn As DataColumn
            Get
                Return Me.columnbookingno
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property mnameColumn As DataColumn
            Get
                Return Me.columnmname
            End Get
        End Property
        
        Friend ReadOnly Property halldescColumn As DataColumn
            Get
                Return Me.columnhalldesc
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property totalamountColumn As DataColumn
            Get
                Return Me.columntotalamount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As partyarrangementfinalRow
            Get
                Return CType(Me.Rows(index),partyarrangementfinalRow)
            End Get
        End Property
        
        Public Event partyarrangementfinalRowChanged As partyarrangementfinalRowChangeEventHandler
        
        Public Event partyarrangementfinalRowChanging As partyarrangementfinalRowChangeEventHandler
        
        Public Event partyarrangementfinalRowDeleted As partyarrangementfinalRowChangeEventHandler
        
        Public Event partyarrangementfinalRowDeleting As partyarrangementfinalRowChangeEventHandler
        
        Public Overloads Sub AddpartyarrangementfinalRow(ByVal row As partyarrangementfinalRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddpartyarrangementfinalRow(ByVal bookingtype As String, ByVal bookingno As Decimal, ByVal mcode As String, ByVal mname As String, ByVal halldesc As String, ByVal PARTYDATE As Date, ByVal totalamount As Decimal) As partyarrangementfinalRow
            Dim rowpartyarrangementfinalRow As partyarrangementfinalRow = CType(Me.NewRow,partyarrangementfinalRow)
            rowpartyarrangementfinalRow.ItemArray = New Object() {bookingtype, bookingno, mcode, mname, halldesc, PARTYDATE, totalamount}
            Me.Rows.Add(rowpartyarrangementfinalRow)
            Return rowpartyarrangementfinalRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As partyarrangementfinalDataTable = CType(MyBase.Clone,partyarrangementfinalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New partyarrangementfinalDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnbookingtype = Me.Columns("bookingtype")
            Me.columnbookingno = Me.Columns("bookingno")
            Me.columnmcode = Me.Columns("mcode")
            Me.columnmname = Me.Columns("mname")
            Me.columnhalldesc = Me.Columns("halldesc")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columntotalamount = Me.Columns("totalamount")
        End Sub
        
        Private Sub InitClass()
            Me.columnbookingtype = New DataColumn("bookingtype", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookingtype)
            Me.columnbookingno = New DataColumn("bookingno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookingno)
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnmname = New DataColumn("mname", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmname)
            Me.columnhalldesc = New DataColumn("halldesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalldesc)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columntotalamount = New DataColumn("totalamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotalamount)
            Me.columnmcode.AllowDBNull = false
            Me.columnmname.AllowDBNull = false
            Me.columnhalldesc.AllowDBNull = false
            Me.columnPARTYDATE.AllowDBNull = false
        End Sub
        
        Public Function NewpartyarrangementfinalRow() As partyarrangementfinalRow
            Return CType(Me.NewRow,partyarrangementfinalRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New partyarrangementfinalRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(partyarrangementfinalRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.partyarrangementfinalRowChangedEvent) Is Nothing) Then
                RaiseEvent partyarrangementfinalRowChanged(Me, New partyarrangementfinalRowChangeEvent(CType(e.Row,partyarrangementfinalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.partyarrangementfinalRowChangingEvent) Is Nothing) Then
                RaiseEvent partyarrangementfinalRowChanging(Me, New partyarrangementfinalRowChangeEvent(CType(e.Row,partyarrangementfinalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.partyarrangementfinalRowDeletedEvent) Is Nothing) Then
                RaiseEvent partyarrangementfinalRowDeleted(Me, New partyarrangementfinalRowChangeEvent(CType(e.Row,partyarrangementfinalRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.partyarrangementfinalRowDeletingEvent) Is Nothing) Then
                RaiseEvent partyarrangementfinalRowDeleting(Me, New partyarrangementfinalRowChangeEvent(CType(e.Row,partyarrangementfinalRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovepartyarrangementfinalRow(ByVal row As partyarrangementfinalRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyarrangementfinalRow
        Inherits DataRow
        
        Private tablepartyarrangementfinal As partyarrangementfinalDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepartyarrangementfinal = CType(Me.Table,partyarrangementfinalDataTable)
        End Sub
        
        Public Property bookingtype As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyarrangementfinal.bookingtypeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyarrangementfinal.bookingtypeColumn) = value
            End Set
        End Property
        
        Public Property bookingno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyarrangementfinal.bookingnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyarrangementfinal.bookingnoColumn) = value
            End Set
        End Property
        
        Public Property mcode As String
            Get
                Return CType(Me(Me.tablepartyarrangementfinal.mcodeColumn),String)
            End Get
            Set
                Me(Me.tablepartyarrangementfinal.mcodeColumn) = value
            End Set
        End Property
        
        Public Property mname As String
            Get
                Return CType(Me(Me.tablepartyarrangementfinal.mnameColumn),String)
            End Get
            Set
                Me(Me.tablepartyarrangementfinal.mnameColumn) = value
            End Set
        End Property
        
        Public Property halldesc As String
            Get
                Return CType(Me(Me.tablepartyarrangementfinal.halldescColumn),String)
            End Get
            Set
                Me(Me.tablepartyarrangementfinal.halldescColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Return CType(Me(Me.tablepartyarrangementfinal.PARTYDATEColumn),Date)
            End Get
            Set
                Me(Me.tablepartyarrangementfinal.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property totalamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyarrangementfinal.totalamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyarrangementfinal.totalamountColumn) = value
            End Set
        End Property
        
        Public Function IsbookingtypeNull() As Boolean
            Return Me.IsNull(Me.tablepartyarrangementfinal.bookingtypeColumn)
        End Function
        
        Public Sub SetbookingtypeNull()
            Me(Me.tablepartyarrangementfinal.bookingtypeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbookingnoNull() As Boolean
            Return Me.IsNull(Me.tablepartyarrangementfinal.bookingnoColumn)
        End Function
        
        Public Sub SetbookingnoNull()
            Me(Me.tablepartyarrangementfinal.bookingnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotalamountNull() As Boolean
            Return Me.IsNull(Me.tablepartyarrangementfinal.totalamountColumn)
        End Function
        
        Public Sub SettotalamountNull()
            Me(Me.tablepartyarrangementfinal.totalamountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyarrangementfinalRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As partyarrangementfinalRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As partyarrangementfinalRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As partyarrangementfinalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_HALLBOOKINGDETAILS_NEWDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCHITNO As DataColumn
        
        Private columnpriority As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnCATEGORY As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnHALLDESC As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnveg As DataColumn
        
        Private columnnonveg As DataColumn
        
        Private columnPCODE As DataColumn
        
        Private columnHMLOCCODE As DataColumn
        
        Private columnLOCDESC As DataColumn
        
        Private columnPDESC As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columngroupcode As DataColumn
        
        Private columnPADD1 As DataColumn
        
        Private columnPADD2 As DataColumn
        
        Private columnPCITY As DataColumn
        
        Private columnPPHONE1 As DataColumn
        
        Private columnCEMAIL As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnFROMTIME As DataColumn
        
        Private columnTOTIME As DataColumn
        
        Private columnHALLAMOUNT As DataColumn
        
        Private columnBOOKINGSTATUS As DataColumn
        
        Private columnBOOKINGFLAG As DataColumn
        
        Private columnBILLINGFLAG As DataColumn
        
        Private columnCANCELFLAG As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnRECEIPTNO As DataColumn
        
        Private columnRECEIPTDATE As DataColumn
        
        Private columnRAMOUNT As DataColumn
        
        Private columnAMOUNTTYPE As DataColumn
        
        Private columnTTYPE As DataColumn
        
        Private columnPRROWID As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnRITEMDESC As DataColumn
        
        Private columnRQTY As DataColumn
        
        Private columnRRATE As DataColumn
        
        Private columnPRAMOUNT As DataColumn
        
        Private columnVEGRATE As DataColumn
        
        Private columnNONVEGRATE As DataColumn
        
        Private columnPRTAXPERC As DataColumn
        
        Private columnPRTAXAMOUNT As DataColumn
        
        Private columnPRTOTALAMOUNT As DataColumn
        
        Private columnTARIFFCODE As DataColumn
        
        Private columnTARIFFDESC As DataColumn
        
        Private columnTRATE As DataColumn
        
        Private columnAROWID As DataColumn
        
        Private columnAITEMCODE As DataColumn
        
        Private columnAITEMDESC As DataColumn
        
        Private columnAQTY As DataColumn
        
        Private columnARATE As DataColumn
        
        Private columnAAMOUNT As DataColumn
        
        Private columnATAXAMOUNT As DataColumn
        
        Private columnATOTALAMOUNT As DataColumn
        
        Private columnHALLTAXAMOUNT As DataColumn
        
        Private columnHALLTAXPERC As DataColumn
        
        Private columnHALLNETAMOUNT As DataColumn
        
        Private columnHOCCUPANCY As DataColumn
        
        Private columnISBFCHARGE As DataColumn
        
        Private columnASBFCHARGE As DataColumn
        
        Private columnTSBFCHARGE As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_VIEW_HALLBOOKINGDETAILS_NEW")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property CHITNOColumn As DataColumn
            Get
                Return Me.columnCHITNO
            End Get
        End Property
        
        Friend ReadOnly Property priorityColumn As DataColumn
            Get
                Return Me.columnpriority
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property CATEGORYColumn As DataColumn
            Get
                Return Me.columnCATEGORY
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property HALLDESCColumn As DataColumn
            Get
                Return Me.columnHALLDESC
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property vegColumn As DataColumn
            Get
                Return Me.columnveg
            End Get
        End Property
        
        Friend ReadOnly Property nonvegColumn As DataColumn
            Get
                Return Me.columnnonveg
            End Get
        End Property
        
        Friend ReadOnly Property PCODEColumn As DataColumn
            Get
                Return Me.columnPCODE
            End Get
        End Property
        
        Friend ReadOnly Property HMLOCCODEColumn As DataColumn
            Get
                Return Me.columnHMLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property LOCDESCColumn As DataColumn
            Get
                Return Me.columnLOCDESC
            End Get
        End Property
        
        Friend ReadOnly Property PDESCColumn As DataColumn
            Get
                Return Me.columnPDESC
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property groupcodeColumn As DataColumn
            Get
                Return Me.columngroupcode
            End Get
        End Property
        
        Friend ReadOnly Property PADD1Column As DataColumn
            Get
                Return Me.columnPADD1
            End Get
        End Property
        
        Friend ReadOnly Property PADD2Column As DataColumn
            Get
                Return Me.columnPADD2
            End Get
        End Property
        
        Friend ReadOnly Property PCITYColumn As DataColumn
            Get
                Return Me.columnPCITY
            End Get
        End Property
        
        Friend ReadOnly Property PPHONE1Column As DataColumn
            Get
                Return Me.columnPPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property CEMAILColumn As DataColumn
            Get
                Return Me.columnCEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property FROMTIMEColumn As DataColumn
            Get
                Return Me.columnFROMTIME
            End Get
        End Property
        
        Friend ReadOnly Property TOTIMEColumn As DataColumn
            Get
                Return Me.columnTOTIME
            End Get
        End Property
        
        Friend ReadOnly Property HALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGSTATUSColumn As DataColumn
            Get
                Return Me.columnBOOKINGSTATUS
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGFLAGColumn As DataColumn
            Get
                Return Me.columnBOOKINGFLAG
            End Get
        End Property
        
        Friend ReadOnly Property BILLINGFLAGColumn As DataColumn
            Get
                Return Me.columnBILLINGFLAG
            End Get
        End Property
        
        Friend ReadOnly Property CANCELFLAGColumn As DataColumn
            Get
                Return Me.columnCANCELFLAG
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTNOColumn As DataColumn
            Get
                Return Me.columnRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property RAMOUNTColumn As DataColumn
            Get
                Return Me.columnRAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTTYPEColumn As DataColumn
            Get
                Return Me.columnAMOUNTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property TTYPEColumn As DataColumn
            Get
                Return Me.columnTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property PRROWIDColumn As DataColumn
            Get
                Return Me.columnPRROWID
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property RITEMDESCColumn As DataColumn
            Get
                Return Me.columnRITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property RQTYColumn As DataColumn
            Get
                Return Me.columnRQTY
            End Get
        End Property
        
        Friend ReadOnly Property RRATEColumn As DataColumn
            Get
                Return Me.columnRRATE
            End Get
        End Property
        
        Friend ReadOnly Property PRAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property VEGRATEColumn As DataColumn
            Get
                Return Me.columnVEGRATE
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGRATEColumn As DataColumn
            Get
                Return Me.columnNONVEGRATE
            End Get
        End Property
        
        Friend ReadOnly Property PRTAXPERCColumn As DataColumn
            Get
                Return Me.columnPRTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property PRTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property PRTOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnPRTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFCODEColumn As DataColumn
            Get
                Return Me.columnTARIFFCODE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFDESCColumn As DataColumn
            Get
                Return Me.columnTARIFFDESC
            End Get
        End Property
        
        Friend ReadOnly Property TRATEColumn As DataColumn
            Get
                Return Me.columnTRATE
            End Get
        End Property
        
        Friend ReadOnly Property AROWIDColumn As DataColumn
            Get
                Return Me.columnAROWID
            End Get
        End Property
        
        Friend ReadOnly Property AITEMCODEColumn As DataColumn
            Get
                Return Me.columnAITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property AITEMDESCColumn As DataColumn
            Get
                Return Me.columnAITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property AQTYColumn As DataColumn
            Get
                Return Me.columnAQTY
            End Get
        End Property
        
        Friend ReadOnly Property ARATEColumn As DataColumn
            Get
                Return Me.columnARATE
            End Get
        End Property
        
        Friend ReadOnly Property AAMOUNTColumn As DataColumn
            Get
                Return Me.columnAAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ATAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnATAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ATOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnATOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXPERCColumn As DataColumn
            Get
                Return Me.columnHALLTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property HALLNETAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLNETAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnHOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property ISBFCHARGEColumn As DataColumn
            Get
                Return Me.columnISBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property ASBFCHARGEColumn As DataColumn
            Get
                Return Me.columnASBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property TSBFCHARGEColumn As DataColumn
            Get
                Return Me.columnTSBFCHARGE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow
            Get
                Return CType(Me.Rows(index),PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow)
            End Get
        End Property
        
        Public Event PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChanged As PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChangeEventHandler
        
        Public Event PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChanging As PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChangeEventHandler
        
        Public Event PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowDeleted As PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChangeEventHandler
        
        Public Event PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowDeleting As PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_VIEW_HALLBOOKINGDETAILS_NEWRow(ByVal row As PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_VIEW_HALLBOOKINGDETAILS_NEWRow( _
                    ByVal CHITNO As String,  _
                    ByVal priority As Integer,  _
                    ByVal LOCCODE As String,  _
                    ByVal CATEGORY As String,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal HALLCODE As String,  _
                    ByVal HALLDESC As String,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal veg As String,  _
                    ByVal nonveg As String,  _
                    ByVal PCODE As String,  _
                    ByVal HMLOCCODE As String,  _
                    ByVal LOCDESC As String,  _
                    ByVal PDESC As String,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal groupcode As String,  _
                    ByVal PADD1 As String,  _
                    ByVal PADD2 As String,  _
                    ByVal PCITY As String,  _
                    ByVal PPHONE1 As String,  _
                    ByVal CEMAIL As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal FROMTIME As Decimal,  _
                    ByVal TOTIME As Decimal,  _
                    ByVal HALLAMOUNT As Decimal,  _
                    ByVal BOOKINGSTATUS As String,  _
                    ByVal BOOKINGFLAG As String,  _
                    ByVal BILLINGFLAG As String,  _
                    ByVal CANCELFLAG As String,  _
                    ByVal FREEZE As String,  _
                    ByVal RECEIPTNO As String,  _
                    ByVal RECEIPTDATE As Date,  _
                    ByVal RAMOUNT As Decimal,  _
                    ByVal AMOUNTTYPE As String,  _
                    ByVal TTYPE As String,  _
                    ByVal PRROWID As Decimal,  _
                    ByVal ITEMCODE As String,  _
                    ByVal RITEMDESC As String,  _
                    ByVal RQTY As Decimal,  _
                    ByVal RRATE As Decimal,  _
                    ByVal PRAMOUNT As Decimal,  _
                    ByVal VEGRATE As Decimal,  _
                    ByVal NONVEGRATE As Decimal,  _
                    ByVal PRTAXPERC As Decimal,  _
                    ByVal PRTAXAMOUNT As Decimal,  _
                    ByVal PRTOTALAMOUNT As Decimal,  _
                    ByVal TARIFFCODE As String,  _
                    ByVal TARIFFDESC As String,  _
                    ByVal TRATE As Decimal,  _
                    ByVal AROWID As Decimal,  _
                    ByVal AITEMCODE As String,  _
                    ByVal AITEMDESC As String,  _
                    ByVal AQTY As Decimal,  _
                    ByVal ARATE As Decimal,  _
                    ByVal AAMOUNT As Decimal,  _
                    ByVal ATAXAMOUNT As Decimal,  _
                    ByVal ATOTALAMOUNT As Decimal,  _
                    ByVal HALLTAXAMOUNT As Decimal,  _
                    ByVal HALLTAXPERC As Decimal,  _
                    ByVal HALLNETAMOUNT As Decimal,  _
                    ByVal HOCCUPANCY As Decimal,  _
                    ByVal ISBFCHARGE As String,  _
                    ByVal ASBFCHARGE As String,  _
                    ByVal TSBFCHARGE As String) As PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow
            Dim rowPARTY_VIEW_HALLBOOKINGDETAILS_NEWRow As PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow = CType(Me.NewRow,PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow)
            rowPARTY_VIEW_HALLBOOKINGDETAILS_NEWRow.ItemArray = New Object() {CHITNO, priority, LOCCODE, CATEGORY, BOOKINGTYPE, HALLCODE, HALLDESC, OCCUPANCY, veg, nonveg, PCODE, HMLOCCODE, LOCDESC, PDESC, BOOKINGNO, PARTYDATE, MCODE, MNAME, groupcode, PADD1, PADD2, PCITY, PPHONE1, CEMAIL, BOOKINGDATE, FROMTIME, TOTIME, HALLAMOUNT, BOOKINGSTATUS, BOOKINGFLAG, BILLINGFLAG, CANCELFLAG, FREEZE, RECEIPTNO, RECEIPTDATE, RAMOUNT, AMOUNTTYPE, TTYPE, PRROWID, ITEMCODE, RITEMDESC, RQTY, RRATE, PRAMOUNT, VEGRATE, NONVEGRATE, PRTAXPERC, PRTAXAMOUNT, PRTOTALAMOUNT, TARIFFCODE, TARIFFDESC, TRATE, AROWID, AITEMCODE, AITEMDESC, AQTY, ARATE, AAMOUNT, ATAXAMOUNT, ATOTALAMOUNT, HALLTAXAMOUNT, HALLTAXPERC, HALLNETAMOUNT, HOCCUPANCY, ISBFCHARGE, ASBFCHARGE, TSBFCHARGE}
            Me.Rows.Add(rowPARTY_VIEW_HALLBOOKINGDETAILS_NEWRow)
            Return rowPARTY_VIEW_HALLBOOKINGDETAILS_NEWRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_VIEW_HALLBOOKINGDETAILS_NEWDataTable = CType(MyBase.Clone,PARTY_VIEW_HALLBOOKINGDETAILS_NEWDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_VIEW_HALLBOOKINGDETAILS_NEWDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnCHITNO = Me.Columns("CHITNO")
            Me.columnpriority = Me.Columns("priority")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnCATEGORY = Me.Columns("CATEGORY")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnHALLDESC = Me.Columns("HALLDESC")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnveg = Me.Columns("veg")
            Me.columnnonveg = Me.Columns("nonveg")
            Me.columnPCODE = Me.Columns("PCODE")
            Me.columnHMLOCCODE = Me.Columns("HMLOCCODE")
            Me.columnLOCDESC = Me.Columns("LOCDESC")
            Me.columnPDESC = Me.Columns("PDESC")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columngroupcode = Me.Columns("groupcode")
            Me.columnPADD1 = Me.Columns("PADD1")
            Me.columnPADD2 = Me.Columns("PADD2")
            Me.columnPCITY = Me.Columns("PCITY")
            Me.columnPPHONE1 = Me.Columns("PPHONE1")
            Me.columnCEMAIL = Me.Columns("CEMAIL")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnFROMTIME = Me.Columns("FROMTIME")
            Me.columnTOTIME = Me.Columns("TOTIME")
            Me.columnHALLAMOUNT = Me.Columns("HALLAMOUNT")
            Me.columnBOOKINGSTATUS = Me.Columns("BOOKINGSTATUS")
            Me.columnBOOKINGFLAG = Me.Columns("BOOKINGFLAG")
            Me.columnBILLINGFLAG = Me.Columns("BILLINGFLAG")
            Me.columnCANCELFLAG = Me.Columns("CANCELFLAG")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnRECEIPTNO = Me.Columns("RECEIPTNO")
            Me.columnRECEIPTDATE = Me.Columns("RECEIPTDATE")
            Me.columnRAMOUNT = Me.Columns("RAMOUNT")
            Me.columnAMOUNTTYPE = Me.Columns("AMOUNTTYPE")
            Me.columnTTYPE = Me.Columns("TTYPE")
            Me.columnPRROWID = Me.Columns("PRROWID")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnRITEMDESC = Me.Columns("RITEMDESC")
            Me.columnRQTY = Me.Columns("RQTY")
            Me.columnRRATE = Me.Columns("RRATE")
            Me.columnPRAMOUNT = Me.Columns("PRAMOUNT")
            Me.columnVEGRATE = Me.Columns("VEGRATE")
            Me.columnNONVEGRATE = Me.Columns("NONVEGRATE")
            Me.columnPRTAXPERC = Me.Columns("PRTAXPERC")
            Me.columnPRTAXAMOUNT = Me.Columns("PRTAXAMOUNT")
            Me.columnPRTOTALAMOUNT = Me.Columns("PRTOTALAMOUNT")
            Me.columnTARIFFCODE = Me.Columns("TARIFFCODE")
            Me.columnTARIFFDESC = Me.Columns("TARIFFDESC")
            Me.columnTRATE = Me.Columns("TRATE")
            Me.columnAROWID = Me.Columns("AROWID")
            Me.columnAITEMCODE = Me.Columns("AITEMCODE")
            Me.columnAITEMDESC = Me.Columns("AITEMDESC")
            Me.columnAQTY = Me.Columns("AQTY")
            Me.columnARATE = Me.Columns("ARATE")
            Me.columnAAMOUNT = Me.Columns("AAMOUNT")
            Me.columnATAXAMOUNT = Me.Columns("ATAXAMOUNT")
            Me.columnATOTALAMOUNT = Me.Columns("ATOTALAMOUNT")
            Me.columnHALLTAXAMOUNT = Me.Columns("HALLTAXAMOUNT")
            Me.columnHALLTAXPERC = Me.Columns("HALLTAXPERC")
            Me.columnHALLNETAMOUNT = Me.Columns("HALLNETAMOUNT")
            Me.columnHOCCUPANCY = Me.Columns("HOCCUPANCY")
            Me.columnISBFCHARGE = Me.Columns("ISBFCHARGE")
            Me.columnASBFCHARGE = Me.Columns("ASBFCHARGE")
            Me.columnTSBFCHARGE = Me.Columns("TSBFCHARGE")
        End Sub
        
        Private Sub InitClass()
            Me.columnCHITNO = New DataColumn("CHITNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHITNO)
            Me.columnpriority = New DataColumn("priority", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpriority)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnCATEGORY = New DataColumn("CATEGORY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATEGORY)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnHALLDESC = New DataColumn("HALLDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLDESC)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnveg = New DataColumn("veg", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnveg)
            Me.columnnonveg = New DataColumn("nonveg", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnonveg)
            Me.columnPCODE = New DataColumn("PCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCODE)
            Me.columnHMLOCCODE = New DataColumn("HMLOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHMLOCCODE)
            Me.columnLOCDESC = New DataColumn("LOCDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCDESC)
            Me.columnPDESC = New DataColumn("PDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPDESC)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columngroupcode = New DataColumn("groupcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columngroupcode)
            Me.columnPADD1 = New DataColumn("PADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD1)
            Me.columnPADD2 = New DataColumn("PADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPADD2)
            Me.columnPCITY = New DataColumn("PCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPCITY)
            Me.columnPPHONE1 = New DataColumn("PPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPPHONE1)
            Me.columnCEMAIL = New DataColumn("CEMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCEMAIL)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnFROMTIME = New DataColumn("FROMTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMTIME)
            Me.columnTOTIME = New DataColumn("TOTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTIME)
            Me.columnHALLAMOUNT = New DataColumn("HALLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLAMOUNT)
            Me.columnBOOKINGSTATUS = New DataColumn("BOOKINGSTATUS", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGSTATUS)
            Me.columnBOOKINGFLAG = New DataColumn("BOOKINGFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGFLAG)
            Me.columnBILLINGFLAG = New DataColumn("BILLINGFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLINGFLAG)
            Me.columnCANCELFLAG = New DataColumn("CANCELFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELFLAG)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnRECEIPTNO = New DataColumn("RECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTNO)
            Me.columnRECEIPTDATE = New DataColumn("RECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTDATE)
            Me.columnRAMOUNT = New DataColumn("RAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRAMOUNT)
            Me.columnAMOUNTTYPE = New DataColumn("AMOUNTTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNTTYPE)
            Me.columnTTYPE = New DataColumn("TTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTYPE)
            Me.columnPRROWID = New DataColumn("PRROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRROWID)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnRITEMDESC = New DataColumn("RITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRITEMDESC)
            Me.columnRQTY = New DataColumn("RQTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRQTY)
            Me.columnRRATE = New DataColumn("RRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRRATE)
            Me.columnPRAMOUNT = New DataColumn("PRAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRAMOUNT)
            Me.columnVEGRATE = New DataColumn("VEGRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEGRATE)
            Me.columnNONVEGRATE = New DataColumn("NONVEGRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEGRATE)
            Me.columnPRTAXPERC = New DataColumn("PRTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTAXPERC)
            Me.columnPRTAXAMOUNT = New DataColumn("PRTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTAXAMOUNT)
            Me.columnPRTOTALAMOUNT = New DataColumn("PRTOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPRTOTALAMOUNT)
            Me.columnTARIFFCODE = New DataColumn("TARIFFCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFCODE)
            Me.columnTARIFFDESC = New DataColumn("TARIFFDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFDESC)
            Me.columnTRATE = New DataColumn("TRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTRATE)
            Me.columnAROWID = New DataColumn("AROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAROWID)
            Me.columnAITEMCODE = New DataColumn("AITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAITEMCODE)
            Me.columnAITEMDESC = New DataColumn("AITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAITEMDESC)
            Me.columnAQTY = New DataColumn("AQTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAQTY)
            Me.columnARATE = New DataColumn("ARATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARATE)
            Me.columnAAMOUNT = New DataColumn("AAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAAMOUNT)
            Me.columnATAXAMOUNT = New DataColumn("ATAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnATAXAMOUNT)
            Me.columnATOTALAMOUNT = New DataColumn("ATOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnATOTALAMOUNT)
            Me.columnHALLTAXAMOUNT = New DataColumn("HALLTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXAMOUNT)
            Me.columnHALLTAXPERC = New DataColumn("HALLTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXPERC)
            Me.columnHALLNETAMOUNT = New DataColumn("HALLNETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLNETAMOUNT)
            Me.columnHOCCUPANCY = New DataColumn("HOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHOCCUPANCY)
            Me.columnISBFCHARGE = New DataColumn("ISBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnISBFCHARGE)
            Me.columnASBFCHARGE = New DataColumn("ASBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASBFCHARGE)
            Me.columnTSBFCHARGE = New DataColumn("TSBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTSBFCHARGE)
            Me.columnpriority.ReadOnly = true
            Me.columnLOCCODE.ReadOnly = true
            Me.columnCATEGORY.ReadOnly = true
            Me.columnBOOKINGTYPE.ReadOnly = true
            Me.columnHALLCODE.ReadOnly = true
            Me.columnHALLDESC.ReadOnly = true
            Me.columnOCCUPANCY.ReadOnly = true
            Me.columnveg.ReadOnly = true
            Me.columnnonveg.ReadOnly = true
            Me.columnPCODE.ReadOnly = true
            Me.columnHMLOCCODE.ReadOnly = true
            Me.columnLOCDESC.ReadOnly = true
            Me.columnPDESC.ReadOnly = true
            Me.columnBOOKINGNO.ReadOnly = true
            Me.columnPARTYDATE.ReadOnly = true
            Me.columnMCODE.ReadOnly = true
            Me.columnMNAME.ReadOnly = true
            Me.columngroupcode.ReadOnly = true
            Me.columnPADD1.ReadOnly = true
            Me.columnPADD2.ReadOnly = true
            Me.columnPCITY.ReadOnly = true
            Me.columnPPHONE1.ReadOnly = true
            Me.columnCEMAIL.ReadOnly = true
            Me.columnBOOKINGDATE.ReadOnly = true
            Me.columnFROMTIME.ReadOnly = true
            Me.columnTOTIME.ReadOnly = true
            Me.columnHALLAMOUNT.ReadOnly = true
            Me.columnBOOKINGSTATUS.ReadOnly = true
            Me.columnBOOKINGFLAG.ReadOnly = true
            Me.columnBILLINGFLAG.ReadOnly = true
            Me.columnCANCELFLAG.ReadOnly = true
            Me.columnFREEZE.ReadOnly = true
            Me.columnRECEIPTNO.ReadOnly = true
            Me.columnRECEIPTDATE.ReadOnly = true
            Me.columnRAMOUNT.ReadOnly = true
            Me.columnAMOUNTTYPE.ReadOnly = true
            Me.columnTTYPE.ReadOnly = true
            Me.columnPRROWID.ReadOnly = true
            Me.columnITEMCODE.ReadOnly = true
            Me.columnRITEMDESC.ReadOnly = true
            Me.columnRQTY.ReadOnly = true
            Me.columnRRATE.ReadOnly = true
            Me.columnPRAMOUNT.ReadOnly = true
            Me.columnPRTAXPERC.ReadOnly = true
            Me.columnPRTAXAMOUNT.ReadOnly = true
            Me.columnPRTOTALAMOUNT.ReadOnly = true
            Me.columnTARIFFCODE.ReadOnly = true
            Me.columnTARIFFDESC.ReadOnly = true
            Me.columnTRATE.ReadOnly = true
            Me.columnAROWID.ReadOnly = true
            Me.columnAITEMCODE.ReadOnly = true
            Me.columnAITEMDESC.ReadOnly = true
            Me.columnAQTY.ReadOnly = true
            Me.columnARATE.ReadOnly = true
            Me.columnAAMOUNT.ReadOnly = true
            Me.columnATAXAMOUNT.ReadOnly = true
            Me.columnATOTALAMOUNT.ReadOnly = true
            Me.columnHALLTAXAMOUNT.ReadOnly = true
            Me.columnHALLTAXPERC.ReadOnly = true
            Me.columnHALLNETAMOUNT.ReadOnly = true
            Me.columnHOCCUPANCY.ReadOnly = true
            Me.columnISBFCHARGE.ReadOnly = true
            Me.columnASBFCHARGE.ReadOnly = true
            Me.columnTSBFCHARGE.ReadOnly = true
        End Sub
        
        Public Function NewPARTY_VIEW_HALLBOOKINGDETAILS_NEWRow() As PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow
            Return CType(Me.NewRow,PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChanged(Me, New PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChangeEvent(CType(e.Row,PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChanging(Me, New PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChangeEvent(CType(e.Row,PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowDeleted(Me, New PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChangeEvent(CType(e.Row,PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowDeleting(Me, New PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChangeEvent(CType(e.Row,PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_VIEW_HALLBOOKINGDETAILS_NEWRow(ByVal row As PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow
        Inherits DataRow
        
        Private tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW As PARTY_VIEW_HALLBOOKINGDETAILS_NEWDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW = CType(Me.Table,PARTY_VIEW_HALLBOOKINGDETAILS_NEWDataTable)
        End Sub
        
        Public Property CHITNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.CHITNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.CHITNOColumn) = value
            End Set
        End Property
        
        Public Property priority As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.priorityColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.priorityColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property CATEGORY As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.CATEGORYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.CATEGORYColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property HALLDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLDESCColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property veg As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.vegColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.vegColumn) = value
            End Set
        End Property
        
        Public Property nonveg As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.nonvegColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.nonvegColumn) = value
            End Set
        End Property
        
        Public Property PCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PCODEColumn) = value
            End Set
        End Property
        
        Public Property HMLOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HMLOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HMLOCCODEColumn) = value
            End Set
        End Property
        
        Public Property LOCDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.LOCDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.LOCDESCColumn) = value
            End Set
        End Property
        
        Public Property PDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PDESCColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property groupcode As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.groupcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.groupcodeColumn) = value
            End Set
        End Property
        
        Public Property PADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PADD1Column) = value
            End Set
        End Property
        
        Public Property PADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PADD2Column) = value
            End Set
        End Property
        
        Public Property PCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PCITYColumn) = value
            End Set
        End Property
        
        Public Property PPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PPHONE1Column) = value
            End Set
        End Property
        
        Public Property CEMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.CEMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.CEMAILColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property FROMTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.FROMTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.FROMTIMEColumn) = value
            End Set
        End Property
        
        Public Property TOTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TOTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TOTIMEColumn) = value
            End Set
        End Property
        
        Public Property HALLAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGSTATUS As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGSTATUSColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGSTATUSColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGFLAGColumn) = value
            End Set
        End Property
        
        Public Property BILLINGFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BILLINGFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BILLINGFLAGColumn) = value
            End Set
        End Property
        
        Public Property CANCELFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.CANCELFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.CANCELFLAGColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property RAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNTTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AMOUNTTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AMOUNTTYPEColumn) = value
            End Set
        End Property
        
        Public Property TTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TTYPEColumn) = value
            End Set
        End Property
        
        Public Property PRROWID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRROWIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRROWIDColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property RITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property RQTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RQTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RQTYColumn) = value
            End Set
        End Property
        
        Public Property RRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RRATEColumn) = value
            End Set
        End Property
        
        Public Property PRAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property VEGRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.VEGRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.VEGRATEColumn) = value
            End Set
        End Property
        
        Public Property NONVEGRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.NONVEGRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.NONVEGRATEColumn) = value
            End Set
        End Property
        
        Public Property PRTAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRTAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property PRTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property PRTOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRTOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRTOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TARIFFCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TARIFFCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TARIFFCODEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TARIFFDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TARIFFDESCColumn) = value
            End Set
        End Property
        
        Public Property TRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TRATEColumn) = value
            End Set
        End Property
        
        Public Property AROWID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AROWIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AROWIDColumn) = value
            End Set
        End Property
        
        Public Property AITEMCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AITEMCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property AITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property AQTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AQTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AQTYColumn) = value
            End Set
        End Property
        
        Public Property ARATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ARATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ARATEColumn) = value
            End Set
        End Property
        
        Public Property AAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ATAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ATAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ATAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ATOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ATOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ATOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLTAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property HALLNETAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLNETAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLNETAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property ISBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ISBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ISBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property ASBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ASBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ASBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property TSBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TSBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TSBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Function IsCHITNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.CHITNOColumn)
        End Function
        
        Public Sub SetCHITNONull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.CHITNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspriorityNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.priorityColumn)
        End Function
        
        Public Sub SetpriorityNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.priorityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATEGORYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.CATEGORYColumn)
        End Function
        
        Public Sub SetCATEGORYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.CATEGORYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGTYPEColumn)
        End Function
        
        Public Sub SetBOOKINGTYPENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLDESCColumn)
        End Function
        
        Public Sub SetHALLDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvegNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.vegColumn)
        End Function
        
        Public Sub SetvegNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.vegColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnonvegNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.nonvegColumn)
        End Function
        
        Public Sub SetnonvegNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.nonvegColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PCODEColumn)
        End Function
        
        Public Sub SetPCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHMLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HMLOCCODEColumn)
        End Function
        
        Public Sub SetHMLOCCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HMLOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.LOCDESCColumn)
        End Function
        
        Public Sub SetLOCDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.LOCDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PDESCColumn)
        End Function
        
        Public Sub SetPDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsgroupcodeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.groupcodeColumn)
        End Function
        
        Public Sub SetgroupcodeNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.groupcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD1Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PADD1Column)
        End Function
        
        Public Sub SetPADD1Null()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPADD2Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PADD2Column)
        End Function
        
        Public Sub SetPADD2Null()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsPCITYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PCITYColumn)
        End Function
        
        Public Sub SetPCITYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PPHONE1Column)
        End Function
        
        Public Sub SetPPHONE1Null()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCEMAILNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.CEMAILColumn)
        End Function
        
        Public Sub SetCEMAILNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.CEMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.FROMTIMEColumn)
        End Function
        
        Public Sub SetFROMTIMENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.FROMTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TOTIMEColumn)
        End Function
        
        Public Sub SetTOTIMENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TOTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLAMOUNTColumn)
        End Function
        
        Public Sub SetHALLAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGSTATUSNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGSTATUSColumn)
        End Function
        
        Public Sub SetBOOKINGSTATUSNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGSTATUSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGFLAGColumn)
        End Function
        
        Public Sub SetBOOKINGFLAGNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BOOKINGFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLINGFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BILLINGFLAGColumn)
        End Function
        
        Public Sub SetBILLINGFLAGNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.BILLINGFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.CANCELFLAGColumn)
        End Function
        
        Public Sub SetCANCELFLAGNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.CANCELFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RECEIPTNOColumn)
        End Function
        
        Public Sub SetRECEIPTNONull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RECEIPTDATEColumn)
        End Function
        
        Public Sub SetRECEIPTDATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RAMOUNTColumn)
        End Function
        
        Public Sub SetRAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AMOUNTTYPEColumn)
        End Function
        
        Public Sub SetAMOUNTTYPENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AMOUNTTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TTYPEColumn)
        End Function
        
        Public Sub SetTTYPENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRROWIDNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRROWIDColumn)
        End Function
        
        Public Sub SetPRROWIDNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRROWIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ITEMCODEColumn)
        End Function
        
        Public Sub SetITEMCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RITEMDESCColumn)
        End Function
        
        Public Sub SetRITEMDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RQTYColumn)
        End Function
        
        Public Sub SetRQTYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RQTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RRATEColumn)
        End Function
        
        Public Sub SetRRATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.RRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRAMOUNTColumn)
        End Function
        
        Public Sub SetPRAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.VEGRATEColumn)
        End Function
        
        Public Sub SetVEGRATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.VEGRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNONVEGRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.NONVEGRATEColumn)
        End Function
        
        Public Sub SetNONVEGRATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.NONVEGRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRTAXPERCColumn)
        End Function
        
        Public Sub SetPRTAXPERCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRTAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRTAXAMOUNTColumn)
        End Function
        
        Public Sub SetPRTAXAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPRTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRTOTALAMOUNTColumn)
        End Function
        
        Public Sub SetPRTOTALAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.PRTOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TARIFFCODEColumn)
        End Function
        
        Public Sub SetTARIFFCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TARIFFCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TARIFFDESCColumn)
        End Function
        
        Public Sub SetTARIFFDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TARIFFDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TRATEColumn)
        End Function
        
        Public Sub SetTRATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAROWIDNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AROWIDColumn)
        End Function
        
        Public Sub SetAROWIDNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AROWIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAITEMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AITEMCODEColumn)
        End Function
        
        Public Sub SetAITEMCODENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AITEMCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AITEMDESCColumn)
        End Function
        
        Public Sub SetAITEMDESCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AQTYColumn)
        End Function
        
        Public Sub SetAQTYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AQTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ARATEColumn)
        End Function
        
        Public Sub SetARATENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ARATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AAMOUNTColumn)
        End Function
        
        Public Sub SetAAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.AAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsATAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ATAXAMOUNTColumn)
        End Function
        
        Public Sub SetATAXAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ATAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsATOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ATOTALAMOUNTColumn)
        End Function
        
        Public Sub SetATOTALAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ATOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLTAXAMOUNTColumn)
        End Function
        
        Public Sub SetHALLTAXAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLTAXPERCColumn)
        End Function
        
        Public Sub SetHALLTAXPERCNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLTAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLNETAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLNETAMOUNTColumn)
        End Function
        
        Public Sub SetHALLNETAMOUNTNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HALLNETAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HOCCUPANCYColumn)
        End Function
        
        Public Sub SetHOCCUPANCYNull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.HOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsISBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ISBFCHARGEColumn)
        End Function
        
        Public Sub SetISBFCHARGENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ISBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ASBFCHARGEColumn)
        End Function
        
        Public Sub SetASBFCHARGENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.ASBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTSBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TSBFCHARGEColumn)
        End Function
        
        Public Sub SetTSBFCHARGENull()
            Me(Me.tablePARTY_VIEW_HALLBOOKINGDETAILS_NEW.TSBFCHARGEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEW_HALLBOOKINGDETAILS_NEWRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_VIEW_HALLBOOKINGDETAILS_NEWRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceiptvoucher1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnbookingno As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnPARTYRECEIPTNO As DataColumn
        
        Private columnPARTYRECEIPTDATE As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnReceiptheadcode As DataColumn
        
        Private columnReceiptheaddesc As DataColumn
        
        Friend Sub New()
            MyBase.New("partyreceiptvoucher1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property bookingnoColumn As DataColumn
            Get
                Return Me.columnbookingno
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTNOColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheadcodeColumn As DataColumn
            Get
                Return Me.columnReceiptheadcode
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheaddescColumn As DataColumn
            Get
                Return Me.columnReceiptheaddesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As partyreceiptvoucher1Row
            Get
                Return CType(Me.Rows(index),partyreceiptvoucher1Row)
            End Get
        End Property
        
        Public Event partyreceiptvoucher1RowChanged As partyreceiptvoucher1RowChangeEventHandler
        
        Public Event partyreceiptvoucher1RowChanging As partyreceiptvoucher1RowChangeEventHandler
        
        Public Event partyreceiptvoucher1RowDeleted As partyreceiptvoucher1RowChangeEventHandler
        
        Public Event partyreceiptvoucher1RowDeleting As partyreceiptvoucher1RowChangeEventHandler
        
        Public Overloads Sub Addpartyreceiptvoucher1Row(ByVal row As partyreceiptvoucher1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpartyreceiptvoucher1Row(ByVal bookingno As Decimal, ByVal PARTYDATE As Date, ByVal PARTYRECEIPTNO As String, ByVal PARTYRECEIPTDATE As Date, ByVal PAYMENTMODE As String, ByVal DESCRIPTION As String, ByVal MCODE As String, ByVal MNAME As String, ByVal amount As Decimal, ByVal Receiptheadcode As String, ByVal Receiptheaddesc As String) As partyreceiptvoucher1Row
            Dim rowpartyreceiptvoucher1Row As partyreceiptvoucher1Row = CType(Me.NewRow,partyreceiptvoucher1Row)
            rowpartyreceiptvoucher1Row.ItemArray = New Object() {bookingno, PARTYDATE, PARTYRECEIPTNO, PARTYRECEIPTDATE, PAYMENTMODE, DESCRIPTION, MCODE, MNAME, amount, Receiptheadcode, Receiptheaddesc}
            Me.Rows.Add(rowpartyreceiptvoucher1Row)
            Return rowpartyreceiptvoucher1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As partyreceiptvoucher1DataTable = CType(MyBase.Clone,partyreceiptvoucher1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New partyreceiptvoucher1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnbookingno = Me.Columns("bookingno")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnPARTYRECEIPTNO = Me.Columns("PARTYRECEIPTNO")
            Me.columnPARTYRECEIPTDATE = Me.Columns("PARTYRECEIPTDATE")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnamount = Me.Columns("amount")
            Me.columnReceiptheadcode = Me.Columns("Receiptheadcode")
            Me.columnReceiptheaddesc = Me.Columns("Receiptheaddesc")
        End Sub
        
        Private Sub InitClass()
            Me.columnbookingno = New DataColumn("bookingno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookingno)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnPARTYRECEIPTNO = New DataColumn("PARTYRECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTNO)
            Me.columnPARTYRECEIPTDATE = New DataColumn("PARTYRECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTDATE)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnReceiptheadcode = New DataColumn("Receiptheadcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheadcode)
            Me.columnReceiptheaddesc = New DataColumn("Receiptheaddesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheaddesc)
        End Sub
        
        Public Function Newpartyreceiptvoucher1Row() As partyreceiptvoucher1Row
            Return CType(Me.NewRow,partyreceiptvoucher1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New partyreceiptvoucher1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(partyreceiptvoucher1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.partyreceiptvoucher1RowChangedEvent) Is Nothing) Then
                RaiseEvent partyreceiptvoucher1RowChanged(Me, New partyreceiptvoucher1RowChangeEvent(CType(e.Row,partyreceiptvoucher1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.partyreceiptvoucher1RowChangingEvent) Is Nothing) Then
                RaiseEvent partyreceiptvoucher1RowChanging(Me, New partyreceiptvoucher1RowChangeEvent(CType(e.Row,partyreceiptvoucher1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.partyreceiptvoucher1RowDeletedEvent) Is Nothing) Then
                RaiseEvent partyreceiptvoucher1RowDeleted(Me, New partyreceiptvoucher1RowChangeEvent(CType(e.Row,partyreceiptvoucher1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.partyreceiptvoucher1RowDeletingEvent) Is Nothing) Then
                RaiseEvent partyreceiptvoucher1RowDeleting(Me, New partyreceiptvoucher1RowChangeEvent(CType(e.Row,partyreceiptvoucher1Row), e.Action))
            End If
        End Sub
        
        Public Sub Removepartyreceiptvoucher1Row(ByVal row As partyreceiptvoucher1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceiptvoucher1Row
        Inherits DataRow
        
        Private tablepartyreceiptvoucher1 As partyreceiptvoucher1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepartyreceiptvoucher1 = CType(Me.Table,partyreceiptvoucher1DataTable)
        End Sub
        
        Public Property bookingno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher1.bookingnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher1.bookingnoColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher1.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher1.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher1.PARTYRECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher1.PARTYRECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher1.PARTYRECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher1.PARTYRECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher1.PAYMENTMODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher1.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher1.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher1.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher1.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher1.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher1.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher1.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher1.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher1.amountColumn) = value
            End Set
        End Property
        
        Public Property Receiptheadcode As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher1.ReceiptheadcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher1.ReceiptheadcodeColumn) = value
            End Set
        End Property
        
        Public Property Receiptheaddesc As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher1.ReceiptheaddescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher1.ReceiptheaddescColumn) = value
            End Set
        End Property
        
        Public Function IsbookingnoNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher1.bookingnoColumn)
        End Function
        
        Public Sub SetbookingnoNull()
            Me(Me.tablepartyreceiptvoucher1.bookingnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher1.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablepartyreceiptvoucher1.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher1.PARTYRECEIPTNOColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTNONull()
            Me(Me.tablepartyreceiptvoucher1.PARTYRECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher1.PARTYRECEIPTDATEColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTDATENull()
            Me(Me.tablepartyreceiptvoucher1.PARTYRECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYMENTMODENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher1.PAYMENTMODEColumn)
        End Function
        
        Public Sub SetPAYMENTMODENull()
            Me(Me.tablepartyreceiptvoucher1.PAYMENTMODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher1.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablepartyreceiptvoucher1.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher1.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablepartyreceiptvoucher1.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher1.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablepartyreceiptvoucher1.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher1.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tablepartyreceiptvoucher1.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheadcodeNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher1.ReceiptheadcodeColumn)
        End Function
        
        Public Sub SetReceiptheadcodeNull()
            Me(Me.tablepartyreceiptvoucher1.ReceiptheadcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheaddescNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher1.ReceiptheaddescColumn)
        End Function
        
        Public Sub SetReceiptheaddescNull()
            Me(Me.tablepartyreceiptvoucher1.ReceiptheaddescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceiptvoucher1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As partyreceiptvoucher1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As partyreceiptvoucher1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As partyreceiptvoucher1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEWHEADDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnautoid As DataColumn
        
        Private columnReceiptheadcode As DataColumn
        
        Private columnReceiptheaddesc As DataColumn
        
        Private columnfreeze As DataColumn
        
        Private columnpriority As DataColumn
        
        Private columnTYPE As DataColumn
        
        Private columnAddUserId As DataColumn
        
        Private columnRECseqno As DataColumn
        
        Private columnAddDateTime As DataColumn
        
        Private columnACCOUNTIN As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_VIEWHEAD")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property autoidColumn As DataColumn
            Get
                Return Me.columnautoid
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheadcodeColumn As DataColumn
            Get
                Return Me.columnReceiptheadcode
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheaddescColumn As DataColumn
            Get
                Return Me.columnReceiptheaddesc
            End Get
        End Property
        
        Friend ReadOnly Property freezeColumn As DataColumn
            Get
                Return Me.columnfreeze
            End Get
        End Property
        
        Friend ReadOnly Property priorityColumn As DataColumn
            Get
                Return Me.columnpriority
            End Get
        End Property
        
        Friend ReadOnly Property TYPEColumn As DataColumn
            Get
                Return Me.columnTYPE
            End Get
        End Property
        
        Friend ReadOnly Property AddUserIdColumn As DataColumn
            Get
                Return Me.columnAddUserId
            End Get
        End Property
        
        Friend ReadOnly Property RECseqnoColumn As DataColumn
            Get
                Return Me.columnRECseqno
            End Get
        End Property
        
        Friend ReadOnly Property AddDateTimeColumn As DataColumn
            Get
                Return Me.columnAddDateTime
            End Get
        End Property
        
        Friend ReadOnly Property ACCOUNTINColumn As DataColumn
            Get
                Return Me.columnACCOUNTIN
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_VIEWHEADRow
            Get
                Return CType(Me.Rows(index),PARTY_VIEWHEADRow)
            End Get
        End Property
        
        Public Event PARTY_VIEWHEADRowChanged As PARTY_VIEWHEADRowChangeEventHandler
        
        Public Event PARTY_VIEWHEADRowChanging As PARTY_VIEWHEADRowChangeEventHandler
        
        Public Event PARTY_VIEWHEADRowDeleted As PARTY_VIEWHEADRowChangeEventHandler
        
        Public Event PARTY_VIEWHEADRowDeleting As PARTY_VIEWHEADRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_VIEWHEADRow(ByVal row As PARTY_VIEWHEADRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_VIEWHEADRow(ByVal Receiptheadcode As String, ByVal Receiptheaddesc As String, ByVal freeze As String, ByVal priority As Integer, ByVal TYPE As String, ByVal AddUserId As String, ByVal RECseqno As String, ByVal AddDateTime As Date, ByVal ACCOUNTIN As String) As PARTY_VIEWHEADRow
            Dim rowPARTY_VIEWHEADRow As PARTY_VIEWHEADRow = CType(Me.NewRow,PARTY_VIEWHEADRow)
            rowPARTY_VIEWHEADRow.ItemArray = New Object() {Nothing, Receiptheadcode, Receiptheaddesc, freeze, priority, TYPE, AddUserId, RECseqno, AddDateTime, ACCOUNTIN}
            Me.Rows.Add(rowPARTY_VIEWHEADRow)
            Return rowPARTY_VIEWHEADRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_VIEWHEADDataTable = CType(MyBase.Clone,PARTY_VIEWHEADDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_VIEWHEADDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnautoid = Me.Columns("autoid")
            Me.columnReceiptheadcode = Me.Columns("Receiptheadcode")
            Me.columnReceiptheaddesc = Me.Columns("Receiptheaddesc")
            Me.columnfreeze = Me.Columns("freeze")
            Me.columnpriority = Me.Columns("priority")
            Me.columnTYPE = Me.Columns("TYPE")
            Me.columnAddUserId = Me.Columns("AddUserId")
            Me.columnRECseqno = Me.Columns("RECseqno")
            Me.columnAddDateTime = Me.Columns("AddDateTime")
            Me.columnACCOUNTIN = Me.Columns("ACCOUNTIN")
        End Sub
        
        Private Sub InitClass()
            Me.columnautoid = New DataColumn("autoid", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnautoid)
            Me.columnReceiptheadcode = New DataColumn("Receiptheadcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheadcode)
            Me.columnReceiptheaddesc = New DataColumn("Receiptheaddesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheaddesc)
            Me.columnfreeze = New DataColumn("freeze", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreeze)
            Me.columnpriority = New DataColumn("priority", GetType(System.Int32), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpriority)
            Me.columnTYPE = New DataColumn("TYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTYPE)
            Me.columnAddUserId = New DataColumn("AddUserId", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddUserId)
            Me.columnRECseqno = New DataColumn("RECseqno", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECseqno)
            Me.columnAddDateTime = New DataColumn("AddDateTime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddDateTime)
            Me.columnACCOUNTIN = New DataColumn("ACCOUNTIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnACCOUNTIN)
            Me.columnautoid.AutoIncrement = true
            Me.columnautoid.AllowDBNull = false
            Me.columnautoid.ReadOnly = true
        End Sub
        
        Public Function NewPARTY_VIEWHEADRow() As PARTY_VIEWHEADRow
            Return CType(Me.NewRow,PARTY_VIEWHEADRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_VIEWHEADRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_VIEWHEADRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_VIEWHEADRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEWHEADRowChanged(Me, New PARTY_VIEWHEADRowChangeEvent(CType(e.Row,PARTY_VIEWHEADRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_VIEWHEADRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEWHEADRowChanging(Me, New PARTY_VIEWHEADRowChangeEvent(CType(e.Row,PARTY_VIEWHEADRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_VIEWHEADRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEWHEADRowDeleted(Me, New PARTY_VIEWHEADRowChangeEvent(CType(e.Row,PARTY_VIEWHEADRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_VIEWHEADRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_VIEWHEADRowDeleting(Me, New PARTY_VIEWHEADRowChangeEvent(CType(e.Row,PARTY_VIEWHEADRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_VIEWHEADRow(ByVal row As PARTY_VIEWHEADRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEWHEADRow
        Inherits DataRow
        
        Private tablePARTY_VIEWHEAD As PARTY_VIEWHEADDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_VIEWHEAD = CType(Me.Table,PARTY_VIEWHEADDataTable)
        End Sub
        
        Public Property autoid As Decimal
            Get
                Return CType(Me(Me.tablePARTY_VIEWHEAD.autoidColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_VIEWHEAD.autoidColumn) = value
            End Set
        End Property
        
        Public Property Receiptheadcode As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEWHEAD.ReceiptheadcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEWHEAD.ReceiptheadcodeColumn) = value
            End Set
        End Property
        
        Public Property Receiptheaddesc As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEWHEAD.ReceiptheaddescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEWHEAD.ReceiptheaddescColumn) = value
            End Set
        End Property
        
        Public Property freeze As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEWHEAD.freezeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEWHEAD.freezeColumn) = value
            End Set
        End Property
        
        Public Property priority As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEWHEAD.priorityColumn),Integer)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEWHEAD.priorityColumn) = value
            End Set
        End Property
        
        Public Property TYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEWHEAD.TYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEWHEAD.TYPEColumn) = value
            End Set
        End Property
        
        Public Property AddUserId As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEWHEAD.AddUserIdColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEWHEAD.AddUserIdColumn) = value
            End Set
        End Property
        
        Public Property RECseqno As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEWHEAD.RECseqnoColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEWHEAD.RECseqnoColumn) = value
            End Set
        End Property
        
        Public Property AddDateTime As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEWHEAD.AddDateTimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEWHEAD.AddDateTimeColumn) = value
            End Set
        End Property
        
        Public Property ACCOUNTIN As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_VIEWHEAD.ACCOUNTINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_VIEWHEAD.ACCOUNTINColumn) = value
            End Set
        End Property
        
        Public Function IsReceiptheadcodeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEWHEAD.ReceiptheadcodeColumn)
        End Function
        
        Public Sub SetReceiptheadcodeNull()
            Me(Me.tablePARTY_VIEWHEAD.ReceiptheadcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheaddescNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEWHEAD.ReceiptheaddescColumn)
        End Function
        
        Public Sub SetReceiptheaddescNull()
            Me(Me.tablePARTY_VIEWHEAD.ReceiptheaddescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreezeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEWHEAD.freezeColumn)
        End Function
        
        Public Sub SetfreezeNull()
            Me(Me.tablePARTY_VIEWHEAD.freezeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspriorityNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEWHEAD.priorityColumn)
        End Function
        
        Public Sub SetpriorityNull()
            Me(Me.tablePARTY_VIEWHEAD.priorityColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEWHEAD.TYPEColumn)
        End Function
        
        Public Sub SetTYPENull()
            Me(Me.tablePARTY_VIEWHEAD.TYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddUserIdNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEWHEAD.AddUserIdColumn)
        End Function
        
        Public Sub SetAddUserIdNull()
            Me(Me.tablePARTY_VIEWHEAD.AddUserIdColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECseqnoNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEWHEAD.RECseqnoColumn)
        End Function
        
        Public Sub SetRECseqnoNull()
            Me(Me.tablePARTY_VIEWHEAD.RECseqnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddDateTimeNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEWHEAD.AddDateTimeColumn)
        End Function
        
        Public Sub SetAddDateTimeNull()
            Me(Me.tablePARTY_VIEWHEAD.AddDateTimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsACCOUNTINNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_VIEWHEAD.ACCOUNTINColumn)
        End Function
        
        Public Sub SetACCOUNTINNull()
            Me(Me.tablePARTY_VIEWHEAD.ACCOUNTINColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_VIEWHEADRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_VIEWHEADRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_VIEWHEADRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_VIEWHEADRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceiptvoucherDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnbookingno As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnPARTYRECEIPTNO As DataColumn
        
        Private columnPARTYRECEIPTDATE As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnReceiptheadcode As DataColumn
        
        Private columnReceiptheaddesc As DataColumn
        
        Private columnGUESTNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("partyreceiptvoucher")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property bookingnoColumn As DataColumn
            Get
                Return Me.columnbookingno
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTNOColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheadcodeColumn As DataColumn
            Get
                Return Me.columnReceiptheadcode
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheaddescColumn As DataColumn
            Get
                Return Me.columnReceiptheaddesc
            End Get
        End Property
        
        Friend ReadOnly Property GUESTNAMEColumn As DataColumn
            Get
                Return Me.columnGUESTNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As partyreceiptvoucherRow
            Get
                Return CType(Me.Rows(index),partyreceiptvoucherRow)
            End Get
        End Property
        
        Public Event partyreceiptvoucherRowChanged As partyreceiptvoucherRowChangeEventHandler
        
        Public Event partyreceiptvoucherRowChanging As partyreceiptvoucherRowChangeEventHandler
        
        Public Event partyreceiptvoucherRowDeleted As partyreceiptvoucherRowChangeEventHandler
        
        Public Event partyreceiptvoucherRowDeleting As partyreceiptvoucherRowChangeEventHandler
        
        Public Overloads Sub AddpartyreceiptvoucherRow(ByVal row As partyreceiptvoucherRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddpartyreceiptvoucherRow(ByVal bookingno As Decimal, ByVal PARTYDATE As Date, ByVal PARTYRECEIPTNO As String, ByVal PARTYRECEIPTDATE As Date, ByVal PAYMENTMODE As String, ByVal DESCRIPTION As String, ByVal MCODE As String, ByVal MNAME As String, ByVal amount As Decimal, ByVal Receiptheadcode As String, ByVal Receiptheaddesc As String, ByVal GUESTNAME As String) As partyreceiptvoucherRow
            Dim rowpartyreceiptvoucherRow As partyreceiptvoucherRow = CType(Me.NewRow,partyreceiptvoucherRow)
            rowpartyreceiptvoucherRow.ItemArray = New Object() {bookingno, PARTYDATE, PARTYRECEIPTNO, PARTYRECEIPTDATE, PAYMENTMODE, DESCRIPTION, MCODE, MNAME, amount, Receiptheadcode, Receiptheaddesc, GUESTNAME}
            Me.Rows.Add(rowpartyreceiptvoucherRow)
            Return rowpartyreceiptvoucherRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As partyreceiptvoucherDataTable = CType(MyBase.Clone,partyreceiptvoucherDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New partyreceiptvoucherDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnbookingno = Me.Columns("bookingno")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnPARTYRECEIPTNO = Me.Columns("PARTYRECEIPTNO")
            Me.columnPARTYRECEIPTDATE = Me.Columns("PARTYRECEIPTDATE")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnamount = Me.Columns("amount")
            Me.columnReceiptheadcode = Me.Columns("Receiptheadcode")
            Me.columnReceiptheaddesc = Me.Columns("Receiptheaddesc")
            Me.columnGUESTNAME = Me.Columns("GUESTNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnbookingno = New DataColumn("bookingno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookingno)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnPARTYRECEIPTNO = New DataColumn("PARTYRECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTNO)
            Me.columnPARTYRECEIPTDATE = New DataColumn("PARTYRECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTDATE)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnReceiptheadcode = New DataColumn("Receiptheadcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheadcode)
            Me.columnReceiptheaddesc = New DataColumn("Receiptheaddesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheaddesc)
            Me.columnGUESTNAME = New DataColumn("GUESTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGUESTNAME)
        End Sub
        
        Public Function NewpartyreceiptvoucherRow() As partyreceiptvoucherRow
            Return CType(Me.NewRow,partyreceiptvoucherRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New partyreceiptvoucherRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(partyreceiptvoucherRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.partyreceiptvoucherRowChangedEvent) Is Nothing) Then
                RaiseEvent partyreceiptvoucherRowChanged(Me, New partyreceiptvoucherRowChangeEvent(CType(e.Row,partyreceiptvoucherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.partyreceiptvoucherRowChangingEvent) Is Nothing) Then
                RaiseEvent partyreceiptvoucherRowChanging(Me, New partyreceiptvoucherRowChangeEvent(CType(e.Row,partyreceiptvoucherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.partyreceiptvoucherRowDeletedEvent) Is Nothing) Then
                RaiseEvent partyreceiptvoucherRowDeleted(Me, New partyreceiptvoucherRowChangeEvent(CType(e.Row,partyreceiptvoucherRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.partyreceiptvoucherRowDeletingEvent) Is Nothing) Then
                RaiseEvent partyreceiptvoucherRowDeleting(Me, New partyreceiptvoucherRowChangeEvent(CType(e.Row,partyreceiptvoucherRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovepartyreceiptvoucherRow(ByVal row As partyreceiptvoucherRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceiptvoucherRow
        Inherits DataRow
        
        Private tablepartyreceiptvoucher As partyreceiptvoucherDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepartyreceiptvoucher = CType(Me.Table,partyreceiptvoucherDataTable)
        End Sub
        
        Public Property bookingno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher.bookingnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher.bookingnoColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher.PARTYRECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher.PARTYRECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher.PARTYRECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher.PARTYRECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher.PAYMENTMODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher.amountColumn) = value
            End Set
        End Property
        
        Public Property Receiptheadcode As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher.ReceiptheadcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher.ReceiptheadcodeColumn) = value
            End Set
        End Property
        
        Public Property Receiptheaddesc As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher.ReceiptheaddescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher.ReceiptheaddescColumn) = value
            End Set
        End Property
        
        Public Property GUESTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher.GUESTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher.GUESTNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsbookingnoNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher.bookingnoColumn)
        End Function
        
        Public Sub SetbookingnoNull()
            Me(Me.tablepartyreceiptvoucher.bookingnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablepartyreceiptvoucher.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher.PARTYRECEIPTNOColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTNONull()
            Me(Me.tablepartyreceiptvoucher.PARTYRECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher.PARTYRECEIPTDATEColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTDATENull()
            Me(Me.tablepartyreceiptvoucher.PARTYRECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYMENTMODENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher.PAYMENTMODEColumn)
        End Function
        
        Public Sub SetPAYMENTMODENull()
            Me(Me.tablepartyreceiptvoucher.PAYMENTMODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablepartyreceiptvoucher.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablepartyreceiptvoucher.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablepartyreceiptvoucher.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tablepartyreceiptvoucher.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheadcodeNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher.ReceiptheadcodeColumn)
        End Function
        
        Public Sub SetReceiptheadcodeNull()
            Me(Me.tablepartyreceiptvoucher.ReceiptheadcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheaddescNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher.ReceiptheaddescColumn)
        End Function
        
        Public Sub SetReceiptheaddescNull()
            Me(Me.tablepartyreceiptvoucher.ReceiptheaddescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGUESTNAMENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher.GUESTNAMEColumn)
        End Function
        
        Public Sub SetGUESTNAMENull()
            Me(Me.tablepartyreceiptvoucher.GUESTNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceiptvoucherRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As partyreceiptvoucherRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As partyreceiptvoucherRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As partyreceiptvoucherRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_MENUDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Private columnGROUPCODE As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_MENU")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property GROUPCODEColumn As DataColumn
            Get
                Return Me.columnGROUPCODE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_MENURow
            Get
                Return CType(Me.Rows(index),PARTY_MENURow)
            End Get
        End Property
        
        Public Event PARTY_MENURowChanged As PARTY_MENURowChangeEventHandler
        
        Public Event PARTY_MENURowChanging As PARTY_MENURowChangeEventHandler
        
        Public Event PARTY_MENURowDeleted As PARTY_MENURowChangeEventHandler
        
        Public Event PARTY_MENURowDeleting As PARTY_MENURowChangeEventHandler
        
        Public Overloads Sub AddPARTY_MENURow(ByVal row As PARTY_MENURow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_MENURow(ByVal BOOKINGNO As Decimal, ByVal BOOKINGTYPE As String, ByVal BOOKINGDATE As Date, ByVal ITEMCODE As String, ByVal RATE As Decimal, ByVal QTY As Decimal, ByVal TAXAMOUNT As Decimal, ByVal AMOUNT As Decimal, ByVal TOTALAMOUNT As Decimal, ByVal FREEZE As String, ByVal ITEMDESC As String, ByVal GROUPCODE As String) As PARTY_MENURow
            Dim rowPARTY_MENURow As PARTY_MENURow = CType(Me.NewRow,PARTY_MENURow)
            rowPARTY_MENURow.ItemArray = New Object() {BOOKINGNO, BOOKINGTYPE, BOOKINGDATE, ITEMCODE, RATE, QTY, TAXAMOUNT, AMOUNT, TOTALAMOUNT, FREEZE, ITEMDESC, GROUPCODE}
            Me.Rows.Add(rowPARTY_MENURow)
            Return rowPARTY_MENURow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_MENUDataTable = CType(MyBase.Clone,PARTY_MENUDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_MENUDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
            Me.columnGROUPCODE = Me.Columns("GROUPCODE")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columnGROUPCODE = New DataColumn("GROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPCODE)
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnBOOKINGTYPE.AllowDBNull = false
            Me.columnITEMCODE.AllowDBNull = false
        End Sub
        
        Public Function NewPARTY_MENURow() As PARTY_MENURow
            Return CType(Me.NewRow,PARTY_MENURow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_MENURow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_MENURow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_MENURowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_MENURowChanged(Me, New PARTY_MENURowChangeEvent(CType(e.Row,PARTY_MENURow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_MENURowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_MENURowChanging(Me, New PARTY_MENURowChangeEvent(CType(e.Row,PARTY_MENURow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_MENURowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_MENURowDeleted(Me, New PARTY_MENURowChangeEvent(CType(e.Row,PARTY_MENURow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_MENURowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_MENURowDeleting(Me, New PARTY_MENURowChangeEvent(CType(e.Row,PARTY_MENURow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_MENURow(ByVal row As PARTY_MENURow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_MENURow
        Inherits DataRow
        
        Private tablePARTY_MENU As PARTY_MENUDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_MENU = CType(Me.Table,PARTY_MENUDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePARTY_MENU.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_MENU.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Return CType(Me(Me.tablePARTY_MENU.BOOKINGTYPEColumn),String)
            End Get
            Set
                Me(Me.tablePARTY_MENU.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MENU.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MENU.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tablePARTY_MENU.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tablePARTY_MENU.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MENU.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MENU.RATEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MENU.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MENU.QTYColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MENU.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MENU.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MENU.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MENU.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MENU.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MENU.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MENU.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MENU.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MENU.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MENU.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property GROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MENU.GROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MENU.GROUPCODEColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MENU.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_MENU.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MENU.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePARTY_MENU.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MENU.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tablePARTY_MENU.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MENU.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tablePARTY_MENU.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MENU.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_MENU.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MENU.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePARTY_MENU.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MENU.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePARTY_MENU.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MENU.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tablePARTY_MENU.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MENU.GROUPCODEColumn)
        End Function
        
        Public Sub SetGROUPCODENull()
            Me(Me.tablePARTY_MENU.GROUPCODEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_MENURowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_MENURow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_MENURow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_MENURow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ARRANGEDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Private columnGROUPCODE As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_ARRANGE")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property GROUPCODEColumn As DataColumn
            Get
                Return Me.columnGROUPCODE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_ARRANGERow
            Get
                Return CType(Me.Rows(index),PARTY_ARRANGERow)
            End Get
        End Property
        
        Public Event PARTY_ARRANGERowChanged As PARTY_ARRANGERowChangeEventHandler
        
        Public Event PARTY_ARRANGERowChanging As PARTY_ARRANGERowChangeEventHandler
        
        Public Event PARTY_ARRANGERowDeleted As PARTY_ARRANGERowChangeEventHandler
        
        Public Event PARTY_ARRANGERowDeleting As PARTY_ARRANGERowChangeEventHandler
        
        Public Overloads Sub AddPARTY_ARRANGERow(ByVal row As PARTY_ARRANGERow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_ARRANGERow(ByVal BOOKINGNO As Decimal, ByVal BOOKINGTYPE As String, ByVal BOOKINGDATE As Date, ByVal ITEMCODE As String, ByVal RATE As Decimal, ByVal QTY As Decimal, ByVal TAXAMOUNT As Decimal, ByVal AMOUNT As Decimal, ByVal TOTALAMOUNT As Decimal, ByVal FREEZE As String, ByVal ITEMDESC As String, ByVal GROUPCODE As String) As PARTY_ARRANGERow
            Dim rowPARTY_ARRANGERow As PARTY_ARRANGERow = CType(Me.NewRow,PARTY_ARRANGERow)
            rowPARTY_ARRANGERow.ItemArray = New Object() {BOOKINGNO, BOOKINGTYPE, BOOKINGDATE, ITEMCODE, RATE, QTY, TAXAMOUNT, AMOUNT, TOTALAMOUNT, FREEZE, ITEMDESC, GROUPCODE}
            Me.Rows.Add(rowPARTY_ARRANGERow)
            Return rowPARTY_ARRANGERow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_ARRANGEDataTable = CType(MyBase.Clone,PARTY_ARRANGEDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_ARRANGEDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
            Me.columnGROUPCODE = Me.Columns("GROUPCODE")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columnGROUPCODE = New DataColumn("GROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPCODE)
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnBOOKINGTYPE.AllowDBNull = false
            Me.columnITEMCODE.AllowDBNull = false
        End Sub
        
        Public Function NewPARTY_ARRANGERow() As PARTY_ARRANGERow
            Return CType(Me.NewRow,PARTY_ARRANGERow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_ARRANGERow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_ARRANGERow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_ARRANGERowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_ARRANGERowChanged(Me, New PARTY_ARRANGERowChangeEvent(CType(e.Row,PARTY_ARRANGERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_ARRANGERowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_ARRANGERowChanging(Me, New PARTY_ARRANGERowChangeEvent(CType(e.Row,PARTY_ARRANGERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_ARRANGERowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_ARRANGERowDeleted(Me, New PARTY_ARRANGERowChangeEvent(CType(e.Row,PARTY_ARRANGERow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_ARRANGERowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_ARRANGERowDeleting(Me, New PARTY_ARRANGERowChangeEvent(CType(e.Row,PARTY_ARRANGERow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_ARRANGERow(ByVal row As PARTY_ARRANGERow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ARRANGERow
        Inherits DataRow
        
        Private tablePARTY_ARRANGE As PARTY_ARRANGEDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_ARRANGE = CType(Me.Table,PARTY_ARRANGEDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePARTY_ARRANGE.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_ARRANGE.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Return CType(Me(Me.tablePARTY_ARRANGE.BOOKINGTYPEColumn),String)
            End Get
            Set
                Me(Me.tablePARTY_ARRANGE.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGE.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGE.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tablePARTY_ARRANGE.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tablePARTY_ARRANGE.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGE.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGE.RATEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGE.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGE.QTYColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGE.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGE.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGE.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGE.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGE.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGE.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGE.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGE.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGE.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGE.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property GROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ARRANGE.GROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ARRANGE.GROUPCODEColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGE.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_ARRANGE.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGE.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePARTY_ARRANGE.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGE.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tablePARTY_ARRANGE.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGE.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tablePARTY_ARRANGE.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGE.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_ARRANGE.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGE.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePARTY_ARRANGE.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGE.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePARTY_ARRANGE.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGE.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tablePARTY_ARRANGE.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ARRANGE.GROUPCODEColumn)
        End Function
        
        Public Sub SetGROUPCODENull()
            Me(Me.tablePARTY_ARRANGE.GROUPCODEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ARRANGERowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_ARRANGERow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_ARRANGERow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_ARRANGERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_arrangement_bookDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnrates As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("party_arrangement_book")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property ratesColumn As DataColumn
            Get
                Return Me.columnrates
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As party_arrangement_bookRow
            Get
                Return CType(Me.Rows(index),party_arrangement_bookRow)
            End Get
        End Property
        
        Public Event party_arrangement_bookRowChanged As party_arrangement_bookRowChangeEventHandler
        
        Public Event party_arrangement_bookRowChanging As party_arrangement_bookRowChangeEventHandler
        
        Public Event party_arrangement_bookRowDeleted As party_arrangement_bookRowChangeEventHandler
        
        Public Event party_arrangement_bookRowDeleting As party_arrangement_bookRowChangeEventHandler
        
        Public Overloads Sub Addparty_arrangement_bookRow(ByVal row As party_arrangement_bookRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addparty_arrangement_bookRow(ByVal ITEMCODE As String, ByVal ITEMDESC As String, ByVal BOOKINGNO As Decimal, ByVal BOOKINGDATE As Date, ByVal rates As Decimal, ByVal QTY As Decimal, ByVal RATE As Decimal, ByVal TAXAMOUNT As Decimal, ByVal AMOUNT As Decimal) As party_arrangement_bookRow
            Dim rowparty_arrangement_bookRow As party_arrangement_bookRow = CType(Me.NewRow,party_arrangement_bookRow)
            rowparty_arrangement_bookRow.ItemArray = New Object() {ITEMCODE, ITEMDESC, BOOKINGNO, BOOKINGDATE, rates, QTY, RATE, TAXAMOUNT, AMOUNT}
            Me.Rows.Add(rowparty_arrangement_bookRow)
            Return rowparty_arrangement_bookRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As party_arrangement_bookDataTable = CType(MyBase.Clone,party_arrangement_bookDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New party_arrangement_bookDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnrates = Me.Columns("rates")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnrates = New DataColumn("rates", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrates)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnITEMCODE.AllowDBNull = false
            Me.columnBOOKINGNO.AllowDBNull = false
        End Sub
        
        Public Function Newparty_arrangement_bookRow() As party_arrangement_bookRow
            Return CType(Me.NewRow,party_arrangement_bookRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New party_arrangement_bookRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(party_arrangement_bookRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.party_arrangement_bookRowChangedEvent) Is Nothing) Then
                RaiseEvent party_arrangement_bookRowChanged(Me, New party_arrangement_bookRowChangeEvent(CType(e.Row,party_arrangement_bookRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.party_arrangement_bookRowChangingEvent) Is Nothing) Then
                RaiseEvent party_arrangement_bookRowChanging(Me, New party_arrangement_bookRowChangeEvent(CType(e.Row,party_arrangement_bookRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.party_arrangement_bookRowDeletedEvent) Is Nothing) Then
                RaiseEvent party_arrangement_bookRowDeleted(Me, New party_arrangement_bookRowChangeEvent(CType(e.Row,party_arrangement_bookRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.party_arrangement_bookRowDeletingEvent) Is Nothing) Then
                RaiseEvent party_arrangement_bookRowDeleting(Me, New party_arrangement_bookRowChangeEvent(CType(e.Row,party_arrangement_bookRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeparty_arrangement_bookRow(ByVal row As party_arrangement_bookRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_arrangement_bookRow
        Inherits DataRow
        
        Private tableparty_arrangement_book As party_arrangement_bookDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableparty_arrangement_book = CType(Me.Table,party_arrangement_bookDataTable)
        End Sub
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tableparty_arrangement_book.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tableparty_arrangement_book.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangement_book.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangement_book.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tableparty_arrangement_book.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tableparty_arrangement_book.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangement_book.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangement_book.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property rates As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangement_book.ratesColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangement_book.ratesColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangement_book.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangement_book.QTYColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangement_book.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangement_book.RATEColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangement_book.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangement_book.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_arrangement_book.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_arrangement_book.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangement_book.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tableparty_arrangement_book.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangement_book.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tableparty_arrangement_book.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsratesNull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangement_book.ratesColumn)
        End Function
        
        Public Sub SetratesNull()
            Me(Me.tableparty_arrangement_book.ratesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangement_book.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tableparty_arrangement_book.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangement_book.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tableparty_arrangement_book.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangement_book.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tableparty_arrangement_book.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_arrangement_book.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableparty_arrangement_book.AMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_arrangement_bookRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As party_arrangement_bookRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As party_arrangement_bookRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As party_arrangement_bookRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_menu_bookDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnrates As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnSERTAX As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnCATEGORY As DataColumn
        
        Friend Sub New()
            MyBase.New("party_menu_book")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property ratesColumn As DataColumn
            Get
                Return Me.columnrates
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property SERTAXColumn As DataColumn
            Get
                Return Me.columnSERTAX
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property CATEGORYColumn As DataColumn
            Get
                Return Me.columnCATEGORY
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As party_menu_bookRow
            Get
                Return CType(Me.Rows(index),party_menu_bookRow)
            End Get
        End Property
        
        Public Event party_menu_bookRowChanged As party_menu_bookRowChangeEventHandler
        
        Public Event party_menu_bookRowChanging As party_menu_bookRowChangeEventHandler
        
        Public Event party_menu_bookRowDeleted As party_menu_bookRowChangeEventHandler
        
        Public Event party_menu_bookRowDeleting As party_menu_bookRowChangeEventHandler
        
        Public Overloads Sub Addparty_menu_bookRow(ByVal row As party_menu_bookRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addparty_menu_bookRow(ByVal ITEMCODE As String, ByVal ITEMDESC As String, ByVal BOOKINGNO As Decimal, ByVal BOOKINGDATE As Date, ByVal rates As Decimal, ByVal QTY As Decimal, ByVal RATE As Decimal, ByVal TAXAMOUNT As Decimal, ByVal AMOUNT As Decimal, ByVal SERTAX As Decimal, ByVal UOM As String, ByVal CATEGORY As String) As party_menu_bookRow
            Dim rowparty_menu_bookRow As party_menu_bookRow = CType(Me.NewRow,party_menu_bookRow)
            rowparty_menu_bookRow.ItemArray = New Object() {ITEMCODE, ITEMDESC, BOOKINGNO, BOOKINGDATE, rates, QTY, RATE, TAXAMOUNT, AMOUNT, SERTAX, UOM, CATEGORY}
            Me.Rows.Add(rowparty_menu_bookRow)
            Return rowparty_menu_bookRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As party_menu_bookDataTable = CType(MyBase.Clone,party_menu_bookDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New party_menu_bookDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnrates = Me.Columns("rates")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnSERTAX = Me.Columns("SERTAX")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnCATEGORY = Me.Columns("CATEGORY")
        End Sub
        
        Private Sub InitClass()
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnrates = New DataColumn("rates", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrates)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnSERTAX = New DataColumn("SERTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSERTAX)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnCATEGORY = New DataColumn("CATEGORY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATEGORY)
            Me.columnITEMCODE.AllowDBNull = false
            Me.columnBOOKINGNO.AllowDBNull = false
        End Sub
        
        Public Function Newparty_menu_bookRow() As party_menu_bookRow
            Return CType(Me.NewRow,party_menu_bookRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New party_menu_bookRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(party_menu_bookRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.party_menu_bookRowChangedEvent) Is Nothing) Then
                RaiseEvent party_menu_bookRowChanged(Me, New party_menu_bookRowChangeEvent(CType(e.Row,party_menu_bookRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.party_menu_bookRowChangingEvent) Is Nothing) Then
                RaiseEvent party_menu_bookRowChanging(Me, New party_menu_bookRowChangeEvent(CType(e.Row,party_menu_bookRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.party_menu_bookRowDeletedEvent) Is Nothing) Then
                RaiseEvent party_menu_bookRowDeleted(Me, New party_menu_bookRowChangeEvent(CType(e.Row,party_menu_bookRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.party_menu_bookRowDeletingEvent) Is Nothing) Then
                RaiseEvent party_menu_bookRowDeleting(Me, New party_menu_bookRowChangeEvent(CType(e.Row,party_menu_bookRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeparty_menu_bookRow(ByVal row As party_menu_bookRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_menu_bookRow
        Inherits DataRow
        
        Private tableparty_menu_book As party_menu_bookDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableparty_menu_book = CType(Me.Table,party_menu_bookDataTable)
        End Sub
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tableparty_menu_book.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tableparty_menu_book.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_menu_book.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_menu_book.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tableparty_menu_book.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tableparty_menu_book.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableparty_menu_book.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_menu_book.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property rates As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_menu_book.ratesColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_menu_book.ratesColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_menu_book.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_menu_book.QTYColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_menu_book.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_menu_book.RATEColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_menu_book.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_menu_book.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_menu_book.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_menu_book.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property SERTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_menu_book.SERTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_menu_book.SERTAXColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_menu_book.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_menu_book.UOMColumn) = value
            End Set
        End Property
        
        Public Property CATEGORY As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_menu_book.CATEGORYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_menu_book.CATEGORYColumn) = value
            End Set
        End Property
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tableparty_menu_book.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tableparty_menu_book.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tableparty_menu_book.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tableparty_menu_book.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsratesNull() As Boolean
            Return Me.IsNull(Me.tableparty_menu_book.ratesColumn)
        End Function
        
        Public Sub SetratesNull()
            Me(Me.tableparty_menu_book.ratesColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableparty_menu_book.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tableparty_menu_book.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tableparty_menu_book.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tableparty_menu_book.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_menu_book.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tableparty_menu_book.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_menu_book.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableparty_menu_book.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSERTAXNull() As Boolean
            Return Me.IsNull(Me.tableparty_menu_book.SERTAXColumn)
        End Function
        
        Public Sub SetSERTAXNull()
            Me(Me.tableparty_menu_book.SERTAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tableparty_menu_book.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tableparty_menu_book.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATEGORYNull() As Boolean
            Return Me.IsNull(Me.tableparty_menu_book.CATEGORYColumn)
        End Function
        
        Public Sub SetCATEGORYNull()
            Me(Me.tableparty_menu_book.CATEGORYColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_menu_bookRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As party_menu_bookRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As party_menu_bookRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As party_menu_bookRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_MENDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMENUCODE As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnrate As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_MEN")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MENUCODEColumn As DataColumn
            Get
                Return Me.columnMENUCODE
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property rateColumn As DataColumn
            Get
                Return Me.columnrate
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_MENRow
            Get
                Return CType(Me.Rows(index),PARTY_MENRow)
            End Get
        End Property
        
        Public Event PARTY_MENRowChanged As PARTY_MENRowChangeEventHandler
        
        Public Event PARTY_MENRowChanging As PARTY_MENRowChangeEventHandler
        
        Public Event PARTY_MENRowDeleted As PARTY_MENRowChangeEventHandler
        
        Public Event PARTY_MENRowDeleting As PARTY_MENRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_MENRow(ByVal row As PARTY_MENRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_MENRow(ByVal BOOKINGNO As Decimal, ByVal BOOKINGDATE As Date, ByVal PARTYDATE As Date, ByVal MENUCODE As String, ByVal OCCUPANCY As Decimal, ByVal rate As Decimal) As PARTY_MENRow
            Dim rowPARTY_MENRow As PARTY_MENRow = CType(Me.NewRow,PARTY_MENRow)
            rowPARTY_MENRow.ItemArray = New Object() {BOOKINGNO, BOOKINGDATE, PARTYDATE, MENUCODE, OCCUPANCY, rate}
            Me.Rows.Add(rowPARTY_MENRow)
            Return rowPARTY_MENRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_MENDataTable = CType(MyBase.Clone,PARTY_MENDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_MENDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMENUCODE = Me.Columns("MENUCODE")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnrate = Me.Columns("rate")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMENUCODE = New DataColumn("MENUCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMENUCODE)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnrate = New DataColumn("rate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrate)
        End Sub
        
        Public Function NewPARTY_MENRow() As PARTY_MENRow
            Return CType(Me.NewRow,PARTY_MENRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_MENRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_MENRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_MENRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_MENRowChanged(Me, New PARTY_MENRowChangeEvent(CType(e.Row,PARTY_MENRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_MENRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_MENRowChanging(Me, New PARTY_MENRowChangeEvent(CType(e.Row,PARTY_MENRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_MENRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_MENRowDeleted(Me, New PARTY_MENRowChangeEvent(CType(e.Row,PARTY_MENRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_MENRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_MENRowDeleting(Me, New PARTY_MENRowChangeEvent(CType(e.Row,PARTY_MENRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_MENRow(ByVal row As PARTY_MENRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_MENRow
        Inherits DataRow
        
        Private tablePARTY_MEN As PARTY_MENDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_MEN = CType(Me.Table,PARTY_MENDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MEN.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MEN.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MEN.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MEN.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MEN.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MEN.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MENUCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MEN.MENUCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MEN.MENUCODEColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MEN.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MEN.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property rate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_MEN.rateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_MEN.rateColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MEN.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_MEN.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MEN.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_MEN.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MEN.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_MEN.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMENUCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MEN.MENUCODEColumn)
        End Function
        
        Public Sub SetMENUCODENull()
            Me(Me.tablePARTY_MEN.MENUCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MEN.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablePARTY_MEN.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrateNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_MEN.rateColumn)
        End Function
        
        Public Sub SetrateNull()
            Me(Me.tablePARTY_MEN.rateColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_MENRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_MENRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_MENRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_MENRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_ARRANGEMENTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnITEMCODE As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Private columnITEMTYPECODE As DataColumn
        
        Private columnGROUPCODE As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnTAXPERC As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnadddatetime As DataColumn
        
        Private columnadduserid As DataColumn
        
        Private columnCGROUPCODE As DataColumn
        
        Private columnGROUPCODEOLD As DataColumn
        
        Private columnGLACCODE As DataColumn
        
        Private columnAUTOID As DataColumn
        
        Private columnSBFCHARGE As DataColumn
        
        Private columnCATEGORY As DataColumn
        
        Private columnGLCCODE As DataColumn
        
        Private columnGLACCODE1 As DataColumn
        
        Private columnGLCCODE1 As DataColumn
        
        Private columnTYPE As DataColumn
        
        Private columnITEMDES As DataColumn
        
        Private columnbookingno As DataColumn
        
        Friend Sub New()
            MyBase.New("PAR_ARRANGEMENT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property ITEMTYPECODEColumn As DataColumn
            Get
                Return Me.columnITEMTYPECODE
            End Get
        End Property
        
        Friend ReadOnly Property GROUPCODEColumn As DataColumn
            Get
                Return Me.columnGROUPCODE
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property TAXPERCColumn As DataColumn
            Get
                Return Me.columnTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property adddatetimeColumn As DataColumn
            Get
                Return Me.columnadddatetime
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Friend ReadOnly Property CGROUPCODEColumn As DataColumn
            Get
                Return Me.columnCGROUPCODE
            End Get
        End Property
        
        Friend ReadOnly Property GROUPCODEOLDColumn As DataColumn
            Get
                Return Me.columnGROUPCODEOLD
            End Get
        End Property
        
        Friend ReadOnly Property GLACCODEColumn As DataColumn
            Get
                Return Me.columnGLACCODE
            End Get
        End Property
        
        Friend ReadOnly Property AUTOIDColumn As DataColumn
            Get
                Return Me.columnAUTOID
            End Get
        End Property
        
        Friend ReadOnly Property SBFCHARGEColumn As DataColumn
            Get
                Return Me.columnSBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property CATEGORYColumn As DataColumn
            Get
                Return Me.columnCATEGORY
            End Get
        End Property
        
        Friend ReadOnly Property GLCCODEColumn As DataColumn
            Get
                Return Me.columnGLCCODE
            End Get
        End Property
        
        Friend ReadOnly Property GLACCODE1Column As DataColumn
            Get
                Return Me.columnGLACCODE1
            End Get
        End Property
        
        Friend ReadOnly Property GLCCODE1Column As DataColumn
            Get
                Return Me.columnGLCCODE1
            End Get
        End Property
        
        Friend ReadOnly Property TYPEColumn As DataColumn
            Get
                Return Me.columnTYPE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESColumn As DataColumn
            Get
                Return Me.columnITEMDES
            End Get
        End Property
        
        Friend ReadOnly Property bookingnoColumn As DataColumn
            Get
                Return Me.columnbookingno
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PAR_ARRANGEMENTRow
            Get
                Return CType(Me.Rows(index),PAR_ARRANGEMENTRow)
            End Get
        End Property
        
        Public Event PAR_ARRANGEMENTRowChanged As PAR_ARRANGEMENTRowChangeEventHandler
        
        Public Event PAR_ARRANGEMENTRowChanging As PAR_ARRANGEMENTRowChangeEventHandler
        
        Public Event PAR_ARRANGEMENTRowDeleted As PAR_ARRANGEMENTRowChangeEventHandler
        
        Public Event PAR_ARRANGEMENTRowDeleting As PAR_ARRANGEMENTRowChangeEventHandler
        
        Public Overloads Sub AddPAR_ARRANGEMENTRow(ByVal row As PAR_ARRANGEMENTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPAR_ARRANGEMENTRow( _
                    ByVal ITEMCODE As String,  _
                    ByVal ITEMDESC As String,  _
                    ByVal ITEMTYPECODE As String,  _
                    ByVal GROUPCODE As String,  _
                    ByVal UOM As String,  _
                    ByVal RATE As Decimal,  _
                    ByVal TAXPERC As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal adddatetime As Date,  _
                    ByVal adduserid As String,  _
                    ByVal CGROUPCODE As String,  _
                    ByVal GROUPCODEOLD As String,  _
                    ByVal GLACCODE As String,  _
                    ByVal AUTOID As Decimal,  _
                    ByVal SBFCHARGE As String,  _
                    ByVal CATEGORY As String,  _
                    ByVal GLCCODE As String,  _
                    ByVal GLACCODE1 As String,  _
                    ByVal GLCCODE1 As String,  _
                    ByVal TYPE As String,  _
                    ByVal ITEMDES As String,  _
                    ByVal bookingno As Decimal) As PAR_ARRANGEMENTRow
            Dim rowPAR_ARRANGEMENTRow As PAR_ARRANGEMENTRow = CType(Me.NewRow,PAR_ARRANGEMENTRow)
            rowPAR_ARRANGEMENTRow.ItemArray = New Object() {ITEMCODE, ITEMDESC, ITEMTYPECODE, GROUPCODE, UOM, RATE, TAXPERC, AMOUNT, FREEZE, adddatetime, adduserid, CGROUPCODE, GROUPCODEOLD, GLACCODE, AUTOID, SBFCHARGE, CATEGORY, GLCCODE, GLACCODE1, GLCCODE1, TYPE, ITEMDES, bookingno}
            Me.Rows.Add(rowPAR_ARRANGEMENTRow)
            Return rowPAR_ARRANGEMENTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PAR_ARRANGEMENTDataTable = CType(MyBase.Clone,PAR_ARRANGEMENTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PAR_ARRANGEMENTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
            Me.columnITEMTYPECODE = Me.Columns("ITEMTYPECODE")
            Me.columnGROUPCODE = Me.Columns("GROUPCODE")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnTAXPERC = Me.Columns("TAXPERC")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnadddatetime = Me.Columns("adddatetime")
            Me.columnadduserid = Me.Columns("adduserid")
            Me.columnCGROUPCODE = Me.Columns("CGROUPCODE")
            Me.columnGROUPCODEOLD = Me.Columns("GROUPCODEOLD")
            Me.columnGLACCODE = Me.Columns("GLACCODE")
            Me.columnAUTOID = Me.Columns("AUTOID")
            Me.columnSBFCHARGE = Me.Columns("SBFCHARGE")
            Me.columnCATEGORY = Me.Columns("CATEGORY")
            Me.columnGLCCODE = Me.Columns("GLCCODE")
            Me.columnGLACCODE1 = Me.Columns("GLACCODE1")
            Me.columnGLCCODE1 = Me.Columns("GLCCODE1")
            Me.columnTYPE = Me.Columns("TYPE")
            Me.columnITEMDES = Me.Columns("ITEMDES")
            Me.columnbookingno = Me.Columns("bookingno")
        End Sub
        
        Private Sub InitClass()
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columnITEMTYPECODE = New DataColumn("ITEMTYPECODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMTYPECODE)
            Me.columnGROUPCODE = New DataColumn("GROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPCODE)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnTAXPERC = New DataColumn("TAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXPERC)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnadddatetime = New DataColumn("adddatetime", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadddatetime)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
            Me.columnCGROUPCODE = New DataColumn("CGROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCGROUPCODE)
            Me.columnGROUPCODEOLD = New DataColumn("GROUPCODEOLD", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPCODEOLD)
            Me.columnGLACCODE = New DataColumn("GLACCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCODE)
            Me.columnAUTOID = New DataColumn("AUTOID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAUTOID)
            Me.columnSBFCHARGE = New DataColumn("SBFCHARGE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBFCHARGE)
            Me.columnCATEGORY = New DataColumn("CATEGORY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATEGORY)
            Me.columnGLCCODE = New DataColumn("GLCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLCCODE)
            Me.columnGLACCODE1 = New DataColumn("GLACCODE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLACCODE1)
            Me.columnGLCCODE1 = New DataColumn("GLCCODE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGLCCODE1)
            Me.columnTYPE = New DataColumn("TYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTYPE)
            Me.columnITEMDES = New DataColumn("ITEMDES", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDES)
            Me.columnbookingno = New DataColumn("bookingno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookingno)
            Me.columnITEMCODE.AllowDBNull = false
            Me.columnAUTOID.AllowDBNull = false
        End Sub
        
        Public Function NewPAR_ARRANGEMENTRow() As PAR_ARRANGEMENTRow
            Return CType(Me.NewRow,PAR_ARRANGEMENTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PAR_ARRANGEMENTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PAR_ARRANGEMENTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PAR_ARRANGEMENTRowChangedEvent) Is Nothing) Then
                RaiseEvent PAR_ARRANGEMENTRowChanged(Me, New PAR_ARRANGEMENTRowChangeEvent(CType(e.Row,PAR_ARRANGEMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PAR_ARRANGEMENTRowChangingEvent) Is Nothing) Then
                RaiseEvent PAR_ARRANGEMENTRowChanging(Me, New PAR_ARRANGEMENTRowChangeEvent(CType(e.Row,PAR_ARRANGEMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PAR_ARRANGEMENTRowDeletedEvent) Is Nothing) Then
                RaiseEvent PAR_ARRANGEMENTRowDeleted(Me, New PAR_ARRANGEMENTRowChangeEvent(CType(e.Row,PAR_ARRANGEMENTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PAR_ARRANGEMENTRowDeletingEvent) Is Nothing) Then
                RaiseEvent PAR_ARRANGEMENTRowDeleting(Me, New PAR_ARRANGEMENTRowChangeEvent(CType(e.Row,PAR_ARRANGEMENTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePAR_ARRANGEMENTRow(ByVal row As PAR_ARRANGEMENTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_ARRANGEMENTRow
        Inherits DataRow
        
        Private tablePAR_ARRANGEMENT As PAR_ARRANGEMENTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePAR_ARRANGEMENT = CType(Me.Table,PAR_ARRANGEMENTDataTable)
        End Sub
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tablePAR_ARRANGEMENT.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property ITEMTYPECODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.ITEMTYPECODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.ITEMTYPECODEColumn) = value
            End Set
        End Property
        
        Public Property GROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.GROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.GROUPCODEColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.UOMColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.RATEColumn) = value
            End Set
        End Property
        
        Public Property TAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.TAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.TAXPERCColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property adddatetime As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.adddatetimeColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.adddatetimeColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.adduseridColumn) = value
            End Set
        End Property
        
        Public Property CGROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.CGROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.CGROUPCODEColumn) = value
            End Set
        End Property
        
        Public Property GROUPCODEOLD As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.GROUPCODEOLDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.GROUPCODEOLDColumn) = value
            End Set
        End Property
        
        Public Property GLACCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.GLACCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.GLACCODEColumn) = value
            End Set
        End Property
        
        Public Property AUTOID As Decimal
            Get
                Return CType(Me(Me.tablePAR_ARRANGEMENT.AUTOIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.AUTOIDColumn) = value
            End Set
        End Property
        
        Public Property SBFCHARGE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.SBFCHARGEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.SBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property CATEGORY As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.CATEGORYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.CATEGORYColumn) = value
            End Set
        End Property
        
        Public Property GLCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.GLCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.GLCCODEColumn) = value
            End Set
        End Property
        
        Public Property GLACCODE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.GLACCODE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.GLACCODE1Column) = value
            End Set
        End Property
        
        Public Property GLCCODE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.GLCCODE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.GLCCODE1Column) = value
            End Set
        End Property
        
        Public Property TYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.TYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.TYPEColumn) = value
            End Set
        End Property
        
        Public Property ITEMDES As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.ITEMDESColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.ITEMDESColumn) = value
            End Set
        End Property
        
        Public Property bookingno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ARRANGEMENT.bookingnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ARRANGEMENT.bookingnoColumn) = value
            End Set
        End Property
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tablePAR_ARRANGEMENT.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMTYPECODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.ITEMTYPECODEColumn)
        End Function
        
        Public Sub SetITEMTYPECODENull()
            Me(Me.tablePAR_ARRANGEMENT.ITEMTYPECODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.GROUPCODEColumn)
        End Function
        
        Public Sub SetGROUPCODENull()
            Me(Me.tablePAR_ARRANGEMENT.GROUPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tablePAR_ARRANGEMENT.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePAR_ARRANGEMENT.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.TAXPERCColumn)
        End Function
        
        Public Sub SetTAXPERCNull()
            Me(Me.tablePAR_ARRANGEMENT.TAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePAR_ARRANGEMENT.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePAR_ARRANGEMENT.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadddatetimeNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.adddatetimeColumn)
        End Function
        
        Public Sub SetadddatetimeNull()
            Me(Me.tablePAR_ARRANGEMENT.adddatetimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tablePAR_ARRANGEMENT.adduseridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.CGROUPCODEColumn)
        End Function
        
        Public Sub SetCGROUPCODENull()
            Me(Me.tablePAR_ARRANGEMENT.CGROUPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPCODEOLDNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.GROUPCODEOLDColumn)
        End Function
        
        Public Sub SetGROUPCODEOLDNull()
            Me(Me.tablePAR_ARRANGEMENT.GROUPCODEOLDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.GLACCODEColumn)
        End Function
        
        Public Sub SetGLACCODENull()
            Me(Me.tablePAR_ARRANGEMENT.GLACCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.SBFCHARGEColumn)
        End Function
        
        Public Sub SetSBFCHARGENull()
            Me(Me.tablePAR_ARRANGEMENT.SBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATEGORYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.CATEGORYColumn)
        End Function
        
        Public Sub SetCATEGORYNull()
            Me(Me.tablePAR_ARRANGEMENT.CATEGORYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLCCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.GLCCODEColumn)
        End Function
        
        Public Sub SetGLCCODENull()
            Me(Me.tablePAR_ARRANGEMENT.GLCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLACCODE1Null() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.GLACCODE1Column)
        End Function
        
        Public Sub SetGLACCODE1Null()
            Me(Me.tablePAR_ARRANGEMENT.GLACCODE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsGLCCODE1Null() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.GLCCODE1Column)
        End Function
        
        Public Sub SetGLCCODE1Null()
            Me(Me.tablePAR_ARRANGEMENT.GLCCODE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsTYPENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.TYPEColumn)
        End Function
        
        Public Sub SetTYPENull()
            Me(Me.tablePAR_ARRANGEMENT.TYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMDESNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.ITEMDESColumn)
        End Function
        
        Public Sub SetITEMDESNull()
            Me(Me.tablePAR_ARRANGEMENT.ITEMDESColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbookingnoNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ARRANGEMENT.bookingnoColumn)
        End Function
        
        Public Sub SetbookingnoNull()
            Me(Me.tablePAR_ARRANGEMENT.bookingnoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_ARRANGEMENTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PAR_ARRANGEMENTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PAR_ARRANGEMENTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PAR_ARRANGEMENTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_HDRDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnROWID As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnFROMTIME As DataColumn
        
        Private columnTOTIME As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnHALLTAXFLAG As DataColumn
        
        Private columnADVANCE As DataColumn
        
        Private columnHALLAMOUNT As DataColumn
        
        Private columnHALLTAXPERC As DataColumn
        
        Private columnHALLTAXAMOUNT As DataColumn
        
        Private columnBOOKINGTARIFFAMOUNT As DataColumn
        
        Private columnEXCESSTARIFFAMOUNT As DataColumn
        
        Private columnRESTAMOUNT As DataColumn
        
        Private columnRESTTAXAMOUNT As DataColumn
        
        Private columnARRMENTAMOUNT As DataColumn
        
        Private columnARRMENTTAXAMOUNT As DataColumn
        
        Private columnRECEIPTNO As DataColumn
        
        Private columnRECEIPTDATE As DataColumn
        
        Private columnHALLCANCELAMOUNT As DataColumn
        
        Private columnRESCANCELAMOUNT As DataColumn
        
        Private columnARRCANCELAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnFROMHRS As DataColumn
        
        Private columnTOHRS As DataColumn
        
        Private columnCANCELDATE As DataColumn
        
        Private columnNETPAYABLE As DataColumn
        
        Private columnSBFCHARGE As DataColumn
        
        Private columnTARIFFTAXAMOUNT As DataColumn
        
        Private columnBOOKINGOCCUPANCY As DataColumn
        
        Private columnBILLINGOCCUPANCY As DataColumn
        
        Private columnABOOKINGOCCUPANCY As DataColumn
        
        Private columnABILLINGOCCUPANCY As DataColumn
        
        Private columnALLOWEDOCCUPANCY As DataColumn
        
        Private columnDIFFOCCUPANCY As DataColumn
        
        Private columnhallamt As DataColumn
        
        Private columnhalltaxamt As DataColumn
        
        Private columnhallnetamt As DataColumn
        
        Private columnrcamt As DataColumn
        
        Private columnRESAMT As DataColumn
        
        Private columnRESTAXAMT As DataColumn
        
        Private columnRESTOTALAMT As DataColumn
        
        Private columnRESSBFAMT As DataColumn
        
        Private columnBARAMT As DataColumn
        
        Private columnBARTAXAMT As DataColumn
        
        Private columnBARTOTALAMT As DataColumn
        
        Private columnBARSBFAMT As DataColumn
        
        Private columnTARSBFCHARGE As DataColumn
        
        Private columnTRATE As DataColumn
        
        Private columnDRATE As DataColumn
        
        Private columnDIFFVALUE As DataColumn
        
        Private columnBOOKINGVALUE As DataColumn
        
        Private columnTARIFFVALUE As DataColumn
        
        Private columnTARIFFSBF As DataColumn
        
        Private columnTARIFFTAXAMT As DataColumn
        
        Private columnARRAMT As DataColumn
        
        Private columnARRTAXAMT As DataColumn
        
        Private columnARRTOTALAMT As DataColumn
        
        Private columnARRSBFAMT As DataColumn
        
        Private columnTAXTOTAL As DataColumn
        
        Private columnSTAX As DataColumn
        
        Private columnGROSSTOTAL As DataColumn
        
        Private columnNETTOTAL As DataColumn
        
        Private columntbillamount As DataColumn
        
        Private columnSBFTAX As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnCONT As DataColumn
        
        Private columnVAT As DataColumn
        
        Private columnINVOICENO As DataColumn
        
        Private columnveg As DataColumn
        
        Private columnnonveg As DataColumn
        
        Private columnVoid As DataColumn
        
        Private columnVEGRATE As DataColumn
        
        Private columnNONVEGRATE As DataColumn
        
        Private columnfreereason As DataColumn
        
        Private columnvegcode As DataColumn
        
        Private columnnonvegcode As DataColumn
        
        Private columnMENUCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnCADD1 As DataColumn
        
        Private columnCADD2 As DataColumn
        
        Private columnCADD3 As DataColumn
        
        Private columnCCITY As DataColumn
        
        Private columnCSTATE As DataColumn
        
        Private columnCPHONE1 As DataColumn
        
        Private columnCCELL As DataColumn
        
        Friend Sub New()
            MyBase.New("PAR_HDR")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ROWIDColumn As DataColumn
            Get
                Return Me.columnROWID
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property FROMTIMEColumn As DataColumn
            Get
                Return Me.columnFROMTIME
            End Get
        End Property
        
        Friend ReadOnly Property TOTIMEColumn As DataColumn
            Get
                Return Me.columnTOTIME
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXFLAGColumn As DataColumn
            Get
                Return Me.columnHALLTAXFLAG
            End Get
        End Property
        
        Friend ReadOnly Property ADVANCEColumn As DataColumn
            Get
                Return Me.columnADVANCE
            End Get
        End Property
        
        Friend ReadOnly Property HALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXPERCColumn As DataColumn
            Get
                Return Me.columnHALLTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnBOOKINGTARIFFAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property EXCESSTARIFFAMOUNTColumn As DataColumn
            Get
                Return Me.columnEXCESSTARIFFAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESTTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESTTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ARRMENTAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRMENTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ARRMENTTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRMENTTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTNOColumn As DataColumn
            Get
                Return Me.columnRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property HALLCANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RESCANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnRESCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ARRCANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnARRCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property FROMHRSColumn As DataColumn
            Get
                Return Me.columnFROMHRS
            End Get
        End Property
        
        Friend ReadOnly Property TOHRSColumn As DataColumn
            Get
                Return Me.columnTOHRS
            End Get
        End Property
        
        Friend ReadOnly Property CANCELDATEColumn As DataColumn
            Get
                Return Me.columnCANCELDATE
            End Get
        End Property
        
        Friend ReadOnly Property NETPAYABLEColumn As DataColumn
            Get
                Return Me.columnNETPAYABLE
            End Get
        End Property
        
        Friend ReadOnly Property SBFCHARGEColumn As DataColumn
            Get
                Return Me.columnSBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTARIFFTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnBOOKINGOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property BILLINGOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnBILLINGOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property ABOOKINGOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnABOOKINGOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property ABILLINGOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnABILLINGOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property ALLOWEDOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnALLOWEDOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property DIFFOCCUPANCYColumn As DataColumn
            Get
                Return Me.columnDIFFOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property hallamtColumn As DataColumn
            Get
                Return Me.columnhallamt
            End Get
        End Property
        
        Friend ReadOnly Property halltaxamtColumn As DataColumn
            Get
                Return Me.columnhalltaxamt
            End Get
        End Property
        
        Friend ReadOnly Property hallnetamtColumn As DataColumn
            Get
                Return Me.columnhallnetamt
            End Get
        End Property
        
        Friend ReadOnly Property rcamtColumn As DataColumn
            Get
                Return Me.columnrcamt
            End Get
        End Property
        
        Friend ReadOnly Property RESAMTColumn As DataColumn
            Get
                Return Me.columnRESAMT
            End Get
        End Property
        
        Friend ReadOnly Property RESTAXAMTColumn As DataColumn
            Get
                Return Me.columnRESTAXAMT
            End Get
        End Property
        
        Friend ReadOnly Property RESTOTALAMTColumn As DataColumn
            Get
                Return Me.columnRESTOTALAMT
            End Get
        End Property
        
        Friend ReadOnly Property RESSBFAMTColumn As DataColumn
            Get
                Return Me.columnRESSBFAMT
            End Get
        End Property
        
        Friend ReadOnly Property BARAMTColumn As DataColumn
            Get
                Return Me.columnBARAMT
            End Get
        End Property
        
        Friend ReadOnly Property BARTAXAMTColumn As DataColumn
            Get
                Return Me.columnBARTAXAMT
            End Get
        End Property
        
        Friend ReadOnly Property BARTOTALAMTColumn As DataColumn
            Get
                Return Me.columnBARTOTALAMT
            End Get
        End Property
        
        Friend ReadOnly Property BARSBFAMTColumn As DataColumn
            Get
                Return Me.columnBARSBFAMT
            End Get
        End Property
        
        Friend ReadOnly Property TARSBFCHARGEColumn As DataColumn
            Get
                Return Me.columnTARSBFCHARGE
            End Get
        End Property
        
        Friend ReadOnly Property TRATEColumn As DataColumn
            Get
                Return Me.columnTRATE
            End Get
        End Property
        
        Friend ReadOnly Property DRATEColumn As DataColumn
            Get
                Return Me.columnDRATE
            End Get
        End Property
        
        Friend ReadOnly Property DIFFVALUEColumn As DataColumn
            Get
                Return Me.columnDIFFVALUE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGVALUEColumn As DataColumn
            Get
                Return Me.columnBOOKINGVALUE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFVALUEColumn As DataColumn
            Get
                Return Me.columnTARIFFVALUE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFSBFColumn As DataColumn
            Get
                Return Me.columnTARIFFSBF
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFTAXAMTColumn As DataColumn
            Get
                Return Me.columnTARIFFTAXAMT
            End Get
        End Property
        
        Friend ReadOnly Property ARRAMTColumn As DataColumn
            Get
                Return Me.columnARRAMT
            End Get
        End Property
        
        Friend ReadOnly Property ARRTAXAMTColumn As DataColumn
            Get
                Return Me.columnARRTAXAMT
            End Get
        End Property
        
        Friend ReadOnly Property ARRTOTALAMTColumn As DataColumn
            Get
                Return Me.columnARRTOTALAMT
            End Get
        End Property
        
        Friend ReadOnly Property ARRSBFAMTColumn As DataColumn
            Get
                Return Me.columnARRSBFAMT
            End Get
        End Property
        
        Friend ReadOnly Property TAXTOTALColumn As DataColumn
            Get
                Return Me.columnTAXTOTAL
            End Get
        End Property
        
        Friend ReadOnly Property STAXColumn As DataColumn
            Get
                Return Me.columnSTAX
            End Get
        End Property
        
        Friend ReadOnly Property GROSSTOTALColumn As DataColumn
            Get
                Return Me.columnGROSSTOTAL
            End Get
        End Property
        
        Friend ReadOnly Property NETTOTALColumn As DataColumn
            Get
                Return Me.columnNETTOTAL
            End Get
        End Property
        
        Friend ReadOnly Property tbillamountColumn As DataColumn
            Get
                Return Me.columntbillamount
            End Get
        End Property
        
        Friend ReadOnly Property SBFTAXColumn As DataColumn
            Get
                Return Me.columnSBFTAX
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property CONTColumn As DataColumn
            Get
                Return Me.columnCONT
            End Get
        End Property
        
        Friend ReadOnly Property VATColumn As DataColumn
            Get
                Return Me.columnVAT
            End Get
        End Property
        
        Friend ReadOnly Property INVOICENOColumn As DataColumn
            Get
                Return Me.columnINVOICENO
            End Get
        End Property
        
        Friend ReadOnly Property vegColumn As DataColumn
            Get
                Return Me.columnveg
            End Get
        End Property
        
        Friend ReadOnly Property nonvegColumn As DataColumn
            Get
                Return Me.columnnonveg
            End Get
        End Property
        
        Friend ReadOnly Property VoidColumn As DataColumn
            Get
                Return Me.columnVoid
            End Get
        End Property
        
        Friend ReadOnly Property VEGRATEColumn As DataColumn
            Get
                Return Me.columnVEGRATE
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGRATEColumn As DataColumn
            Get
                Return Me.columnNONVEGRATE
            End Get
        End Property
        
        Friend ReadOnly Property freereasonColumn As DataColumn
            Get
                Return Me.columnfreereason
            End Get
        End Property
        
        Friend ReadOnly Property vegcodeColumn As DataColumn
            Get
                Return Me.columnvegcode
            End Get
        End Property
        
        Friend ReadOnly Property nonvegcodeColumn As DataColumn
            Get
                Return Me.columnnonvegcode
            End Get
        End Property
        
        Friend ReadOnly Property MENUCODEColumn As DataColumn
            Get
                Return Me.columnMENUCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property CADD1Column As DataColumn
            Get
                Return Me.columnCADD1
            End Get
        End Property
        
        Friend ReadOnly Property CADD2Column As DataColumn
            Get
                Return Me.columnCADD2
            End Get
        End Property
        
        Friend ReadOnly Property CADD3Column As DataColumn
            Get
                Return Me.columnCADD3
            End Get
        End Property
        
        Friend ReadOnly Property CCITYColumn As DataColumn
            Get
                Return Me.columnCCITY
            End Get
        End Property
        
        Friend ReadOnly Property CSTATEColumn As DataColumn
            Get
                Return Me.columnCSTATE
            End Get
        End Property
        
        Friend ReadOnly Property CPHONE1Column As DataColumn
            Get
                Return Me.columnCPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property CCELLColumn As DataColumn
            Get
                Return Me.columnCCELL
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PAR_HDRRow
            Get
                Return CType(Me.Rows(index),PAR_HDRRow)
            End Get
        End Property
        
        Public Event PAR_HDRRowChanged As PAR_HDRRowChangeEventHandler
        
        Public Event PAR_HDRRowChanging As PAR_HDRRowChangeEventHandler
        
        Public Event PAR_HDRRowDeleted As PAR_HDRRowChangeEventHandler
        
        Public Event PAR_HDRRowDeleting As PAR_HDRRowChangeEventHandler
        
        Public Overloads Sub AddPAR_HDRRow(ByVal row As PAR_HDRRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPAR_HDRRow( _
                    ByVal ROWID As Decimal,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal FROMTIME As Decimal,  _
                    ByVal TOTIME As Decimal,  _
                    ByVal MCODE As String,  _
                    ByVal ASSOCIATENAME As String,  _
                    ByVal HALLCODE As String,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal HALLTAXFLAG As String,  _
                    ByVal ADVANCE As Decimal,  _
                    ByVal HALLAMOUNT As Decimal,  _
                    ByVal HALLTAXPERC As Decimal,  _
                    ByVal HALLTAXAMOUNT As Decimal,  _
                    ByVal BOOKINGTARIFFAMOUNT As Decimal,  _
                    ByVal EXCESSTARIFFAMOUNT As Decimal,  _
                    ByVal RESTAMOUNT As Decimal,  _
                    ByVal RESTTAXAMOUNT As Decimal,  _
                    ByVal ARRMENTAMOUNT As Decimal,  _
                    ByVal ARRMENTTAXAMOUNT As Decimal,  _
                    ByVal RECEIPTNO As String,  _
                    ByVal RECEIPTDATE As Date,  _
                    ByVal HALLCANCELAMOUNT As Decimal,  _
                    ByVal RESCANCELAMOUNT As Decimal,  _
                    ByVal ARRCANCELAMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal ADDDATETIME As Date,  _
                    ByVal ADDUSERID As String,  _
                    ByVal FROMHRS As Decimal,  _
                    ByVal TOHRS As Decimal,  _
                    ByVal CANCELDATE As Date,  _
                    ByVal NETPAYABLE As Decimal,  _
                    ByVal SBFCHARGE As Decimal,  _
                    ByVal TARIFFTAXAMOUNT As Decimal,  _
                    ByVal BOOKINGOCCUPANCY As Decimal,  _
                    ByVal BILLINGOCCUPANCY As Decimal,  _
                    ByVal ABOOKINGOCCUPANCY As Decimal,  _
                    ByVal ABILLINGOCCUPANCY As Decimal,  _
                    ByVal ALLOWEDOCCUPANCY As Decimal,  _
                    ByVal DIFFOCCUPANCY As Decimal,  _
                    ByVal hallamt As Decimal,  _
                    ByVal halltaxamt As Decimal,  _
                    ByVal hallnetamt As Decimal,  _
                    ByVal rcamt As Decimal,  _
                    ByVal RESAMT As Decimal,  _
                    ByVal RESTAXAMT As Decimal,  _
                    ByVal RESTOTALAMT As Decimal,  _
                    ByVal RESSBFAMT As Decimal,  _
                    ByVal BARAMT As Decimal,  _
                    ByVal BARTAXAMT As Decimal,  _
                    ByVal BARTOTALAMT As Decimal,  _
                    ByVal BARSBFAMT As Decimal,  _
                    ByVal TARSBFCHARGE As Decimal,  _
                    ByVal TRATE As Decimal,  _
                    ByVal DRATE As Decimal,  _
                    ByVal DIFFVALUE As Decimal,  _
                    ByVal BOOKINGVALUE As Decimal,  _
                    ByVal TARIFFVALUE As Decimal,  _
                    ByVal TARIFFSBF As Decimal,  _
                    ByVal TARIFFTAXAMT As Decimal,  _
                    ByVal ARRAMT As Decimal,  _
                    ByVal ARRTAXAMT As Decimal,  _
                    ByVal ARRTOTALAMT As Decimal,  _
                    ByVal ARRSBFAMT As Decimal,  _
                    ByVal TAXTOTAL As Decimal,  _
                    ByVal STAX As Decimal,  _
                    ByVal GROSSTOTAL As Decimal,  _
                    ByVal NETTOTAL As Decimal,  _
                    ByVal tbillamount As Decimal,  _
                    ByVal SBFTAX As Decimal,  _
                    ByVal LOCCODE As String,  _
                    ByVal CONT As Decimal,  _
                    ByVal VAT As Decimal,  _
                    ByVal INVOICENO As Decimal,  _
                    ByVal veg As Decimal,  _
                    ByVal nonveg As Decimal,  _
                    ByVal Void As String,  _
                    ByVal VEGRATE As Decimal,  _
                    ByVal NONVEGRATE As Decimal,  _
                    ByVal freereason As String,  _
                    ByVal vegcode As String,  _
                    ByVal nonvegcode As String,  _
                    ByVal MENUCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal CADD1 As String,  _
                    ByVal CADD2 As String,  _
                    ByVal CADD3 As String,  _
                    ByVal CCITY As String,  _
                    ByVal CSTATE As String,  _
                    ByVal CPHONE1 As Decimal,  _
                    ByVal CCELL As Decimal) As PAR_HDRRow
            Dim rowPAR_HDRRow As PAR_HDRRow = CType(Me.NewRow,PAR_HDRRow)
            rowPAR_HDRRow.ItemArray = New Object() {ROWID, BOOKINGTYPE, BOOKINGNO, BOOKINGDATE, PARTYDATE, FROMTIME, TOTIME, MCODE, ASSOCIATENAME, HALLCODE, OCCUPANCY, DESCRIPTION, HALLTAXFLAG, ADVANCE, HALLAMOUNT, HALLTAXPERC, HALLTAXAMOUNT, BOOKINGTARIFFAMOUNT, EXCESSTARIFFAMOUNT, RESTAMOUNT, RESTTAXAMOUNT, ARRMENTAMOUNT, ARRMENTTAXAMOUNT, RECEIPTNO, RECEIPTDATE, HALLCANCELAMOUNT, RESCANCELAMOUNT, ARRCANCELAMOUNT, FREEZE, ADDDATETIME, ADDUSERID, FROMHRS, TOHRS, CANCELDATE, NETPAYABLE, SBFCHARGE, TARIFFTAXAMOUNT, BOOKINGOCCUPANCY, BILLINGOCCUPANCY, ABOOKINGOCCUPANCY, ABILLINGOCCUPANCY, ALLOWEDOCCUPANCY, DIFFOCCUPANCY, hallamt, halltaxamt, hallnetamt, rcamt, RESAMT, RESTAXAMT, RESTOTALAMT, RESSBFAMT, BARAMT, BARTAXAMT, BARTOTALAMT, BARSBFAMT, TARSBFCHARGE, TRATE, DRATE, DIFFVALUE, BOOKINGVALUE, TARIFFVALUE, TARIFFSBF, TARIFFTAXAMT, ARRAMT, ARRTAXAMT, ARRTOTALAMT, ARRSBFAMT, TAXTOTAL, STAX, GROSSTOTAL, NETTOTAL, tbillamount, SBFTAX, LOCCODE, CONT, VAT, INVOICENO, veg, nonveg, Void, VEGRATE, NONVEGRATE, freereason, vegcode, nonvegcode, MENUCODE, MNAME, CADD1, CADD2, CADD3, CCITY, CSTATE, CPHONE1, CCELL}
            Me.Rows.Add(rowPAR_HDRRow)
            Return rowPAR_HDRRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PAR_HDRDataTable = CType(MyBase.Clone,PAR_HDRDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PAR_HDRDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnROWID = Me.Columns("ROWID")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnFROMTIME = Me.Columns("FROMTIME")
            Me.columnTOTIME = Me.Columns("TOTIME")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnHALLTAXFLAG = Me.Columns("HALLTAXFLAG")
            Me.columnADVANCE = Me.Columns("ADVANCE")
            Me.columnHALLAMOUNT = Me.Columns("HALLAMOUNT")
            Me.columnHALLTAXPERC = Me.Columns("HALLTAXPERC")
            Me.columnHALLTAXAMOUNT = Me.Columns("HALLTAXAMOUNT")
            Me.columnBOOKINGTARIFFAMOUNT = Me.Columns("BOOKINGTARIFFAMOUNT")
            Me.columnEXCESSTARIFFAMOUNT = Me.Columns("EXCESSTARIFFAMOUNT")
            Me.columnRESTAMOUNT = Me.Columns("RESTAMOUNT")
            Me.columnRESTTAXAMOUNT = Me.Columns("RESTTAXAMOUNT")
            Me.columnARRMENTAMOUNT = Me.Columns("ARRMENTAMOUNT")
            Me.columnARRMENTTAXAMOUNT = Me.Columns("ARRMENTTAXAMOUNT")
            Me.columnRECEIPTNO = Me.Columns("RECEIPTNO")
            Me.columnRECEIPTDATE = Me.Columns("RECEIPTDATE")
            Me.columnHALLCANCELAMOUNT = Me.Columns("HALLCANCELAMOUNT")
            Me.columnRESCANCELAMOUNT = Me.Columns("RESCANCELAMOUNT")
            Me.columnARRCANCELAMOUNT = Me.Columns("ARRCANCELAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnFROMHRS = Me.Columns("FROMHRS")
            Me.columnTOHRS = Me.Columns("TOHRS")
            Me.columnCANCELDATE = Me.Columns("CANCELDATE")
            Me.columnNETPAYABLE = Me.Columns("NETPAYABLE")
            Me.columnSBFCHARGE = Me.Columns("SBFCHARGE")
            Me.columnTARIFFTAXAMOUNT = Me.Columns("TARIFFTAXAMOUNT")
            Me.columnBOOKINGOCCUPANCY = Me.Columns("BOOKINGOCCUPANCY")
            Me.columnBILLINGOCCUPANCY = Me.Columns("BILLINGOCCUPANCY")
            Me.columnABOOKINGOCCUPANCY = Me.Columns("ABOOKINGOCCUPANCY")
            Me.columnABILLINGOCCUPANCY = Me.Columns("ABILLINGOCCUPANCY")
            Me.columnALLOWEDOCCUPANCY = Me.Columns("ALLOWEDOCCUPANCY")
            Me.columnDIFFOCCUPANCY = Me.Columns("DIFFOCCUPANCY")
            Me.columnhallamt = Me.Columns("hallamt")
            Me.columnhalltaxamt = Me.Columns("halltaxamt")
            Me.columnhallnetamt = Me.Columns("hallnetamt")
            Me.columnrcamt = Me.Columns("rcamt")
            Me.columnRESAMT = Me.Columns("RESAMT")
            Me.columnRESTAXAMT = Me.Columns("RESTAXAMT")
            Me.columnRESTOTALAMT = Me.Columns("RESTOTALAMT")
            Me.columnRESSBFAMT = Me.Columns("RESSBFAMT")
            Me.columnBARAMT = Me.Columns("BARAMT")
            Me.columnBARTAXAMT = Me.Columns("BARTAXAMT")
            Me.columnBARTOTALAMT = Me.Columns("BARTOTALAMT")
            Me.columnBARSBFAMT = Me.Columns("BARSBFAMT")
            Me.columnTARSBFCHARGE = Me.Columns("TARSBFCHARGE")
            Me.columnTRATE = Me.Columns("TRATE")
            Me.columnDRATE = Me.Columns("DRATE")
            Me.columnDIFFVALUE = Me.Columns("DIFFVALUE")
            Me.columnBOOKINGVALUE = Me.Columns("BOOKINGVALUE")
            Me.columnTARIFFVALUE = Me.Columns("TARIFFVALUE")
            Me.columnTARIFFSBF = Me.Columns("TARIFFSBF")
            Me.columnTARIFFTAXAMT = Me.Columns("TARIFFTAXAMT")
            Me.columnARRAMT = Me.Columns("ARRAMT")
            Me.columnARRTAXAMT = Me.Columns("ARRTAXAMT")
            Me.columnARRTOTALAMT = Me.Columns("ARRTOTALAMT")
            Me.columnARRSBFAMT = Me.Columns("ARRSBFAMT")
            Me.columnTAXTOTAL = Me.Columns("TAXTOTAL")
            Me.columnSTAX = Me.Columns("STAX")
            Me.columnGROSSTOTAL = Me.Columns("GROSSTOTAL")
            Me.columnNETTOTAL = Me.Columns("NETTOTAL")
            Me.columntbillamount = Me.Columns("tbillamount")
            Me.columnSBFTAX = Me.Columns("SBFTAX")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnCONT = Me.Columns("CONT")
            Me.columnVAT = Me.Columns("VAT")
            Me.columnINVOICENO = Me.Columns("INVOICENO")
            Me.columnveg = Me.Columns("veg")
            Me.columnnonveg = Me.Columns("nonveg")
            Me.columnVoid = Me.Columns("Void")
            Me.columnVEGRATE = Me.Columns("VEGRATE")
            Me.columnNONVEGRATE = Me.Columns("NONVEGRATE")
            Me.columnfreereason = Me.Columns("freereason")
            Me.columnvegcode = Me.Columns("vegcode")
            Me.columnnonvegcode = Me.Columns("nonvegcode")
            Me.columnMENUCODE = Me.Columns("MENUCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnCADD1 = Me.Columns("CADD1")
            Me.columnCADD2 = Me.Columns("CADD2")
            Me.columnCADD3 = Me.Columns("CADD3")
            Me.columnCCITY = Me.Columns("CCITY")
            Me.columnCSTATE = Me.Columns("CSTATE")
            Me.columnCPHONE1 = Me.Columns("CPHONE1")
            Me.columnCCELL = Me.Columns("CCELL")
        End Sub
        
        Private Sub InitClass()
            Me.columnROWID = New DataColumn("ROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROWID)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnFROMTIME = New DataColumn("FROMTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMTIME)
            Me.columnTOTIME = New DataColumn("TOTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTIME)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnHALLTAXFLAG = New DataColumn("HALLTAXFLAG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXFLAG)
            Me.columnADVANCE = New DataColumn("ADVANCE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADVANCE)
            Me.columnHALLAMOUNT = New DataColumn("HALLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLAMOUNT)
            Me.columnHALLTAXPERC = New DataColumn("HALLTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXPERC)
            Me.columnHALLTAXAMOUNT = New DataColumn("HALLTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXAMOUNT)
            Me.columnBOOKINGTARIFFAMOUNT = New DataColumn("BOOKINGTARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTARIFFAMOUNT)
            Me.columnEXCESSTARIFFAMOUNT = New DataColumn("EXCESSTARIFFAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEXCESSTARIFFAMOUNT)
            Me.columnRESTAMOUNT = New DataColumn("RESTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTAMOUNT)
            Me.columnRESTTAXAMOUNT = New DataColumn("RESTTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTTAXAMOUNT)
            Me.columnARRMENTAMOUNT = New DataColumn("ARRMENTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRMENTAMOUNT)
            Me.columnARRMENTTAXAMOUNT = New DataColumn("ARRMENTTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRMENTTAXAMOUNT)
            Me.columnRECEIPTNO = New DataColumn("RECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTNO)
            Me.columnRECEIPTDATE = New DataColumn("RECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTDATE)
            Me.columnHALLCANCELAMOUNT = New DataColumn("HALLCANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCANCELAMOUNT)
            Me.columnRESCANCELAMOUNT = New DataColumn("RESCANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESCANCELAMOUNT)
            Me.columnARRCANCELAMOUNT = New DataColumn("ARRCANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRCANCELAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnFROMHRS = New DataColumn("FROMHRS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMHRS)
            Me.columnTOHRS = New DataColumn("TOHRS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOHRS)
            Me.columnCANCELDATE = New DataColumn("CANCELDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELDATE)
            Me.columnNETPAYABLE = New DataColumn("NETPAYABLE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETPAYABLE)
            Me.columnSBFCHARGE = New DataColumn("SBFCHARGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBFCHARGE)
            Me.columnTARIFFTAXAMOUNT = New DataColumn("TARIFFTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFTAXAMOUNT)
            Me.columnBOOKINGOCCUPANCY = New DataColumn("BOOKINGOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGOCCUPANCY)
            Me.columnBILLINGOCCUPANCY = New DataColumn("BILLINGOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBILLINGOCCUPANCY)
            Me.columnABOOKINGOCCUPANCY = New DataColumn("ABOOKINGOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnABOOKINGOCCUPANCY)
            Me.columnABILLINGOCCUPANCY = New DataColumn("ABILLINGOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnABILLINGOCCUPANCY)
            Me.columnALLOWEDOCCUPANCY = New DataColumn("ALLOWEDOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnALLOWEDOCCUPANCY)
            Me.columnDIFFOCCUPANCY = New DataColumn("DIFFOCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDIFFOCCUPANCY)
            Me.columnhallamt = New DataColumn("hallamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallamt)
            Me.columnhalltaxamt = New DataColumn("halltaxamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltaxamt)
            Me.columnhallnetamt = New DataColumn("hallnetamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhallnetamt)
            Me.columnrcamt = New DataColumn("rcamt", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrcamt)
            Me.columnRESAMT = New DataColumn("RESAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESAMT)
            Me.columnRESTAXAMT = New DataColumn("RESTAXAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTAXAMT)
            Me.columnRESTOTALAMT = New DataColumn("RESTOTALAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESTOTALAMT)
            Me.columnRESSBFAMT = New DataColumn("RESSBFAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRESSBFAMT)
            Me.columnBARAMT = New DataColumn("BARAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBARAMT)
            Me.columnBARTAXAMT = New DataColumn("BARTAXAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBARTAXAMT)
            Me.columnBARTOTALAMT = New DataColumn("BARTOTALAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBARTOTALAMT)
            Me.columnBARSBFAMT = New DataColumn("BARSBFAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBARSBFAMT)
            Me.columnTARSBFCHARGE = New DataColumn("TARSBFCHARGE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARSBFCHARGE)
            Me.columnTRATE = New DataColumn("TRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTRATE)
            Me.columnDRATE = New DataColumn("DRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDRATE)
            Me.columnDIFFVALUE = New DataColumn("DIFFVALUE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDIFFVALUE)
            Me.columnBOOKINGVALUE = New DataColumn("BOOKINGVALUE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGVALUE)
            Me.columnTARIFFVALUE = New DataColumn("TARIFFVALUE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFVALUE)
            Me.columnTARIFFSBF = New DataColumn("TARIFFSBF", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFSBF)
            Me.columnTARIFFTAXAMT = New DataColumn("TARIFFTAXAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFTAXAMT)
            Me.columnARRAMT = New DataColumn("ARRAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRAMT)
            Me.columnARRTAXAMT = New DataColumn("ARRTAXAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRTAXAMT)
            Me.columnARRTOTALAMT = New DataColumn("ARRTOTALAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRTOTALAMT)
            Me.columnARRSBFAMT = New DataColumn("ARRSBFAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnARRSBFAMT)
            Me.columnTAXTOTAL = New DataColumn("TAXTOTAL", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXTOTAL)
            Me.columnSTAX = New DataColumn("STAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSTAX)
            Me.columnGROSSTOTAL = New DataColumn("GROSSTOTAL", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROSSTOTAL)
            Me.columnNETTOTAL = New DataColumn("NETTOTAL", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNETTOTAL)
            Me.columntbillamount = New DataColumn("tbillamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntbillamount)
            Me.columnSBFTAX = New DataColumn("SBFTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSBFTAX)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnCONT = New DataColumn("CONT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONT)
            Me.columnVAT = New DataColumn("VAT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVAT)
            Me.columnINVOICENO = New DataColumn("INVOICENO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINVOICENO)
            Me.columnveg = New DataColumn("veg", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnveg)
            Me.columnnonveg = New DataColumn("nonveg", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnonveg)
            Me.columnVoid = New DataColumn("Void", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVoid)
            Me.columnVEGRATE = New DataColumn("VEGRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEGRATE)
            Me.columnNONVEGRATE = New DataColumn("NONVEGRATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEGRATE)
            Me.columnfreereason = New DataColumn("freereason", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfreereason)
            Me.columnvegcode = New DataColumn("vegcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnvegcode)
            Me.columnnonvegcode = New DataColumn("nonvegcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnnonvegcode)
            Me.columnMENUCODE = New DataColumn("MENUCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMENUCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnCADD1 = New DataColumn("CADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD1)
            Me.columnCADD2 = New DataColumn("CADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD2)
            Me.columnCADD3 = New DataColumn("CADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCADD3)
            Me.columnCCITY = New DataColumn("CCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCITY)
            Me.columnCSTATE = New DataColumn("CSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCSTATE)
            Me.columnCPHONE1 = New DataColumn("CPHONE1", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCPHONE1)
            Me.columnCCELL = New DataColumn("CCELL", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCELL)
            Me.columnROWID.AllowDBNull = false
        End Sub
        
        Public Function NewPAR_HDRRow() As PAR_HDRRow
            Return CType(Me.NewRow,PAR_HDRRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PAR_HDRRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PAR_HDRRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PAR_HDRRowChangedEvent) Is Nothing) Then
                RaiseEvent PAR_HDRRowChanged(Me, New PAR_HDRRowChangeEvent(CType(e.Row,PAR_HDRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PAR_HDRRowChangingEvent) Is Nothing) Then
                RaiseEvent PAR_HDRRowChanging(Me, New PAR_HDRRowChangeEvent(CType(e.Row,PAR_HDRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PAR_HDRRowDeletedEvent) Is Nothing) Then
                RaiseEvent PAR_HDRRowDeleted(Me, New PAR_HDRRowChangeEvent(CType(e.Row,PAR_HDRRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PAR_HDRRowDeletingEvent) Is Nothing) Then
                RaiseEvent PAR_HDRRowDeleting(Me, New PAR_HDRRowChangeEvent(CType(e.Row,PAR_HDRRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePAR_HDRRow(ByVal row As PAR_HDRRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_HDRRow
        Inherits DataRow
        
        Private tablePAR_HDR As PAR_HDRDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePAR_HDR = CType(Me.Table,PAR_HDRDataTable)
        End Sub
        
        Public Property ROWID As Decimal
            Get
                Return CType(Me(Me.tablePAR_HDR.ROWIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePAR_HDR.ROWIDColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BOOKINGTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property FROMTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.FROMTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.FROMTIMEColumn) = value
            End Set
        End Property
        
        Public Property TOTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TOTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TOTIMEColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXFLAG As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.HALLTAXFLAGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.HALLTAXFLAGColumn) = value
            End Set
        End Property
        
        Public Property ADVANCE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ADVANCEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ADVANCEColumn) = value
            End Set
        End Property
        
        Public Property HALLAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.HALLAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.HALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.HALLTAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.HALLTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.HALLTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.HALLTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTARIFFAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BOOKINGTARIFFAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BOOKINGTARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property EXCESSTARIFFAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.EXCESSTARIFFAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.EXCESSTARIFFAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESTAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RESTAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RESTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESTTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RESTTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RESTTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ARRMENTAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ARRMENTAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ARRMENTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ARRMENTTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ARRMENTTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ARRMENTTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property HALLCANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.HALLCANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.HALLCANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RESCANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RESCANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RESCANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ARRCANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ARRCANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ARRCANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property FROMHRS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.FROMHRSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.FROMHRSColumn) = value
            End Set
        End Property
        
        Public Property TOHRS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TOHRSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TOHRSColumn) = value
            End Set
        End Property
        
        Public Property CANCELDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.CANCELDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.CANCELDATEColumn) = value
            End Set
        End Property
        
        Public Property NETPAYABLE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.NETPAYABLEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.NETPAYABLEColumn) = value
            End Set
        End Property
        
        Public Property SBFCHARGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.SBFCHARGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.SBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TARIFFTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TARIFFTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BOOKINGOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BOOKINGOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property BILLINGOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BILLINGOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BILLINGOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property ABOOKINGOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ABOOKINGOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ABOOKINGOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property ABILLINGOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ABILLINGOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ABILLINGOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property ALLOWEDOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ALLOWEDOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ALLOWEDOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property DIFFOCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.DIFFOCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.DIFFOCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property hallamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.hallamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.hallamtColumn) = value
            End Set
        End Property
        
        Public Property halltaxamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.halltaxamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.halltaxamtColumn) = value
            End Set
        End Property
        
        Public Property hallnetamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.hallnetamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.hallnetamtColumn) = value
            End Set
        End Property
        
        Public Property rcamt As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.rcamtColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.rcamtColumn) = value
            End Set
        End Property
        
        Public Property RESAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RESAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RESAMTColumn) = value
            End Set
        End Property
        
        Public Property RESTAXAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RESTAXAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RESTAXAMTColumn) = value
            End Set
        End Property
        
        Public Property RESTOTALAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RESTOTALAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RESTOTALAMTColumn) = value
            End Set
        End Property
        
        Public Property RESSBFAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.RESSBFAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.RESSBFAMTColumn) = value
            End Set
        End Property
        
        Public Property BARAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BARAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BARAMTColumn) = value
            End Set
        End Property
        
        Public Property BARTAXAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BARTAXAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BARTAXAMTColumn) = value
            End Set
        End Property
        
        Public Property BARTOTALAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BARTOTALAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BARTOTALAMTColumn) = value
            End Set
        End Property
        
        Public Property BARSBFAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BARSBFAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BARSBFAMTColumn) = value
            End Set
        End Property
        
        Public Property TARSBFCHARGE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TARSBFCHARGEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TARSBFCHARGEColumn) = value
            End Set
        End Property
        
        Public Property TRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TRATEColumn) = value
            End Set
        End Property
        
        Public Property DRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.DRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.DRATEColumn) = value
            End Set
        End Property
        
        Public Property DIFFVALUE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.DIFFVALUEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.DIFFVALUEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGVALUE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.BOOKINGVALUEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.BOOKINGVALUEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFVALUE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TARIFFVALUEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TARIFFVALUEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFSBF As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TARIFFSBFColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TARIFFSBFColumn) = value
            End Set
        End Property
        
        Public Property TARIFFTAXAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TARIFFTAXAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TARIFFTAXAMTColumn) = value
            End Set
        End Property
        
        Public Property ARRAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ARRAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ARRAMTColumn) = value
            End Set
        End Property
        
        Public Property ARRTAXAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ARRTAXAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ARRTAXAMTColumn) = value
            End Set
        End Property
        
        Public Property ARRTOTALAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ARRTOTALAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ARRTOTALAMTColumn) = value
            End Set
        End Property
        
        Public Property ARRSBFAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.ARRSBFAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.ARRSBFAMTColumn) = value
            End Set
        End Property
        
        Public Property TAXTOTAL As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.TAXTOTALColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.TAXTOTALColumn) = value
            End Set
        End Property
        
        Public Property STAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.STAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.STAXColumn) = value
            End Set
        End Property
        
        Public Property GROSSTOTAL As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.GROSSTOTALColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.GROSSTOTALColumn) = value
            End Set
        End Property
        
        Public Property NETTOTAL As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.NETTOTALColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.NETTOTALColumn) = value
            End Set
        End Property
        
        Public Property tbillamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.tbillamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.tbillamountColumn) = value
            End Set
        End Property
        
        Public Property SBFTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.SBFTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.SBFTAXColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property CONT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.CONTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.CONTColumn) = value
            End Set
        End Property
        
        Public Property VAT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.VATColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.VATColumn) = value
            End Set
        End Property
        
        Public Property INVOICENO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.INVOICENOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.INVOICENOColumn) = value
            End Set
        End Property
        
        Public Property veg As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.vegColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.vegColumn) = value
            End Set
        End Property
        
        Public Property nonveg As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.nonvegColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.nonvegColumn) = value
            End Set
        End Property
        
        Public Property Void As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.VoidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.VoidColumn) = value
            End Set
        End Property
        
        Public Property VEGRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.VEGRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.VEGRATEColumn) = value
            End Set
        End Property
        
        Public Property NONVEGRATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.NONVEGRATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.NONVEGRATEColumn) = value
            End Set
        End Property
        
        Public Property freereason As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.freereasonColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.freereasonColumn) = value
            End Set
        End Property
        
        Public Property vegcode As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.vegcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.vegcodeColumn) = value
            End Set
        End Property
        
        Public Property nonvegcode As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.nonvegcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.nonvegcodeColumn) = value
            End Set
        End Property
        
        Public Property MENUCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.MENUCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.MENUCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property CADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.CADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.CADD1Column) = value
            End Set
        End Property
        
        Public Property CADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.CADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.CADD2Column) = value
            End Set
        End Property
        
        Public Property CADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.CADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.CADD3Column) = value
            End Set
        End Property
        
        Public Property CCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.CCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.CCITYColumn) = value
            End Set
        End Property
        
        Public Property CSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.CSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.CSTATEColumn) = value
            End Set
        End Property
        
        Public Property CPHONE1 As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.CPHONE1Column),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.CPHONE1Column) = value
            End Set
        End Property
        
        Public Property CCELL As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HDR.CCELLColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HDR.CCELLColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGTYPENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BOOKINGTYPEColumn)
        End Function
        
        Public Sub SetBOOKINGTYPENull()
            Me(Me.tablePAR_HDR.BOOKINGTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePAR_HDR.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePAR_HDR.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePAR_HDR.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMTIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.FROMTIMEColumn)
        End Function
        
        Public Sub SetFROMTIMENull()
            Me(Me.tablePAR_HDR.FROMTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TOTIMEColumn)
        End Function
        
        Public Sub SetTOTIMENull()
            Me(Me.tablePAR_HDR.TOTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePAR_HDR.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tablePAR_HDR.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablePAR_HDR.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablePAR_HDR.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablePAR_HDR.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXFLAGNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.HALLTAXFLAGColumn)
        End Function
        
        Public Sub SetHALLTAXFLAGNull()
            Me(Me.tablePAR_HDR.HALLTAXFLAGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADVANCENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ADVANCEColumn)
        End Function
        
        Public Sub SetADVANCENull()
            Me(Me.tablePAR_HDR.ADVANCEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.HALLAMOUNTColumn)
        End Function
        
        Public Sub SetHALLAMOUNTNull()
            Me(Me.tablePAR_HDR.HALLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.HALLTAXPERCColumn)
        End Function
        
        Public Sub SetHALLTAXPERCNull()
            Me(Me.tablePAR_HDR.HALLTAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.HALLTAXAMOUNTColumn)
        End Function
        
        Public Sub SetHALLTAXAMOUNTNull()
            Me(Me.tablePAR_HDR.HALLTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGTARIFFAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BOOKINGTARIFFAMOUNTColumn)
        End Function
        
        Public Sub SetBOOKINGTARIFFAMOUNTNull()
            Me(Me.tablePAR_HDR.BOOKINGTARIFFAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEXCESSTARIFFAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.EXCESSTARIFFAMOUNTColumn)
        End Function
        
        Public Sub SetEXCESSTARIFFAMOUNTNull()
            Me(Me.tablePAR_HDR.EXCESSTARIFFAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RESTAMOUNTColumn)
        End Function
        
        Public Sub SetRESTAMOUNTNull()
            Me(Me.tablePAR_HDR.RESTAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RESTTAXAMOUNTColumn)
        End Function
        
        Public Sub SetRESTTAXAMOUNTNull()
            Me(Me.tablePAR_HDR.RESTTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRMENTAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ARRMENTAMOUNTColumn)
        End Function
        
        Public Sub SetARRMENTAMOUNTNull()
            Me(Me.tablePAR_HDR.ARRMENTAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRMENTTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ARRMENTTAXAMOUNTColumn)
        End Function
        
        Public Sub SetARRMENTTAXAMOUNTNull()
            Me(Me.tablePAR_HDR.ARRMENTTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RECEIPTNOColumn)
        End Function
        
        Public Sub SetRECEIPTNONull()
            Me(Me.tablePAR_HDR.RECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RECEIPTDATEColumn)
        End Function
        
        Public Sub SetRECEIPTDATENull()
            Me(Me.tablePAR_HDR.RECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.HALLCANCELAMOUNTColumn)
        End Function
        
        Public Sub SetHALLCANCELAMOUNTNull()
            Me(Me.tablePAR_HDR.HALLCANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RESCANCELAMOUNTColumn)
        End Function
        
        Public Sub SetRESCANCELAMOUNTNull()
            Me(Me.tablePAR_HDR.RESCANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ARRCANCELAMOUNTColumn)
        End Function
        
        Public Sub SetARRCANCELAMOUNTNull()
            Me(Me.tablePAR_HDR.ARRCANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePAR_HDR.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablePAR_HDR.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tablePAR_HDR.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMHRSNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.FROMHRSColumn)
        End Function
        
        Public Sub SetFROMHRSNull()
            Me(Me.tablePAR_HDR.FROMHRSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOHRSNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TOHRSColumn)
        End Function
        
        Public Sub SetTOHRSNull()
            Me(Me.tablePAR_HDR.TOHRSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.CANCELDATEColumn)
        End Function
        
        Public Sub SetCANCELDATENull()
            Me(Me.tablePAR_HDR.CANCELDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNETPAYABLENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.NETPAYABLEColumn)
        End Function
        
        Public Sub SetNETPAYABLENull()
            Me(Me.tablePAR_HDR.NETPAYABLEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.SBFCHARGEColumn)
        End Function
        
        Public Sub SetSBFCHARGENull()
            Me(Me.tablePAR_HDR.SBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TARIFFTAXAMOUNTColumn)
        End Function
        
        Public Sub SetTARIFFTAXAMOUNTNull()
            Me(Me.tablePAR_HDR.TARIFFTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BOOKINGOCCUPANCYColumn)
        End Function
        
        Public Sub SetBOOKINGOCCUPANCYNull()
            Me(Me.tablePAR_HDR.BOOKINGOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBILLINGOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BILLINGOCCUPANCYColumn)
        End Function
        
        Public Sub SetBILLINGOCCUPANCYNull()
            Me(Me.tablePAR_HDR.BILLINGOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsABOOKINGOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ABOOKINGOCCUPANCYColumn)
        End Function
        
        Public Sub SetABOOKINGOCCUPANCYNull()
            Me(Me.tablePAR_HDR.ABOOKINGOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsABILLINGOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ABILLINGOCCUPANCYColumn)
        End Function
        
        Public Sub SetABILLINGOCCUPANCYNull()
            Me(Me.tablePAR_HDR.ABILLINGOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsALLOWEDOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ALLOWEDOCCUPANCYColumn)
        End Function
        
        Public Sub SetALLOWEDOCCUPANCYNull()
            Me(Me.tablePAR_HDR.ALLOWEDOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDIFFOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.DIFFOCCUPANCYColumn)
        End Function
        
        Public Sub SetDIFFOCCUPANCYNull()
            Me(Me.tablePAR_HDR.DIFFOCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallamtNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.hallamtColumn)
        End Function
        
        Public Sub SethallamtNull()
            Me(Me.tablePAR_HDR.hallamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalltaxamtNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.halltaxamtColumn)
        End Function
        
        Public Sub SethalltaxamtNull()
            Me(Me.tablePAR_HDR.halltaxamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshallnetamtNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.hallnetamtColumn)
        End Function
        
        Public Sub SethallnetamtNull()
            Me(Me.tablePAR_HDR.hallnetamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrcamtNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.rcamtColumn)
        End Function
        
        Public Sub SetrcamtNull()
            Me(Me.tablePAR_HDR.rcamtColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RESAMTColumn)
        End Function
        
        Public Sub SetRESAMTNull()
            Me(Me.tablePAR_HDR.RESAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTAXAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RESTAXAMTColumn)
        End Function
        
        Public Sub SetRESTAXAMTNull()
            Me(Me.tablePAR_HDR.RESTAXAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESTOTALAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RESTOTALAMTColumn)
        End Function
        
        Public Sub SetRESTOTALAMTNull()
            Me(Me.tablePAR_HDR.RESTOTALAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRESSBFAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.RESSBFAMTColumn)
        End Function
        
        Public Sub SetRESSBFAMTNull()
            Me(Me.tablePAR_HDR.RESSBFAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBARAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BARAMTColumn)
        End Function
        
        Public Sub SetBARAMTNull()
            Me(Me.tablePAR_HDR.BARAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBARTAXAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BARTAXAMTColumn)
        End Function
        
        Public Sub SetBARTAXAMTNull()
            Me(Me.tablePAR_HDR.BARTAXAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBARTOTALAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BARTOTALAMTColumn)
        End Function
        
        Public Sub SetBARTOTALAMTNull()
            Me(Me.tablePAR_HDR.BARTOTALAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBARSBFAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BARSBFAMTColumn)
        End Function
        
        Public Sub SetBARSBFAMTNull()
            Me(Me.tablePAR_HDR.BARSBFAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARSBFCHARGENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TARSBFCHARGEColumn)
        End Function
        
        Public Sub SetTARSBFCHARGENull()
            Me(Me.tablePAR_HDR.TARSBFCHARGEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTRATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TRATEColumn)
        End Function
        
        Public Sub SetTRATENull()
            Me(Me.tablePAR_HDR.TRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDRATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.DRATEColumn)
        End Function
        
        Public Sub SetDRATENull()
            Me(Me.tablePAR_HDR.DRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDIFFVALUENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.DIFFVALUEColumn)
        End Function
        
        Public Sub SetDIFFVALUENull()
            Me(Me.tablePAR_HDR.DIFFVALUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGVALUENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.BOOKINGVALUEColumn)
        End Function
        
        Public Sub SetBOOKINGVALUENull()
            Me(Me.tablePAR_HDR.BOOKINGVALUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFVALUENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TARIFFVALUEColumn)
        End Function
        
        Public Sub SetTARIFFVALUENull()
            Me(Me.tablePAR_HDR.TARIFFVALUEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFSBFNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TARIFFSBFColumn)
        End Function
        
        Public Sub SetTARIFFSBFNull()
            Me(Me.tablePAR_HDR.TARIFFSBFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFTAXAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TARIFFTAXAMTColumn)
        End Function
        
        Public Sub SetTARIFFTAXAMTNull()
            Me(Me.tablePAR_HDR.TARIFFTAXAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ARRAMTColumn)
        End Function
        
        Public Sub SetARRAMTNull()
            Me(Me.tablePAR_HDR.ARRAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRTAXAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ARRTAXAMTColumn)
        End Function
        
        Public Sub SetARRTAXAMTNull()
            Me(Me.tablePAR_HDR.ARRTAXAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRTOTALAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ARRTOTALAMTColumn)
        End Function
        
        Public Sub SetARRTOTALAMTNull()
            Me(Me.tablePAR_HDR.ARRTOTALAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsARRSBFAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.ARRSBFAMTColumn)
        End Function
        
        Public Sub SetARRSBFAMTNull()
            Me(Me.tablePAR_HDR.ARRSBFAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXTOTALNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.TAXTOTALColumn)
        End Function
        
        Public Sub SetTAXTOTALNull()
            Me(Me.tablePAR_HDR.TAXTOTALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSTAXNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.STAXColumn)
        End Function
        
        Public Sub SetSTAXNull()
            Me(Me.tablePAR_HDR.STAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROSSTOTALNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.GROSSTOTALColumn)
        End Function
        
        Public Sub SetGROSSTOTALNull()
            Me(Me.tablePAR_HDR.GROSSTOTALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNETTOTALNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.NETTOTALColumn)
        End Function
        
        Public Sub SetNETTOTALNull()
            Me(Me.tablePAR_HDR.NETTOTALColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstbillamountNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.tbillamountColumn)
        End Function
        
        Public Sub SettbillamountNull()
            Me(Me.tablePAR_HDR.tbillamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSBFTAXNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.SBFTAXColumn)
        End Function
        
        Public Sub SetSBFTAXNull()
            Me(Me.tablePAR_HDR.SBFTAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePAR_HDR.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.CONTColumn)
        End Function
        
        Public Sub SetCONTNull()
            Me(Me.tablePAR_HDR.CONTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVATNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.VATColumn)
        End Function
        
        Public Sub SetVATNull()
            Me(Me.tablePAR_HDR.VATColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsINVOICENONull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.INVOICENOColumn)
        End Function
        
        Public Sub SetINVOICENONull()
            Me(Me.tablePAR_HDR.INVOICENOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvegNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.vegColumn)
        End Function
        
        Public Sub SetvegNull()
            Me(Me.tablePAR_HDR.vegColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnonvegNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.nonvegColumn)
        End Function
        
        Public Sub SetnonvegNull()
            Me(Me.tablePAR_HDR.nonvegColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVoidNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.VoidColumn)
        End Function
        
        Public Sub SetVoidNull()
            Me(Me.tablePAR_HDR.VoidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGRATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.VEGRATEColumn)
        End Function
        
        Public Sub SetVEGRATENull()
            Me(Me.tablePAR_HDR.VEGRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNONVEGRATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.NONVEGRATEColumn)
        End Function
        
        Public Sub SetNONVEGRATENull()
            Me(Me.tablePAR_HDR.NONVEGRATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfreereasonNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.freereasonColumn)
        End Function
        
        Public Sub SetfreereasonNull()
            Me(Me.tablePAR_HDR.freereasonColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsvegcodeNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.vegcodeColumn)
        End Function
        
        Public Sub SetvegcodeNull()
            Me(Me.tablePAR_HDR.vegcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsnonvegcodeNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.nonvegcodeColumn)
        End Function
        
        Public Sub SetnonvegcodeNull()
            Me(Me.tablePAR_HDR.nonvegcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMENUCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.MENUCODEColumn)
        End Function
        
        Public Sub SetMENUCODENull()
            Me(Me.tablePAR_HDR.MENUCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablePAR_HDR.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD1Null() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.CADD1Column)
        End Function
        
        Public Sub SetCADD1Null()
            Me(Me.tablePAR_HDR.CADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD2Null() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.CADD2Column)
        End Function
        
        Public Sub SetCADD2Null()
            Me(Me.tablePAR_HDR.CADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCADD3Null() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.CADD3Column)
        End Function
        
        Public Sub SetCADD3Null()
            Me(Me.tablePAR_HDR.CADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCITYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.CCITYColumn)
        End Function
        
        Public Sub SetCCITYNull()
            Me(Me.tablePAR_HDR.CCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCSTATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.CSTATEColumn)
        End Function
        
        Public Sub SetCSTATENull()
            Me(Me.tablePAR_HDR.CSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.CPHONE1Column)
        End Function
        
        Public Sub SetCPHONE1Null()
            Me(Me.tablePAR_HDR.CPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCELLNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HDR.CCELLColumn)
        End Function
        
        Public Sub SetCCELLNull()
            Me(Me.tablePAR_HDR.CCELLColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_HDRRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PAR_HDRRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PAR_HDRRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PAR_HDRRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_RECEIPTSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGnO As DataColumn
        
        Private columnReceiptheadcode As DataColumn
        
        Private columnRECEIPTHEADDESC As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnINSTDATE As DataColumn
        
        Private columnINSTNO As DataColumn
        
        Private columnDRAWBANK As DataColumn
        
        Private columnCARDNUMBER As DataColumn
        
        Private columnBALAMT As DataColumn
        
        Private columnPARTYRECEIPTNO As DataColumn
        
        Friend Sub New()
            MyBase.New("PAR_RECEIPTS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGnOColumn As DataColumn
            Get
                Return Me.columnBOOKINGnO
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheadcodeColumn As DataColumn
            Get
                Return Me.columnReceiptheadcode
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTHEADDESCColumn As DataColumn
            Get
                Return Me.columnRECEIPTHEADDESC
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property INSTDATEColumn As DataColumn
            Get
                Return Me.columnINSTDATE
            End Get
        End Property
        
        Friend ReadOnly Property INSTNOColumn As DataColumn
            Get
                Return Me.columnINSTNO
            End Get
        End Property
        
        Friend ReadOnly Property DRAWBANKColumn As DataColumn
            Get
                Return Me.columnDRAWBANK
            End Get
        End Property
        
        Friend ReadOnly Property CARDNUMBERColumn As DataColumn
            Get
                Return Me.columnCARDNUMBER
            End Get
        End Property
        
        Friend ReadOnly Property BALAMTColumn As DataColumn
            Get
                Return Me.columnBALAMT
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTNOColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTNO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PAR_RECEIPTSRow
            Get
                Return CType(Me.Rows(index),PAR_RECEIPTSRow)
            End Get
        End Property
        
        Public Event PAR_RECEIPTSRowChanged As PAR_RECEIPTSRowChangeEventHandler
        
        Public Event PAR_RECEIPTSRowChanging As PAR_RECEIPTSRowChangeEventHandler
        
        Public Event PAR_RECEIPTSRowDeleted As PAR_RECEIPTSRowChangeEventHandler
        
        Public Event PAR_RECEIPTSRowDeleting As PAR_RECEIPTSRowChangeEventHandler
        
        Public Overloads Sub AddPAR_RECEIPTSRow(ByVal row As PAR_RECEIPTSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPAR_RECEIPTSRow(ByVal BOOKINGnO As Decimal, ByVal Receiptheadcode As String, ByVal RECEIPTHEADDESC As String, ByVal PAYMENTMODE As String, ByVal amount As Decimal, ByVal INSTDATE As Date, ByVal INSTNO As String, ByVal DRAWBANK As String, ByVal CARDNUMBER As String, ByVal BALAMT As Long, ByVal PARTYRECEIPTNO As String) As PAR_RECEIPTSRow
            Dim rowPAR_RECEIPTSRow As PAR_RECEIPTSRow = CType(Me.NewRow,PAR_RECEIPTSRow)
            rowPAR_RECEIPTSRow.ItemArray = New Object() {BOOKINGnO, Receiptheadcode, RECEIPTHEADDESC, PAYMENTMODE, amount, INSTDATE, INSTNO, DRAWBANK, CARDNUMBER, BALAMT, PARTYRECEIPTNO}
            Me.Rows.Add(rowPAR_RECEIPTSRow)
            Return rowPAR_RECEIPTSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PAR_RECEIPTSDataTable = CType(MyBase.Clone,PAR_RECEIPTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PAR_RECEIPTSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGnO = Me.Columns("BOOKINGnO")
            Me.columnReceiptheadcode = Me.Columns("Receiptheadcode")
            Me.columnRECEIPTHEADDESC = Me.Columns("RECEIPTHEADDESC")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnamount = Me.Columns("amount")
            Me.columnINSTDATE = Me.Columns("INSTDATE")
            Me.columnINSTNO = Me.Columns("INSTNO")
            Me.columnDRAWBANK = Me.Columns("DRAWBANK")
            Me.columnCARDNUMBER = Me.Columns("CARDNUMBER")
            Me.columnBALAMT = Me.Columns("BALAMT")
            Me.columnPARTYRECEIPTNO = Me.Columns("PARTYRECEIPTNO")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGnO = New DataColumn("BOOKINGnO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGnO)
            Me.columnReceiptheadcode = New DataColumn("Receiptheadcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheadcode)
            Me.columnRECEIPTHEADDESC = New DataColumn("RECEIPTHEADDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTHEADDESC)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnINSTDATE = New DataColumn("INSTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINSTDATE)
            Me.columnINSTNO = New DataColumn("INSTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINSTNO)
            Me.columnDRAWBANK = New DataColumn("DRAWBANK", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDRAWBANK)
            Me.columnCARDNUMBER = New DataColumn("CARDNUMBER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCARDNUMBER)
            Me.columnBALAMT = New DataColumn("BALAMT", GetType(System.Int64), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBALAMT)
            Me.columnPARTYRECEIPTNO = New DataColumn("PARTYRECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTNO)
        End Sub
        
        Public Function NewPAR_RECEIPTSRow() As PAR_RECEIPTSRow
            Return CType(Me.NewRow,PAR_RECEIPTSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PAR_RECEIPTSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PAR_RECEIPTSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PAR_RECEIPTSRowChangedEvent) Is Nothing) Then
                RaiseEvent PAR_RECEIPTSRowChanged(Me, New PAR_RECEIPTSRowChangeEvent(CType(e.Row,PAR_RECEIPTSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PAR_RECEIPTSRowChangingEvent) Is Nothing) Then
                RaiseEvent PAR_RECEIPTSRowChanging(Me, New PAR_RECEIPTSRowChangeEvent(CType(e.Row,PAR_RECEIPTSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PAR_RECEIPTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PAR_RECEIPTSRowDeleted(Me, New PAR_RECEIPTSRowChangeEvent(CType(e.Row,PAR_RECEIPTSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PAR_RECEIPTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PAR_RECEIPTSRowDeleting(Me, New PAR_RECEIPTSRowChangeEvent(CType(e.Row,PAR_RECEIPTSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePAR_RECEIPTSRow(ByVal row As PAR_RECEIPTSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_RECEIPTSRow
        Inherits DataRow
        
        Private tablePAR_RECEIPTS As PAR_RECEIPTSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePAR_RECEIPTS = CType(Me.Table,PAR_RECEIPTSDataTable)
        End Sub
        
        Public Property BOOKINGnO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.BOOKINGnOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.BOOKINGnOColumn) = value
            End Set
        End Property
        
        Public Property Receiptheadcode As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.ReceiptheadcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.ReceiptheadcodeColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTHEADDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.RECEIPTHEADDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.RECEIPTHEADDESCColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.PAYMENTMODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.amountColumn) = value
            End Set
        End Property
        
        Public Property INSTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.INSTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.INSTDATEColumn) = value
            End Set
        End Property
        
        Public Property INSTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.INSTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.INSTNOColumn) = value
            End Set
        End Property
        
        Public Property DRAWBANK As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.DRAWBANKColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.DRAWBANKColumn) = value
            End Set
        End Property
        
        Public Property CARDNUMBER As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.CARDNUMBERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.CARDNUMBERColumn) = value
            End Set
        End Property
        
        Public Property BALAMT As Long
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.BALAMTColumn),Long)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.BALAMTColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS.PARTYRECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS.PARTYRECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGnONull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.BOOKINGnOColumn)
        End Function
        
        Public Sub SetBOOKINGnONull()
            Me(Me.tablePAR_RECEIPTS.BOOKINGnOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheadcodeNull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.ReceiptheadcodeColumn)
        End Function
        
        Public Sub SetReceiptheadcodeNull()
            Me(Me.tablePAR_RECEIPTS.ReceiptheadcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTHEADDESCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.RECEIPTHEADDESCColumn)
        End Function
        
        Public Sub SetRECEIPTHEADDESCNull()
            Me(Me.tablePAR_RECEIPTS.RECEIPTHEADDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYMENTMODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.PAYMENTMODEColumn)
        End Function
        
        Public Sub SetPAYMENTMODENull()
            Me(Me.tablePAR_RECEIPTS.PAYMENTMODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tablePAR_RECEIPTS.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsINSTDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.INSTDATEColumn)
        End Function
        
        Public Sub SetINSTDATENull()
            Me(Me.tablePAR_RECEIPTS.INSTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsINSTNONull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.INSTNOColumn)
        End Function
        
        Public Sub SetINSTNONull()
            Me(Me.tablePAR_RECEIPTS.INSTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDRAWBANKNull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.DRAWBANKColumn)
        End Function
        
        Public Sub SetDRAWBANKNull()
            Me(Me.tablePAR_RECEIPTS.DRAWBANKColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCARDNUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.CARDNUMBERColumn)
        End Function
        
        Public Sub SetCARDNUMBERNull()
            Me(Me.tablePAR_RECEIPTS.CARDNUMBERColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBALAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.BALAMTColumn)
        End Function
        
        Public Sub SetBALAMTNull()
            Me(Me.tablePAR_RECEIPTS.BALAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS.PARTYRECEIPTNOColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTNONull()
            Me(Me.tablePAR_RECEIPTS.PARTYRECEIPTNOColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_RECEIPTSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PAR_RECEIPTSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PAR_RECEIPTSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PAR_RECEIPTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_RECEIPTS_REFUNDDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGnO As DataColumn
        
        Private columnReceiptheadcode As DataColumn
        
        Private columnRECEIPTHEADDESC As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnINSTDATE As DataColumn
        
        Private columnINSTNO As DataColumn
        
        Private columnDRAWBANK As DataColumn
        
        Private columnCARDNUMBER As DataColumn
        
        Friend Sub New()
            MyBase.New("PAR_RECEIPTS_REFUND")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGnOColumn As DataColumn
            Get
                Return Me.columnBOOKINGnO
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheadcodeColumn As DataColumn
            Get
                Return Me.columnReceiptheadcode
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTHEADDESCColumn As DataColumn
            Get
                Return Me.columnRECEIPTHEADDESC
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property INSTDATEColumn As DataColumn
            Get
                Return Me.columnINSTDATE
            End Get
        End Property
        
        Friend ReadOnly Property INSTNOColumn As DataColumn
            Get
                Return Me.columnINSTNO
            End Get
        End Property
        
        Friend ReadOnly Property DRAWBANKColumn As DataColumn
            Get
                Return Me.columnDRAWBANK
            End Get
        End Property
        
        Friend ReadOnly Property CARDNUMBERColumn As DataColumn
            Get
                Return Me.columnCARDNUMBER
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PAR_RECEIPTS_REFUNDRow
            Get
                Return CType(Me.Rows(index),PAR_RECEIPTS_REFUNDRow)
            End Get
        End Property
        
        Public Event PAR_RECEIPTS_REFUNDRowChanged As PAR_RECEIPTS_REFUNDRowChangeEventHandler
        
        Public Event PAR_RECEIPTS_REFUNDRowChanging As PAR_RECEIPTS_REFUNDRowChangeEventHandler
        
        Public Event PAR_RECEIPTS_REFUNDRowDeleted As PAR_RECEIPTS_REFUNDRowChangeEventHandler
        
        Public Event PAR_RECEIPTS_REFUNDRowDeleting As PAR_RECEIPTS_REFUNDRowChangeEventHandler
        
        Public Overloads Sub AddPAR_RECEIPTS_REFUNDRow(ByVal row As PAR_RECEIPTS_REFUNDRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPAR_RECEIPTS_REFUNDRow(ByVal BOOKINGnO As Decimal, ByVal Receiptheadcode As String, ByVal RECEIPTHEADDESC As String, ByVal PAYMENTMODE As String, ByVal amount As Decimal, ByVal INSTDATE As Date, ByVal INSTNO As String, ByVal DRAWBANK As String, ByVal CARDNUMBER As String) As PAR_RECEIPTS_REFUNDRow
            Dim rowPAR_RECEIPTS_REFUNDRow As PAR_RECEIPTS_REFUNDRow = CType(Me.NewRow,PAR_RECEIPTS_REFUNDRow)
            rowPAR_RECEIPTS_REFUNDRow.ItemArray = New Object() {BOOKINGnO, Receiptheadcode, RECEIPTHEADDESC, PAYMENTMODE, amount, INSTDATE, INSTNO, DRAWBANK, CARDNUMBER}
            Me.Rows.Add(rowPAR_RECEIPTS_REFUNDRow)
            Return rowPAR_RECEIPTS_REFUNDRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PAR_RECEIPTS_REFUNDDataTable = CType(MyBase.Clone,PAR_RECEIPTS_REFUNDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PAR_RECEIPTS_REFUNDDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGnO = Me.Columns("BOOKINGnO")
            Me.columnReceiptheadcode = Me.Columns("Receiptheadcode")
            Me.columnRECEIPTHEADDESC = Me.Columns("RECEIPTHEADDESC")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnamount = Me.Columns("amount")
            Me.columnINSTDATE = Me.Columns("INSTDATE")
            Me.columnINSTNO = Me.Columns("INSTNO")
            Me.columnDRAWBANK = Me.Columns("DRAWBANK")
            Me.columnCARDNUMBER = Me.Columns("CARDNUMBER")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGnO = New DataColumn("BOOKINGnO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGnO)
            Me.columnReceiptheadcode = New DataColumn("Receiptheadcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheadcode)
            Me.columnRECEIPTHEADDESC = New DataColumn("RECEIPTHEADDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTHEADDESC)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnINSTDATE = New DataColumn("INSTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINSTDATE)
            Me.columnINSTNO = New DataColumn("INSTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINSTNO)
            Me.columnDRAWBANK = New DataColumn("DRAWBANK", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDRAWBANK)
            Me.columnCARDNUMBER = New DataColumn("CARDNUMBER", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCARDNUMBER)
        End Sub
        
        Public Function NewPAR_RECEIPTS_REFUNDRow() As PAR_RECEIPTS_REFUNDRow
            Return CType(Me.NewRow,PAR_RECEIPTS_REFUNDRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PAR_RECEIPTS_REFUNDRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PAR_RECEIPTS_REFUNDRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PAR_RECEIPTS_REFUNDRowChangedEvent) Is Nothing) Then
                RaiseEvent PAR_RECEIPTS_REFUNDRowChanged(Me, New PAR_RECEIPTS_REFUNDRowChangeEvent(CType(e.Row,PAR_RECEIPTS_REFUNDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PAR_RECEIPTS_REFUNDRowChangingEvent) Is Nothing) Then
                RaiseEvent PAR_RECEIPTS_REFUNDRowChanging(Me, New PAR_RECEIPTS_REFUNDRowChangeEvent(CType(e.Row,PAR_RECEIPTS_REFUNDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PAR_RECEIPTS_REFUNDRowDeletedEvent) Is Nothing) Then
                RaiseEvent PAR_RECEIPTS_REFUNDRowDeleted(Me, New PAR_RECEIPTS_REFUNDRowChangeEvent(CType(e.Row,PAR_RECEIPTS_REFUNDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PAR_RECEIPTS_REFUNDRowDeletingEvent) Is Nothing) Then
                RaiseEvent PAR_RECEIPTS_REFUNDRowDeleting(Me, New PAR_RECEIPTS_REFUNDRowChangeEvent(CType(e.Row,PAR_RECEIPTS_REFUNDRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePAR_RECEIPTS_REFUNDRow(ByVal row As PAR_RECEIPTS_REFUNDRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_RECEIPTS_REFUNDRow
        Inherits DataRow
        
        Private tablePAR_RECEIPTS_REFUND As PAR_RECEIPTS_REFUNDDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePAR_RECEIPTS_REFUND = CType(Me.Table,PAR_RECEIPTS_REFUNDDataTable)
        End Sub
        
        Public Property BOOKINGnO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS_REFUND.BOOKINGnOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS_REFUND.BOOKINGnOColumn) = value
            End Set
        End Property
        
        Public Property Receiptheadcode As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS_REFUND.ReceiptheadcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS_REFUND.ReceiptheadcodeColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTHEADDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS_REFUND.RECEIPTHEADDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS_REFUND.RECEIPTHEADDESCColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS_REFUND.PAYMENTMODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS_REFUND.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS_REFUND.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS_REFUND.amountColumn) = value
            End Set
        End Property
        
        Public Property INSTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS_REFUND.INSTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS_REFUND.INSTDATEColumn) = value
            End Set
        End Property
        
        Public Property INSTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS_REFUND.INSTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS_REFUND.INSTNOColumn) = value
            End Set
        End Property
        
        Public Property DRAWBANK As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS_REFUND.DRAWBANKColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS_REFUND.DRAWBANKColumn) = value
            End Set
        End Property
        
        Public Property CARDNUMBER As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_RECEIPTS_REFUND.CARDNUMBERColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_RECEIPTS_REFUND.CARDNUMBERColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGnONull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS_REFUND.BOOKINGnOColumn)
        End Function
        
        Public Sub SetBOOKINGnONull()
            Me(Me.tablePAR_RECEIPTS_REFUND.BOOKINGnOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheadcodeNull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS_REFUND.ReceiptheadcodeColumn)
        End Function
        
        Public Sub SetReceiptheadcodeNull()
            Me(Me.tablePAR_RECEIPTS_REFUND.ReceiptheadcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTHEADDESCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS_REFUND.RECEIPTHEADDESCColumn)
        End Function
        
        Public Sub SetRECEIPTHEADDESCNull()
            Me(Me.tablePAR_RECEIPTS_REFUND.RECEIPTHEADDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYMENTMODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS_REFUND.PAYMENTMODEColumn)
        End Function
        
        Public Sub SetPAYMENTMODENull()
            Me(Me.tablePAR_RECEIPTS_REFUND.PAYMENTMODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS_REFUND.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tablePAR_RECEIPTS_REFUND.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsINSTDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS_REFUND.INSTDATEColumn)
        End Function
        
        Public Sub SetINSTDATENull()
            Me(Me.tablePAR_RECEIPTS_REFUND.INSTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsINSTNONull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS_REFUND.INSTNOColumn)
        End Function
        
        Public Sub SetINSTNONull()
            Me(Me.tablePAR_RECEIPTS_REFUND.INSTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDRAWBANKNull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS_REFUND.DRAWBANKColumn)
        End Function
        
        Public Sub SetDRAWBANKNull()
            Me(Me.tablePAR_RECEIPTS_REFUND.DRAWBANKColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCARDNUMBERNull() As Boolean
            Return Me.IsNull(Me.tablePAR_RECEIPTS_REFUND.CARDNUMBERColumn)
        End Function
        
        Public Sub SetCARDNUMBERNull()
            Me(Me.tablePAR_RECEIPTS_REFUND.CARDNUMBERColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_RECEIPTS_REFUNDRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PAR_RECEIPTS_REFUNDRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PAR_RECEIPTS_REFUNDRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PAR_RECEIPTS_REFUNDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceiptreportDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnPARTYRECEIPTNO As DataColumn
        
        Private columnPARTYRECEIPTDATE As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnmcode As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnReceiptheadcode As DataColumn
        
        Private columnReceiptheaddesc As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnRECEIPTTYPE As DataColumn
        
        Private columnINSTNO As DataColumn
        
        Private columnINSTDATE As DataColumn
        
        Private columnDRAWBANK As DataColumn
        
        Friend Sub New()
            MyBase.New("partyreceiptreport")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTNOColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheadcodeColumn As DataColumn
            Get
                Return Me.columnReceiptheadcode
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheaddescColumn As DataColumn
            Get
                Return Me.columnReceiptheaddesc
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTTYPEColumn As DataColumn
            Get
                Return Me.columnRECEIPTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property INSTNOColumn As DataColumn
            Get
                Return Me.columnINSTNO
            End Get
        End Property
        
        Friend ReadOnly Property INSTDATEColumn As DataColumn
            Get
                Return Me.columnINSTDATE
            End Get
        End Property
        
        Friend ReadOnly Property DRAWBANKColumn As DataColumn
            Get
                Return Me.columnDRAWBANK
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As partyreceiptreportRow
            Get
                Return CType(Me.Rows(index),partyreceiptreportRow)
            End Get
        End Property
        
        Public Event partyreceiptreportRowChanged As partyreceiptreportRowChangeEventHandler
        
        Public Event partyreceiptreportRowChanging As partyreceiptreportRowChangeEventHandler
        
        Public Event partyreceiptreportRowDeleted As partyreceiptreportRowChangeEventHandler
        
        Public Event partyreceiptreportRowDeleting As partyreceiptreportRowChangeEventHandler
        
        Public Overloads Sub AddpartyreceiptreportRow(ByVal row As partyreceiptreportRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddpartyreceiptreportRow(ByVal BOOKINGNO As Decimal, ByVal PARTYDATE As Date, ByVal PARTYRECEIPTNO As String, ByVal PARTYRECEIPTDATE As Date, ByVal PAYMENTMODE As String, ByVal DESCRIPTION As String, ByVal mcode As String, ByVal MNAME As String, ByVal Receiptheadcode As String, ByVal Receiptheaddesc As String, ByVal AMOUNT As Decimal, ByVal RECEIPTTYPE As String, ByVal INSTNO As String, ByVal INSTDATE As Date, ByVal DRAWBANK As String) As partyreceiptreportRow
            Dim rowpartyreceiptreportRow As partyreceiptreportRow = CType(Me.NewRow,partyreceiptreportRow)
            rowpartyreceiptreportRow.ItemArray = New Object() {BOOKINGNO, PARTYDATE, PARTYRECEIPTNO, PARTYRECEIPTDATE, PAYMENTMODE, DESCRIPTION, mcode, MNAME, Receiptheadcode, Receiptheaddesc, AMOUNT, RECEIPTTYPE, INSTNO, INSTDATE, DRAWBANK}
            Me.Rows.Add(rowpartyreceiptreportRow)
            Return rowpartyreceiptreportRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As partyreceiptreportDataTable = CType(MyBase.Clone,partyreceiptreportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New partyreceiptreportDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnPARTYRECEIPTNO = Me.Columns("PARTYRECEIPTNO")
            Me.columnPARTYRECEIPTDATE = Me.Columns("PARTYRECEIPTDATE")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnmcode = Me.Columns("mcode")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnReceiptheadcode = Me.Columns("Receiptheadcode")
            Me.columnReceiptheaddesc = Me.Columns("Receiptheaddesc")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnRECEIPTTYPE = Me.Columns("RECEIPTTYPE")
            Me.columnINSTNO = Me.Columns("INSTNO")
            Me.columnINSTDATE = Me.Columns("INSTDATE")
            Me.columnDRAWBANK = Me.Columns("DRAWBANK")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnPARTYRECEIPTNO = New DataColumn("PARTYRECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTNO)
            Me.columnPARTYRECEIPTDATE = New DataColumn("PARTYRECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTDATE)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnReceiptheadcode = New DataColumn("Receiptheadcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheadcode)
            Me.columnReceiptheaddesc = New DataColumn("Receiptheaddesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheaddesc)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnRECEIPTTYPE = New DataColumn("RECEIPTTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTTYPE)
            Me.columnINSTNO = New DataColumn("INSTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINSTNO)
            Me.columnINSTDATE = New DataColumn("INSTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINSTDATE)
            Me.columnDRAWBANK = New DataColumn("DRAWBANK", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDRAWBANK)
        End Sub
        
        Public Function NewpartyreceiptreportRow() As partyreceiptreportRow
            Return CType(Me.NewRow,partyreceiptreportRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New partyreceiptreportRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(partyreceiptreportRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.partyreceiptreportRowChangedEvent) Is Nothing) Then
                RaiseEvent partyreceiptreportRowChanged(Me, New partyreceiptreportRowChangeEvent(CType(e.Row,partyreceiptreportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.partyreceiptreportRowChangingEvent) Is Nothing) Then
                RaiseEvent partyreceiptreportRowChanging(Me, New partyreceiptreportRowChangeEvent(CType(e.Row,partyreceiptreportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.partyreceiptreportRowDeletedEvent) Is Nothing) Then
                RaiseEvent partyreceiptreportRowDeleted(Me, New partyreceiptreportRowChangeEvent(CType(e.Row,partyreceiptreportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.partyreceiptreportRowDeletingEvent) Is Nothing) Then
                RaiseEvent partyreceiptreportRowDeleting(Me, New partyreceiptreportRowChangeEvent(CType(e.Row,partyreceiptreportRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovepartyreceiptreportRow(ByVal row As partyreceiptreportRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceiptreportRow
        Inherits DataRow
        
        Private tablepartyreceiptreport As partyreceiptreportDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepartyreceiptreport = CType(Me.Table,partyreceiptreportDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport.PARTYRECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport.PARTYRECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport.PARTYRECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport.PARTYRECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport.PAYMENTMODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport.mcodeColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property Receiptheadcode As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport.ReceiptheadcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport.ReceiptheadcodeColumn) = value
            End Set
        End Property
        
        Public Property Receiptheaddesc As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport.ReceiptheaddescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport.ReceiptheaddescColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport.RECEIPTTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport.RECEIPTTYPEColumn) = value
            End Set
        End Property
        
        Public Property INSTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport.INSTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport.INSTNOColumn) = value
            End Set
        End Property
        
        Public Property INSTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport.INSTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport.INSTDATEColumn) = value
            End Set
        End Property
        
        Public Property DRAWBANK As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport.DRAWBANKColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport.DRAWBANKColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablepartyreceiptreport.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablepartyreceiptreport.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport.PARTYRECEIPTNOColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTNONull()
            Me(Me.tablepartyreceiptreport.PARTYRECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport.PARTYRECEIPTDATEColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTDATENull()
            Me(Me.tablepartyreceiptreport.PARTYRECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYMENTMODENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport.PAYMENTMODEColumn)
        End Function
        
        Public Sub SetPAYMENTMODENull()
            Me(Me.tablepartyreceiptreport.PAYMENTMODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablepartyreceiptreport.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tablepartyreceiptreport.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablepartyreceiptreport.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheadcodeNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport.ReceiptheadcodeColumn)
        End Function
        
        Public Sub SetReceiptheadcodeNull()
            Me(Me.tablepartyreceiptreport.ReceiptheadcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheaddescNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport.ReceiptheaddescColumn)
        End Function
        
        Public Sub SetReceiptheaddescNull()
            Me(Me.tablepartyreceiptreport.ReceiptheaddescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablepartyreceiptreport.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTTYPENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport.RECEIPTTYPEColumn)
        End Function
        
        Public Sub SetRECEIPTTYPENull()
            Me(Me.tablepartyreceiptreport.RECEIPTTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsINSTNONull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport.INSTNOColumn)
        End Function
        
        Public Sub SetINSTNONull()
            Me(Me.tablepartyreceiptreport.INSTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsINSTDATENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport.INSTDATEColumn)
        End Function
        
        Public Sub SetINSTDATENull()
            Me(Me.tablepartyreceiptreport.INSTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDRAWBANKNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport.DRAWBANKColumn)
        End Function
        
        Public Sub SetDRAWBANKNull()
            Me(Me.tablepartyreceiptreport.DRAWBANKColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceiptreportRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As partyreceiptreportRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As partyreceiptreportRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As partyreceiptreportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_HALLBOOKINGDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnROWID As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnHALLTYPE As DataColumn
        
        Private columnTARIFFCODE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnFROMTIME As DataColumn
        
        Private columnTOTIME As DataColumn
        
        Private columnHALLAMOUNT As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnHALLTAXAMOUNT As DataColumn
        
        Private columnHALLTAXPERC As DataColumn
        
        Private columnHALLNETAMOUNT As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnVoid As DataColumn
        
        Private columnHALLDESC As DataColumn
        
        Private columnDISCOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnhalltotalamount As DataColumn
        
        Friend Sub New()
            MyBase.New("PAR_HALLBOOKING")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ROWIDColumn As DataColumn
            Get
                Return Me.columnROWID
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property HALLTYPEColumn As DataColumn
            Get
                Return Me.columnHALLTYPE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFCODEColumn As DataColumn
            Get
                Return Me.columnTARIFFCODE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property FROMTIMEColumn As DataColumn
            Get
                Return Me.columnFROMTIME
            End Get
        End Property
        
        Friend ReadOnly Property TOTIMEColumn As DataColumn
            Get
                Return Me.columnTOTIME
            End Get
        End Property
        
        Friend ReadOnly Property HALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXPERCColumn As DataColumn
            Get
                Return Me.columnHALLTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property HALLNETAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLNETAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property VoidColumn As DataColumn
            Get
                Return Me.columnVoid
            End Get
        End Property
        
        Friend ReadOnly Property HALLDESCColumn As DataColumn
            Get
                Return Me.columnHALLDESC
            End Get
        End Property
        
        Friend ReadOnly Property DISCOUNTColumn As DataColumn
            Get
                Return Me.columnDISCOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property halltotalamountColumn As DataColumn
            Get
                Return Me.columnhalltotalamount
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PAR_HALLBOOKINGRow
            Get
                Return CType(Me.Rows(index),PAR_HALLBOOKINGRow)
            End Get
        End Property
        
        Public Event PAR_HALLBOOKINGRowChanged As PAR_HALLBOOKINGRowChangeEventHandler
        
        Public Event PAR_HALLBOOKINGRowChanging As PAR_HALLBOOKINGRowChangeEventHandler
        
        Public Event PAR_HALLBOOKINGRowDeleted As PAR_HALLBOOKINGRowChangeEventHandler
        
        Public Event PAR_HALLBOOKINGRowDeleting As PAR_HALLBOOKINGRowChangeEventHandler
        
        Public Overloads Sub AddPAR_HALLBOOKINGRow(ByVal row As PAR_HALLBOOKINGRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPAR_HALLBOOKINGRow( _
                    ByVal ROWID As Decimal,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal HALLCODE As String,  _
                    ByVal HALLTYPE As String,  _
                    ByVal TARIFFCODE As String,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal FROMTIME As Decimal,  _
                    ByVal TOTIME As Decimal,  _
                    ByVal HALLAMOUNT As Decimal,  _
                    ByVal ADDDATETIME As Date,  _
                    ByVal ADDUSERID As String,  _
                    ByVal FREEZE As String,  _
                    ByVal HALLTAXAMOUNT As Decimal,  _
                    ByVal HALLTAXPERC As Decimal,  _
                    ByVal HALLNETAMOUNT As Decimal,  _
                    ByVal LOCCODE As String,  _
                    ByVal Void As String,  _
                    ByVal HALLDESC As String,  _
                    ByVal DISCOUNT As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal halltotalamount As Decimal) As PAR_HALLBOOKINGRow
            Dim rowPAR_HALLBOOKINGRow As PAR_HALLBOOKINGRow = CType(Me.NewRow,PAR_HALLBOOKINGRow)
            rowPAR_HALLBOOKINGRow.ItemArray = New Object() {ROWID, BOOKINGNO, HALLCODE, HALLTYPE, TARIFFCODE, PARTYDATE, FROMTIME, TOTIME, HALLAMOUNT, ADDDATETIME, ADDUSERID, FREEZE, HALLTAXAMOUNT, HALLTAXPERC, HALLNETAMOUNT, LOCCODE, Void, HALLDESC, DISCOUNT, TOTALAMOUNT, halltotalamount}
            Me.Rows.Add(rowPAR_HALLBOOKINGRow)
            Return rowPAR_HALLBOOKINGRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PAR_HALLBOOKINGDataTable = CType(MyBase.Clone,PAR_HALLBOOKINGDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PAR_HALLBOOKINGDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnROWID = Me.Columns("ROWID")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnHALLTYPE = Me.Columns("HALLTYPE")
            Me.columnTARIFFCODE = Me.Columns("TARIFFCODE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnFROMTIME = Me.Columns("FROMTIME")
            Me.columnTOTIME = Me.Columns("TOTIME")
            Me.columnHALLAMOUNT = Me.Columns("HALLAMOUNT")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnHALLTAXAMOUNT = Me.Columns("HALLTAXAMOUNT")
            Me.columnHALLTAXPERC = Me.Columns("HALLTAXPERC")
            Me.columnHALLNETAMOUNT = Me.Columns("HALLNETAMOUNT")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnVoid = Me.Columns("Void")
            Me.columnHALLDESC = Me.Columns("HALLDESC")
            Me.columnDISCOUNT = Me.Columns("DISCOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnhalltotalamount = Me.Columns("halltotalamount")
        End Sub
        
        Private Sub InitClass()
            Me.columnROWID = New DataColumn("ROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROWID)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnHALLTYPE = New DataColumn("HALLTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTYPE)
            Me.columnTARIFFCODE = New DataColumn("TARIFFCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFCODE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnFROMTIME = New DataColumn("FROMTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMTIME)
            Me.columnTOTIME = New DataColumn("TOTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTIME)
            Me.columnHALLAMOUNT = New DataColumn("HALLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLAMOUNT)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnHALLTAXAMOUNT = New DataColumn("HALLTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXAMOUNT)
            Me.columnHALLTAXPERC = New DataColumn("HALLTAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXPERC)
            Me.columnHALLNETAMOUNT = New DataColumn("HALLNETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLNETAMOUNT)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnVoid = New DataColumn("Void", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVoid)
            Me.columnHALLDESC = New DataColumn("HALLDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLDESC)
            Me.columnDISCOUNT = New DataColumn("DISCOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDISCOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnhalltotalamount = New DataColumn("halltotalamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltotalamount)
            Me.columnROWID.AllowDBNull = false
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnHALLDESC.ReadOnly = true
        End Sub
        
        Public Function NewPAR_HALLBOOKINGRow() As PAR_HALLBOOKINGRow
            Return CType(Me.NewRow,PAR_HALLBOOKINGRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PAR_HALLBOOKINGRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PAR_HALLBOOKINGRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PAR_HALLBOOKINGRowChangedEvent) Is Nothing) Then
                RaiseEvent PAR_HALLBOOKINGRowChanged(Me, New PAR_HALLBOOKINGRowChangeEvent(CType(e.Row,PAR_HALLBOOKINGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PAR_HALLBOOKINGRowChangingEvent) Is Nothing) Then
                RaiseEvent PAR_HALLBOOKINGRowChanging(Me, New PAR_HALLBOOKINGRowChangeEvent(CType(e.Row,PAR_HALLBOOKINGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PAR_HALLBOOKINGRowDeletedEvent) Is Nothing) Then
                RaiseEvent PAR_HALLBOOKINGRowDeleted(Me, New PAR_HALLBOOKINGRowChangeEvent(CType(e.Row,PAR_HALLBOOKINGRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PAR_HALLBOOKINGRowDeletingEvent) Is Nothing) Then
                RaiseEvent PAR_HALLBOOKINGRowDeleting(Me, New PAR_HALLBOOKINGRowChangeEvent(CType(e.Row,PAR_HALLBOOKINGRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePAR_HALLBOOKINGRow(ByVal row As PAR_HALLBOOKINGRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_HALLBOOKINGRow
        Inherits DataRow
        
        Private tablePAR_HALLBOOKING As PAR_HALLBOOKINGDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePAR_HALLBOOKING = CType(Me.Table,PAR_HALLBOOKINGDataTable)
        End Sub
        
        Public Property ROWID As Decimal
            Get
                Return CType(Me(Me.tablePAR_HALLBOOKING.ROWIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.ROWIDColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePAR_HALLBOOKING.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property HALLTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.HALLTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.HALLTYPEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.TARIFFCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.TARIFFCODEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property FROMTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.FROMTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.FROMTIMEColumn) = value
            End Set
        End Property
        
        Public Property TOTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.TOTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.TOTIMEColumn) = value
            End Set
        End Property
        
        Public Property HALLAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.HALLAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.HALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.HALLTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.HALLTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.HALLTAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.HALLTAXPERCColumn) = value
            End Set
        End Property
        
        Public Property HALLNETAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.HALLNETAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.HALLNETAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property Void As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.VoidColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.VoidColumn) = value
            End Set
        End Property
        
        Public Property HALLDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.HALLDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.HALLDESCColumn) = value
            End Set
        End Property
        
        Public Property DISCOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.DISCOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.DISCOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property halltotalamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_HALLBOOKING.halltotalamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_HALLBOOKING.halltotalamountColumn) = value
            End Set
        End Property
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablePAR_HALLBOOKING.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTYPENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.HALLTYPEColumn)
        End Function
        
        Public Sub SetHALLTYPENull()
            Me(Me.tablePAR_HALLBOOKING.HALLTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.TARIFFCODEColumn)
        End Function
        
        Public Sub SetTARIFFCODENull()
            Me(Me.tablePAR_HALLBOOKING.TARIFFCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePAR_HALLBOOKING.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMTIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.FROMTIMEColumn)
        End Function
        
        Public Sub SetFROMTIMENull()
            Me(Me.tablePAR_HALLBOOKING.FROMTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.TOTIMEColumn)
        End Function
        
        Public Sub SetTOTIMENull()
            Me(Me.tablePAR_HALLBOOKING.TOTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.HALLAMOUNTColumn)
        End Function
        
        Public Sub SetHALLAMOUNTNull()
            Me(Me.tablePAR_HALLBOOKING.HALLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablePAR_HALLBOOKING.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tablePAR_HALLBOOKING.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePAR_HALLBOOKING.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.HALLTAXAMOUNTColumn)
        End Function
        
        Public Sub SetHALLTAXAMOUNTNull()
            Me(Me.tablePAR_HALLBOOKING.HALLTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.HALLTAXPERCColumn)
        End Function
        
        Public Sub SetHALLTAXPERCNull()
            Me(Me.tablePAR_HALLBOOKING.HALLTAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLNETAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.HALLNETAMOUNTColumn)
        End Function
        
        Public Sub SetHALLNETAMOUNTNull()
            Me(Me.tablePAR_HALLBOOKING.HALLNETAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePAR_HALLBOOKING.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVoidNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.VoidColumn)
        End Function
        
        Public Sub SetVoidNull()
            Me(Me.tablePAR_HALLBOOKING.VoidColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLDESCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.HALLDESCColumn)
        End Function
        
        Public Sub SetHALLDESCNull()
            Me(Me.tablePAR_HALLBOOKING.HALLDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDISCOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.DISCOUNTColumn)
        End Function
        
        Public Sub SetDISCOUNTNull()
            Me(Me.tablePAR_HALLBOOKING.DISCOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePAR_HALLBOOKING.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalltotalamountNull() As Boolean
            Return Me.IsNull(Me.tablePAR_HALLBOOKING.halltotalamountColumn)
        End Function
        
        Public Sub SethalltotalamountNull()
            Me(Me.tablePAR_HALLBOOKING.halltotalamountColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_HALLBOOKINGRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PAR_HALLBOOKINGRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PAR_HALLBOOKINGRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PAR_HALLBOOKINGRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceiptvoucher_CANCELDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnbookingno As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnPARTYRECEIPTNO As DataColumn
        
        Private columnPARTYRECEIPTDATE As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnamount As DataColumn
        
        Private columnReceiptheadcode As DataColumn
        
        Private columnReceiptheaddesc As DataColumn
        
        Friend Sub New()
            MyBase.New("partyreceiptvoucher_CANCEL")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property bookingnoColumn As DataColumn
            Get
                Return Me.columnbookingno
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTNOColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheadcodeColumn As DataColumn
            Get
                Return Me.columnReceiptheadcode
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheaddescColumn As DataColumn
            Get
                Return Me.columnReceiptheaddesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As partyreceiptvoucher_CANCELRow
            Get
                Return CType(Me.Rows(index),partyreceiptvoucher_CANCELRow)
            End Get
        End Property
        
        Public Event partyreceiptvoucher_CANCELRowChanged As partyreceiptvoucher_CANCELRowChangeEventHandler
        
        Public Event partyreceiptvoucher_CANCELRowChanging As partyreceiptvoucher_CANCELRowChangeEventHandler
        
        Public Event partyreceiptvoucher_CANCELRowDeleted As partyreceiptvoucher_CANCELRowChangeEventHandler
        
        Public Event partyreceiptvoucher_CANCELRowDeleting As partyreceiptvoucher_CANCELRowChangeEventHandler
        
        Public Overloads Sub Addpartyreceiptvoucher_CANCELRow(ByVal row As partyreceiptvoucher_CANCELRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpartyreceiptvoucher_CANCELRow(ByVal bookingno As Decimal, ByVal PARTYDATE As Date, ByVal PARTYRECEIPTNO As String, ByVal PARTYRECEIPTDATE As Date, ByVal PAYMENTMODE As String, ByVal DESCRIPTION As String, ByVal MCODE As String, ByVal MNAME As String, ByVal amount As Decimal, ByVal Receiptheadcode As String, ByVal Receiptheaddesc As String) As partyreceiptvoucher_CANCELRow
            Dim rowpartyreceiptvoucher_CANCELRow As partyreceiptvoucher_CANCELRow = CType(Me.NewRow,partyreceiptvoucher_CANCELRow)
            rowpartyreceiptvoucher_CANCELRow.ItemArray = New Object() {bookingno, PARTYDATE, PARTYRECEIPTNO, PARTYRECEIPTDATE, PAYMENTMODE, DESCRIPTION, MCODE, MNAME, amount, Receiptheadcode, Receiptheaddesc}
            Me.Rows.Add(rowpartyreceiptvoucher_CANCELRow)
            Return rowpartyreceiptvoucher_CANCELRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As partyreceiptvoucher_CANCELDataTable = CType(MyBase.Clone,partyreceiptvoucher_CANCELDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New partyreceiptvoucher_CANCELDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnbookingno = Me.Columns("bookingno")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnPARTYRECEIPTNO = Me.Columns("PARTYRECEIPTNO")
            Me.columnPARTYRECEIPTDATE = Me.Columns("PARTYRECEIPTDATE")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnamount = Me.Columns("amount")
            Me.columnReceiptheadcode = Me.Columns("Receiptheadcode")
            Me.columnReceiptheaddesc = Me.Columns("Receiptheaddesc")
        End Sub
        
        Private Sub InitClass()
            Me.columnbookingno = New DataColumn("bookingno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookingno)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnPARTYRECEIPTNO = New DataColumn("PARTYRECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTNO)
            Me.columnPARTYRECEIPTDATE = New DataColumn("PARTYRECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTDATE)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columnReceiptheadcode = New DataColumn("Receiptheadcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheadcode)
            Me.columnReceiptheaddesc = New DataColumn("Receiptheaddesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheaddesc)
        End Sub
        
        Public Function Newpartyreceiptvoucher_CANCELRow() As partyreceiptvoucher_CANCELRow
            Return CType(Me.NewRow,partyreceiptvoucher_CANCELRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New partyreceiptvoucher_CANCELRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(partyreceiptvoucher_CANCELRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.partyreceiptvoucher_CANCELRowChangedEvent) Is Nothing) Then
                RaiseEvent partyreceiptvoucher_CANCELRowChanged(Me, New partyreceiptvoucher_CANCELRowChangeEvent(CType(e.Row,partyreceiptvoucher_CANCELRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.partyreceiptvoucher_CANCELRowChangingEvent) Is Nothing) Then
                RaiseEvent partyreceiptvoucher_CANCELRowChanging(Me, New partyreceiptvoucher_CANCELRowChangeEvent(CType(e.Row,partyreceiptvoucher_CANCELRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.partyreceiptvoucher_CANCELRowDeletedEvent) Is Nothing) Then
                RaiseEvent partyreceiptvoucher_CANCELRowDeleted(Me, New partyreceiptvoucher_CANCELRowChangeEvent(CType(e.Row,partyreceiptvoucher_CANCELRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.partyreceiptvoucher_CANCELRowDeletingEvent) Is Nothing) Then
                RaiseEvent partyreceiptvoucher_CANCELRowDeleting(Me, New partyreceiptvoucher_CANCELRowChangeEvent(CType(e.Row,partyreceiptvoucher_CANCELRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepartyreceiptvoucher_CANCELRow(ByVal row As partyreceiptvoucher_CANCELRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceiptvoucher_CANCELRow
        Inherits DataRow
        
        Private tablepartyreceiptvoucher_CANCEL As partyreceiptvoucher_CANCELDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepartyreceiptvoucher_CANCEL = CType(Me.Table,partyreceiptvoucher_CANCELDataTable)
        End Sub
        
        Public Property bookingno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher_CANCEL.bookingnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher_CANCEL.bookingnoColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher_CANCEL.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher_CANCEL.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher_CANCEL.PARTYRECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher_CANCEL.PARTYRECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher_CANCEL.PARTYRECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher_CANCEL.PARTYRECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher_CANCEL.PAYMENTMODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher_CANCEL.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher_CANCEL.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher_CANCEL.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher_CANCEL.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher_CANCEL.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher_CANCEL.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher_CANCEL.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher_CANCEL.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher_CANCEL.amountColumn) = value
            End Set
        End Property
        
        Public Property Receiptheadcode As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher_CANCEL.ReceiptheadcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher_CANCEL.ReceiptheadcodeColumn) = value
            End Set
        End Property
        
        Public Property Receiptheaddesc As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptvoucher_CANCEL.ReceiptheaddescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptvoucher_CANCEL.ReceiptheaddescColumn) = value
            End Set
        End Property
        
        Public Function IsbookingnoNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher_CANCEL.bookingnoColumn)
        End Function
        
        Public Sub SetbookingnoNull()
            Me(Me.tablepartyreceiptvoucher_CANCEL.bookingnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher_CANCEL.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablepartyreceiptvoucher_CANCEL.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher_CANCEL.PARTYRECEIPTNOColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTNONull()
            Me(Me.tablepartyreceiptvoucher_CANCEL.PARTYRECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher_CANCEL.PARTYRECEIPTDATEColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTDATENull()
            Me(Me.tablepartyreceiptvoucher_CANCEL.PARTYRECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYMENTMODENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher_CANCEL.PAYMENTMODEColumn)
        End Function
        
        Public Sub SetPAYMENTMODENull()
            Me(Me.tablepartyreceiptvoucher_CANCEL.PAYMENTMODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher_CANCEL.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablepartyreceiptvoucher_CANCEL.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher_CANCEL.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablepartyreceiptvoucher_CANCEL.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher_CANCEL.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablepartyreceiptvoucher_CANCEL.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher_CANCEL.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tablepartyreceiptvoucher_CANCEL.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheadcodeNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher_CANCEL.ReceiptheadcodeColumn)
        End Function
        
        Public Sub SetReceiptheadcodeNull()
            Me(Me.tablepartyreceiptvoucher_CANCEL.ReceiptheadcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheaddescNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptvoucher_CANCEL.ReceiptheaddescColumn)
        End Function
        
        Public Sub SetReceiptheaddescNull()
            Me(Me.tablepartyreceiptvoucher_CANCEL.ReceiptheaddescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceiptvoucher_CANCELRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As partyreceiptvoucher_CANCELRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As partyreceiptvoucher_CANCELRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As partyreceiptvoucher_CANCELRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ITEM_DISCOUNTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDISCOUNT As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_ITEM_DISCOUNT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property DISCOUNTColumn As DataColumn
            Get
                Return Me.columnDISCOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_ITEM_DISCOUNTRow
            Get
                Return CType(Me.Rows(index),PARTY_ITEM_DISCOUNTRow)
            End Get
        End Property
        
        Public Event PARTY_ITEM_DISCOUNTRowChanged As PARTY_ITEM_DISCOUNTRowChangeEventHandler
        
        Public Event PARTY_ITEM_DISCOUNTRowChanging As PARTY_ITEM_DISCOUNTRowChangeEventHandler
        
        Public Event PARTY_ITEM_DISCOUNTRowDeleted As PARTY_ITEM_DISCOUNTRowChangeEventHandler
        
        Public Event PARTY_ITEM_DISCOUNTRowDeleting As PARTY_ITEM_DISCOUNTRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_ITEM_DISCOUNTRow(ByVal row As PARTY_ITEM_DISCOUNTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_ITEM_DISCOUNTRow(ByVal DISCOUNT As Decimal, ByVal BOOKINGNO As Decimal) As PARTY_ITEM_DISCOUNTRow
            Dim rowPARTY_ITEM_DISCOUNTRow As PARTY_ITEM_DISCOUNTRow = CType(Me.NewRow,PARTY_ITEM_DISCOUNTRow)
            rowPARTY_ITEM_DISCOUNTRow.ItemArray = New Object() {DISCOUNT, BOOKINGNO}
            Me.Rows.Add(rowPARTY_ITEM_DISCOUNTRow)
            Return rowPARTY_ITEM_DISCOUNTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_ITEM_DISCOUNTDataTable = CType(MyBase.Clone,PARTY_ITEM_DISCOUNTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_ITEM_DISCOUNTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnDISCOUNT = Me.Columns("DISCOUNT")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
        End Sub
        
        Private Sub InitClass()
            Me.columnDISCOUNT = New DataColumn("DISCOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDISCOUNT)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnDISCOUNT.ReadOnly = true
            Me.columnBOOKINGNO.AllowDBNull = false
        End Sub
        
        Public Function NewPARTY_ITEM_DISCOUNTRow() As PARTY_ITEM_DISCOUNTRow
            Return CType(Me.NewRow,PARTY_ITEM_DISCOUNTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_ITEM_DISCOUNTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_ITEM_DISCOUNTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_ITEM_DISCOUNTRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_ITEM_DISCOUNTRowChanged(Me, New PARTY_ITEM_DISCOUNTRowChangeEvent(CType(e.Row,PARTY_ITEM_DISCOUNTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_ITEM_DISCOUNTRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_ITEM_DISCOUNTRowChanging(Me, New PARTY_ITEM_DISCOUNTRowChangeEvent(CType(e.Row,PARTY_ITEM_DISCOUNTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_ITEM_DISCOUNTRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_ITEM_DISCOUNTRowDeleted(Me, New PARTY_ITEM_DISCOUNTRowChangeEvent(CType(e.Row,PARTY_ITEM_DISCOUNTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_ITEM_DISCOUNTRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_ITEM_DISCOUNTRowDeleting(Me, New PARTY_ITEM_DISCOUNTRowChangeEvent(CType(e.Row,PARTY_ITEM_DISCOUNTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_ITEM_DISCOUNTRow(ByVal row As PARTY_ITEM_DISCOUNTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ITEM_DISCOUNTRow
        Inherits DataRow
        
        Private tablePARTY_ITEM_DISCOUNT As PARTY_ITEM_DISCOUNTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_ITEM_DISCOUNT = CType(Me.Table,PARTY_ITEM_DISCOUNTDataTable)
        End Sub
        
        Public Property DISCOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_ITEM_DISCOUNT.DISCOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_ITEM_DISCOUNT.DISCOUNTColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePARTY_ITEM_DISCOUNT.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_ITEM_DISCOUNT.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Function IsDISCOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_ITEM_DISCOUNT.DISCOUNTColumn)
        End Function
        
        Public Sub SetDISCOUNTNull()
            Me(Me.tablePARTY_ITEM_DISCOUNT.DISCOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_ITEM_DISCOUNTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_ITEM_DISCOUNTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_ITEM_DISCOUNTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_ITEM_DISCOUNTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HALLBOOKINGDISCOUNTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnDISCOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("HALLBOOKINGDISCOUNT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property DISCOUNTColumn As DataColumn
            Get
                Return Me.columnDISCOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As HALLBOOKINGDISCOUNTRow
            Get
                Return CType(Me.Rows(index),HALLBOOKINGDISCOUNTRow)
            End Get
        End Property
        
        Public Event HALLBOOKINGDISCOUNTRowChanged As HALLBOOKINGDISCOUNTRowChangeEventHandler
        
        Public Event HALLBOOKINGDISCOUNTRowChanging As HALLBOOKINGDISCOUNTRowChangeEventHandler
        
        Public Event HALLBOOKINGDISCOUNTRowDeleted As HALLBOOKINGDISCOUNTRowChangeEventHandler
        
        Public Event HALLBOOKINGDISCOUNTRowDeleting As HALLBOOKINGDISCOUNTRowChangeEventHandler
        
        Public Overloads Sub AddHALLBOOKINGDISCOUNTRow(ByVal row As HALLBOOKINGDISCOUNTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddHALLBOOKINGDISCOUNTRow(ByVal BOOKINGNO As Decimal, ByVal DISCOUNT As Decimal) As HALLBOOKINGDISCOUNTRow
            Dim rowHALLBOOKINGDISCOUNTRow As HALLBOOKINGDISCOUNTRow = CType(Me.NewRow,HALLBOOKINGDISCOUNTRow)
            rowHALLBOOKINGDISCOUNTRow.ItemArray = New Object() {BOOKINGNO, DISCOUNT}
            Me.Rows.Add(rowHALLBOOKINGDISCOUNTRow)
            Return rowHALLBOOKINGDISCOUNTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As HALLBOOKINGDISCOUNTDataTable = CType(MyBase.Clone,HALLBOOKINGDISCOUNTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New HALLBOOKINGDISCOUNTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnDISCOUNT = Me.Columns("DISCOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnDISCOUNT = New DataColumn("DISCOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDISCOUNT)
            Me.columnDISCOUNT.ReadOnly = true
        End Sub
        
        Public Function NewHALLBOOKINGDISCOUNTRow() As HALLBOOKINGDISCOUNTRow
            Return CType(Me.NewRow,HALLBOOKINGDISCOUNTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New HALLBOOKINGDISCOUNTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(HALLBOOKINGDISCOUNTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.HALLBOOKINGDISCOUNTRowChangedEvent) Is Nothing) Then
                RaiseEvent HALLBOOKINGDISCOUNTRowChanged(Me, New HALLBOOKINGDISCOUNTRowChangeEvent(CType(e.Row,HALLBOOKINGDISCOUNTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.HALLBOOKINGDISCOUNTRowChangingEvent) Is Nothing) Then
                RaiseEvent HALLBOOKINGDISCOUNTRowChanging(Me, New HALLBOOKINGDISCOUNTRowChangeEvent(CType(e.Row,HALLBOOKINGDISCOUNTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.HALLBOOKINGDISCOUNTRowDeletedEvent) Is Nothing) Then
                RaiseEvent HALLBOOKINGDISCOUNTRowDeleted(Me, New HALLBOOKINGDISCOUNTRowChangeEvent(CType(e.Row,HALLBOOKINGDISCOUNTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.HALLBOOKINGDISCOUNTRowDeletingEvent) Is Nothing) Then
                RaiseEvent HALLBOOKINGDISCOUNTRowDeleting(Me, New HALLBOOKINGDISCOUNTRowChangeEvent(CType(e.Row,HALLBOOKINGDISCOUNTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveHALLBOOKINGDISCOUNTRow(ByVal row As HALLBOOKINGDISCOUNTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HALLBOOKINGDISCOUNTRow
        Inherits DataRow
        
        Private tableHALLBOOKINGDISCOUNT As HALLBOOKINGDISCOUNTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableHALLBOOKINGDISCOUNT = CType(Me.Table,HALLBOOKINGDISCOUNTDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableHALLBOOKINGDISCOUNT.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHALLBOOKINGDISCOUNT.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property DISCOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableHALLBOOKINGDISCOUNT.DISCOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableHALLBOOKINGDISCOUNT.DISCOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tableHALLBOOKINGDISCOUNT.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tableHALLBOOKINGDISCOUNT.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDISCOUNTNull() As Boolean
            Return Me.IsNull(Me.tableHALLBOOKINGDISCOUNT.DISCOUNTColumn)
        End Function
        
        Public Sub SetDISCOUNTNull()
            Me(Me.tableHALLBOOKINGDISCOUNT.DISCOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class HALLBOOKINGDISCOUNTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As HALLBOOKINGDISCOUNTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As HALLBOOKINGDISCOUNTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As HALLBOOKINGDISCOUNTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BANQUETFREEZEREPORTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnhalltypedesc As DataColumn
        
        Private columnHALLNETAMOUNT As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Friend Sub New()
            MyBase.New("BANQUETFREEZEREPORT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property halltypedescColumn As DataColumn
            Get
                Return Me.columnhalltypedesc
            End Get
        End Property
        
        Friend ReadOnly Property HALLNETAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLNETAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As BANQUETFREEZEREPORTRow
            Get
                Return CType(Me.Rows(index),BANQUETFREEZEREPORTRow)
            End Get
        End Property
        
        Public Event BANQUETFREEZEREPORTRowChanged As BANQUETFREEZEREPORTRowChangeEventHandler
        
        Public Event BANQUETFREEZEREPORTRowChanging As BANQUETFREEZEREPORTRowChangeEventHandler
        
        Public Event BANQUETFREEZEREPORTRowDeleted As BANQUETFREEZEREPORTRowChangeEventHandler
        
        Public Event BANQUETFREEZEREPORTRowDeleting As BANQUETFREEZEREPORTRowChangeEventHandler
        
        Public Overloads Sub AddBANQUETFREEZEREPORTRow(ByVal row As BANQUETFREEZEREPORTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddBANQUETFREEZEREPORTRow(ByVal BOOKINGNO As Decimal, ByVal BOOKINGDATE As Date, ByVal PARTYDATE As Date, ByVal HALLCODE As String, ByVal halltypedesc As String, ByVal HALLNETAMOUNT As Decimal, ByVal MCODE As String, ByVal ASSOCIATENAME As String) As BANQUETFREEZEREPORTRow
            Dim rowBANQUETFREEZEREPORTRow As BANQUETFREEZEREPORTRow = CType(Me.NewRow,BANQUETFREEZEREPORTRow)
            rowBANQUETFREEZEREPORTRow.ItemArray = New Object() {BOOKINGNO, BOOKINGDATE, PARTYDATE, HALLCODE, halltypedesc, HALLNETAMOUNT, MCODE, ASSOCIATENAME}
            Me.Rows.Add(rowBANQUETFREEZEREPORTRow)
            Return rowBANQUETFREEZEREPORTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As BANQUETFREEZEREPORTDataTable = CType(MyBase.Clone,BANQUETFREEZEREPORTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New BANQUETFREEZEREPORTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnhalltypedesc = Me.Columns("halltypedesc")
            Me.columnHALLNETAMOUNT = Me.Columns("HALLNETAMOUNT")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnhalltypedesc = New DataColumn("halltypedesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltypedesc)
            Me.columnHALLNETAMOUNT = New DataColumn("HALLNETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLNETAMOUNT)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnBOOKINGNO.AllowDBNull = false
        End Sub
        
        Public Function NewBANQUETFREEZEREPORTRow() As BANQUETFREEZEREPORTRow
            Return CType(Me.NewRow,BANQUETFREEZEREPORTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New BANQUETFREEZEREPORTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BANQUETFREEZEREPORTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BANQUETFREEZEREPORTRowChangedEvent) Is Nothing) Then
                RaiseEvent BANQUETFREEZEREPORTRowChanged(Me, New BANQUETFREEZEREPORTRowChangeEvent(CType(e.Row,BANQUETFREEZEREPORTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BANQUETFREEZEREPORTRowChangingEvent) Is Nothing) Then
                RaiseEvent BANQUETFREEZEREPORTRowChanging(Me, New BANQUETFREEZEREPORTRowChangeEvent(CType(e.Row,BANQUETFREEZEREPORTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BANQUETFREEZEREPORTRowDeletedEvent) Is Nothing) Then
                RaiseEvent BANQUETFREEZEREPORTRowDeleted(Me, New BANQUETFREEZEREPORTRowChangeEvent(CType(e.Row,BANQUETFREEZEREPORTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BANQUETFREEZEREPORTRowDeletingEvent) Is Nothing) Then
                RaiseEvent BANQUETFREEZEREPORTRowDeleting(Me, New BANQUETFREEZEREPORTRowChangeEvent(CType(e.Row,BANQUETFREEZEREPORTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveBANQUETFREEZEREPORTRow(ByVal row As BANQUETFREEZEREPORTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BANQUETFREEZEREPORTRow
        Inherits DataRow
        
        Private tableBANQUETFREEZEREPORT As BANQUETFREEZEREPORTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableBANQUETFREEZEREPORT = CType(Me.Table,BANQUETFREEZEREPORTDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tableBANQUETFREEZEREPORT.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tableBANQUETFREEZEREPORT.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableBANQUETFREEZEREPORT.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANQUETFREEZEREPORT.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableBANQUETFREEZEREPORT.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANQUETFREEZEREPORT.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableBANQUETFREEZEREPORT.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANQUETFREEZEREPORT.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property halltypedesc As String
            Get
                Try 
                    Return CType(Me(Me.tableBANQUETFREEZEREPORT.halltypedescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANQUETFREEZEREPORT.halltypedescColumn) = value
            End Set
        End Property
        
        Public Property HALLNETAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBANQUETFREEZEREPORT.HALLNETAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANQUETFREEZEREPORT.HALLNETAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableBANQUETFREEZEREPORT.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANQUETFREEZEREPORT.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tableBANQUETFREEZEREPORT.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBANQUETFREEZEREPORT.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tableBANQUETFREEZEREPORT.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tableBANQUETFREEZEREPORT.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tableBANQUETFREEZEREPORT.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tableBANQUETFREEZEREPORT.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tableBANQUETFREEZEREPORT.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tableBANQUETFREEZEREPORT.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalltypedescNull() As Boolean
            Return Me.IsNull(Me.tableBANQUETFREEZEREPORT.halltypedescColumn)
        End Function
        
        Public Sub SethalltypedescNull()
            Me(Me.tableBANQUETFREEZEREPORT.halltypedescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLNETAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableBANQUETFREEZEREPORT.HALLNETAMOUNTColumn)
        End Function
        
        Public Sub SetHALLNETAMOUNTNull()
            Me(Me.tableBANQUETFREEZEREPORT.HALLNETAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableBANQUETFREEZEREPORT.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableBANQUETFREEZEREPORT.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tableBANQUETFREEZEREPORT.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tableBANQUETFREEZEREPORT.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class BANQUETFREEZEREPORTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As BANQUETFREEZEREPORTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As BANQUETFREEZEREPORTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As BANQUETFREEZEREPORTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceiptreport_REFUNDDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnPARTYRECEIPTNO As DataColumn
        
        Private columnPARTYRECEIPTDATE As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnmcode As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnReceiptheadcode As DataColumn
        
        Private columnReceiptheaddesc As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnRECEIPTTYPE As DataColumn
        
        Private columnINSTNO As DataColumn
        
        Private columnINSTDATE As DataColumn
        
        Private columnDRAWBANK As DataColumn
        
        Friend Sub New()
            MyBase.New("partyreceiptreport_REFUND")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTNOColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheadcodeColumn As DataColumn
            Get
                Return Me.columnReceiptheadcode
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheaddescColumn As DataColumn
            Get
                Return Me.columnReceiptheaddesc
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTTYPEColumn As DataColumn
            Get
                Return Me.columnRECEIPTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property INSTNOColumn As DataColumn
            Get
                Return Me.columnINSTNO
            End Get
        End Property
        
        Friend ReadOnly Property INSTDATEColumn As DataColumn
            Get
                Return Me.columnINSTDATE
            End Get
        End Property
        
        Friend ReadOnly Property DRAWBANKColumn As DataColumn
            Get
                Return Me.columnDRAWBANK
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As partyreceiptreport_REFUNDRow
            Get
                Return CType(Me.Rows(index),partyreceiptreport_REFUNDRow)
            End Get
        End Property
        
        Public Event partyreceiptreport_REFUNDRowChanged As partyreceiptreport_REFUNDRowChangeEventHandler
        
        Public Event partyreceiptreport_REFUNDRowChanging As partyreceiptreport_REFUNDRowChangeEventHandler
        
        Public Event partyreceiptreport_REFUNDRowDeleted As partyreceiptreport_REFUNDRowChangeEventHandler
        
        Public Event partyreceiptreport_REFUNDRowDeleting As partyreceiptreport_REFUNDRowChangeEventHandler
        
        Public Overloads Sub Addpartyreceiptreport_REFUNDRow(ByVal row As partyreceiptreport_REFUNDRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpartyreceiptreport_REFUNDRow(ByVal BOOKINGNO As Decimal, ByVal PARTYDATE As Date, ByVal PARTYRECEIPTNO As String, ByVal PARTYRECEIPTDATE As Date, ByVal PAYMENTMODE As String, ByVal DESCRIPTION As String, ByVal mcode As String, ByVal MNAME As String, ByVal Receiptheadcode As String, ByVal Receiptheaddesc As String, ByVal AMOUNT As Decimal, ByVal RECEIPTTYPE As String, ByVal INSTNO As String, ByVal INSTDATE As Date, ByVal DRAWBANK As String) As partyreceiptreport_REFUNDRow
            Dim rowpartyreceiptreport_REFUNDRow As partyreceiptreport_REFUNDRow = CType(Me.NewRow,partyreceiptreport_REFUNDRow)
            rowpartyreceiptreport_REFUNDRow.ItemArray = New Object() {BOOKINGNO, PARTYDATE, PARTYRECEIPTNO, PARTYRECEIPTDATE, PAYMENTMODE, DESCRIPTION, mcode, MNAME, Receiptheadcode, Receiptheaddesc, AMOUNT, RECEIPTTYPE, INSTNO, INSTDATE, DRAWBANK}
            Me.Rows.Add(rowpartyreceiptreport_REFUNDRow)
            Return rowpartyreceiptreport_REFUNDRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As partyreceiptreport_REFUNDDataTable = CType(MyBase.Clone,partyreceiptreport_REFUNDDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New partyreceiptreport_REFUNDDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnPARTYRECEIPTNO = Me.Columns("PARTYRECEIPTNO")
            Me.columnPARTYRECEIPTDATE = Me.Columns("PARTYRECEIPTDATE")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnmcode = Me.Columns("mcode")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnReceiptheadcode = Me.Columns("Receiptheadcode")
            Me.columnReceiptheaddesc = Me.Columns("Receiptheaddesc")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnRECEIPTTYPE = Me.Columns("RECEIPTTYPE")
            Me.columnINSTNO = Me.Columns("INSTNO")
            Me.columnINSTDATE = Me.Columns("INSTDATE")
            Me.columnDRAWBANK = Me.Columns("DRAWBANK")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnPARTYRECEIPTNO = New DataColumn("PARTYRECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTNO)
            Me.columnPARTYRECEIPTDATE = New DataColumn("PARTYRECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTDATE)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnReceiptheadcode = New DataColumn("Receiptheadcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheadcode)
            Me.columnReceiptheaddesc = New DataColumn("Receiptheaddesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheaddesc)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnRECEIPTTYPE = New DataColumn("RECEIPTTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTTYPE)
            Me.columnINSTNO = New DataColumn("INSTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINSTNO)
            Me.columnINSTDATE = New DataColumn("INSTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnINSTDATE)
            Me.columnDRAWBANK = New DataColumn("DRAWBANK", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDRAWBANK)
        End Sub
        
        Public Function Newpartyreceiptreport_REFUNDRow() As partyreceiptreport_REFUNDRow
            Return CType(Me.NewRow,partyreceiptreport_REFUNDRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New partyreceiptreport_REFUNDRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(partyreceiptreport_REFUNDRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.partyreceiptreport_REFUNDRowChangedEvent) Is Nothing) Then
                RaiseEvent partyreceiptreport_REFUNDRowChanged(Me, New partyreceiptreport_REFUNDRowChangeEvent(CType(e.Row,partyreceiptreport_REFUNDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.partyreceiptreport_REFUNDRowChangingEvent) Is Nothing) Then
                RaiseEvent partyreceiptreport_REFUNDRowChanging(Me, New partyreceiptreport_REFUNDRowChangeEvent(CType(e.Row,partyreceiptreport_REFUNDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.partyreceiptreport_REFUNDRowDeletedEvent) Is Nothing) Then
                RaiseEvent partyreceiptreport_REFUNDRowDeleted(Me, New partyreceiptreport_REFUNDRowChangeEvent(CType(e.Row,partyreceiptreport_REFUNDRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.partyreceiptreport_REFUNDRowDeletingEvent) Is Nothing) Then
                RaiseEvent partyreceiptreport_REFUNDRowDeleting(Me, New partyreceiptreport_REFUNDRowChangeEvent(CType(e.Row,partyreceiptreport_REFUNDRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepartyreceiptreport_REFUNDRow(ByVal row As partyreceiptreport_REFUNDRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceiptreport_REFUNDRow
        Inherits DataRow
        
        Private tablepartyreceiptreport_REFUND As partyreceiptreport_REFUNDDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepartyreceiptreport_REFUND = CType(Me.Table,partyreceiptreport_REFUNDDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport_REFUND.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport_REFUND.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport_REFUND.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport_REFUND.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport_REFUND.PARTYRECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport_REFUND.PARTYRECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport_REFUND.PARTYRECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport_REFUND.PARTYRECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport_REFUND.PAYMENTMODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport_REFUND.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport_REFUND.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport_REFUND.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport_REFUND.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport_REFUND.mcodeColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport_REFUND.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport_REFUND.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property Receiptheadcode As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport_REFUND.ReceiptheadcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport_REFUND.ReceiptheadcodeColumn) = value
            End Set
        End Property
        
        Public Property Receiptheaddesc As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport_REFUND.ReceiptheaddescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport_REFUND.ReceiptheaddescColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport_REFUND.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport_REFUND.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport_REFUND.RECEIPTTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport_REFUND.RECEIPTTYPEColumn) = value
            End Set
        End Property
        
        Public Property INSTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport_REFUND.INSTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport_REFUND.INSTNOColumn) = value
            End Set
        End Property
        
        Public Property INSTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport_REFUND.INSTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport_REFUND.INSTDATEColumn) = value
            End Set
        End Property
        
        Public Property DRAWBANK As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceiptreport_REFUND.DRAWBANKColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceiptreport_REFUND.DRAWBANKColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport_REFUND.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablepartyreceiptreport_REFUND.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport_REFUND.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablepartyreceiptreport_REFUND.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport_REFUND.PARTYRECEIPTNOColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTNONull()
            Me(Me.tablepartyreceiptreport_REFUND.PARTYRECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport_REFUND.PARTYRECEIPTDATEColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTDATENull()
            Me(Me.tablepartyreceiptreport_REFUND.PARTYRECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYMENTMODENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport_REFUND.PAYMENTMODEColumn)
        End Function
        
        Public Sub SetPAYMENTMODENull()
            Me(Me.tablepartyreceiptreport_REFUND.PAYMENTMODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport_REFUND.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablepartyreceiptreport_REFUND.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport_REFUND.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tablepartyreceiptreport_REFUND.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport_REFUND.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablepartyreceiptreport_REFUND.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheadcodeNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport_REFUND.ReceiptheadcodeColumn)
        End Function
        
        Public Sub SetReceiptheadcodeNull()
            Me(Me.tablepartyreceiptreport_REFUND.ReceiptheadcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheaddescNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport_REFUND.ReceiptheaddescColumn)
        End Function
        
        Public Sub SetReceiptheaddescNull()
            Me(Me.tablepartyreceiptreport_REFUND.ReceiptheaddescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport_REFUND.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablepartyreceiptreport_REFUND.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTTYPENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport_REFUND.RECEIPTTYPEColumn)
        End Function
        
        Public Sub SetRECEIPTTYPENull()
            Me(Me.tablepartyreceiptreport_REFUND.RECEIPTTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsINSTNONull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport_REFUND.INSTNOColumn)
        End Function
        
        Public Sub SetINSTNONull()
            Me(Me.tablepartyreceiptreport_REFUND.INSTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsINSTDATENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport_REFUND.INSTDATEColumn)
        End Function
        
        Public Sub SetINSTDATENull()
            Me(Me.tablepartyreceiptreport_REFUND.INSTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDRAWBANKNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceiptreport_REFUND.DRAWBANKColumn)
        End Function
        
        Public Sub SetDRAWBANKNull()
            Me(Me.tablepartyreceiptreport_REFUND.DRAWBANKColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceiptreport_REFUNDRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As partyreceiptreport_REFUNDRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As partyreceiptreport_REFUNDRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As partyreceiptreport_REFUNDRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class totalbanquetreportDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnpartydate As DataColumn
        
        Private columntax As DataColumn
        
        Private columnamount As DataColumn
        
        Private columndiscount As DataColumn
        
        Private columntotalamount As DataColumn
        
        Private columnitemtotamount As DataColumn
        
        Private columnoccupancy As DataColumn
        
        Private columnmenucode As DataColumn
        
        Private columnrate As DataColumn
        
        Private columnmenuamount As DataColumn
        
        Private columnbanquethallamount As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnSERTAX As DataColumn
        
        Friend Sub New()
            MyBase.New("totalbanquetreport")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property partydateColumn As DataColumn
            Get
                Return Me.columnpartydate
            End Get
        End Property
        
        Friend ReadOnly Property taxColumn As DataColumn
            Get
                Return Me.columntax
            End Get
        End Property
        
        Friend ReadOnly Property amountColumn As DataColumn
            Get
                Return Me.columnamount
            End Get
        End Property
        
        Friend ReadOnly Property discountColumn As DataColumn
            Get
                Return Me.columndiscount
            End Get
        End Property
        
        Friend ReadOnly Property totalamountColumn As DataColumn
            Get
                Return Me.columntotalamount
            End Get
        End Property
        
        Friend ReadOnly Property itemtotamountColumn As DataColumn
            Get
                Return Me.columnitemtotamount
            End Get
        End Property
        
        Friend ReadOnly Property occupancyColumn As DataColumn
            Get
                Return Me.columnoccupancy
            End Get
        End Property
        
        Friend ReadOnly Property menucodeColumn As DataColumn
            Get
                Return Me.columnmenucode
            End Get
        End Property
        
        Friend ReadOnly Property rateColumn As DataColumn
            Get
                Return Me.columnrate
            End Get
        End Property
        
        Friend ReadOnly Property menuamountColumn As DataColumn
            Get
                Return Me.columnmenuamount
            End Get
        End Property
        
        Friend ReadOnly Property banquethallamountColumn As DataColumn
            Get
                Return Me.columnbanquethallamount
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property SERTAXColumn As DataColumn
            Get
                Return Me.columnSERTAX
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As totalbanquetreportRow
            Get
                Return CType(Me.Rows(index),totalbanquetreportRow)
            End Get
        End Property
        
        Public Event totalbanquetreportRowChanged As totalbanquetreportRowChangeEventHandler
        
        Public Event totalbanquetreportRowChanging As totalbanquetreportRowChangeEventHandler
        
        Public Event totalbanquetreportRowDeleted As totalbanquetreportRowChangeEventHandler
        
        Public Event totalbanquetreportRowDeleting As totalbanquetreportRowChangeEventHandler
        
        Public Overloads Sub AddtotalbanquetreportRow(ByVal row As totalbanquetreportRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddtotalbanquetreportRow( _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal partydate As Date,  _
                    ByVal tax As Decimal,  _
                    ByVal amount As Decimal,  _
                    ByVal discount As Decimal,  _
                    ByVal totalamount As Decimal,  _
                    ByVal itemtotamount As Decimal,  _
                    ByVal occupancy As Decimal,  _
                    ByVal menucode As String,  _
                    ByVal rate As Decimal,  _
                    ByVal menuamount As Decimal,  _
                    ByVal banquethallamount As Decimal,  _
                    ByVal MCODE As String,  _
                    ByVal ASSOCIATENAME As String,  _
                    ByVal SERTAX As Decimal) As totalbanquetreportRow
            Dim rowtotalbanquetreportRow As totalbanquetreportRow = CType(Me.NewRow,totalbanquetreportRow)
            rowtotalbanquetreportRow.ItemArray = New Object() {BOOKINGNO, BOOKINGDATE, partydate, tax, amount, discount, totalamount, itemtotamount, occupancy, menucode, rate, menuamount, banquethallamount, MCODE, ASSOCIATENAME, SERTAX}
            Me.Rows.Add(rowtotalbanquetreportRow)
            Return rowtotalbanquetreportRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As totalbanquetreportDataTable = CType(MyBase.Clone,totalbanquetreportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New totalbanquetreportDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnpartydate = Me.Columns("partydate")
            Me.columntax = Me.Columns("tax")
            Me.columnamount = Me.Columns("amount")
            Me.columndiscount = Me.Columns("discount")
            Me.columntotalamount = Me.Columns("totalamount")
            Me.columnitemtotamount = Me.Columns("itemtotamount")
            Me.columnoccupancy = Me.Columns("occupancy")
            Me.columnmenucode = Me.Columns("menucode")
            Me.columnrate = Me.Columns("rate")
            Me.columnmenuamount = Me.Columns("menuamount")
            Me.columnbanquethallamount = Me.Columns("banquethallamount")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnSERTAX = Me.Columns("SERTAX")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnpartydate = New DataColumn("partydate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpartydate)
            Me.columntax = New DataColumn("tax", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntax)
            Me.columnamount = New DataColumn("amount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnamount)
            Me.columndiscount = New DataColumn("discount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscount)
            Me.columntotalamount = New DataColumn("totalamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotalamount)
            Me.columnitemtotamount = New DataColumn("itemtotamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemtotamount)
            Me.columnoccupancy = New DataColumn("occupancy", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoccupancy)
            Me.columnmenucode = New DataColumn("menucode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmenucode)
            Me.columnrate = New DataColumn("rate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrate)
            Me.columnmenuamount = New DataColumn("menuamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmenuamount)
            Me.columnbanquethallamount = New DataColumn("banquethallamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbanquethallamount)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnSERTAX = New DataColumn("SERTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSERTAX)
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columndiscount.ReadOnly = true
            Me.columnoccupancy.ReadOnly = true
            Me.columnmenucode.AllowDBNull = false
        End Sub
        
        Public Function NewtotalbanquetreportRow() As totalbanquetreportRow
            Return CType(Me.NewRow,totalbanquetreportRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New totalbanquetreportRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(totalbanquetreportRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.totalbanquetreportRowChangedEvent) Is Nothing) Then
                RaiseEvent totalbanquetreportRowChanged(Me, New totalbanquetreportRowChangeEvent(CType(e.Row,totalbanquetreportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.totalbanquetreportRowChangingEvent) Is Nothing) Then
                RaiseEvent totalbanquetreportRowChanging(Me, New totalbanquetreportRowChangeEvent(CType(e.Row,totalbanquetreportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.totalbanquetreportRowDeletedEvent) Is Nothing) Then
                RaiseEvent totalbanquetreportRowDeleted(Me, New totalbanquetreportRowChangeEvent(CType(e.Row,totalbanquetreportRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.totalbanquetreportRowDeletingEvent) Is Nothing) Then
                RaiseEvent totalbanquetreportRowDeleting(Me, New totalbanquetreportRowChangeEvent(CType(e.Row,totalbanquetreportRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovetotalbanquetreportRow(ByVal row As totalbanquetreportRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class totalbanquetreportRow
        Inherits DataRow
        
        Private tabletotalbanquetreport As totalbanquetreportDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tabletotalbanquetreport = CType(Me.Table,totalbanquetreportDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tabletotalbanquetreport.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tabletotalbanquetreport.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tabletotalbanquetreport.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletotalbanquetreport.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property partydate As Date
            Get
                Try 
                    Return CType(Me(Me.tabletotalbanquetreport.partydateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletotalbanquetreport.partydateColumn) = value
            End Set
        End Property
        
        Public Property tax As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletotalbanquetreport.taxColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletotalbanquetreport.taxColumn) = value
            End Set
        End Property
        
        Public Property amount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletotalbanquetreport.amountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletotalbanquetreport.amountColumn) = value
            End Set
        End Property
        
        Public Property discount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletotalbanquetreport.discountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletotalbanquetreport.discountColumn) = value
            End Set
        End Property
        
        Public Property totalamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletotalbanquetreport.totalamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletotalbanquetreport.totalamountColumn) = value
            End Set
        End Property
        
        Public Property itemtotamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletotalbanquetreport.itemtotamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletotalbanquetreport.itemtotamountColumn) = value
            End Set
        End Property
        
        Public Property occupancy As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletotalbanquetreport.occupancyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletotalbanquetreport.occupancyColumn) = value
            End Set
        End Property
        
        Public Property menucode As String
            Get
                Return CType(Me(Me.tabletotalbanquetreport.menucodeColumn),String)
            End Get
            Set
                Me(Me.tabletotalbanquetreport.menucodeColumn) = value
            End Set
        End Property
        
        Public Property rate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletotalbanquetreport.rateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletotalbanquetreport.rateColumn) = value
            End Set
        End Property
        
        Public Property menuamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletotalbanquetreport.menuamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletotalbanquetreport.menuamountColumn) = value
            End Set
        End Property
        
        Public Property banquethallamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletotalbanquetreport.banquethallamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletotalbanquetreport.banquethallamountColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tabletotalbanquetreport.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletotalbanquetreport.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tabletotalbanquetreport.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletotalbanquetreport.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property SERTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletotalbanquetreport.SERTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletotalbanquetreport.SERTAXColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tabletotalbanquetreport.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tabletotalbanquetreport.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspartydateNull() As Boolean
            Return Me.IsNull(Me.tabletotalbanquetreport.partydateColumn)
        End Function
        
        Public Sub SetpartydateNull()
            Me(Me.tabletotalbanquetreport.partydateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstaxNull() As Boolean
            Return Me.IsNull(Me.tabletotalbanquetreport.taxColumn)
        End Function
        
        Public Sub SettaxNull()
            Me(Me.tabletotalbanquetreport.taxColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsamountNull() As Boolean
            Return Me.IsNull(Me.tabletotalbanquetreport.amountColumn)
        End Function
        
        Public Sub SetamountNull()
            Me(Me.tabletotalbanquetreport.amountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscountNull() As Boolean
            Return Me.IsNull(Me.tabletotalbanquetreport.discountColumn)
        End Function
        
        Public Sub SetdiscountNull()
            Me(Me.tabletotalbanquetreport.discountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotalamountNull() As Boolean
            Return Me.IsNull(Me.tabletotalbanquetreport.totalamountColumn)
        End Function
        
        Public Sub SettotalamountNull()
            Me(Me.tabletotalbanquetreport.totalamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsitemtotamountNull() As Boolean
            Return Me.IsNull(Me.tabletotalbanquetreport.itemtotamountColumn)
        End Function
        
        Public Sub SetitemtotamountNull()
            Me(Me.tabletotalbanquetreport.itemtotamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsoccupancyNull() As Boolean
            Return Me.IsNull(Me.tabletotalbanquetreport.occupancyColumn)
        End Function
        
        Public Sub SetoccupancyNull()
            Me(Me.tabletotalbanquetreport.occupancyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrateNull() As Boolean
            Return Me.IsNull(Me.tabletotalbanquetreport.rateColumn)
        End Function
        
        Public Sub SetrateNull()
            Me(Me.tabletotalbanquetreport.rateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmenuamountNull() As Boolean
            Return Me.IsNull(Me.tabletotalbanquetreport.menuamountColumn)
        End Function
        
        Public Sub SetmenuamountNull()
            Me(Me.tabletotalbanquetreport.menuamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbanquethallamountNull() As Boolean
            Return Me.IsNull(Me.tabletotalbanquetreport.banquethallamountColumn)
        End Function
        
        Public Sub SetbanquethallamountNull()
            Me(Me.tabletotalbanquetreport.banquethallamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tabletotalbanquetreport.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tabletotalbanquetreport.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tabletotalbanquetreport.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tabletotalbanquetreport.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSERTAXNull() As Boolean
            Return Me.IsNull(Me.tabletotalbanquetreport.SERTAXColumn)
        End Function
        
        Public Sub SetSERTAXNull()
            Me(Me.tabletotalbanquetreport.SERTAXColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class totalbanquetreportRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As totalbanquetreportRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As totalbanquetreportRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As totalbanquetreportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_ADDITIONALITEMSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnROWID As DataColumn
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGTYPE As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnTTYPE As DataColumn
        
        Private columnITEMCODE As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnROUNDOFF As DataColumn
        
        Private columnTAXPERC As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnCANCELAMOUNT As DataColumn
        
        Private columnFREEZE As DataColumn
        
        Private columnADDUSERID As DataColumn
        
        Private columnADDDATETIME As DataColumn
        
        Private columnGROUPCODE As DataColumn
        
        Private columnMENUCODE As DataColumn
        
        Private columnTARIFFCODE As DataColumn
        
        Private columnMAXITEMS As DataColumn
        
        Private columnLOCCODE As DataColumn
        
        Private columnCHITNO As DataColumn
        
        Private columnMENUCODETARIFF As DataColumn
        
        Private columnITEMDESC As DataColumn
        
        Private columndiscount As DataColumn
        
        Private columnAFTERTOTAMT As DataColumn
        
        Private columnSERTAX As DataColumn
        
        Private columnUOM As DataColumn
        
        Private columnCATEGORY As DataColumn
        
        Private columnITEMNAME As DataColumn
        
        Friend Sub New()
            MyBase.New("PAR_ADDITIONALITEMS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property ROWIDColumn As DataColumn
            Get
                Return Me.columnROWID
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGTYPEColumn As DataColumn
            Get
                Return Me.columnBOOKINGTYPE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property TTYPEColumn As DataColumn
            Get
                Return Me.columnTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property ITEMCODEColumn As DataColumn
            Get
                Return Me.columnITEMCODE
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property ROUNDOFFColumn As DataColumn
            Get
                Return Me.columnROUNDOFF
            End Get
        End Property
        
        Friend ReadOnly Property TAXPERCColumn As DataColumn
            Get
                Return Me.columnTAXPERC
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property CANCELAMOUNTColumn As DataColumn
            Get
                Return Me.columnCANCELAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property FREEZEColumn As DataColumn
            Get
                Return Me.columnFREEZE
            End Get
        End Property
        
        Friend ReadOnly Property ADDUSERIDColumn As DataColumn
            Get
                Return Me.columnADDUSERID
            End Get
        End Property
        
        Friend ReadOnly Property ADDDATETIMEColumn As DataColumn
            Get
                Return Me.columnADDDATETIME
            End Get
        End Property
        
        Friend ReadOnly Property GROUPCODEColumn As DataColumn
            Get
                Return Me.columnGROUPCODE
            End Get
        End Property
        
        Friend ReadOnly Property MENUCODEColumn As DataColumn
            Get
                Return Me.columnMENUCODE
            End Get
        End Property
        
        Friend ReadOnly Property TARIFFCODEColumn As DataColumn
            Get
                Return Me.columnTARIFFCODE
            End Get
        End Property
        
        Friend ReadOnly Property MAXITEMSColumn As DataColumn
            Get
                Return Me.columnMAXITEMS
            End Get
        End Property
        
        Friend ReadOnly Property LOCCODEColumn As DataColumn
            Get
                Return Me.columnLOCCODE
            End Get
        End Property
        
        Friend ReadOnly Property CHITNOColumn As DataColumn
            Get
                Return Me.columnCHITNO
            End Get
        End Property
        
        Friend ReadOnly Property MENUCODETARIFFColumn As DataColumn
            Get
                Return Me.columnMENUCODETARIFF
            End Get
        End Property
        
        Friend ReadOnly Property ITEMDESCColumn As DataColumn
            Get
                Return Me.columnITEMDESC
            End Get
        End Property
        
        Friend ReadOnly Property discountColumn As DataColumn
            Get
                Return Me.columndiscount
            End Get
        End Property
        
        Friend ReadOnly Property AFTERTOTAMTColumn As DataColumn
            Get
                Return Me.columnAFTERTOTAMT
            End Get
        End Property
        
        Friend ReadOnly Property SERTAXColumn As DataColumn
            Get
                Return Me.columnSERTAX
            End Get
        End Property
        
        Friend ReadOnly Property UOMColumn As DataColumn
            Get
                Return Me.columnUOM
            End Get
        End Property
        
        Friend ReadOnly Property CATEGORYColumn As DataColumn
            Get
                Return Me.columnCATEGORY
            End Get
        End Property
        
        Friend ReadOnly Property ITEMNAMEColumn As DataColumn
            Get
                Return Me.columnITEMNAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PAR_ADDITIONALITEMSRow
            Get
                Return CType(Me.Rows(index),PAR_ADDITIONALITEMSRow)
            End Get
        End Property
        
        Public Event PAR_ADDITIONALITEMSRowChanged As PAR_ADDITIONALITEMSRowChangeEventHandler
        
        Public Event PAR_ADDITIONALITEMSRowChanging As PAR_ADDITIONALITEMSRowChangeEventHandler
        
        Public Event PAR_ADDITIONALITEMSRowDeleted As PAR_ADDITIONALITEMSRowChangeEventHandler
        
        Public Event PAR_ADDITIONALITEMSRowDeleting As PAR_ADDITIONALITEMSRowChangeEventHandler
        
        Public Overloads Sub AddPAR_ADDITIONALITEMSRow(ByVal row As PAR_ADDITIONALITEMSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPAR_ADDITIONALITEMSRow( _
                    ByVal ROWID As Decimal,  _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGTYPE As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal TTYPE As String,  _
                    ByVal ITEMCODE As String,  _
                    ByVal RATE As Decimal,  _
                    ByVal QTY As Decimal,  _
                    ByVal ROUNDOFF As Decimal,  _
                    ByVal TAXPERC As Decimal,  _
                    ByVal TAXAMOUNT As Decimal,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal CANCELAMOUNT As Decimal,  _
                    ByVal FREEZE As String,  _
                    ByVal ADDUSERID As String,  _
                    ByVal ADDDATETIME As Date,  _
                    ByVal GROUPCODE As String,  _
                    ByVal MENUCODE As String,  _
                    ByVal TARIFFCODE As String,  _
                    ByVal MAXITEMS As Decimal,  _
                    ByVal LOCCODE As String,  _
                    ByVal CHITNO As String,  _
                    ByVal MENUCODETARIFF As String,  _
                    ByVal ITEMDESC As String,  _
                    ByVal discount As Decimal,  _
                    ByVal AFTERTOTAMT As Decimal,  _
                    ByVal SERTAX As Decimal,  _
                    ByVal UOM As String,  _
                    ByVal CATEGORY As String,  _
                    ByVal ITEMNAME As String) As PAR_ADDITIONALITEMSRow
            Dim rowPAR_ADDITIONALITEMSRow As PAR_ADDITIONALITEMSRow = CType(Me.NewRow,PAR_ADDITIONALITEMSRow)
            rowPAR_ADDITIONALITEMSRow.ItemArray = New Object() {ROWID, BOOKINGNO, BOOKINGTYPE, BOOKINGDATE, TTYPE, ITEMCODE, RATE, QTY, ROUNDOFF, TAXPERC, TAXAMOUNT, AMOUNT, TOTALAMOUNT, CANCELAMOUNT, FREEZE, ADDUSERID, ADDDATETIME, GROUPCODE, MENUCODE, TARIFFCODE, MAXITEMS, LOCCODE, CHITNO, MENUCODETARIFF, ITEMDESC, discount, AFTERTOTAMT, SERTAX, UOM, CATEGORY, ITEMNAME}
            Me.Rows.Add(rowPAR_ADDITIONALITEMSRow)
            Return rowPAR_ADDITIONALITEMSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PAR_ADDITIONALITEMSDataTable = CType(MyBase.Clone,PAR_ADDITIONALITEMSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PAR_ADDITIONALITEMSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnROWID = Me.Columns("ROWID")
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGTYPE = Me.Columns("BOOKINGTYPE")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnTTYPE = Me.Columns("TTYPE")
            Me.columnITEMCODE = Me.Columns("ITEMCODE")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnROUNDOFF = Me.Columns("ROUNDOFF")
            Me.columnTAXPERC = Me.Columns("TAXPERC")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnCANCELAMOUNT = Me.Columns("CANCELAMOUNT")
            Me.columnFREEZE = Me.Columns("FREEZE")
            Me.columnADDUSERID = Me.Columns("ADDUSERID")
            Me.columnADDDATETIME = Me.Columns("ADDDATETIME")
            Me.columnGROUPCODE = Me.Columns("GROUPCODE")
            Me.columnMENUCODE = Me.Columns("MENUCODE")
            Me.columnTARIFFCODE = Me.Columns("TARIFFCODE")
            Me.columnMAXITEMS = Me.Columns("MAXITEMS")
            Me.columnLOCCODE = Me.Columns("LOCCODE")
            Me.columnCHITNO = Me.Columns("CHITNO")
            Me.columnMENUCODETARIFF = Me.Columns("MENUCODETARIFF")
            Me.columnITEMDESC = Me.Columns("ITEMDESC")
            Me.columndiscount = Me.Columns("discount")
            Me.columnAFTERTOTAMT = Me.Columns("AFTERTOTAMT")
            Me.columnSERTAX = Me.Columns("SERTAX")
            Me.columnUOM = Me.Columns("UOM")
            Me.columnCATEGORY = Me.Columns("CATEGORY")
            Me.columnITEMNAME = Me.Columns("ITEMNAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnROWID = New DataColumn("ROWID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROWID)
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGTYPE = New DataColumn("BOOKINGTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGTYPE)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnTTYPE = New DataColumn("TTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTTYPE)
            Me.columnITEMCODE = New DataColumn("ITEMCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMCODE)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnROUNDOFF = New DataColumn("ROUNDOFF", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROUNDOFF)
            Me.columnTAXPERC = New DataColumn("TAXPERC", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXPERC)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnCANCELAMOUNT = New DataColumn("CANCELAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCANCELAMOUNT)
            Me.columnFREEZE = New DataColumn("FREEZE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREEZE)
            Me.columnADDUSERID = New DataColumn("ADDUSERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDUSERID)
            Me.columnADDDATETIME = New DataColumn("ADDDATETIME", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnADDDATETIME)
            Me.columnGROUPCODE = New DataColumn("GROUPCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGROUPCODE)
            Me.columnMENUCODE = New DataColumn("MENUCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMENUCODE)
            Me.columnTARIFFCODE = New DataColumn("TARIFFCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTARIFFCODE)
            Me.columnMAXITEMS = New DataColumn("MAXITEMS", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMAXITEMS)
            Me.columnLOCCODE = New DataColumn("LOCCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLOCCODE)
            Me.columnCHITNO = New DataColumn("CHITNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCHITNO)
            Me.columnMENUCODETARIFF = New DataColumn("MENUCODETARIFF", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMENUCODETARIFF)
            Me.columnITEMDESC = New DataColumn("ITEMDESC", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMDESC)
            Me.columndiscount = New DataColumn("discount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscount)
            Me.columnAFTERTOTAMT = New DataColumn("AFTERTOTAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAFTERTOTAMT)
            Me.columnSERTAX = New DataColumn("SERTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSERTAX)
            Me.columnUOM = New DataColumn("UOM", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUOM)
            Me.columnCATEGORY = New DataColumn("CATEGORY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATEGORY)
            Me.columnITEMNAME = New DataColumn("ITEMNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMNAME)
            Me.columnROWID.AllowDBNull = false
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnBOOKINGTYPE.AllowDBNull = false
            Me.columnITEMCODE.AllowDBNull = false
        End Sub
        
        Public Function NewPAR_ADDITIONALITEMSRow() As PAR_ADDITIONALITEMSRow
            Return CType(Me.NewRow,PAR_ADDITIONALITEMSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PAR_ADDITIONALITEMSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PAR_ADDITIONALITEMSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PAR_ADDITIONALITEMSRowChangedEvent) Is Nothing) Then
                RaiseEvent PAR_ADDITIONALITEMSRowChanged(Me, New PAR_ADDITIONALITEMSRowChangeEvent(CType(e.Row,PAR_ADDITIONALITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PAR_ADDITIONALITEMSRowChangingEvent) Is Nothing) Then
                RaiseEvent PAR_ADDITIONALITEMSRowChanging(Me, New PAR_ADDITIONALITEMSRowChangeEvent(CType(e.Row,PAR_ADDITIONALITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PAR_ADDITIONALITEMSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PAR_ADDITIONALITEMSRowDeleted(Me, New PAR_ADDITIONALITEMSRowChangeEvent(CType(e.Row,PAR_ADDITIONALITEMSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PAR_ADDITIONALITEMSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PAR_ADDITIONALITEMSRowDeleting(Me, New PAR_ADDITIONALITEMSRowChangeEvent(CType(e.Row,PAR_ADDITIONALITEMSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePAR_ADDITIONALITEMSRow(ByVal row As PAR_ADDITIONALITEMSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_ADDITIONALITEMSRow
        Inherits DataRow
        
        Private tablePAR_ADDITIONALITEMS As PAR_ADDITIONALITEMSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePAR_ADDITIONALITEMS = CType(Me.Table,PAR_ADDITIONALITEMSDataTable)
        End Sub
        
        Public Property ROWID As Decimal
            Get
                Return CType(Me(Me.tablePAR_ADDITIONALITEMS.ROWIDColumn),Decimal)
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.ROWIDColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePAR_ADDITIONALITEMS.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGTYPE As String
            Get
                Return CType(Me(Me.tablePAR_ADDITIONALITEMS.BOOKINGTYPEColumn),String)
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.BOOKINGTYPEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property TTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.TTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.TTYPEColumn) = value
            End Set
        End Property
        
        Public Property ITEMCODE As String
            Get
                Return CType(Me(Me.tablePAR_ADDITIONALITEMS.ITEMCODEColumn),String)
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.ITEMCODEColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.RATEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.QTYColumn) = value
            End Set
        End Property
        
        Public Property ROUNDOFF As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.ROUNDOFFColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.ROUNDOFFColumn) = value
            End Set
        End Property
        
        Public Property TAXPERC As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.TAXPERCColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.TAXPERCColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property CANCELAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.CANCELAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.CANCELAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property FREEZE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.FREEZEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.FREEZEColumn) = value
            End Set
        End Property
        
        Public Property ADDUSERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.ADDUSERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.ADDUSERIDColumn) = value
            End Set
        End Property
        
        Public Property ADDDATETIME As Date
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.ADDDATETIMEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.ADDDATETIMEColumn) = value
            End Set
        End Property
        
        Public Property GROUPCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.GROUPCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.GROUPCODEColumn) = value
            End Set
        End Property
        
        Public Property MENUCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.MENUCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.MENUCODEColumn) = value
            End Set
        End Property
        
        Public Property TARIFFCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.TARIFFCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.TARIFFCODEColumn) = value
            End Set
        End Property
        
        Public Property MAXITEMS As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.MAXITEMSColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.MAXITEMSColumn) = value
            End Set
        End Property
        
        Public Property LOCCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.LOCCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.LOCCODEColumn) = value
            End Set
        End Property
        
        Public Property CHITNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.CHITNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.CHITNOColumn) = value
            End Set
        End Property
        
        Public Property MENUCODETARIFF As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.MENUCODETARIFFColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.MENUCODETARIFFColumn) = value
            End Set
        End Property
        
        Public Property ITEMDESC As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.ITEMDESCColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.ITEMDESCColumn) = value
            End Set
        End Property
        
        Public Property discount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.discountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.discountColumn) = value
            End Set
        End Property
        
        Public Property AFTERTOTAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.AFTERTOTAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.AFTERTOTAMTColumn) = value
            End Set
        End Property
        
        Public Property SERTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.SERTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.SERTAXColumn) = value
            End Set
        End Property
        
        Public Property UOM As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.UOMColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.UOMColumn) = value
            End Set
        End Property
        
        Public Property CATEGORY As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.CATEGORYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.CATEGORYColumn) = value
            End Set
        End Property
        
        Public Property ITEMNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePAR_ADDITIONALITEMS.ITEMNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePAR_ADDITIONALITEMS.ITEMNAMEColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePAR_ADDITIONALITEMS.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.TTYPEColumn)
        End Function
        
        Public Sub SetTTYPENull()
            Me(Me.tablePAR_ADDITIONALITEMS.TTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tablePAR_ADDITIONALITEMS.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tablePAR_ADDITIONALITEMS.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsROUNDOFFNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.ROUNDOFFColumn)
        End Function
        
        Public Sub SetROUNDOFFNull()
            Me(Me.tablePAR_ADDITIONALITEMS.ROUNDOFFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXPERCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.TAXPERCColumn)
        End Function
        
        Public Sub SetTAXPERCNull()
            Me(Me.tablePAR_ADDITIONALITEMS.TAXPERCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tablePAR_ADDITIONALITEMS.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePAR_ADDITIONALITEMS.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePAR_ADDITIONALITEMS.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCANCELAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.CANCELAMOUNTColumn)
        End Function
        
        Public Sub SetCANCELAMOUNTNull()
            Me(Me.tablePAR_ADDITIONALITEMS.CANCELAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREEZENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.FREEZEColumn)
        End Function
        
        Public Sub SetFREEZENull()
            Me(Me.tablePAR_ADDITIONALITEMS.FREEZEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDUSERIDNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.ADDUSERIDColumn)
        End Function
        
        Public Sub SetADDUSERIDNull()
            Me(Me.tablePAR_ADDITIONALITEMS.ADDUSERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsADDDATETIMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.ADDDATETIMEColumn)
        End Function
        
        Public Sub SetADDDATETIMENull()
            Me(Me.tablePAR_ADDITIONALITEMS.ADDDATETIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGROUPCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.GROUPCODEColumn)
        End Function
        
        Public Sub SetGROUPCODENull()
            Me(Me.tablePAR_ADDITIONALITEMS.GROUPCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMENUCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.MENUCODEColumn)
        End Function
        
        Public Sub SetMENUCODENull()
            Me(Me.tablePAR_ADDITIONALITEMS.MENUCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTARIFFCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.TARIFFCODEColumn)
        End Function
        
        Public Sub SetTARIFFCODENull()
            Me(Me.tablePAR_ADDITIONALITEMS.TARIFFCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMAXITEMSNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.MAXITEMSColumn)
        End Function
        
        Public Sub SetMAXITEMSNull()
            Me(Me.tablePAR_ADDITIONALITEMS.MAXITEMSColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsLOCCODENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.LOCCODEColumn)
        End Function
        
        Public Sub SetLOCCODENull()
            Me(Me.tablePAR_ADDITIONALITEMS.LOCCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCHITNONull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.CHITNOColumn)
        End Function
        
        Public Sub SetCHITNONull()
            Me(Me.tablePAR_ADDITIONALITEMS.CHITNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMENUCODETARIFFNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.MENUCODETARIFFColumn)
        End Function
        
        Public Sub SetMENUCODETARIFFNull()
            Me(Me.tablePAR_ADDITIONALITEMS.MENUCODETARIFFColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMDESCNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.ITEMDESCColumn)
        End Function
        
        Public Sub SetITEMDESCNull()
            Me(Me.tablePAR_ADDITIONALITEMS.ITEMDESCColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscountNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.discountColumn)
        End Function
        
        Public Sub SetdiscountNull()
            Me(Me.tablePAR_ADDITIONALITEMS.discountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAFTERTOTAMTNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.AFTERTOTAMTColumn)
        End Function
        
        Public Sub SetAFTERTOTAMTNull()
            Me(Me.tablePAR_ADDITIONALITEMS.AFTERTOTAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSERTAXNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.SERTAXColumn)
        End Function
        
        Public Sub SetSERTAXNull()
            Me(Me.tablePAR_ADDITIONALITEMS.SERTAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsUOMNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.UOMColumn)
        End Function
        
        Public Sub SetUOMNull()
            Me(Me.tablePAR_ADDITIONALITEMS.UOMColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATEGORYNull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.CATEGORYColumn)
        End Function
        
        Public Sub SetCATEGORYNull()
            Me(Me.tablePAR_ADDITIONALITEMS.CATEGORYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMNAMENull() As Boolean
            Return Me.IsNull(Me.tablePAR_ADDITIONALITEMS.ITEMNAMEColumn)
        End Function
        
        Public Sub SetITEMNAMENull()
            Me(Me.tablePAR_ADDITIONALITEMS.ITEMNAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PAR_ADDITIONALITEMSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PAR_ADDITIONALITEMSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PAR_ADDITIONALITEMSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PAR_ADDITIONALITEMSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BOOKDETAILSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMEMBERID As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnVEG As DataColumn
        
        Private columnNONVEG As DataColumn
        
        Private columnGUESTNAME As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnFROMTIME As DataColumn
        
        Private columnTOTIME As DataColumn
        
        Private columnPARTYRECEIPTNO As DataColumn
        
        Private columnPARTYRECEIPTDATE As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnReceiptheaddesc As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnRECEIPTTYPE As DataColumn
        
        Private columnadduserid As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_BOOKDETAILS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERIDColumn As DataColumn
            Get
                Return Me.columnMEMBERID
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property VEGColumn As DataColumn
            Get
                Return Me.columnVEG
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGColumn As DataColumn
            Get
                Return Me.columnNONVEG
            End Get
        End Property
        
        Friend ReadOnly Property GUESTNAMEColumn As DataColumn
            Get
                Return Me.columnGUESTNAME
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property FROMTIMEColumn As DataColumn
            Get
                Return Me.columnFROMTIME
            End Get
        End Property
        
        Friend ReadOnly Property TOTIMEColumn As DataColumn
            Get
                Return Me.columnTOTIME
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTNOColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheaddescColumn As DataColumn
            Get
                Return Me.columnReceiptheaddesc
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTTYPEColumn As DataColumn
            Get
                Return Me.columnRECEIPTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_BOOKDETAILSRow
            Get
                Return CType(Me.Rows(index),PARTY_BOOKDETAILSRow)
            End Get
        End Property
        
        Public Event PARTY_BOOKDETAILSRowChanged As PARTY_BOOKDETAILSRowChangeEventHandler
        
        Public Event PARTY_BOOKDETAILSRowChanging As PARTY_BOOKDETAILSRowChangeEventHandler
        
        Public Event PARTY_BOOKDETAILSRowDeleted As PARTY_BOOKDETAILSRowChangeEventHandler
        
        Public Event PARTY_BOOKDETAILSRowDeleting As PARTY_BOOKDETAILSRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_BOOKDETAILSRow(ByVal row As PARTY_BOOKDETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_BOOKDETAILSRow( _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal MEMBERID As String,  _
                    ByVal ASSOCIATENAME As String,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal VEG As String,  _
                    ByVal NONVEG As String,  _
                    ByVal GUESTNAME As String,  _
                    ByVal HALLCODE As String,  _
                    ByVal FROMTIME As Decimal,  _
                    ByVal TOTIME As Decimal,  _
                    ByVal PARTYRECEIPTNO As String,  _
                    ByVal PARTYRECEIPTDATE As Date,  _
                    ByVal PAYMENTMODE As String,  _
                    ByVal Receiptheaddesc As String,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal RECEIPTTYPE As String,  _
                    ByVal adduserid As String) As PARTY_BOOKDETAILSRow
            Dim rowPARTY_BOOKDETAILSRow As PARTY_BOOKDETAILSRow = CType(Me.NewRow,PARTY_BOOKDETAILSRow)
            rowPARTY_BOOKDETAILSRow.ItemArray = New Object() {BOOKINGNO, BOOKINGDATE, PARTYDATE, MEMBERID, ASSOCIATENAME, DESCRIPTION, OCCUPANCY, VEG, NONVEG, GUESTNAME, HALLCODE, FROMTIME, TOTIME, PARTYRECEIPTNO, PARTYRECEIPTDATE, PAYMENTMODE, Receiptheaddesc, AMOUNT, RECEIPTTYPE, adduserid}
            Me.Rows.Add(rowPARTY_BOOKDETAILSRow)
            Return rowPARTY_BOOKDETAILSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_BOOKDETAILSDataTable = CType(MyBase.Clone,PARTY_BOOKDETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_BOOKDETAILSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMEMBERID = Me.Columns("MEMBERID")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnVEG = Me.Columns("VEG")
            Me.columnNONVEG = Me.Columns("NONVEG")
            Me.columnGUESTNAME = Me.Columns("GUESTNAME")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnFROMTIME = Me.Columns("FROMTIME")
            Me.columnTOTIME = Me.Columns("TOTIME")
            Me.columnPARTYRECEIPTNO = Me.Columns("PARTYRECEIPTNO")
            Me.columnPARTYRECEIPTDATE = Me.Columns("PARTYRECEIPTDATE")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnReceiptheaddesc = Me.Columns("Receiptheaddesc")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnRECEIPTTYPE = Me.Columns("RECEIPTTYPE")
            Me.columnadduserid = Me.Columns("adduserid")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMEMBERID = New DataColumn("MEMBERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERID)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnVEG = New DataColumn("VEG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEG)
            Me.columnNONVEG = New DataColumn("NONVEG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEG)
            Me.columnGUESTNAME = New DataColumn("GUESTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGUESTNAME)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnFROMTIME = New DataColumn("FROMTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMTIME)
            Me.columnTOTIME = New DataColumn("TOTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTIME)
            Me.columnPARTYRECEIPTNO = New DataColumn("PARTYRECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTNO)
            Me.columnPARTYRECEIPTDATE = New DataColumn("PARTYRECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTDATE)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnReceiptheaddesc = New DataColumn("Receiptheaddesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheaddesc)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnRECEIPTTYPE = New DataColumn("RECEIPTTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTTYPE)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
        End Sub
        
        Public Function NewPARTY_BOOKDETAILSRow() As PARTY_BOOKDETAILSRow
            Return CType(Me.NewRow,PARTY_BOOKDETAILSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_BOOKDETAILSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_BOOKDETAILSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_BOOKDETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_BOOKDETAILSRowChanged(Me, New PARTY_BOOKDETAILSRowChangeEvent(CType(e.Row,PARTY_BOOKDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_BOOKDETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_BOOKDETAILSRowChanging(Me, New PARTY_BOOKDETAILSRowChangeEvent(CType(e.Row,PARTY_BOOKDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_BOOKDETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_BOOKDETAILSRowDeleted(Me, New PARTY_BOOKDETAILSRowChangeEvent(CType(e.Row,PARTY_BOOKDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_BOOKDETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_BOOKDETAILSRowDeleting(Me, New PARTY_BOOKDETAILSRowChangeEvent(CType(e.Row,PARTY_BOOKDETAILSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_BOOKDETAILSRow(ByVal row As PARTY_BOOKDETAILSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BOOKDETAILSRow
        Inherits DataRow
        
        Private tablePARTY_BOOKDETAILS As PARTY_BOOKDETAILSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_BOOKDETAILS = CType(Me.Table,PARTY_BOOKDETAILSDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.MEMBERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.MEMBERIDColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property VEG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.VEGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.VEGColumn) = value
            End Set
        End Property
        
        Public Property NONVEG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.NONVEGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.NONVEGColumn) = value
            End Set
        End Property
        
        Public Property GUESTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.GUESTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.GUESTNAMEColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property FROMTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.FROMTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.FROMTIMEColumn) = value
            End Set
        End Property
        
        Public Property TOTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.TOTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.TOTIMEColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.PARTYRECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.PARTYRECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.PARTYRECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.PARTYRECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.PAYMENTMODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property Receiptheaddesc As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.ReceiptheaddescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.ReceiptheaddescColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.RECEIPTTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.RECEIPTTYPEColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS.adduseridColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_BOOKDETAILS.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_BOOKDETAILS.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_BOOKDETAILS.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERIDNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.MEMBERIDColumn)
        End Function
        
        Public Sub SetMEMBERIDNull()
            Me(Me.tablePARTY_BOOKDETAILS.MEMBERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tablePARTY_BOOKDETAILS.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablePARTY_BOOKDETAILS.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablePARTY_BOOKDETAILS.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.VEGColumn)
        End Function
        
        Public Sub SetVEGNull()
            Me(Me.tablePARTY_BOOKDETAILS.VEGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNONVEGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.NONVEGColumn)
        End Function
        
        Public Sub SetNONVEGNull()
            Me(Me.tablePARTY_BOOKDETAILS.NONVEGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGUESTNAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.GUESTNAMEColumn)
        End Function
        
        Public Sub SetGUESTNAMENull()
            Me(Me.tablePARTY_BOOKDETAILS.GUESTNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablePARTY_BOOKDETAILS.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.FROMTIMEColumn)
        End Function
        
        Public Sub SetFROMTIMENull()
            Me(Me.tablePARTY_BOOKDETAILS.FROMTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.TOTIMEColumn)
        End Function
        
        Public Sub SetTOTIMENull()
            Me(Me.tablePARTY_BOOKDETAILS.TOTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.PARTYRECEIPTNOColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTNONull()
            Me(Me.tablePARTY_BOOKDETAILS.PARTYRECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.PARTYRECEIPTDATEColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTDATENull()
            Me(Me.tablePARTY_BOOKDETAILS.PARTYRECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYMENTMODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.PAYMENTMODEColumn)
        End Function
        
        Public Sub SetPAYMENTMODENull()
            Me(Me.tablePARTY_BOOKDETAILS.PAYMENTMODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheaddescNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.ReceiptheaddescColumn)
        End Function
        
        Public Sub SetReceiptheaddescNull()
            Me(Me.tablePARTY_BOOKDETAILS.ReceiptheaddescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_BOOKDETAILS.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.RECEIPTTYPEColumn)
        End Function
        
        Public Sub SetRECEIPTTYPENull()
            Me(Me.tablePARTY_BOOKDETAILS.RECEIPTTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tablePARTY_BOOKDETAILS.adduseridColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BOOKDETAILSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_BOOKDETAILSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_BOOKDETAILSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_BOOKDETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class foodorder1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnGUESTNAME As DataColumn
        
        Private columnCONTADD1 As DataColumn
        
        Private columnCONTADD2 As DataColumn
        
        Private columnCONTADD3 As DataColumn
        
        Private columnCONTCITY As DataColumn
        
        Private columnCONTSTATE As DataColumn
        
        Private columnCONTPIN As DataColumn
        
        Private columnCONTPHONE1 As DataColumn
        
        Private columnCONTCELL As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnhalltypedesc As DataColumn
        
        Private columnpdesc As DataColumn
        
        Private columnfromtime As DataColumn
        
        Private columntotime As DataColumn
        
        Private columntotalamount As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Friend Sub New()
            MyBase.New("foodorder1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property GUESTNAMEColumn As DataColumn
            Get
                Return Me.columnGUESTNAME
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD1Column As DataColumn
            Get
                Return Me.columnCONTADD1
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD2Column As DataColumn
            Get
                Return Me.columnCONTADD2
            End Get
        End Property
        
        Friend ReadOnly Property CONTADD3Column As DataColumn
            Get
                Return Me.columnCONTADD3
            End Get
        End Property
        
        Friend ReadOnly Property CONTCITYColumn As DataColumn
            Get
                Return Me.columnCONTCITY
            End Get
        End Property
        
        Friend ReadOnly Property CONTSTATEColumn As DataColumn
            Get
                Return Me.columnCONTSTATE
            End Get
        End Property
        
        Friend ReadOnly Property CONTPINColumn As DataColumn
            Get
                Return Me.columnCONTPIN
            End Get
        End Property
        
        Friend ReadOnly Property CONTPHONE1Column As DataColumn
            Get
                Return Me.columnCONTPHONE1
            End Get
        End Property
        
        Friend ReadOnly Property CONTCELLColumn As DataColumn
            Get
                Return Me.columnCONTCELL
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property halltypedescColumn As DataColumn
            Get
                Return Me.columnhalltypedesc
            End Get
        End Property
        
        Friend ReadOnly Property pdescColumn As DataColumn
            Get
                Return Me.columnpdesc
            End Get
        End Property
        
        Friend ReadOnly Property fromtimeColumn As DataColumn
            Get
                Return Me.columnfromtime
            End Get
        End Property
        
        Friend ReadOnly Property totimeColumn As DataColumn
            Get
                Return Me.columntotime
            End Get
        End Property
        
        Friend ReadOnly Property totalamountColumn As DataColumn
            Get
                Return Me.columntotalamount
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As foodorder1Row
            Get
                Return CType(Me.Rows(index),foodorder1Row)
            End Get
        End Property
        
        Public Event foodorder1RowChanged As foodorder1RowChangeEventHandler
        
        Public Event foodorder1RowChanging As foodorder1RowChangeEventHandler
        
        Public Event foodorder1RowDeleted As foodorder1RowChangeEventHandler
        
        Public Event foodorder1RowDeleting As foodorder1RowChangeEventHandler
        
        Public Overloads Sub Addfoodorder1Row(ByVal row As foodorder1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addfoodorder1Row( _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal MCODE As String,  _
                    ByVal MNAME As String,  _
                    ByVal GUESTNAME As String,  _
                    ByVal CONTADD1 As String,  _
                    ByVal CONTADD2 As String,  _
                    ByVal CONTADD3 As String,  _
                    ByVal CONTCITY As String,  _
                    ByVal CONTSTATE As String,  _
                    ByVal CONTPIN As String,  _
                    ByVal CONTPHONE1 As String,  _
                    ByVal CONTCELL As String,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal halltypedesc As String,  _
                    ByVal pdesc As String,  _
                    ByVal fromtime As String,  _
                    ByVal totime As String,  _
                    ByVal totalamount As Decimal,  _
                    ByVal BOOKINGDATE As Decimal) As foodorder1Row
            Dim rowfoodorder1Row As foodorder1Row = CType(Me.NewRow,foodorder1Row)
            rowfoodorder1Row.ItemArray = New Object() {BOOKINGNO, PARTYDATE, DESCRIPTION, MCODE, MNAME, GUESTNAME, CONTADD1, CONTADD2, CONTADD3, CONTCITY, CONTSTATE, CONTPIN, CONTPHONE1, CONTCELL, OCCUPANCY, halltypedesc, pdesc, fromtime, totime, totalamount, BOOKINGDATE}
            Me.Rows.Add(rowfoodorder1Row)
            Return rowfoodorder1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As foodorder1DataTable = CType(MyBase.Clone,foodorder1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New foodorder1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnGUESTNAME = Me.Columns("GUESTNAME")
            Me.columnCONTADD1 = Me.Columns("CONTADD1")
            Me.columnCONTADD2 = Me.Columns("CONTADD2")
            Me.columnCONTADD3 = Me.Columns("CONTADD3")
            Me.columnCONTCITY = Me.Columns("CONTCITY")
            Me.columnCONTSTATE = Me.Columns("CONTSTATE")
            Me.columnCONTPIN = Me.Columns("CONTPIN")
            Me.columnCONTPHONE1 = Me.Columns("CONTPHONE1")
            Me.columnCONTCELL = Me.Columns("CONTCELL")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnhalltypedesc = Me.Columns("halltypedesc")
            Me.columnpdesc = Me.Columns("pdesc")
            Me.columnfromtime = Me.Columns("fromtime")
            Me.columntotime = Me.Columns("totime")
            Me.columntotalamount = Me.Columns("totalamount")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnGUESTNAME = New DataColumn("GUESTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGUESTNAME)
            Me.columnCONTADD1 = New DataColumn("CONTADD1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD1)
            Me.columnCONTADD2 = New DataColumn("CONTADD2", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD2)
            Me.columnCONTADD3 = New DataColumn("CONTADD3", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTADD3)
            Me.columnCONTCITY = New DataColumn("CONTCITY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCITY)
            Me.columnCONTSTATE = New DataColumn("CONTSTATE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTSTATE)
            Me.columnCONTPIN = New DataColumn("CONTPIN", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPIN)
            Me.columnCONTPHONE1 = New DataColumn("CONTPHONE1", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTPHONE1)
            Me.columnCONTCELL = New DataColumn("CONTCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCONTCELL)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnhalltypedesc = New DataColumn("halltypedesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltypedesc)
            Me.columnpdesc = New DataColumn("pdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpdesc)
            Me.columnfromtime = New DataColumn("fromtime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnfromtime)
            Me.columntotime = New DataColumn("totime", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotime)
            Me.columntotalamount = New DataColumn("totalamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columntotalamount)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnGUESTNAME.ReadOnly = true
        End Sub
        
        Public Function Newfoodorder1Row() As foodorder1Row
            Return CType(Me.NewRow,foodorder1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New foodorder1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(foodorder1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.foodorder1RowChangedEvent) Is Nothing) Then
                RaiseEvent foodorder1RowChanged(Me, New foodorder1RowChangeEvent(CType(e.Row,foodorder1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.foodorder1RowChangingEvent) Is Nothing) Then
                RaiseEvent foodorder1RowChanging(Me, New foodorder1RowChangeEvent(CType(e.Row,foodorder1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.foodorder1RowDeletedEvent) Is Nothing) Then
                RaiseEvent foodorder1RowDeleted(Me, New foodorder1RowChangeEvent(CType(e.Row,foodorder1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.foodorder1RowDeletingEvent) Is Nothing) Then
                RaiseEvent foodorder1RowDeleting(Me, New foodorder1RowChangeEvent(CType(e.Row,foodorder1Row), e.Action))
            End If
        End Sub
        
        Public Sub Removefoodorder1Row(ByVal row As foodorder1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class foodorder1Row
        Inherits DataRow
        
        Private tablefoodorder1 As foodorder1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablefoodorder1 = CType(Me.Table,foodorder1DataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.MCODEColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property GUESTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.GUESTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.GUESTNAMEColumn) = value
            End Set
        End Property
        
        Public Property CONTADD1 As String
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.CONTADD1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.CONTADD1Column) = value
            End Set
        End Property
        
        Public Property CONTADD2 As String
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.CONTADD2Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.CONTADD2Column) = value
            End Set
        End Property
        
        Public Property CONTADD3 As String
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.CONTADD3Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.CONTADD3Column) = value
            End Set
        End Property
        
        Public Property CONTCITY As String
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.CONTCITYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.CONTCITYColumn) = value
            End Set
        End Property
        
        Public Property CONTSTATE As String
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.CONTSTATEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.CONTSTATEColumn) = value
            End Set
        End Property
        
        Public Property CONTPIN As String
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.CONTPINColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.CONTPINColumn) = value
            End Set
        End Property
        
        Public Property CONTPHONE1 As String
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.CONTPHONE1Column),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.CONTPHONE1Column) = value
            End Set
        End Property
        
        Public Property CONTCELL As String
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.CONTCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.CONTCELLColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property halltypedesc As String
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.halltypedescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.halltypedescColumn) = value
            End Set
        End Property
        
        Public Property pdesc As String
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.pdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.pdescColumn) = value
            End Set
        End Property
        
        Public Property fromtime As String
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.fromtimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.fromtimeColumn) = value
            End Set
        End Property
        
        Public Property totime As String
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.totimeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.totimeColumn) = value
            End Set
        End Property
        
        Public Property totalamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.totalamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.totalamountColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablefoodorder1.BOOKINGDATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablefoodorder1.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablefoodorder1.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablefoodorder1.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablefoodorder1.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablefoodorder1.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tablefoodorder1.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGUESTNAMENull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.GUESTNAMEColumn)
        End Function
        
        Public Sub SetGUESTNAMENull()
            Me(Me.tablefoodorder1.GUESTNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD1Null() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.CONTADD1Column)
        End Function
        
        Public Sub SetCONTADD1Null()
            Me(Me.tablefoodorder1.CONTADD1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD2Null() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.CONTADD2Column)
        End Function
        
        Public Sub SetCONTADD2Null()
            Me(Me.tablefoodorder1.CONTADD2Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTADD3Null() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.CONTADD3Column)
        End Function
        
        Public Sub SetCONTADD3Null()
            Me(Me.tablefoodorder1.CONTADD3Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCITYNull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.CONTCITYColumn)
        End Function
        
        Public Sub SetCONTCITYNull()
            Me(Me.tablefoodorder1.CONTCITYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTSTATENull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.CONTSTATEColumn)
        End Function
        
        Public Sub SetCONTSTATENull()
            Me(Me.tablefoodorder1.CONTSTATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPINNull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.CONTPINColumn)
        End Function
        
        Public Sub SetCONTPINNull()
            Me(Me.tablefoodorder1.CONTPINColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTPHONE1Null() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.CONTPHONE1Column)
        End Function
        
        Public Sub SetCONTPHONE1Null()
            Me(Me.tablefoodorder1.CONTPHONE1Column) = System.Convert.DBNull
        End Sub
        
        Public Function IsCONTCELLNull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.CONTCELLColumn)
        End Function
        
        Public Sub SetCONTCELLNull()
            Me(Me.tablefoodorder1.CONTCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablefoodorder1.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalltypedescNull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.halltypedescColumn)
        End Function
        
        Public Sub SethalltypedescNull()
            Me(Me.tablefoodorder1.halltypedescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspdescNull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.pdescColumn)
        End Function
        
        Public Sub SetpdescNull()
            Me(Me.tablefoodorder1.pdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsfromtimeNull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.fromtimeColumn)
        End Function
        
        Public Sub SetfromtimeNull()
            Me(Me.tablefoodorder1.fromtimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotimeNull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.totimeColumn)
        End Function
        
        Public Sub SettotimeNull()
            Me(Me.tablefoodorder1.totimeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IstotalamountNull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.totalamountColumn)
        End Function
        
        Public Sub SettotalamountNull()
            Me(Me.tablefoodorder1.totalamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablefoodorder1.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablefoodorder1.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class foodorder1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As foodorder1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As foodorder1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As foodorder1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_receiptsummaryDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnbookingno As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnmcode As DataColumn
        
        Private columnMNAME As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("party_receiptsummary")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property bookingnoColumn As DataColumn
            Get
                Return Me.columnbookingno
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property mcodeColumn As DataColumn
            Get
                Return Me.columnmcode
            End Get
        End Property
        
        Friend ReadOnly Property MNAMEColumn As DataColumn
            Get
                Return Me.columnMNAME
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As party_receiptsummaryRow
            Get
                Return CType(Me.Rows(index),party_receiptsummaryRow)
            End Get
        End Property
        
        Public Event party_receiptsummaryRowChanged As party_receiptsummaryRowChangeEventHandler
        
        Public Event party_receiptsummaryRowChanging As party_receiptsummaryRowChangeEventHandler
        
        Public Event party_receiptsummaryRowDeleted As party_receiptsummaryRowChangeEventHandler
        
        Public Event party_receiptsummaryRowDeleting As party_receiptsummaryRowChangeEventHandler
        
        Public Overloads Sub Addparty_receiptsummaryRow(ByVal row As party_receiptsummaryRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addparty_receiptsummaryRow(ByVal bookingno As Decimal, ByVal PARTYDATE As Date, ByVal PAYMENTMODE As String, ByVal mcode As String, ByVal MNAME As String, ByVal AMOUNT As Decimal) As party_receiptsummaryRow
            Dim rowparty_receiptsummaryRow As party_receiptsummaryRow = CType(Me.NewRow,party_receiptsummaryRow)
            rowparty_receiptsummaryRow.ItemArray = New Object() {bookingno, PARTYDATE, PAYMENTMODE, mcode, MNAME, AMOUNT}
            Me.Rows.Add(rowparty_receiptsummaryRow)
            Return rowparty_receiptsummaryRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As party_receiptsummaryDataTable = CType(MyBase.Clone,party_receiptsummaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New party_receiptsummaryDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnbookingno = Me.Columns("bookingno")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnmcode = Me.Columns("mcode")
            Me.columnMNAME = Me.Columns("MNAME")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnbookingno = New DataColumn("bookingno", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbookingno)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnmcode = New DataColumn("mcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmcode)
            Me.columnMNAME = New DataColumn("MNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMNAME)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
        End Sub
        
        Public Function Newparty_receiptsummaryRow() As party_receiptsummaryRow
            Return CType(Me.NewRow,party_receiptsummaryRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New party_receiptsummaryRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(party_receiptsummaryRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.party_receiptsummaryRowChangedEvent) Is Nothing) Then
                RaiseEvent party_receiptsummaryRowChanged(Me, New party_receiptsummaryRowChangeEvent(CType(e.Row,party_receiptsummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.party_receiptsummaryRowChangingEvent) Is Nothing) Then
                RaiseEvent party_receiptsummaryRowChanging(Me, New party_receiptsummaryRowChangeEvent(CType(e.Row,party_receiptsummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.party_receiptsummaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent party_receiptsummaryRowDeleted(Me, New party_receiptsummaryRowChangeEvent(CType(e.Row,party_receiptsummaryRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.party_receiptsummaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent party_receiptsummaryRowDeleting(Me, New party_receiptsummaryRowChangeEvent(CType(e.Row,party_receiptsummaryRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeparty_receiptsummaryRow(ByVal row As party_receiptsummaryRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_receiptsummaryRow
        Inherits DataRow
        
        Private tableparty_receiptsummary As party_receiptsummaryDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableparty_receiptsummary = CType(Me.Table,party_receiptsummaryDataTable)
        End Sub
        
        Public Property bookingno As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_receiptsummary.bookingnoColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_receiptsummary.bookingnoColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableparty_receiptsummary.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_receiptsummary.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_receiptsummary.PAYMENTMODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_receiptsummary.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property mcode As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_receiptsummary.mcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_receiptsummary.mcodeColumn) = value
            End Set
        End Property
        
        Public Property MNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_receiptsummary.MNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_receiptsummary.MNAMEColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_receiptsummary.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_receiptsummary.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsbookingnoNull() As Boolean
            Return Me.IsNull(Me.tableparty_receiptsummary.bookingnoColumn)
        End Function
        
        Public Sub SetbookingnoNull()
            Me(Me.tableparty_receiptsummary.bookingnoColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tableparty_receiptsummary.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tableparty_receiptsummary.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYMENTMODENull() As Boolean
            Return Me.IsNull(Me.tableparty_receiptsummary.PAYMENTMODEColumn)
        End Function
        
        Public Sub SetPAYMENTMODENull()
            Me(Me.tableparty_receiptsummary.PAYMENTMODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmcodeNull() As Boolean
            Return Me.IsNull(Me.tableparty_receiptsummary.mcodeColumn)
        End Function
        
        Public Sub SetmcodeNull()
            Me(Me.tableparty_receiptsummary.mcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMNAMENull() As Boolean
            Return Me.IsNull(Me.tableparty_receiptsummary.MNAMEColumn)
        End Function
        
        Public Sub SetMNAMENull()
            Me(Me.tableparty_receiptsummary.MNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_receiptsummary.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableparty_receiptsummary.AMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_receiptsummaryRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As party_receiptsummaryRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As party_receiptsummaryRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As party_receiptsummaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_book_memberwiseDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnpartydate As DataColumn
        
        Private columnitemcode As DataColumn
        
        Private columnitemdesc As DataColumn
        
        Private columnRATE As DataColumn
        
        Private columnQTY As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnSERTAX As DataColumn
        
        Private columnCATEGORY As DataColumn
        
        Private columnTAXAMOUNT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Friend Sub New()
            MyBase.New("party_book_memberwise")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property partydateColumn As DataColumn
            Get
                Return Me.columnpartydate
            End Get
        End Property
        
        Friend ReadOnly Property itemcodeColumn As DataColumn
            Get
                Return Me.columnitemcode
            End Get
        End Property
        
        Friend ReadOnly Property itemdescColumn As DataColumn
            Get
                Return Me.columnitemdesc
            End Get
        End Property
        
        Friend ReadOnly Property RATEColumn As DataColumn
            Get
                Return Me.columnRATE
            End Get
        End Property
        
        Friend ReadOnly Property QTYColumn As DataColumn
            Get
                Return Me.columnQTY
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property SERTAXColumn As DataColumn
            Get
                Return Me.columnSERTAX
            End Get
        End Property
        
        Friend ReadOnly Property CATEGORYColumn As DataColumn
            Get
                Return Me.columnCATEGORY
            End Get
        End Property
        
        Friend ReadOnly Property TAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As party_book_memberwiseRow
            Get
                Return CType(Me.Rows(index),party_book_memberwiseRow)
            End Get
        End Property
        
        Public Event party_book_memberwiseRowChanged As party_book_memberwiseRowChangeEventHandler
        
        Public Event party_book_memberwiseRowChanging As party_book_memberwiseRowChangeEventHandler
        
        Public Event party_book_memberwiseRowDeleted As party_book_memberwiseRowChangeEventHandler
        
        Public Event party_book_memberwiseRowDeleting As party_book_memberwiseRowChangeEventHandler
        
        Public Overloads Sub Addparty_book_memberwiseRow(ByVal row As party_book_memberwiseRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addparty_book_memberwiseRow(ByVal BOOKINGNO As Decimal, ByVal BOOKINGDATE As Date, ByVal partydate As Date, ByVal itemcode As String, ByVal itemdesc As String, ByVal RATE As Decimal, ByVal QTY As Decimal, ByVal AMOUNT As Decimal, ByVal SERTAX As Decimal, ByVal CATEGORY As String, ByVal TAXAMOUNT As Decimal, ByVal TOTALAMOUNT As Decimal, ByVal MCODE As String, ByVal ASSOCIATENAME As String) As party_book_memberwiseRow
            Dim rowparty_book_memberwiseRow As party_book_memberwiseRow = CType(Me.NewRow,party_book_memberwiseRow)
            rowparty_book_memberwiseRow.ItemArray = New Object() {BOOKINGNO, BOOKINGDATE, partydate, itemcode, itemdesc, RATE, QTY, AMOUNT, SERTAX, CATEGORY, TAXAMOUNT, TOTALAMOUNT, MCODE, ASSOCIATENAME}
            Me.Rows.Add(rowparty_book_memberwiseRow)
            Return rowparty_book_memberwiseRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As party_book_memberwiseDataTable = CType(MyBase.Clone,party_book_memberwiseDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New party_book_memberwiseDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnpartydate = Me.Columns("partydate")
            Me.columnitemcode = Me.Columns("itemcode")
            Me.columnitemdesc = Me.Columns("itemdesc")
            Me.columnRATE = Me.Columns("RATE")
            Me.columnQTY = Me.Columns("QTY")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnSERTAX = Me.Columns("SERTAX")
            Me.columnCATEGORY = Me.Columns("CATEGORY")
            Me.columnTAXAMOUNT = Me.Columns("TAXAMOUNT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnpartydate = New DataColumn("partydate", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnpartydate)
            Me.columnitemcode = New DataColumn("itemcode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemcode)
            Me.columnitemdesc = New DataColumn("itemdesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnitemdesc)
            Me.columnRATE = New DataColumn("RATE", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRATE)
            Me.columnQTY = New DataColumn("QTY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnQTY)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnSERTAX = New DataColumn("SERTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSERTAX)
            Me.columnCATEGORY = New DataColumn("CATEGORY", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATEGORY)
            Me.columnTAXAMOUNT = New DataColumn("TAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTAXAMOUNT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnBOOKINGNO.ReadOnly = true
            Me.columnBOOKINGDATE.ReadOnly = true
            Me.columnpartydate.ReadOnly = true
            Me.columnitemcode.ReadOnly = true
        End Sub
        
        Public Function Newparty_book_memberwiseRow() As party_book_memberwiseRow
            Return CType(Me.NewRow,party_book_memberwiseRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New party_book_memberwiseRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(party_book_memberwiseRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.party_book_memberwiseRowChangedEvent) Is Nothing) Then
                RaiseEvent party_book_memberwiseRowChanged(Me, New party_book_memberwiseRowChangeEvent(CType(e.Row,party_book_memberwiseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.party_book_memberwiseRowChangingEvent) Is Nothing) Then
                RaiseEvent party_book_memberwiseRowChanging(Me, New party_book_memberwiseRowChangeEvent(CType(e.Row,party_book_memberwiseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.party_book_memberwiseRowDeletedEvent) Is Nothing) Then
                RaiseEvent party_book_memberwiseRowDeleted(Me, New party_book_memberwiseRowChangeEvent(CType(e.Row,party_book_memberwiseRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.party_book_memberwiseRowDeletingEvent) Is Nothing) Then
                RaiseEvent party_book_memberwiseRowDeleting(Me, New party_book_memberwiseRowChangeEvent(CType(e.Row,party_book_memberwiseRow), e.Action))
            End If
        End Sub
        
        Public Sub Removeparty_book_memberwiseRow(ByVal row As party_book_memberwiseRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_book_memberwiseRow
        Inherits DataRow
        
        Private tableparty_book_memberwise As party_book_memberwiseDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableparty_book_memberwise = CType(Me.Table,party_book_memberwiseDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_book_memberwise.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_book_memberwise.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tableparty_book_memberwise.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_book_memberwise.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property partydate As Date
            Get
                Try 
                    Return CType(Me(Me.tableparty_book_memberwise.partydateColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_book_memberwise.partydateColumn) = value
            End Set
        End Property
        
        Public Property itemcode As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_book_memberwise.itemcodeColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_book_memberwise.itemcodeColumn) = value
            End Set
        End Property
        
        Public Property itemdesc As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_book_memberwise.itemdescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_book_memberwise.itemdescColumn) = value
            End Set
        End Property
        
        Public Property RATE As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_book_memberwise.RATEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_book_memberwise.RATEColumn) = value
            End Set
        End Property
        
        Public Property QTY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_book_memberwise.QTYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_book_memberwise.QTYColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_book_memberwise.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_book_memberwise.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property SERTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_book_memberwise.SERTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_book_memberwise.SERTAXColumn) = value
            End Set
        End Property
        
        Public Property CATEGORY As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_book_memberwise.CATEGORYColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_book_memberwise.CATEGORYColumn) = value
            End Set
        End Property
        
        Public Property TAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_book_memberwise.TAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_book_memberwise.TAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableparty_book_memberwise.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_book_memberwise.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_book_memberwise.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_book_memberwise.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tableparty_book_memberwise.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableparty_book_memberwise.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tableparty_book_memberwise.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tableparty_book_memberwise.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tableparty_book_memberwise.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tableparty_book_memberwise.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IspartydateNull() As Boolean
            Return Me.IsNull(Me.tableparty_book_memberwise.partydateColumn)
        End Function
        
        Public Sub SetpartydateNull()
            Me(Me.tableparty_book_memberwise.partydateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsitemcodeNull() As Boolean
            Return Me.IsNull(Me.tableparty_book_memberwise.itemcodeColumn)
        End Function
        
        Public Sub SetitemcodeNull()
            Me(Me.tableparty_book_memberwise.itemcodeColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsitemdescNull() As Boolean
            Return Me.IsNull(Me.tableparty_book_memberwise.itemdescColumn)
        End Function
        
        Public Sub SetitemdescNull()
            Me(Me.tableparty_book_memberwise.itemdescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRATENull() As Boolean
            Return Me.IsNull(Me.tableparty_book_memberwise.RATEColumn)
        End Function
        
        Public Sub SetRATENull()
            Me(Me.tableparty_book_memberwise.RATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsQTYNull() As Boolean
            Return Me.IsNull(Me.tableparty_book_memberwise.QTYColumn)
        End Function
        
        Public Sub SetQTYNull()
            Me(Me.tableparty_book_memberwise.QTYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_book_memberwise.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tableparty_book_memberwise.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsSERTAXNull() As Boolean
            Return Me.IsNull(Me.tableparty_book_memberwise.SERTAXColumn)
        End Function
        
        Public Sub SetSERTAXNull()
            Me(Me.tableparty_book_memberwise.SERTAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATEGORYNull() As Boolean
            Return Me.IsNull(Me.tableparty_book_memberwise.CATEGORYColumn)
        End Function
        
        Public Sub SetCATEGORYNull()
            Me(Me.tableparty_book_memberwise.CATEGORYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_book_memberwise.TAXAMOUNTColumn)
        End Function
        
        Public Sub SetTAXAMOUNTNull()
            Me(Me.tableparty_book_memberwise.TAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tableparty_book_memberwise.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tableparty_book_memberwise.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tableparty_book_memberwise.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tableparty_book_memberwise.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tableparty_book_memberwise.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tableparty_book_memberwise.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class party_book_memberwiseRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As party_book_memberwiseRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As party_book_memberwiseRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As party_book_memberwiseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RECEIPTREPORTDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnPARTYRECEIPTNO As DataColumn
        
        Private columnPARTYRECEIPTDATE As DataColumn
        
        Private columnadduserid As DataColumn
        
        Private columnRECEIPTTYPE As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnReceiptheaddesc As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_RECEIPTREPORT")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTNOColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTTYPEColumn As DataColumn
            Get
                Return Me.columnRECEIPTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheaddescColumn As DataColumn
            Get
                Return Me.columnReceiptheaddesc
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_RECEIPTREPORTRow
            Get
                Return CType(Me.Rows(index),PARTY_RECEIPTREPORTRow)
            End Get
        End Property
        
        Public Event PARTY_RECEIPTREPORTRowChanged As PARTY_RECEIPTREPORTRowChangeEventHandler
        
        Public Event PARTY_RECEIPTREPORTRowChanging As PARTY_RECEIPTREPORTRowChangeEventHandler
        
        Public Event PARTY_RECEIPTREPORTRowDeleted As PARTY_RECEIPTREPORTRowChangeEventHandler
        
        Public Event PARTY_RECEIPTREPORTRowDeleting As PARTY_RECEIPTREPORTRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_RECEIPTREPORTRow(ByVal row As PARTY_RECEIPTREPORTRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_RECEIPTREPORTRow(ByVal BOOKINGNO As Decimal, ByVal AMOUNT As Decimal, ByVal PARTYRECEIPTNO As String, ByVal PARTYRECEIPTDATE As Date, ByVal adduserid As String, ByVal RECEIPTTYPE As String, ByVal PAYMENTMODE As String, ByVal Receiptheaddesc As String) As PARTY_RECEIPTREPORTRow
            Dim rowPARTY_RECEIPTREPORTRow As PARTY_RECEIPTREPORTRow = CType(Me.NewRow,PARTY_RECEIPTREPORTRow)
            rowPARTY_RECEIPTREPORTRow.ItemArray = New Object() {BOOKINGNO, AMOUNT, PARTYRECEIPTNO, PARTYRECEIPTDATE, adduserid, RECEIPTTYPE, PAYMENTMODE, Receiptheaddesc}
            Me.Rows.Add(rowPARTY_RECEIPTREPORTRow)
            Return rowPARTY_RECEIPTREPORTRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_RECEIPTREPORTDataTable = CType(MyBase.Clone,PARTY_RECEIPTREPORTDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_RECEIPTREPORTDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnPARTYRECEIPTNO = Me.Columns("PARTYRECEIPTNO")
            Me.columnPARTYRECEIPTDATE = Me.Columns("PARTYRECEIPTDATE")
            Me.columnadduserid = Me.Columns("adduserid")
            Me.columnRECEIPTTYPE = Me.Columns("RECEIPTTYPE")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnReceiptheaddesc = Me.Columns("Receiptheaddesc")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnPARTYRECEIPTNO = New DataColumn("PARTYRECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTNO)
            Me.columnPARTYRECEIPTDATE = New DataColumn("PARTYRECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTDATE)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
            Me.columnRECEIPTTYPE = New DataColumn("RECEIPTTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTTYPE)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnReceiptheaddesc = New DataColumn("Receiptheaddesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheaddesc)
        End Sub
        
        Public Function NewPARTY_RECEIPTREPORTRow() As PARTY_RECEIPTREPORTRow
            Return CType(Me.NewRow,PARTY_RECEIPTREPORTRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_RECEIPTREPORTRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_RECEIPTREPORTRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_RECEIPTREPORTRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_RECEIPTREPORTRowChanged(Me, New PARTY_RECEIPTREPORTRowChangeEvent(CType(e.Row,PARTY_RECEIPTREPORTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_RECEIPTREPORTRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_RECEIPTREPORTRowChanging(Me, New PARTY_RECEIPTREPORTRowChangeEvent(CType(e.Row,PARTY_RECEIPTREPORTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_RECEIPTREPORTRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_RECEIPTREPORTRowDeleted(Me, New PARTY_RECEIPTREPORTRowChangeEvent(CType(e.Row,PARTY_RECEIPTREPORTRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_RECEIPTREPORTRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_RECEIPTREPORTRowDeleting(Me, New PARTY_RECEIPTREPORTRowChangeEvent(CType(e.Row,PARTY_RECEIPTREPORTRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_RECEIPTREPORTRow(ByVal row As PARTY_RECEIPTREPORTRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RECEIPTREPORTRow
        Inherits DataRow
        
        Private tablePARTY_RECEIPTREPORT As PARTY_RECEIPTREPORTDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_RECEIPTREPORT = CType(Me.Table,PARTY_RECEIPTREPORTDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.adduseridColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.RECEIPTTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.RECEIPTTYPEColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.PAYMENTMODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property Receiptheaddesc As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_RECEIPTREPORT.ReceiptheaddescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_RECEIPTREPORT.ReceiptheaddescColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_RECEIPTREPORT.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_RECEIPTREPORT.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTNOColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTNONull()
            Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTDATEColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTDATENull()
            Me(Me.tablePARTY_RECEIPTREPORT.PARTYRECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tablePARTY_RECEIPTREPORT.adduseridColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.RECEIPTTYPEColumn)
        End Function
        
        Public Sub SetRECEIPTTYPENull()
            Me(Me.tablePARTY_RECEIPTREPORT.RECEIPTTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYMENTMODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.PAYMENTMODEColumn)
        End Function
        
        Public Sub SetPAYMENTMODENull()
            Me(Me.tablePARTY_RECEIPTREPORT.PAYMENTMODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheaddescNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_RECEIPTREPORT.ReceiptheaddescColumn)
        End Function
        
        Public Sub SetReceiptheaddescNull()
            Me(Me.tablePARTY_RECEIPTREPORT.ReceiptheaddescColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_RECEIPTREPORTRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_RECEIPTREPORTRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_RECEIPTREPORTRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_RECEIPTREPORTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BOOKDETAILS1DataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnMEMBERID As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnVEG As DataColumn
        
        Private columnNONVEG As DataColumn
        
        Private columnGUESTNAME As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnFROMTIME As DataColumn
        
        Private columnTOTIME As DataColumn
        
        Private columnPARTYRECEIPTNO As DataColumn
        
        Private columnPARTYRECEIPTDATE As DataColumn
        
        Private columnPAYMENTMODE As DataColumn
        
        Private columnReceiptheaddesc As DataColumn
        
        Private columnAMOUNT As DataColumn
        
        Private columnRECEIPTTYPE As DataColumn
        
        Private columnadduserid As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_BOOKDETAILS1")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property MEMBERIDColumn As DataColumn
            Get
                Return Me.columnMEMBERID
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property VEGColumn As DataColumn
            Get
                Return Me.columnVEG
            End Get
        End Property
        
        Friend ReadOnly Property NONVEGColumn As DataColumn
            Get
                Return Me.columnNONVEG
            End Get
        End Property
        
        Friend ReadOnly Property GUESTNAMEColumn As DataColumn
            Get
                Return Me.columnGUESTNAME
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property FROMTIMEColumn As DataColumn
            Get
                Return Me.columnFROMTIME
            End Get
        End Property
        
        Friend ReadOnly Property TOTIMEColumn As DataColumn
            Get
                Return Me.columnTOTIME
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTNOColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTNO
            End Get
        End Property
        
        Friend ReadOnly Property PARTYRECEIPTDATEColumn As DataColumn
            Get
                Return Me.columnPARTYRECEIPTDATE
            End Get
        End Property
        
        Friend ReadOnly Property PAYMENTMODEColumn As DataColumn
            Get
                Return Me.columnPAYMENTMODE
            End Get
        End Property
        
        Friend ReadOnly Property ReceiptheaddescColumn As DataColumn
            Get
                Return Me.columnReceiptheaddesc
            End Get
        End Property
        
        Friend ReadOnly Property AMOUNTColumn As DataColumn
            Get
                Return Me.columnAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property RECEIPTTYPEColumn As DataColumn
            Get
                Return Me.columnRECEIPTTYPE
            End Get
        End Property
        
        Friend ReadOnly Property adduseridColumn As DataColumn
            Get
                Return Me.columnadduserid
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_BOOKDETAILS1Row
            Get
                Return CType(Me.Rows(index),PARTY_BOOKDETAILS1Row)
            End Get
        End Property
        
        Public Event PARTY_BOOKDETAILS1RowChanged As PARTY_BOOKDETAILS1RowChangeEventHandler
        
        Public Event PARTY_BOOKDETAILS1RowChanging As PARTY_BOOKDETAILS1RowChangeEventHandler
        
        Public Event PARTY_BOOKDETAILS1RowDeleted As PARTY_BOOKDETAILS1RowChangeEventHandler
        
        Public Event PARTY_BOOKDETAILS1RowDeleting As PARTY_BOOKDETAILS1RowChangeEventHandler
        
        Public Overloads Sub AddPARTY_BOOKDETAILS1Row(ByVal row As PARTY_BOOKDETAILS1Row)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_BOOKDETAILS1Row( _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal MEMBERID As String,  _
                    ByVal ASSOCIATENAME As String,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal VEG As String,  _
                    ByVal NONVEG As String,  _
                    ByVal GUESTNAME As String,  _
                    ByVal HALLCODE As String,  _
                    ByVal FROMTIME As Decimal,  _
                    ByVal TOTIME As Decimal,  _
                    ByVal PARTYRECEIPTNO As String,  _
                    ByVal PARTYRECEIPTDATE As Date,  _
                    ByVal PAYMENTMODE As String,  _
                    ByVal Receiptheaddesc As String,  _
                    ByVal AMOUNT As Decimal,  _
                    ByVal RECEIPTTYPE As String,  _
                    ByVal adduserid As String) As PARTY_BOOKDETAILS1Row
            Dim rowPARTY_BOOKDETAILS1Row As PARTY_BOOKDETAILS1Row = CType(Me.NewRow,PARTY_BOOKDETAILS1Row)
            rowPARTY_BOOKDETAILS1Row.ItemArray = New Object() {BOOKINGNO, BOOKINGDATE, PARTYDATE, MEMBERID, ASSOCIATENAME, DESCRIPTION, OCCUPANCY, VEG, NONVEG, GUESTNAME, HALLCODE, FROMTIME, TOTIME, PARTYRECEIPTNO, PARTYRECEIPTDATE, PAYMENTMODE, Receiptheaddesc, AMOUNT, RECEIPTTYPE, adduserid}
            Me.Rows.Add(rowPARTY_BOOKDETAILS1Row)
            Return rowPARTY_BOOKDETAILS1Row
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_BOOKDETAILS1DataTable = CType(MyBase.Clone,PARTY_BOOKDETAILS1DataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_BOOKDETAILS1DataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnMEMBERID = Me.Columns("MEMBERID")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnVEG = Me.Columns("VEG")
            Me.columnNONVEG = Me.Columns("NONVEG")
            Me.columnGUESTNAME = Me.Columns("GUESTNAME")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnFROMTIME = Me.Columns("FROMTIME")
            Me.columnTOTIME = Me.Columns("TOTIME")
            Me.columnPARTYRECEIPTNO = Me.Columns("PARTYRECEIPTNO")
            Me.columnPARTYRECEIPTDATE = Me.Columns("PARTYRECEIPTDATE")
            Me.columnPAYMENTMODE = Me.Columns("PAYMENTMODE")
            Me.columnReceiptheaddesc = Me.Columns("Receiptheaddesc")
            Me.columnAMOUNT = Me.Columns("AMOUNT")
            Me.columnRECEIPTTYPE = Me.Columns("RECEIPTTYPE")
            Me.columnadduserid = Me.Columns("adduserid")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnMEMBERID = New DataColumn("MEMBERID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMEMBERID)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnVEG = New DataColumn("VEG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnVEG)
            Me.columnNONVEG = New DataColumn("NONVEG", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnNONVEG)
            Me.columnGUESTNAME = New DataColumn("GUESTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGUESTNAME)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnFROMTIME = New DataColumn("FROMTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMTIME)
            Me.columnTOTIME = New DataColumn("TOTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTIME)
            Me.columnPARTYRECEIPTNO = New DataColumn("PARTYRECEIPTNO", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTNO)
            Me.columnPARTYRECEIPTDATE = New DataColumn("PARTYRECEIPTDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYRECEIPTDATE)
            Me.columnPAYMENTMODE = New DataColumn("PAYMENTMODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPAYMENTMODE)
            Me.columnReceiptheaddesc = New DataColumn("Receiptheaddesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnReceiptheaddesc)
            Me.columnAMOUNT = New DataColumn("AMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAMOUNT)
            Me.columnRECEIPTTYPE = New DataColumn("RECEIPTTYPE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnRECEIPTTYPE)
            Me.columnadduserid = New DataColumn("adduserid", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnadduserid)
        End Sub
        
        Public Function NewPARTY_BOOKDETAILS1Row() As PARTY_BOOKDETAILS1Row
            Return CType(Me.NewRow,PARTY_BOOKDETAILS1Row)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_BOOKDETAILS1Row(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_BOOKDETAILS1Row)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_BOOKDETAILS1RowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_BOOKDETAILS1RowChanged(Me, New PARTY_BOOKDETAILS1RowChangeEvent(CType(e.Row,PARTY_BOOKDETAILS1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_BOOKDETAILS1RowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_BOOKDETAILS1RowChanging(Me, New PARTY_BOOKDETAILS1RowChangeEvent(CType(e.Row,PARTY_BOOKDETAILS1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_BOOKDETAILS1RowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_BOOKDETAILS1RowDeleted(Me, New PARTY_BOOKDETAILS1RowChangeEvent(CType(e.Row,PARTY_BOOKDETAILS1Row), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_BOOKDETAILS1RowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_BOOKDETAILS1RowDeleting(Me, New PARTY_BOOKDETAILS1RowChangeEvent(CType(e.Row,PARTY_BOOKDETAILS1Row), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_BOOKDETAILS1Row(ByVal row As PARTY_BOOKDETAILS1Row)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BOOKDETAILS1Row
        Inherits DataRow
        
        Private tablePARTY_BOOKDETAILS1 As PARTY_BOOKDETAILS1DataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_BOOKDETAILS1 = CType(Me.Table,PARTY_BOOKDETAILS1DataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.BOOKINGNOColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property MEMBERID As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.MEMBERIDColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.MEMBERIDColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property VEG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.VEGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.VEGColumn) = value
            End Set
        End Property
        
        Public Property NONVEG As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.NONVEGColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.NONVEGColumn) = value
            End Set
        End Property
        
        Public Property GUESTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.GUESTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.GUESTNAMEColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property FROMTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.FROMTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.FROMTIMEColumn) = value
            End Set
        End Property
        
        Public Property TOTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.TOTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.TOTIMEColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTNO As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.PARTYRECEIPTNOColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.PARTYRECEIPTNOColumn) = value
            End Set
        End Property
        
        Public Property PARTYRECEIPTDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.PARTYRECEIPTDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.PARTYRECEIPTDATEColumn) = value
            End Set
        End Property
        
        Public Property PAYMENTMODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.PAYMENTMODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.PAYMENTMODEColumn) = value
            End Set
        End Property
        
        Public Property Receiptheaddesc As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.ReceiptheaddescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.ReceiptheaddescColumn) = value
            End Set
        End Property
        
        Public Property AMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.AMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.AMOUNTColumn) = value
            End Set
        End Property
        
        Public Property RECEIPTTYPE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.RECEIPTTYPEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.RECEIPTTYPEColumn) = value
            End Set
        End Property
        
        Public Property adduserid As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BOOKDETAILS1.adduseridColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BOOKDETAILS1.adduseridColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.BOOKINGNOColumn)
        End Function
        
        Public Sub SetBOOKINGNONull()
            Me(Me.tablePARTY_BOOKDETAILS1.BOOKINGNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_BOOKDETAILS1.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_BOOKDETAILS1.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMEMBERIDNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.MEMBERIDColumn)
        End Function
        
        Public Sub SetMEMBERIDNull()
            Me(Me.tablePARTY_BOOKDETAILS1.MEMBERIDColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tablePARTY_BOOKDETAILS1.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablePARTY_BOOKDETAILS1.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablePARTY_BOOKDETAILS1.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsVEGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.VEGColumn)
        End Function
        
        Public Sub SetVEGNull()
            Me(Me.tablePARTY_BOOKDETAILS1.VEGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsNONVEGNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.NONVEGColumn)
        End Function
        
        Public Sub SetNONVEGNull()
            Me(Me.tablePARTY_BOOKDETAILS1.NONVEGColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGUESTNAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.GUESTNAMEColumn)
        End Function
        
        Public Sub SetGUESTNAMENull()
            Me(Me.tablePARTY_BOOKDETAILS1.GUESTNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablePARTY_BOOKDETAILS1.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.FROMTIMEColumn)
        End Function
        
        Public Sub SetFROMTIMENull()
            Me(Me.tablePARTY_BOOKDETAILS1.FROMTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTIMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.TOTIMEColumn)
        End Function
        
        Public Sub SetTOTIMENull()
            Me(Me.tablePARTY_BOOKDETAILS1.TOTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTNONull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.PARTYRECEIPTNOColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTNONull()
            Me(Me.tablePARTY_BOOKDETAILS1.PARTYRECEIPTNOColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYRECEIPTDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.PARTYRECEIPTDATEColumn)
        End Function
        
        Public Sub SetPARTYRECEIPTDATENull()
            Me(Me.tablePARTY_BOOKDETAILS1.PARTYRECEIPTDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPAYMENTMODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.PAYMENTMODEColumn)
        End Function
        
        Public Sub SetPAYMENTMODENull()
            Me(Me.tablePARTY_BOOKDETAILS1.PAYMENTMODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsReceiptheaddescNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.ReceiptheaddescColumn)
        End Function
        
        Public Sub SetReceiptheaddescNull()
            Me(Me.tablePARTY_BOOKDETAILS1.ReceiptheaddescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.AMOUNTColumn)
        End Function
        
        Public Sub SetAMOUNTNull()
            Me(Me.tablePARTY_BOOKDETAILS1.AMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsRECEIPTTYPENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.RECEIPTTYPEColumn)
        End Function
        
        Public Sub SetRECEIPTTYPENull()
            Me(Me.tablePARTY_BOOKDETAILS1.RECEIPTTYPEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsadduseridNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BOOKDETAILS1.adduseridColumn)
        End Function
        
        Public Sub SetadduseridNull()
            Me(Me.tablePARTY_BOOKDETAILS1.adduseridColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BOOKDETAILS1RowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_BOOKDETAILS1Row
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_BOOKDETAILS1Row, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_BOOKDETAILS1Row
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceipt_viewDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnHALLCODE As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnFROMTIME As DataColumn
        
        Private columnTOTIME As DataColumn
        
        Private columnHALLAMOUNT As DataColumn
        
        Private columnHALLTAXAMOUNT As DataColumn
        
        Private columnhalltypedesc As DataColumn
        
        Private columnsedeposit As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Private columnGUESTNAME As DataColumn
        
        Private columnFREERESON As DataColumn
        
        Private columnCCELL As DataColumn
        
        Private columnDESCRIPTION As DataColumn
        
        Private columnOCCUPANCY As DataColumn
        
        Private columnHALLNETAMOUNT As DataColumn
        
        Private columnDISCOUNT As DataColumn
        
        Private columnDISCOUNTAMT As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Friend Sub New()
            MyBase.New("partyreceipt_view")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property HALLCODEColumn As DataColumn
            Get
                Return Me.columnHALLCODE
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property FROMTIMEColumn As DataColumn
            Get
                Return Me.columnFROMTIME
            End Get
        End Property
        
        Friend ReadOnly Property TOTIMEColumn As DataColumn
            Get
                Return Me.columnTOTIME
            End Get
        End Property
        
        Friend ReadOnly Property HALLAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property HALLTAXAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLTAXAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property halltypedescColumn As DataColumn
            Get
                Return Me.columnhalltypedesc
            End Get
        End Property
        
        Friend ReadOnly Property sedepositColumn As DataColumn
            Get
                Return Me.columnsedeposit
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Friend ReadOnly Property GUESTNAMEColumn As DataColumn
            Get
                Return Me.columnGUESTNAME
            End Get
        End Property
        
        Friend ReadOnly Property FREERESONColumn As DataColumn
            Get
                Return Me.columnFREERESON
            End Get
        End Property
        
        Friend ReadOnly Property CCELLColumn As DataColumn
            Get
                Return Me.columnCCELL
            End Get
        End Property
        
        Friend ReadOnly Property DESCRIPTIONColumn As DataColumn
            Get
                Return Me.columnDESCRIPTION
            End Get
        End Property
        
        Friend ReadOnly Property OCCUPANCYColumn As DataColumn
            Get
                Return Me.columnOCCUPANCY
            End Get
        End Property
        
        Friend ReadOnly Property HALLNETAMOUNTColumn As DataColumn
            Get
                Return Me.columnHALLNETAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property DISCOUNTColumn As DataColumn
            Get
                Return Me.columnDISCOUNT
            End Get
        End Property
        
        Friend ReadOnly Property DISCOUNTAMTColumn As DataColumn
            Get
                Return Me.columnDISCOUNTAMT
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As partyreceipt_viewRow
            Get
                Return CType(Me.Rows(index),partyreceipt_viewRow)
            End Get
        End Property
        
        Public Event partyreceipt_viewRowChanged As partyreceipt_viewRowChangeEventHandler
        
        Public Event partyreceipt_viewRowChanging As partyreceipt_viewRowChangeEventHandler
        
        Public Event partyreceipt_viewRowDeleted As partyreceipt_viewRowChangeEventHandler
        
        Public Event partyreceipt_viewRowDeleting As partyreceipt_viewRowChangeEventHandler
        
        Public Overloads Sub Addpartyreceipt_viewRow(ByVal row As partyreceipt_viewRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function Addpartyreceipt_viewRow( _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal HALLCODE As String,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal FROMTIME As Decimal,  _
                    ByVal TOTIME As Decimal,  _
                    ByVal HALLAMOUNT As Decimal,  _
                    ByVal HALLTAXAMOUNT As Decimal,  _
                    ByVal halltypedesc As String,  _
                    ByVal sedeposit As Decimal,  _
                    ByVal MCODE As String,  _
                    ByVal ASSOCIATENAME As String,  _
                    ByVal GUESTNAME As String,  _
                    ByVal FREERESON As String,  _
                    ByVal CCELL As String,  _
                    ByVal DESCRIPTION As String,  _
                    ByVal OCCUPANCY As Decimal,  _
                    ByVal HALLNETAMOUNT As Decimal,  _
                    ByVal DISCOUNT As Decimal,  _
                    ByVal DISCOUNTAMT As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal) As partyreceipt_viewRow
            Dim rowpartyreceipt_viewRow As partyreceipt_viewRow = CType(Me.NewRow,partyreceipt_viewRow)
            rowpartyreceipt_viewRow.ItemArray = New Object() {BOOKINGNO, HALLCODE, BOOKINGDATE, PARTYDATE, FROMTIME, TOTIME, HALLAMOUNT, HALLTAXAMOUNT, halltypedesc, sedeposit, MCODE, ASSOCIATENAME, GUESTNAME, FREERESON, CCELL, DESCRIPTION, OCCUPANCY, HALLNETAMOUNT, DISCOUNT, DISCOUNTAMT, TOTALAMOUNT}
            Me.Rows.Add(rowpartyreceipt_viewRow)
            Return rowpartyreceipt_viewRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As partyreceipt_viewDataTable = CType(MyBase.Clone,partyreceipt_viewDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New partyreceipt_viewDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnHALLCODE = Me.Columns("HALLCODE")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnFROMTIME = Me.Columns("FROMTIME")
            Me.columnTOTIME = Me.Columns("TOTIME")
            Me.columnHALLAMOUNT = Me.Columns("HALLAMOUNT")
            Me.columnHALLTAXAMOUNT = Me.Columns("HALLTAXAMOUNT")
            Me.columnhalltypedesc = Me.Columns("halltypedesc")
            Me.columnsedeposit = Me.Columns("sedeposit")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
            Me.columnGUESTNAME = Me.Columns("GUESTNAME")
            Me.columnFREERESON = Me.Columns("FREERESON")
            Me.columnCCELL = Me.Columns("CCELL")
            Me.columnDESCRIPTION = Me.Columns("DESCRIPTION")
            Me.columnOCCUPANCY = Me.Columns("OCCUPANCY")
            Me.columnHALLNETAMOUNT = Me.Columns("HALLNETAMOUNT")
            Me.columnDISCOUNT = Me.Columns("DISCOUNT")
            Me.columnDISCOUNTAMT = Me.Columns("DISCOUNTAMT")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnHALLCODE = New DataColumn("HALLCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLCODE)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnFROMTIME = New DataColumn("FROMTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFROMTIME)
            Me.columnTOTIME = New DataColumn("TOTIME", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTIME)
            Me.columnHALLAMOUNT = New DataColumn("HALLAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLAMOUNT)
            Me.columnHALLTAXAMOUNT = New DataColumn("HALLTAXAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLTAXAMOUNT)
            Me.columnhalltypedesc = New DataColumn("halltypedesc", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnhalltypedesc)
            Me.columnsedeposit = New DataColumn("sedeposit", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnsedeposit)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnGUESTNAME = New DataColumn("GUESTNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnGUESTNAME)
            Me.columnFREERESON = New DataColumn("FREERESON", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFREERESON)
            Me.columnCCELL = New DataColumn("CCELL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCCELL)
            Me.columnDESCRIPTION = New DataColumn("DESCRIPTION", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDESCRIPTION)
            Me.columnOCCUPANCY = New DataColumn("OCCUPANCY", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOCCUPANCY)
            Me.columnHALLNETAMOUNT = New DataColumn("HALLNETAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnHALLNETAMOUNT)
            Me.columnDISCOUNT = New DataColumn("DISCOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDISCOUNT)
            Me.columnDISCOUNTAMT = New DataColumn("DISCOUNTAMT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDISCOUNTAMT)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnFREERESON.ReadOnly = true
            Me.columnCCELL.ReadOnly = true
        End Sub
        
        Public Function Newpartyreceipt_viewRow() As partyreceipt_viewRow
            Return CType(Me.NewRow,partyreceipt_viewRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New partyreceipt_viewRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(partyreceipt_viewRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.partyreceipt_viewRowChangedEvent) Is Nothing) Then
                RaiseEvent partyreceipt_viewRowChanged(Me, New partyreceipt_viewRowChangeEvent(CType(e.Row,partyreceipt_viewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.partyreceipt_viewRowChangingEvent) Is Nothing) Then
                RaiseEvent partyreceipt_viewRowChanging(Me, New partyreceipt_viewRowChangeEvent(CType(e.Row,partyreceipt_viewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.partyreceipt_viewRowDeletedEvent) Is Nothing) Then
                RaiseEvent partyreceipt_viewRowDeleted(Me, New partyreceipt_viewRowChangeEvent(CType(e.Row,partyreceipt_viewRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.partyreceipt_viewRowDeletingEvent) Is Nothing) Then
                RaiseEvent partyreceipt_viewRowDeleting(Me, New partyreceipt_viewRowChangeEvent(CType(e.Row,partyreceipt_viewRow), e.Action))
            End If
        End Sub
        
        Public Sub Removepartyreceipt_viewRow(ByVal row As partyreceipt_viewRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceipt_viewRow
        Inherits DataRow
        
        Private tablepartyreceipt_view As partyreceipt_viewDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablepartyreceipt_view = CType(Me.Table,partyreceipt_viewDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablepartyreceipt_view.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablepartyreceipt_view.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property HALLCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.HALLCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.HALLCODEColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property FROMTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.FROMTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.FROMTIMEColumn) = value
            End Set
        End Property
        
        Public Property TOTIME As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.TOTIMEColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.TOTIMEColumn) = value
            End Set
        End Property
        
        Public Property HALLAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.HALLAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.HALLAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property HALLTAXAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.HALLTAXAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.HALLTAXAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property halltypedesc As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.halltypedescColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.halltypedescColumn) = value
            End Set
        End Property
        
        Public Property sedeposit As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.sedepositColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.sedepositColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Property GUESTNAME As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.GUESTNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.GUESTNAMEColumn) = value
            End Set
        End Property
        
        Public Property FREERESON As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.FREERESONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.FREERESONColumn) = value
            End Set
        End Property
        
        Public Property CCELL As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.CCELLColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.CCELLColumn) = value
            End Set
        End Property
        
        Public Property DESCRIPTION As String
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.DESCRIPTIONColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.DESCRIPTIONColumn) = value
            End Set
        End Property
        
        Public Property OCCUPANCY As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.OCCUPANCYColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.OCCUPANCYColumn) = value
            End Set
        End Property
        
        Public Property HALLNETAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.HALLNETAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.HALLNETAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property DISCOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.DISCOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.DISCOUNTColumn) = value
            End Set
        End Property
        
        Public Property DISCOUNTAMT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.DISCOUNTAMTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.DISCOUNTAMTColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablepartyreceipt_view.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepartyreceipt_view.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Function IsHALLCODENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.HALLCODEColumn)
        End Function
        
        Public Sub SetHALLCODENull()
            Me(Me.tablepartyreceipt_view.HALLCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablepartyreceipt_view.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablepartyreceipt_view.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFROMTIMENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.FROMTIMEColumn)
        End Function
        
        Public Sub SetFROMTIMENull()
            Me(Me.tablepartyreceipt_view.FROMTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTIMENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.TOTIMEColumn)
        End Function
        
        Public Sub SetTOTIMENull()
            Me(Me.tablepartyreceipt_view.TOTIMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.HALLAMOUNTColumn)
        End Function
        
        Public Sub SetHALLAMOUNTNull()
            Me(Me.tablepartyreceipt_view.HALLAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLTAXAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.HALLTAXAMOUNTColumn)
        End Function
        
        Public Sub SetHALLTAXAMOUNTNull()
            Me(Me.tablepartyreceipt_view.HALLTAXAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IshalltypedescNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.halltypedescColumn)
        End Function
        
        Public Sub SethalltypedescNull()
            Me(Me.tablepartyreceipt_view.halltypedescColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IssedepositNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.sedepositColumn)
        End Function
        
        Public Sub SetsedepositNull()
            Me(Me.tablepartyreceipt_view.sedepositColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablepartyreceipt_view.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tablepartyreceipt_view.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsGUESTNAMENull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.GUESTNAMEColumn)
        End Function
        
        Public Sub SetGUESTNAMENull()
            Me(Me.tablepartyreceipt_view.GUESTNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFREERESONNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.FREERESONColumn)
        End Function
        
        Public Sub SetFREERESONNull()
            Me(Me.tablepartyreceipt_view.FREERESONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCCELLNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.CCELLColumn)
        End Function
        
        Public Sub SetCCELLNull()
            Me(Me.tablepartyreceipt_view.CCELLColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDESCRIPTIONNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.DESCRIPTIONColumn)
        End Function
        
        Public Sub SetDESCRIPTIONNull()
            Me(Me.tablepartyreceipt_view.DESCRIPTIONColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOCCUPANCYNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.OCCUPANCYColumn)
        End Function
        
        Public Sub SetOCCUPANCYNull()
            Me(Me.tablepartyreceipt_view.OCCUPANCYColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsHALLNETAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.HALLNETAMOUNTColumn)
        End Function
        
        Public Sub SetHALLNETAMOUNTNull()
            Me(Me.tablepartyreceipt_view.HALLNETAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDISCOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.DISCOUNTColumn)
        End Function
        
        Public Sub SetDISCOUNTNull()
            Me(Me.tablepartyreceipt_view.DISCOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDISCOUNTAMTNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.DISCOUNTAMTColumn)
        End Function
        
        Public Sub SetDISCOUNTAMTNull()
            Me(Me.tablepartyreceipt_view.DISCOUNTAMTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablepartyreceipt_view.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablepartyreceipt_view.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class partyreceipt_viewRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As partyreceipt_viewRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As partyreceipt_viewRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As partyreceipt_viewRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BILLDETAILSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBOOKINGNO As DataColumn
        
        Private columnBOOKINGDATE As DataColumn
        
        Private columnPARTYDATE As DataColumn
        
        Private columnBARAMOUNT As DataColumn
        
        Private columnOTHERSAMOUNT As DataColumn
        
        Private columnCATERINGAMOUNT As DataColumn
        
        Private columnBARTAX As DataColumn
        
        Private columnOTHERSTAX As DataColumn
        
        Private columnCATERINGTAX As DataColumn
        
        Private columnBARSERTAX As DataColumn
        
        Private columnOTHERSSERTAX As DataColumn
        
        Private columnCATERINGSERTAX As DataColumn
        
        Private columndiscount As DataColumn
        
        Private columnTOTALAMOUNT As DataColumn
        
        Private columnITEMTOTAMOUNT As DataColumn
        
        Private columnoccupancy As DataColumn
        
        Private columnmenucode As DataColumn
        
        Private columnrate As DataColumn
        
        Private columnmenuamount As DataColumn
        
        Private columnbanquethallamount As DataColumn
        
        Private columnMCODE As DataColumn
        
        Private columnASSOCIATENAME As DataColumn
        
        Friend Sub New()
            MyBase.New("PARTY_BILLDETAILS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGNOColumn As DataColumn
            Get
                Return Me.columnBOOKINGNO
            End Get
        End Property
        
        Friend ReadOnly Property BOOKINGDATEColumn As DataColumn
            Get
                Return Me.columnBOOKINGDATE
            End Get
        End Property
        
        Friend ReadOnly Property PARTYDATEColumn As DataColumn
            Get
                Return Me.columnPARTYDATE
            End Get
        End Property
        
        Friend ReadOnly Property BARAMOUNTColumn As DataColumn
            Get
                Return Me.columnBARAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property OTHERSAMOUNTColumn As DataColumn
            Get
                Return Me.columnOTHERSAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property CATERINGAMOUNTColumn As DataColumn
            Get
                Return Me.columnCATERINGAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property BARTAXColumn As DataColumn
            Get
                Return Me.columnBARTAX
            End Get
        End Property
        
        Friend ReadOnly Property OTHERSTAXColumn As DataColumn
            Get
                Return Me.columnOTHERSTAX
            End Get
        End Property
        
        Friend ReadOnly Property CATERINGTAXColumn As DataColumn
            Get
                Return Me.columnCATERINGTAX
            End Get
        End Property
        
        Friend ReadOnly Property BARSERTAXColumn As DataColumn
            Get
                Return Me.columnBARSERTAX
            End Get
        End Property
        
        Friend ReadOnly Property OTHERSSERTAXColumn As DataColumn
            Get
                Return Me.columnOTHERSSERTAX
            End Get
        End Property
        
        Friend ReadOnly Property CATERINGSERTAXColumn As DataColumn
            Get
                Return Me.columnCATERINGSERTAX
            End Get
        End Property
        
        Friend ReadOnly Property discountColumn As DataColumn
            Get
                Return Me.columndiscount
            End Get
        End Property
        
        Friend ReadOnly Property TOTALAMOUNTColumn As DataColumn
            Get
                Return Me.columnTOTALAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property ITEMTOTAMOUNTColumn As DataColumn
            Get
                Return Me.columnITEMTOTAMOUNT
            End Get
        End Property
        
        Friend ReadOnly Property occupancyColumn As DataColumn
            Get
                Return Me.columnoccupancy
            End Get
        End Property
        
        Friend ReadOnly Property menucodeColumn As DataColumn
            Get
                Return Me.columnmenucode
            End Get
        End Property
        
        Friend ReadOnly Property rateColumn As DataColumn
            Get
                Return Me.columnrate
            End Get
        End Property
        
        Friend ReadOnly Property menuamountColumn As DataColumn
            Get
                Return Me.columnmenuamount
            End Get
        End Property
        
        Friend ReadOnly Property banquethallamountColumn As DataColumn
            Get
                Return Me.columnbanquethallamount
            End Get
        End Property
        
        Friend ReadOnly Property MCODEColumn As DataColumn
            Get
                Return Me.columnMCODE
            End Get
        End Property
        
        Friend ReadOnly Property ASSOCIATENAMEColumn As DataColumn
            Get
                Return Me.columnASSOCIATENAME
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As PARTY_BILLDETAILSRow
            Get
                Return CType(Me.Rows(index),PARTY_BILLDETAILSRow)
            End Get
        End Property
        
        Public Event PARTY_BILLDETAILSRowChanged As PARTY_BILLDETAILSRowChangeEventHandler
        
        Public Event PARTY_BILLDETAILSRowChanging As PARTY_BILLDETAILSRowChangeEventHandler
        
        Public Event PARTY_BILLDETAILSRowDeleted As PARTY_BILLDETAILSRowChangeEventHandler
        
        Public Event PARTY_BILLDETAILSRowDeleting As PARTY_BILLDETAILSRowChangeEventHandler
        
        Public Overloads Sub AddPARTY_BILLDETAILSRow(ByVal row As PARTY_BILLDETAILSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddPARTY_BILLDETAILSRow( _
                    ByVal BOOKINGNO As Decimal,  _
                    ByVal BOOKINGDATE As Date,  _
                    ByVal PARTYDATE As Date,  _
                    ByVal BARAMOUNT As Decimal,  _
                    ByVal OTHERSAMOUNT As Decimal,  _
                    ByVal CATERINGAMOUNT As Decimal,  _
                    ByVal BARTAX As Decimal,  _
                    ByVal OTHERSTAX As Decimal,  _
                    ByVal CATERINGTAX As Decimal,  _
                    ByVal BARSERTAX As Decimal,  _
                    ByVal OTHERSSERTAX As Decimal,  _
                    ByVal CATERINGSERTAX As Decimal,  _
                    ByVal discount As Decimal,  _
                    ByVal TOTALAMOUNT As Decimal,  _
                    ByVal ITEMTOTAMOUNT As Decimal,  _
                    ByVal occupancy As Decimal,  _
                    ByVal menucode As String,  _
                    ByVal rate As Decimal,  _
                    ByVal menuamount As Decimal,  _
                    ByVal banquethallamount As Decimal,  _
                    ByVal MCODE As String,  _
                    ByVal ASSOCIATENAME As String) As PARTY_BILLDETAILSRow
            Dim rowPARTY_BILLDETAILSRow As PARTY_BILLDETAILSRow = CType(Me.NewRow,PARTY_BILLDETAILSRow)
            rowPARTY_BILLDETAILSRow.ItemArray = New Object() {BOOKINGNO, BOOKINGDATE, PARTYDATE, BARAMOUNT, OTHERSAMOUNT, CATERINGAMOUNT, BARTAX, OTHERSTAX, CATERINGTAX, BARSERTAX, OTHERSSERTAX, CATERINGSERTAX, discount, TOTALAMOUNT, ITEMTOTAMOUNT, occupancy, menucode, rate, menuamount, banquethallamount, MCODE, ASSOCIATENAME}
            Me.Rows.Add(rowPARTY_BILLDETAILSRow)
            Return rowPARTY_BILLDETAILSRow
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As PARTY_BILLDETAILSDataTable = CType(MyBase.Clone,PARTY_BILLDETAILSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New PARTY_BILLDETAILSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBOOKINGNO = Me.Columns("BOOKINGNO")
            Me.columnBOOKINGDATE = Me.Columns("BOOKINGDATE")
            Me.columnPARTYDATE = Me.Columns("PARTYDATE")
            Me.columnBARAMOUNT = Me.Columns("BARAMOUNT")
            Me.columnOTHERSAMOUNT = Me.Columns("OTHERSAMOUNT")
            Me.columnCATERINGAMOUNT = Me.Columns("CATERINGAMOUNT")
            Me.columnBARTAX = Me.Columns("BARTAX")
            Me.columnOTHERSTAX = Me.Columns("OTHERSTAX")
            Me.columnCATERINGTAX = Me.Columns("CATERINGTAX")
            Me.columnBARSERTAX = Me.Columns("BARSERTAX")
            Me.columnOTHERSSERTAX = Me.Columns("OTHERSSERTAX")
            Me.columnCATERINGSERTAX = Me.Columns("CATERINGSERTAX")
            Me.columndiscount = Me.Columns("discount")
            Me.columnTOTALAMOUNT = Me.Columns("TOTALAMOUNT")
            Me.columnITEMTOTAMOUNT = Me.Columns("ITEMTOTAMOUNT")
            Me.columnoccupancy = Me.Columns("occupancy")
            Me.columnmenucode = Me.Columns("menucode")
            Me.columnrate = Me.Columns("rate")
            Me.columnmenuamount = Me.Columns("menuamount")
            Me.columnbanquethallamount = Me.Columns("banquethallamount")
            Me.columnMCODE = Me.Columns("MCODE")
            Me.columnASSOCIATENAME = Me.Columns("ASSOCIATENAME")
        End Sub
        
        Private Sub InitClass()
            Me.columnBOOKINGNO = New DataColumn("BOOKINGNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGNO)
            Me.columnBOOKINGDATE = New DataColumn("BOOKINGDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBOOKINGDATE)
            Me.columnPARTYDATE = New DataColumn("PARTYDATE", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPARTYDATE)
            Me.columnBARAMOUNT = New DataColumn("BARAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBARAMOUNT)
            Me.columnOTHERSAMOUNT = New DataColumn("OTHERSAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOTHERSAMOUNT)
            Me.columnCATERINGAMOUNT = New DataColumn("CATERINGAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATERINGAMOUNT)
            Me.columnBARTAX = New DataColumn("BARTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBARTAX)
            Me.columnOTHERSTAX = New DataColumn("OTHERSTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOTHERSTAX)
            Me.columnCATERINGTAX = New DataColumn("CATERINGTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATERINGTAX)
            Me.columnBARSERTAX = New DataColumn("BARSERTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBARSERTAX)
            Me.columnOTHERSSERTAX = New DataColumn("OTHERSSERTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnOTHERSSERTAX)
            Me.columnCATERINGSERTAX = New DataColumn("CATERINGSERTAX", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCATERINGSERTAX)
            Me.columndiscount = New DataColumn("discount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columndiscount)
            Me.columnTOTALAMOUNT = New DataColumn("TOTALAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnTOTALAMOUNT)
            Me.columnITEMTOTAMOUNT = New DataColumn("ITEMTOTAMOUNT", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnITEMTOTAMOUNT)
            Me.columnoccupancy = New DataColumn("occupancy", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnoccupancy)
            Me.columnmenucode = New DataColumn("menucode", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmenucode)
            Me.columnrate = New DataColumn("rate", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnrate)
            Me.columnmenuamount = New DataColumn("menuamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnmenuamount)
            Me.columnbanquethallamount = New DataColumn("banquethallamount", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnbanquethallamount)
            Me.columnMCODE = New DataColumn("MCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnMCODE)
            Me.columnASSOCIATENAME = New DataColumn("ASSOCIATENAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnASSOCIATENAME)
            Me.columnBOOKINGNO.AllowDBNull = false
            Me.columnBARAMOUNT.ReadOnly = true
            Me.columnOTHERSAMOUNT.ReadOnly = true
            Me.columnCATERINGAMOUNT.ReadOnly = true
            Me.columnBARTAX.ReadOnly = true
            Me.columnOTHERSTAX.ReadOnly = true
            Me.columnCATERINGTAX.ReadOnly = true
            Me.columnBARSERTAX.ReadOnly = true
            Me.columnOTHERSSERTAX.ReadOnly = true
            Me.columnCATERINGSERTAX.ReadOnly = true
            Me.columndiscount.ReadOnly = true
            Me.columnoccupancy.ReadOnly = true
            Me.columnmenucode.AllowDBNull = false
            Me.columnbanquethallamount.ReadOnly = true
        End Sub
        
        Public Function NewPARTY_BILLDETAILSRow() As PARTY_BILLDETAILSRow
            Return CType(Me.NewRow,PARTY_BILLDETAILSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New PARTY_BILLDETAILSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARTY_BILLDETAILSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARTY_BILLDETAILSRowChangedEvent) Is Nothing) Then
                RaiseEvent PARTY_BILLDETAILSRowChanged(Me, New PARTY_BILLDETAILSRowChangeEvent(CType(e.Row,PARTY_BILLDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARTY_BILLDETAILSRowChangingEvent) Is Nothing) Then
                RaiseEvent PARTY_BILLDETAILSRowChanging(Me, New PARTY_BILLDETAILSRowChangeEvent(CType(e.Row,PARTY_BILLDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARTY_BILLDETAILSRowDeletedEvent) Is Nothing) Then
                RaiseEvent PARTY_BILLDETAILSRowDeleted(Me, New PARTY_BILLDETAILSRowChangeEvent(CType(e.Row,PARTY_BILLDETAILSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARTY_BILLDETAILSRowDeletingEvent) Is Nothing) Then
                RaiseEvent PARTY_BILLDETAILSRowDeleting(Me, New PARTY_BILLDETAILSRowChangeEvent(CType(e.Row,PARTY_BILLDETAILSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemovePARTY_BILLDETAILSRow(ByVal row As PARTY_BILLDETAILSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BILLDETAILSRow
        Inherits DataRow
        
        Private tablePARTY_BILLDETAILS As PARTY_BILLDETAILSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tablePARTY_BILLDETAILS = CType(Me.Table,PARTY_BILLDETAILSDataTable)
        End Sub
        
        Public Property BOOKINGNO As Decimal
            Get
                Return CType(Me(Me.tablePARTY_BILLDETAILS.BOOKINGNOColumn),Decimal)
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.BOOKINGNOColumn) = value
            End Set
        End Property
        
        Public Property BOOKINGDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.BOOKINGDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.BOOKINGDATEColumn) = value
            End Set
        End Property
        
        Public Property PARTYDATE As Date
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.PARTYDATEColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.PARTYDATEColumn) = value
            End Set
        End Property
        
        Public Property BARAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.BARAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.BARAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property OTHERSAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.OTHERSAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.OTHERSAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property CATERINGAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.CATERINGAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.CATERINGAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property BARTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.BARTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.BARTAXColumn) = value
            End Set
        End Property
        
        Public Property OTHERSTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.OTHERSTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.OTHERSTAXColumn) = value
            End Set
        End Property
        
        Public Property CATERINGTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.CATERINGTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.CATERINGTAXColumn) = value
            End Set
        End Property
        
        Public Property BARSERTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.BARSERTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.BARSERTAXColumn) = value
            End Set
        End Property
        
        Public Property OTHERSSERTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.OTHERSSERTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.OTHERSSERTAXColumn) = value
            End Set
        End Property
        
        Public Property CATERINGSERTAX As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.CATERINGSERTAXColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.CATERINGSERTAXColumn) = value
            End Set
        End Property
        
        Public Property discount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.discountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.discountColumn) = value
            End Set
        End Property
        
        Public Property TOTALAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.TOTALAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.TOTALAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property ITEMTOTAMOUNT As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.ITEMTOTAMOUNTColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.ITEMTOTAMOUNTColumn) = value
            End Set
        End Property
        
        Public Property occupancy As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.occupancyColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.occupancyColumn) = value
            End Set
        End Property
        
        Public Property menucode As String
            Get
                Return CType(Me(Me.tablePARTY_BILLDETAILS.menucodeColumn),String)
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.menucodeColumn) = value
            End Set
        End Property
        
        Public Property rate As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.rateColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.rateColumn) = value
            End Set
        End Property
        
        Public Property menuamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.menuamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.menuamountColumn) = value
            End Set
        End Property
        
        Public Property banquethallamount As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.banquethallamountColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.banquethallamountColumn) = value
            End Set
        End Property
        
        Public Property MCODE As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.MCODEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.MCODEColumn) = value
            End Set
        End Property
        
        Public Property ASSOCIATENAME As String
            Get
                Try 
                    Return CType(Me(Me.tablePARTY_BILLDETAILS.ASSOCIATENAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePARTY_BILLDETAILS.ASSOCIATENAMEColumn) = value
            End Set
        End Property
        
        Public Function IsBOOKINGDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.BOOKINGDATEColumn)
        End Function
        
        Public Sub SetBOOKINGDATENull()
            Me(Me.tablePARTY_BILLDETAILS.BOOKINGDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsPARTYDATENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.PARTYDATEColumn)
        End Function
        
        Public Sub SetPARTYDATENull()
            Me(Me.tablePARTY_BILLDETAILS.PARTYDATEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBARAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.BARAMOUNTColumn)
        End Function
        
        Public Sub SetBARAMOUNTNull()
            Me(Me.tablePARTY_BILLDETAILS.BARAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOTHERSAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.OTHERSAMOUNTColumn)
        End Function
        
        Public Sub SetOTHERSAMOUNTNull()
            Me(Me.tablePARTY_BILLDETAILS.OTHERSAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATERINGAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.CATERINGAMOUNTColumn)
        End Function
        
        Public Sub SetCATERINGAMOUNTNull()
            Me(Me.tablePARTY_BILLDETAILS.CATERINGAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBARTAXNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.BARTAXColumn)
        End Function
        
        Public Sub SetBARTAXNull()
            Me(Me.tablePARTY_BILLDETAILS.BARTAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOTHERSTAXNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.OTHERSTAXColumn)
        End Function
        
        Public Sub SetOTHERSTAXNull()
            Me(Me.tablePARTY_BILLDETAILS.OTHERSTAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATERINGTAXNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.CATERINGTAXColumn)
        End Function
        
        Public Sub SetCATERINGTAXNull()
            Me(Me.tablePARTY_BILLDETAILS.CATERINGTAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsBARSERTAXNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.BARSERTAXColumn)
        End Function
        
        Public Sub SetBARSERTAXNull()
            Me(Me.tablePARTY_BILLDETAILS.BARSERTAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsOTHERSSERTAXNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.OTHERSSERTAXColumn)
        End Function
        
        Public Sub SetOTHERSSERTAXNull()
            Me(Me.tablePARTY_BILLDETAILS.OTHERSSERTAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCATERINGSERTAXNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.CATERINGSERTAXColumn)
        End Function
        
        Public Sub SetCATERINGSERTAXNull()
            Me(Me.tablePARTY_BILLDETAILS.CATERINGSERTAXColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsdiscountNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.discountColumn)
        End Function
        
        Public Sub SetdiscountNull()
            Me(Me.tablePARTY_BILLDETAILS.discountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsTOTALAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.TOTALAMOUNTColumn)
        End Function
        
        Public Sub SetTOTALAMOUNTNull()
            Me(Me.tablePARTY_BILLDETAILS.TOTALAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsITEMTOTAMOUNTNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.ITEMTOTAMOUNTColumn)
        End Function
        
        Public Sub SetITEMTOTAMOUNTNull()
            Me(Me.tablePARTY_BILLDETAILS.ITEMTOTAMOUNTColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsoccupancyNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.occupancyColumn)
        End Function
        
        Public Sub SetoccupancyNull()
            Me(Me.tablePARTY_BILLDETAILS.occupancyColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsrateNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.rateColumn)
        End Function
        
        Public Sub SetrateNull()
            Me(Me.tablePARTY_BILLDETAILS.rateColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsmenuamountNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.menuamountColumn)
        End Function
        
        Public Sub SetmenuamountNull()
            Me(Me.tablePARTY_BILLDETAILS.menuamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsbanquethallamountNull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.banquethallamountColumn)
        End Function
        
        Public Sub SetbanquethallamountNull()
            Me(Me.tablePARTY_BILLDETAILS.banquethallamountColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsMCODENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.MCODEColumn)
        End Function
        
        Public Sub SetMCODENull()
            Me(Me.tablePARTY_BILLDETAILS.MCODEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsASSOCIATENAMENull() As Boolean
            Return Me.IsNull(Me.tablePARTY_BILLDETAILS.ASSOCIATENAMEColumn)
        End Function
        
        Public Sub SetASSOCIATENAMENull()
            Me(Me.tablePARTY_BILLDETAILS.ASSOCIATENAMEColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class PARTY_BILLDETAILSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As PARTY_BILLDETAILSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As PARTY_BILLDETAILSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As PARTY_BILLDETAILSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
